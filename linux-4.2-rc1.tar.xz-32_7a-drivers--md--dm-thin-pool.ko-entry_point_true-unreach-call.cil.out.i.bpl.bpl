var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.2: [ref]i64;

var $M.3: [ref]i64;

var $M.4: [ref]i64;

var $M.5: i32;

var $M.6: ref;

var $M.7: i32;

var $M.8: ref;

var $M.9: i32;

var $M.10: ref;

var $M.11: i32;

var $M.12: ref;

var $M.13: [ref]i8;

var $M.14: [ref]ref;

var $M.15: [ref]i64;

var $M.16: [ref]i64;

var $M.17: [ref]i32;

var $M.18: i32;

var $M.20: [ref]ref;

var $M.21: [ref]ref;

var $M.22: i32;

var $M.23: [ref]ref;

var $M.24: [ref]ref;

var $M.25: [ref]i64;

var $M.26: [ref]i64;

var $M.29: [ref]ref;

var $M.30: [ref]ref;

var $M.31: [ref]i64;

var $M.32: [ref]i64;

var $M.33: [ref]ref;

var $M.34: [ref]i64;

var $M.35: [ref]i64;

var $M.36: [ref]ref;

var $M.37: [ref]i64;

var $M.38: [ref]i64;

var $M.40: [ref]ref;

var $M.41: [ref]i64;

var $M.42: [ref]i64;

var $M.43: [ref]i64;

var $M.44: [ref]i32;

var $M.45: [ref]i8;

var $M.46: [ref]i32;

var $M.47: [ref]i64;

var $M.48: [ref]i64;

var $M.49: [ref]i64;

var $M.50: [ref]i8;

var $M.51: [ref]i64;

var $M.52: [ref]i64;

var $M.53: [ref]i32;

var $M.54: [ref]ref;

var $M.55: [ref]i32;

var $M.56: [ref]ref;

var $M.57: [ref]ref;

var $M.58: [ref]i64;

var $M.59: [ref]i32;

var $M.60: [ref]i32;

var $M.61: [ref]i64;

var $M.62: [ref]i32;

var $M.63: [ref]i32;

var $M.64: [ref]ref;

var $M.65: [ref]i64;

var $M.66: [ref]i64;

var $M.67: [ref]ref;

var $M.68: [ref]i32;

var $M.69: [ref]ref;

var $M.70: [ref]ref;

var $M.71: [ref]i64;

var $M.72: [ref]ref;

var $M.73: [ref]ref;

var $M.74: [ref]i64;

var $M.75: [ref]ref;

var $M.76: [ref]ref;

var $M.77: [ref]ref;

var $M.78: [ref]i32;

var $M.79: [ref]i32;

var $M.80: [ref]ref;

var $M.81: [ref]i32;

var $M.82: ref;

var $M.83: i32;

var $M.84: i32;

var $M.85: i32;

var $M.86: i32;

var $M.87: ref;

var $M.88: i32;

var $M.89: i32;

var $M.90: i32;

var $M.91: i32;

var $M.92: ref;

var $M.93: ref;

var $M.94: ref;

var $M.95: i32;

var $M.96: i32;

var $M.97: i32;

var $M.98: i32;

var $M.99: i32;

var $M.100: i32;

var $M.101: i32;

var $M.102: i32;

var $M.103: i32;

var $M.104: i32;

var $M.105: i32;

var $M.106: i32;

var $M.107: i32;

var $M.108: ref;

var $M.109: ref;

var $M.110: i32;

var $M.111: i32;

var $M.112: i32;

var $M.121: [ref]i8;

var $M.127: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 865192);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const ldv_work_3_0: ref;

axiom ldv_work_3_0 == $sub.ref(0, 2056);

const ldv_work_struct_3_0: ref;

axiom ldv_work_struct_3_0 == $sub.ref(0, 3088);

const ldv_work_3_1: ref;

axiom ldv_work_3_1 == $sub.ref(0, 4116);

const ldv_work_struct_3_1: ref;

axiom ldv_work_struct_3_1 == $sub.ref(0, 5148);

const ldv_work_3_2: ref;

axiom ldv_work_3_2 == $sub.ref(0, 6176);

const ldv_work_struct_3_2: ref;

axiom ldv_work_struct_3_2 == $sub.ref(0, 7208);

const ldv_work_3_3: ref;

axiom ldv_work_3_3 == $sub.ref(0, 8236);

const ldv_work_struct_3_3: ref;

axiom ldv_work_struct_3_3 == $sub.ref(0, 9268);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 10296);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 11328);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 12356);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 13388);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 14416);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 15448);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 16476);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 17508);

const ldv_work_2_0: ref;

axiom ldv_work_2_0 == $sub.ref(0, 18536);

const ldv_work_struct_2_0: ref;

axiom ldv_work_struct_2_0 == $sub.ref(0, 19568);

const ldv_work_2_1: ref;

axiom ldv_work_2_1 == $sub.ref(0, 20596);

const ldv_work_struct_2_1: ref;

axiom ldv_work_struct_2_1 == $sub.ref(0, 21628);

const ldv_work_2_2: ref;

axiom ldv_work_2_2 == $sub.ref(0, 22656);

const ldv_work_struct_2_2: ref;

axiom ldv_work_struct_2_2 == $sub.ref(0, 23688);

const ldv_work_2_3: ref;

axiom ldv_work_2_3 == $sub.ref(0, 24716);

const ldv_work_struct_2_3: ref;

axiom ldv_work_struct_2_3 == $sub.ref(0, 25748);

const thin_target_group1: ref;

axiom thin_target_group1 == $sub.ref(0, 26780);

const pool_target_group1: ref;

axiom pool_target_group1 == $sub.ref(0, 27812);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 28840);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 29868);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 30896);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 31924);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 32952);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 33980);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 35008);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 36036);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 37064);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 38092);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 39120);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 40148);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 41176);

const sb_validator_group0: ref;

axiom sb_validator_group0 == $sub.ref(0, 42208);

const sb_validator_group1: ref;

axiom sb_validator_group1 == $sub.ref(0, 43240);

const ldv_mutex_mutex_of_dm_thin_pool_table: ref;

axiom ldv_mutex_mutex_of_dm_thin_pool_table == $sub.ref(0, 44268);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 45296);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 46324);

const ldv_mutex_i_mutex_of_inode: ref;

axiom ldv_mutex_i_mutex_of_inode == $sub.ref(0, 47352);

const sb_validator: ref;

axiom sb_validator == $sub.ref(0, 48400);

const pool_target: ref;

axiom pool_target == $sub.ref(0, 49640);

const thin_target: ref;

axiom thin_target == $sub.ref(0, 50880);

const _new_mapping_cache: ref;

axiom _new_mapping_cache == $sub.ref(0, 51912);

const dm_kcopyd_throttle: ref;

axiom dm_kcopyd_throttle == $sub.ref(0, 52956);

const dm_thin_pool_table: ref;

axiom dm_thin_pool_table == $sub.ref(0, 54156);

const no_space_timeout_secs: ref;

axiom no_space_timeout_secs == $sub.ref(0, 55184);

const {:count 5} .str.136: ref;

axiom .str.136 == $sub.ref(0, 56213);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 5} .str.112: ref;

axiom .str.112 == $sub.ref(0, 57242);

const {:count 2} .str.152: ref;

axiom .str.152 == $sub.ref(0, 58268);

const {:count 60} .str.153: ref;

axiom .str.153 == $sub.ref(0, 59352);

const {:count 68} .str.154: ref;

axiom .str.154 == $sub.ref(0, 60444);

const {:count 6} .str.120: ref;

axiom .str.120 == $sub.ref(0, 61474);

const {:count 5} .str.155: ref;

axiom .str.155 == $sub.ref(0, 62503);

const {:count 6} .str.130: ref;

axiom .str.130 == $sub.ref(0, 63533);

const {:count 7} .str.156: ref;

axiom .str.156 == $sub.ref(0, 64564);

const {:count 4} .str.157: ref;

axiom .str.157 == $sub.ref(0, 65592);

const {:count 6} .str.132: ref;

axiom .str.132 == $sub.ref(0, 66622);

const {:count 14} .str.151: ref;

axiom .str.151 == $sub.ref(0, 67660);

const {:count 9} .str.150: ref;

axiom .str.150 == $sub.ref(0, 68693);

const {:count 198} .str.30: ref;

axiom .str.30 == $sub.ref(0, 69915);

const {:count 60} .str.76: ref;

axiom .str.76 == $sub.ref(0, 70999);

const {:count 15} .str.80: ref;

axiom .str.80 == $sub.ref(0, 72038);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 24} .str.38: ref;

axiom .str.38 == $sub.ref(0, 73086);

const {:count 79} .str.9: ref;

axiom .str.9 == $sub.ref(0, 74189);

const {:count 8} .str.10: ref;

axiom .str.10 == $sub.ref(0, 75221);

const {:count 10} .str.11: ref;

axiom .str.11 == $sub.ref(0, 76255);

const {:count 18} .str.12: ref;

axiom .str.12 == $sub.ref(0, 77297);

const {:count 6} .str.13: ref;

axiom .str.13 == $sub.ref(0, 78327);

const dm_ratelimit_state: ref;

axiom dm_ratelimit_state == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 13} .str.32: ref;

axiom .str.32 == $sub.ref(0, 79364);

const {:count 67} .str.19: ref;

axiom .str.19 == $sub.ref(0, 80455);

const {:count 16} .str.43: ref;

axiom .str.43 == $sub.ref(0, 81495);

const {:count 65} .str.34: ref;

axiom .str.34 == $sub.ref(0, 82584);

const {:count 31} .str.20: ref;

axiom .str.20 == $sub.ref(0, 83639);

const {:count 71} .str.21: ref;

axiom .str.21 == $sub.ref(0, 84734);

const {:count 71} .str.22: ref;

axiom .str.22 == $sub.ref(0, 85829);

const {:count 8} .str.41: ref;

axiom .str.41 == $sub.ref(0, 86861);

const {:count 47} .str.42: ref;

axiom .str.42 == $sub.ref(0, 87932);

const {:count 14} .str.39: ref;

axiom .str.39 == $sub.ref(0, 88970);

const {:count 47} .str.40: ref;

axiom .str.40 == $sub.ref(0, 90041);

const {:count 29} .str.35: ref;

axiom .str.35 == $sub.ref(0, 91094);

const {:count 25} .str.36: ref;

axiom .str.36 == $sub.ref(0, 92143);

const {:count 82} .str.37: ref;

axiom .str.37 == $sub.ref(0, 93249);

const {:count 14} .str.33: ref;

axiom .str.33 == $sub.ref(0, 94287);

const {:count 21} .str.31: ref;

axiom .str.31 == $sub.ref(0, 95332);

const fs_bio_set: ref;

axiom fs_bio_set == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 21} .str.23: ref;

axiom .str.23 == $sub.ref(0, 96377);

const {:count 24} .str.18: ref;

axiom .str.18 == $sub.ref(0, 97425);

const {:count 25} .str.15: ref;

axiom .str.15 == $sub.ref(0, 98474);

const {:count 44} .str.17: ref;

axiom .str.17 == $sub.ref(0, 99542);

const rcu_lock_map: ref;

axiom rcu_lock_map == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 42} .str.16: ref;

axiom .str.16 == $sub.ref(0, 100608);

const {:count 53} .str.14: ref;

axiom .str.14 == $sub.ref(0, 101685);

const {:count 26} .str.24: ref;

axiom .str.24 == $sub.ref(0, 102735);

const {:count 70} .str.25: ref;

axiom .str.25 == $sub.ref(0, 103829);

const {:count 18} .str.26: ref;

axiom .str.26 == $sub.ref(0, 104871);

const {:count 65} .str.27: ref;

axiom .str.27 == $sub.ref(0, 105960);

const {:count 64} .str.28: ref;

axiom .str.28 == $sub.ref(0, 107048);

const {:count 72} .str.29: ref;

axiom .str.29 == $sub.ref(0, 108144);

const {:count 57} .str.8: ref;

axiom .str.8 == $sub.ref(0, 109225);

const {:count 63} .str.158: ref;

axiom .str.158 == $sub.ref(0, 110312);

const {:count 96} .str.165: ref;

axiom .str.165 == $sub.ref(0, 111432);

const {:count 55} .str.166: ref;

axiom .str.166 == $sub.ref(0, 112511);

const {:count 52} .str.167: ref;

axiom .str.167 == $sub.ref(0, 113587);

const {:count 71} .str.161: ref;

axiom .str.161 == $sub.ref(0, 114682);

const {:count 53} .str.163: ref;

axiom .str.163 == $sub.ref(0, 115759);

const {:count 102} .str.168: ref;

axiom .str.168 == $sub.ref(0, 116885);

const {:count 107} .str.169: ref;

axiom .str.169 == $sub.ref(0, 118016);

const {:count 57} .str.159: ref;

axiom .str.159 == $sub.ref(0, 119097);

const {:count 54} .str.160: ref;

axiom .str.160 == $sub.ref(0, 120175);

const {:count 61} .str.162: ref;

axiom .str.162 == $sub.ref(0, 121260);

const {:count 86} .str.4: ref;

axiom .str.4 == $sub.ref(0, 122370);

const {:count 78} .str.5: ref;

axiom .str.5 == $sub.ref(0, 123472);

const {:count 23} .str.6: ref;

axiom .str.6 == $sub.ref(0, 124519);

const {:count 23} .str.44: ref;

axiom .str.44 == $sub.ref(0, 125566);

const {:count 14} .str.140: ref;

axiom .str.140 == $sub.ref(0, 126604);

const {:count 20} .str.141: ref;

axiom .str.141 == $sub.ref(0, 127648);

const {:count 28} .str.142: ref;

axiom .str.142 == $sub.ref(0, 128700);

const {:count 26} .str.143: ref;

axiom .str.143 == $sub.ref(0, 129750);

const {:count 18} .str.144: ref;

axiom .str.144 == $sub.ref(0, 130792);

const {:count 32} .str.145: ref;

axiom .str.145 == $sub.ref(0, 131848);

const {:count 26} .str.146: ref;

axiom .str.146 == $sub.ref(0, 132898);

const {:count 48} .str.147: ref;

axiom .str.147 == $sub.ref(0, 133970);

const {:count 35} .str.148: ref;

axiom .str.148 == $sub.ref(0, 135029);

const {:count 55} .str.149: ref;

axiom .str.149 == $sub.ref(0, 136108);

const {:count 67} .str.104: ref;

axiom .str.104 == $sub.ref(0, 137199);

const {:count 10} .str.137: ref;

axiom .str.137 == $sub.ref(0, 138233);

const {:count 20} .str.91: ref;

axiom .str.91 == $sub.ref(0, 139277);

const {:count 41} .str.92: ref;

axiom .str.92 == $sub.ref(0, 140342);

const {:count 72} .str.93: ref;

axiom .str.93 == $sub.ref(0, 141438);

const {:count 92} .str.94: ref;

axiom .str.94 == $sub.ref(0, 142554);

const {:count 12} .str.95: ref;

axiom .str.95 == $sub.ref(0, 143590);

const {:count 12} .str.96: ref;

axiom .str.96 == $sub.ref(0, 144626);

const {:count 7} .str.97: ref;

axiom .str.97 == $sub.ref(0, 145657);

const {:count 19} .str.98: ref;

axiom .str.98 == $sub.ref(0, 146700);

const {:count 22} .str.99: ref;

axiom .str.99 == $sub.ref(0, 147746);

const {:count 22} .str.100: ref;

axiom .str.100 == $sub.ref(0, 148792);

const {:count 74} .str.101: ref;

axiom .str.101 == $sub.ref(0, 149890);

const {:count 61} .str.111: ref;

axiom .str.111 == $sub.ref(0, 150975);

const {:count 85} .str.172: ref;

axiom .str.172 == $sub.ref(0, 152084);

const {:count 73} .str.103: ref;

axiom .str.103 == $sub.ref(0, 153181);

const {:count 61} .str.110: ref;

axiom .str.110 == $sub.ref(0, 154266);

const {:count 207} .str.170: ref;

axiom .str.170 == $sub.ref(0, 155497);

const {:count 107} .str.171: ref;

axiom .str.171 == $sub.ref(0, 156628);

const {:count 71} .str.107: ref;

axiom .str.107 == $sub.ref(0, 157723);

const {:count 75} .str.108: ref;

axiom .str.108 == $sub.ref(0, 158822);

const {:count 70} .str.109: ref;

axiom .str.109 == $sub.ref(0, 159916);

const {:count 58} .str.7: ref;

axiom .str.7 == $sub.ref(0, 160998);

const {:count 58} .str.106: ref;

axiom .str.106 == $sub.ref(0, 162080);

const {:count 72} .str.105: ref;

axiom .str.105 == $sub.ref(0, 163176);

const {:count 84} .str.102: ref;

axiom .str.102 == $sub.ref(0, 164284);

const {:count 75} .str.113: ref;

axiom .str.113 == $sub.ref(0, 165383);

const {:count 77} .str.114: ref;

axiom .str.114 == $sub.ref(0, 166484);

const {:count 69} .str.115: ref;

axiom .str.115 == $sub.ref(0, 167577);

const {:count 68} .str.116: ref;

axiom .str.116 == $sub.ref(0, 168669);

const {:count 65} .str.117: ref;

axiom .str.117 == $sub.ref(0, 169758);

const {:count 65} .str.118: ref;

axiom .str.118 == $sub.ref(0, 170847);

const {:count 26} .str.119: ref;

axiom .str.119 == $sub.ref(0, 171897);

const {:count 3} .str.121: ref;

axiom .str.121 == $sub.ref(0, 172924);

const {:count 19} .str.122: ref;

axiom .str.122 == $sub.ref(0, 173967);

const {:count 4} .str.123: ref;

axiom .str.123 == $sub.ref(0, 174995);

const {:count 4} .str.124: ref;

axiom .str.124 == $sub.ref(0, 176023);

const {:count 16} .str.125: ref;

axiom .str.125 == $sub.ref(0, 177063);

const {:count 18} .str.126: ref;

axiom .str.126 == $sub.ref(0, 178105);

const {:count 21} .str.127: ref;

axiom .str.127 == $sub.ref(0, 179150);

const {:count 19} .str.128: ref;

axiom .str.128 == $sub.ref(0, 180193);

const {:count 19} .str.129: ref;

axiom .str.129 == $sub.ref(0, 181236);

const {:count 16} .str.131: ref;

axiom .str.131 == $sub.ref(0, 182276);

const {:count 4} .str.133: ref;

axiom .str.133 == $sub.ref(0, 183304);

const {:count 20} .str.134: ref;

axiom .str.134 == $sub.ref(0, 184348);

const {:count 11} .str.135: ref;

axiom .str.135 == $sub.ref(0, 185383);

const {:count 67} .str.86: ref;

axiom .str.86 == $sub.ref(0, 186474);

const {:count 82} .str.87: ref;

axiom .str.87 == $sub.ref(0, 187580);

const {:count 78} .str.88: ref;

axiom .str.88 == $sub.ref(0, 188682);

const {:count 80} .str.89: ref;

axiom .str.89 == $sub.ref(0, 189786);

const {:count 28} .str.90: ref;

axiom .str.90 == $sub.ref(0, 190838);

const {:count 64} .str.173: ref;

axiom .str.173 == $sub.ref(0, 191926);

const {:count 100} .str.57: ref;

axiom .str.57 == $sub.ref(0, 193050);

const {:count 63} .str.81: ref;

axiom .str.81 == $sub.ref(0, 194137);

const {:count 78} .str.82: ref;

axiom .str.82 == $sub.ref(0, 195239);

const {:count 74} .str.83: ref;

axiom .str.83 == $sub.ref(0, 196337);

const {:count 76} .str.84: ref;

axiom .str.84 == $sub.ref(0, 197437);

const {:count 24} .str.85: ref;

axiom .str.85 == $sub.ref(0, 198485);

const {:count 36} .str.45: ref;

axiom .str.45 == $sub.ref(0, 199545);

const {:count 26} .str.46: ref;

axiom .str.46 == $sub.ref(0, 200595);

const {:count 19} .str.47: ref;

axiom .str.47 == $sub.ref(0, 201638);

const {:count 23} .str.48: ref;

axiom .str.48 == $sub.ref(0, 202685);

const {:count 48} .str.49: ref;

axiom .str.49 == $sub.ref(0, 203757);

const {:count 86} .str.79: ref;

axiom .str.79 == $sub.ref(0, 204867);

const {:count 41} .str.58: ref;

axiom .str.58 == $sub.ref(0, 205932);

const {:count 37} .str.59: ref;

axiom .str.59 == $sub.ref(0, 206993);

const {:count 31} .str.60: ref;

axiom .str.60 == $sub.ref(0, 208048);

const {:count 33} .str.61: ref;

axiom .str.61 == $sub.ref(0, 209105);

const {:count 33} .str.62: ref;

axiom .str.62 == $sub.ref(0, 210162);

const {:count 36} .str.63: ref;

axiom .str.63 == $sub.ref(0, 211222);

const {:count 13} .str.64: ref;

axiom .str.64 == $sub.ref(0, 212259);

const {:count 8} .str.65: ref;

axiom .str.65 == $sub.ref(0, 213291);

const {:count 32} .str.66: ref;

axiom .str.66 == $sub.ref(0, 214347);

const {:count 16} .str.67: ref;

axiom .str.67 == $sub.ref(0, 215387);

const {:count 24} .str.68: ref;

axiom .str.68 == $sub.ref(0, 216435);

const {:count 25} .str.69: ref;

axiom .str.69 == $sub.ref(0, 217484);

const {:count 35} .str.70: ref;

axiom .str.70 == $sub.ref(0, 218543);

const {:count 36} .str.71: ref;

axiom .str.71 == $sub.ref(0, 219603);

const {:count 22} .str.72: ref;

axiom .str.72 == $sub.ref(0, 220649);

const {:count 47} .str.73: ref;

axiom .str.73 == $sub.ref(0, 221720);

const {:count 42} .str.74: ref;

axiom .str.74 == $sub.ref(0, 222786);

const {:count 38} .str.75: ref;

axiom .str.75 == $sub.ref(0, 223848);

const {:count 12} .str.77: ref;

axiom .str.77 == $sub.ref(0, 224884);

const {:count 9} .str.78: ref;

axiom .str.78 == $sub.ref(0, 225917);

const .str: ref;

axiom .str == $sub.ref(0, 227008);

const {:count 16} .str.1: ref;

axiom .str.1 == $sub.ref(0, 228048);

const {:count 69} .str.2: ref;

axiom .str.2 == $sub.ref(0, 229141);

const {:count 22} .str.3: ref;

axiom .str.3 == $sub.ref(0, 230187);

const {:count 41} .str.50: ref;

axiom .str.50 == $sub.ref(0, 231252);

const {:count 19} .str.51: ref;

axiom .str.51 == $sub.ref(0, 232295);

const {:count 15} .str.52: ref;

axiom .str.52 == $sub.ref(0, 233334);

const {:count 20} .str.53: ref;

axiom .str.53 == $sub.ref(0, 234378);

const {:count 10} .str.54: ref;

axiom .str.54 == $sub.ref(0, 235412);

const {:count 18} .str.55: ref;

axiom .str.55 == $sub.ref(0, 236454);

const {:count 36} .str.56: ref;

axiom .str.56 == $sub.ref(0, 237514);

const {:count 11} .str.164: ref;

axiom .str.164 == $sub.ref(0, 238549);

const {:count 75} .str.174: ref;

axiom .str.174 == $sub.ref(0, 239648);

const {:count 73} .str.175: ref;

axiom .str.175 == $sub.ref(0, 240745);

const {:count 68} .str.176: ref;

axiom .str.176 == $sub.ref(0, 241837);

const {:count 20} .str.138: ref;

axiom .str.138 == $sub.ref(0, 242881);

const {:count 26} .str.139: ref;

axiom .str.139 == $sub.ref(0, 243931);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 244963);

const {:count 3} .str.1.366: ref;

axiom .str.1.366 == $sub.ref(0, 245990);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 247028);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 248056);

const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 249088);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 0} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 3} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p4 := malloc($i0);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5} __VERIFIER_assume($i7);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 250120);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 251152);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 6} $r := $malloc($i0);
    return;
}



const thin_ctr: ref;

axiom thin_ctr == $sub.ref(0, 252184);

procedure thin_ctr($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr, assertsPassed, $M.61, $M.4, $M.58, $M.59, $M.60, $M.42, $M.5, $M.7, $M.9, $M.11, $M.15, $M.45, $M.6, $M.8, $M.10, $M.12, $M.16, $M.17, $M.51, $M.52, $M.41, $M.43, $M.40, $M.25, $M.26, $M.29, $M.55, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation thin_ctr($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i64;
  var $i100: i32;
  var $i101: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i64;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i8;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i102: i32;
  var $p140: ref;
  var $p141: ref;
  var $i84: i32;
  var $p143: ref;
  var $p144: ref;
  var $i76: i32;
  var $i58: i32;
  var $p145: ref;
  var $p146: ref;
  var $i49: i32;
  var $p147: ref;
  var $p148: ref;
  var $i149: i64;
  var $i150: i1;
  var $p151: ref;
  var $p152: ref;
  var $i39: i32;
  var $p153: ref;
  var $i10: i32;
  var $i139: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_75: ref;
  var vslice_dummy_var_76: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 11} {:cexpr "thin_ctr:arg:argc"} boogie_si_record_i32($i1);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} ldv_mutex_lock_29(dm_thin_pool_table);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i1, 2);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $p11 := kzalloc(312, 208);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p11);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p11);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $p19 := dm_table_get_md($p18);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p19);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} vslice_dummy_var_75 := spinlock_check($p21);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} __raw_spin_lock_init($p25, .str.141, $p5);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(152, 1));
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} INIT_LIST_HEAD($p26);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} bio_list_init($p27);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(184, 1));
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} bio_list_init($p28);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $0.ref);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(200, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p6);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 21} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p31, $p32, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i1, 3);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i44 := dm_table_get_mode($p43);
    call {:si_unique_call 26} {:cexpr "tmp___0"} boogie_si_record_i32($i44);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p2);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i46 := dm_get_device($p0, $p45, $i44, $p3);
    call {:si_unique_call 28} {:cexpr "r"} boogie_si_record_i32($i46);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.1, $p3);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $p50);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p2, $mul.ref(1, 8));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i55 := read_dev_id($p53, $p54, 0);
    call {:si_unique_call 30} {:cexpr "tmp___1"} boogie_si_record_i32($i55);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 480)), $mul.ref(0, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $p65 := dm_get_md($i64);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i67 := $eq.i64($i66, 0);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $p69 := __pool_table_lookup($p65);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, $p69);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i74 := $eq.i64($i73, 0);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} __pool_inc($p78);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $i81 := get_pool_mode($p80);
    call {:si_unique_call 37} {:cexpr "tmp___2"} boogie_si_record_i32($i81);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 3);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.0, $p89);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $i92 := dm_pool_open_thin_device($p88, $i90, $p91);
    call {:si_unique_call 40} {:cexpr "r"} boogie_si_record_i32($i92);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i99 := $zext.i32.i64($i98);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $i100 := dm_set_target_max_io_len($p0, $i99);
    call {:si_unique_call 42} {:cexpr "r"} boogie_si_record_i32($i100);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(36, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p103, 1);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p104, 1);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p105, 64);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(83, 1));
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, 1);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p108, $mul.ref(0, 66576)), $mul.ref(64, 1)), $mul.ref(5, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i8.i1($i111);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} ldv_mutex_unlock_30(dm_thin_pool_table);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p117, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $p119 := spinlock_check($p118);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i120 := _raw_spin_lock_irqsave($p119);
    call {:si_unique_call 47} {:cexpr "flags"} boogie_si_record_i64($i120);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p122, $mul.ref(0, 66576)), $mul.ref(73, 1));
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.0, $p123);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i8.i1($i124);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(208, 1));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} atomic_set($p130, 1);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(216, 1));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} init_completion($p131);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p134, $mul.ref(0, 66576)), $mul.ref(944, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} list_add_tail_rcu($p132, $p135);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} spin_unlock_irqrestore($p138, $i120);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} synchronize_rcu();
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} dm_put($p65);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i139 := 0;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $r := $i139;
    return;

  $bb47:
    assume $i125 == 1;
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p127, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} spin_unlock_irqrestore($p128, $i120);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} ldv_mutex_lock_31(dm_thin_pool_table);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p129, .str.149);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i102 := $sub.i32(0, 22);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} vslice_dummy_var_76 := dm_pool_close_thin_device($p141);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i84 := $i102;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} __pool_dec($p144);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i76 := $i84;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} dm_put($p65);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i58 := $i76;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} dm_put_device($p0, $p146);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i49 := $i58;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(24, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, $p147);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i149 := $p2i.ref.i64($p148);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i150 := $ne.i64($i149, 0);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i39 := $i49;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p13);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} kfree($p153);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i10 := $i39;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} ldv_mutex_unlock_32(dm_thin_pool_table);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i139 := $i10;
    goto $bb50;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i150 == 1;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(24, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} dm_put_device($p0, $p152);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    goto $bb53;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i112 == 1;
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(81, 1));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p113, 1);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p114, 1);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(82, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p115, 0);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb40:
    assume $i101 == 1;
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i102 := $i100;
    goto $bb42;

  $bb37:
    assume $i93 == 1;
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p94, .str.148);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i84 := $i92;
    goto $bb35;

  $bb33:
    assume $i82 == 1;
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p83, .str.147);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i84 := $sub.i32(0, 22);
    goto $bb35;

  $bb29:
    assume $i74 == 1;
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p75, .str.146);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i76 := $sub.i32(0, 22);
    goto $bb31;

  $bb26:
    assume $i67 == 1;
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, .str.145);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 22);
    goto $bb24;

  $bb22:
    assume $i56 == 1;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, .str.144);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 22);
    goto $bb24;

  $bb18:
    assume $i47 == 1;
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, .str.143);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i49 := $i46;
    goto $bb20;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p2, $mul.ref(2, 8));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $i36 := dm_get_device($p0, $p35, 1, $p4);
    call {:si_unique_call 23} {:cexpr "r"} boogie_si_record_i32($i36);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p4);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(24, 1));
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $p40);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, .str.142);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i39 := $i36;
    goto $bb15;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, .str.140);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i1, 3);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, .str.44);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb6;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const thin_dtr: ref;

axiom thin_dtr == $sub.ref(0, 253216);

procedure thin_dtr($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr, assertsPassed, $M.42, $M.4, $M.58, $M.59, $M.60, $M.5, $M.7, $M.9, $M.11, $M.15, $M.45, $M.6, $M.8, $M.10, $M.12, $M.16, $M.17, $M.51, $M.52, $M.41, $M.43, $M.40, $M.25, $M.26, $M.29, $M.55, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation thin_dtr($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $p7 := spinlock_check($p6);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $i8 := _raw_spin_lock_irqsave($p7);
    call {:si_unique_call 59} {:cexpr "flags"} boogie_si_record_i64($i8);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} list_del_rcu($p9);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} spin_unlock_irqrestore($p12, $i8);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} synchronize_rcu();
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} thin_put($p3);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(216, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} wait_for_completion($p13);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} ldv_mutex_lock_27(dm_thin_pool_table);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} __pool_dec($p15);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} vslice_dummy_var_77 := dm_pool_close_thin_device($p17);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} dm_put_device($p0, $p20);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(24, 1));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p3);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} kfree($p27);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} ldv_mutex_unlock_28(dm_thin_pool_table);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(24, 1));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} dm_put_device($p0, $p26);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const thin_map: ref;

axiom thin_map == $sub.ref(0, 254248);

procedure thin_map($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $CurrAddr, $M.16, $M.17, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation thin_map($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p9: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64($i4, $i6);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, $i7);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $i10 := thin_bio_map($p0, $p1);
    call {:si_unique_call 73} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const thin_endio: ref;

axiom thin_endio == $sub.ref(0, 255280);

procedure thin_endio($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation thin_endio($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p30: ref;
  var $p31: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $p65: ref;
  var $p66: ref;
  var $p68: ref;
  var $p69: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p63: ref;
  var $p64: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 75} {:cexpr "thin_endio:arg:err"} boogie_si_record_i32($i2);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $p4 := dm_per_bio_data($p1, 64);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb26:
    assume $i78 == 1;
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} cell_defer_no_holder($p80, $p82);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb12:
    assume $i44 == 1;
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} INIT_LIST_HEAD($p3);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} dm_deferred_entry_dec($p46, $p3);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i47 := list_empty($p3);
    call {:si_unique_call 88} {:cexpr "tmp___3"} boogie_si_record_i32($i47);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb14:
    assume $i48 == 1;
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p9, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $p50 := spinlock_check($p49);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $i51 := _raw_spin_lock_irqsave($p50);
    call {:si_unique_call 91} {:cexpr "flags"} boogie_si_record_i64($i51);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p54, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p54, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p3);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i60, $i61);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p9, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} spin_unlock_irqrestore($p74, $i51);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} wake_worker($p9);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb16:
    assume $i62 == 1;
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p63, $p64 := $p57, $p53;
    goto $bb19;

  $bb19:
    call $p65, $p66, $p68, $p69, $p71, $i72, $i73, $p63, $p64 := thin_endio_loop_$bb19($p9, $i61, $p65, $p66, $p68, $p69, $p71, $i72, $i73, $p63, $p64);
    goto $bb19_last;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p9, $mul.ref(0, 66576)), $mul.ref(928, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} list_add_tail($p65, $p66);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p63, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, $i61);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i73 == 1);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $p63, $p64 := $p69, $p63;
    goto $bb21_dummy;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} INIT_LIST_HEAD($p3);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} dm_deferred_entry_dec($p15, $p3);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $p17 := spinlock_check($p16);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i18 := _raw_spin_lock_irqsave($p17);
    call {:si_unique_call 81} {:cexpr "flags"} boogie_si_record_i64($i18);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p21, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p3);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i27, $i28);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p9, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} spin_unlock_irqrestore($p40, $i18);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i29 == 1;
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p30, $p31 := $p24, $p20;
    goto $bb6;

  $bb6:
    call $p32, $p34, $p35, $p37, $i38, $i39, $p30, $p31 := thin_endio_loop_$bb6($i28, $p32, $p34, $p35, $p37, $i38, $i39, $p30, $p31);
    goto $bb6_last;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} list_del($p32);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} __complete_mapping_preparation($p31);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p30, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, $i28);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i39 == 1);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $p30, $p31 := $p35, $p30;
    goto $bb8_dummy;

  $bb21_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_392;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_345;
}



const thin_presuspend: ref;

axiom thin_presuspend == $sub.ref(0, 256312);

procedure thin_presuspend($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation thin_presuspend($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $i4 := dm_noflush_suspending($p0);
    call {:si_unique_call 97} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} noflush_work($p3, do_noflush_start);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const thin_postsuspend: ref;

axiom thin_postsuspend == $sub.ref(0, 257344);

procedure thin_postsuspend($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation thin_postsuspend($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} noflush_work($p3, do_noflush_stop);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    return;
}



const thin_preresume: ref;

axiom thin_preresume == $sub.ref(0, 258376);

procedure thin_preresume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation thin_preresume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(24, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(24, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $i12 := get_dev_size($p11);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i12);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const thin_status: ref;

axiom thin_status == $sub.ref(0, 259408);

procedure thin_status($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation thin_status($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $i56: i32;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $i66: i64;
  var $i67: i64;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $i75: i32;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $i81: i32;
  var $i82: i64;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $p100: ref;
  var $i101: i64;
  var $i102: i64;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $i106: i32;
  var $i107: i64;
  var $i108: i64;
  var $i109: i64;
  var $p110: ref;
  var $p111: ref;
  var $i112: i64;
  var $i113: i1;
  var $i114: i64;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i32;
  var $p132: ref;
  var $i133: i64;
  var $i134: i64;
  var $p135: ref;
  var $i136: i32;
  var $i137: i64;
  var $i138: i1;
  var $p139: ref;
  var $i140: i64;
  var $i141: i64;
  var $i142: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $p7 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 104} {:cexpr "thin_status:arg:type"} boogie_si_record_i32($i1);
    call {:si_unique_call 105} {:cexpr "thin_status:arg:status_flags"} boogie_si_record_i32($i2);
    call {:si_unique_call 106} {:cexpr "thin_status:arg:maxlen"} boogie_si_record_i32($i4);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i13 := get_pool_mode($p12);
    call {:si_unique_call 108} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p10, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i82 := $zext.i32.i64($i4);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i83 := $sgt.i64($i82, 0);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i108 := 0;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i109 := $add.i64($i108, 0);
    call {:si_unique_call 131} {:cexpr "sz"} boogie_si_record_i64($i109);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p10, $mul.ref(0, 312)), $mul.ref(24, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i112 := $p2i.ref.i64($p111);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i113 := $ne.i64($i112, 0);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb45:
    assume $i113 == 1;
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i114 := $zext.i32.i64($i4);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i115 := $sgt.i64($i114, $i109);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb47:
    assume $i115 == 1;
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p7);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p10, $mul.ref(0, 312)), $mul.ref(24, 1));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p120, $mul.ref(0, 480)), $mul.ref(0, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i123 := $lshr.i32($i122, 20);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p10, $mul.ref(0, 312)), $mul.ref(24, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p125, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p127, $mul.ref(0, 480)), $mul.ref(0, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i130 := $and.i32($i129, 1048575);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} vslice_dummy_var_81 := sprintf.ref.ref.i32.i32($p116, .str.130, $i123, $i130);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($p3, $mul.ref($i109, 1));
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i133 := $zext.i32.i64($i4);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i134 := $sub.i64($i133, $i109);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p7);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $i136 := scnprintf.ref.i64.ref.ref($p132, $i134, .str.157, $p135);
    call {:si_unique_call 134} {:cexpr "tmp___12"} boogie_si_record_i32($i136);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb42:
    assume $i83 == 1;
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p7);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p10, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 480)), $mul.ref(0, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i91 := $lshr.i32($i90, 20);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p10, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 480)), $mul.ref(0, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i98 := $and.i32($i97, 1048575);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} vslice_dummy_var_80 := sprintf.ref.ref.i32.i32($p84, .str.130, $i91, $i98);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p3, $mul.ref(0, 1));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i101 := $zext.i32.i64($i4);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i102 := $sub.i64($i101, 0);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p7);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p10, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i105 := $load.i64($M.0, $p104);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $i106 := scnprintf.ref.i64.ref.ref.i64($p100, $i102, .str.156, $p103, $i105);
    call {:si_unique_call 129} {:cexpr "tmp___10"} boogie_si_record_i32($i106);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i107 := $sext.i32.i64($i106);
    call {:si_unique_call 130} {:cexpr "tmp___11"} boogie_si_record_i64($i107);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i108 := $i107;
    goto $bb44;

  $bb15:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb19;

  $bb20:
    assume $i33 == 1;
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p10, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $i36 := dm_thin_get_mapped_count($p35, $p5);
    call {:si_unique_call 114} {:cexpr "r"} boogie_si_record_i32($i36);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p10, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $i41 := dm_thin_get_highest_mapped_block($p40, $p6);
    call {:si_unique_call 117} {:cexpr "r"} boogie_si_record_i32($i41);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 0);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i44 := $zext.i32.i64($i4);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i64($i44, 0);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 0);
    call {:si_unique_call 122} {:cexpr "sz"} boogie_si_record_i64($i59);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i41, 0);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i60 == 1);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i76 := $zext.i32.i64($i4);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i77 := $sgt.i64($i76, $i59);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i77 == 1;
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p3, $mul.ref($i59, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i79 := $zext.i32.i64($i4);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i80 := $sub.i64($i79, $i59);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i81 := scnprintf.ref.i64.ref($p78, $i80, .str.152);
    call {:si_unique_call 126} {:cexpr "tmp___8"} boogie_si_record_i32($i81);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume $i60 == 1;
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i61 := $zext.i32.i64($i4);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i62 := $sgt.i64($i61, $i59);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i62 == 1;
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p3, $mul.ref($i59, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i64 := $zext.i32.i64($i4);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i65 := $sub.i64($i64, $i59);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.3, $p6);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i67 := $add.i64($i66, 1);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p10, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i72 := $zext.i32.i64($i71);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i73 := $mul.i64($i67, $i72);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i74 := $sub.i64($i73, 1);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $i75 := scnprintf.ref.i64.ref.i64($p63, $i65, .str.155, $i74);
    call {:si_unique_call 124} {:cexpr "tmp___6"} boogie_si_record_i32($i75);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb29:
    assume $i45 == 1;
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p3, $mul.ref(0, 1));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i4);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i48 := $sub.i64($i47, 0);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p10, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i53 := $zext.i32.i64($i52);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.2, $p5);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i55 := $mul.i64($i53, $i54);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $i56 := scnprintf.ref.i64.ref.i64($p46, $i48, .str.120, $i55);
    call {:si_unique_call 120} {:cexpr "tmp___4"} boogie_si_record_i32($i56);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i56);
    call {:si_unique_call 121} {:cexpr "tmp___5"} boogie_si_record_i64($i57);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb31;

  $bb26:
    assume $i42 == 1;
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} vslice_dummy_var_79 := printk.ref.i32(.str.154, $i41);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i137 := $zext.i32.i64($i4);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i138 := $sgt.i64($i137, 0);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb52:
    assume $i138 == 1;
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p3, $mul.ref(0, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i140 := $zext.i32.i64($i4);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i141 := $sub.i64($i140, 0);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i142 := scnprintf.ref.i64.ref($p139, $i141, .str.132);
    call {:si_unique_call 136} {:cexpr "tmp___14"} boogie_si_record_i32($i142);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb22:
    assume $i37 == 1;
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} vslice_dummy_var_78 := printk.ref.i32(.str.153, $i36);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i4);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i64($i25, 0);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p3, $mul.ref(0, 1));
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i4);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i29 := $sub.i64($i28, 0);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i30 := scnprintf.ref.i64.ref($p27, $i29, .str.152);
    call {:si_unique_call 112} {:cexpr "tmp___2"} boogie_si_record_i32($i30);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i4);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i64($i15, 0);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p3, $mul.ref(0, 1));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i4);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i19 := $sub.i64($i18, 0);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $i20 := scnprintf.ref.i64.ref($p17, $i19, .str.112);
    call {:si_unique_call 110} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const thin_merge: ref;

axiom thin_merge == $sub.ref(0, 260440);

procedure thin_merge($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.17, $CurrAddr;



implementation thin_merge($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} {:cexpr "thin_merge:arg:max_size"} boogie_si_record_i32($i3);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} $p11 := bdev_get_queue($p10);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 4208)), $mul.ref(304, 1));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p20);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i26 := $sub.i64($i23, $i25);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p27, $i26);
    call {:si_unique_call 139} {:cexpr "thin_merge:arg:_min1"} boogie_si_record_i32($i3);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p11, $mul.ref(0, 4208)), $mul.ref(304, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    call {:si_unique_call 140} $i30 := devirtbounce($p29, $p11, $p1, $p2);
    call {:si_unique_call 141} {:cexpr "tmp___0"} boogie_si_record_i32($i30);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i3, $i30);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i31 == 1);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i32 := $i30;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i16 := $i32;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i32 := $i3;
    goto $bb7;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i16 := $i3;
    goto $bb3;
}



const thin_iterate_devices: ref;

axiom thin_iterate_devices == $sub.ref(0, 261472);

procedure thin_iterate_devices($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation thin_iterate_devices($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 66576)), $mul.ref(16, 1));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 66576)), $mul.ref(16, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    call {:si_unique_call 142} {:cexpr "blocks"} boogie_si_record_i64($i16);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i20 := $udiv.i64($i16, $i19);
    call {:si_unique_call 143} {:cexpr "blocks"} boogie_si_record_i64($i20);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i25);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i27 := $mul.i64($i26, $i20);
    call {:si_unique_call 144} $i28 := devirtbounce.1($p1, $p0, $p23, 0, $i27, $p2);
    call {:si_unique_call 145} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i12 := $i28;
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;
}



const thin_io_hints: ref;

axiom thin_io_hints == $sub.ref(0, 262504);

procedure thin_io_hints($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation thin_io_hints($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i9 := $shl.i32($i8, 9);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 33554432);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    return;
}



const bdev_get_queue: ref;

axiom bdev_get_queue == $sub.ref(0, 263536);

procedure bdev_get_queue($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation bdev_get_queue($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1752)), $mul.ref(1672, 1));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const get_pool_mode: ref;

axiom get_pool_mode == $sub.ref(0, 264568);

procedure get_pool_mode($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_pool_mode($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const scnprintf: ref;

axiom scnprintf == $sub.ref(0, 265600);

procedure scnprintf.ref.i64.ref($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 146} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 1} true;
    call {:si_unique_call 147} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 148} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 149} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 1} true;
    call {:si_unique_call 150} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 151} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.ref.ref.i64.i64($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref, p.5: i64, p.6: i64) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.ref.ref.i64.i64($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref, p.5: i64, p.6: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb2:
    assume {:verifier.code 1} true;
    call {:si_unique_call 152} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 1} true;
    call {:si_unique_call 153} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 154} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i64($p0: ref, $i1: i64, $p2: ref, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i64($p0: ref, $i1: i64, $p2: ref, p.3: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb3:
    assume {:verifier.code 1} true;
    call {:si_unique_call 155} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 1} true;
    call {:si_unique_call 156} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 157} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i64.i64.i64.i64.i64($p0: ref, $i1: i64, $p2: ref, p.3: i64, p.4: i64, p.5: i64, p.6: i64, p.7: i64) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i64.i64.i64.i64.i64($p0: ref, $i1: i64, $p2: ref, p.3: i64, p.4: i64, p.5: i64, p.6: i64, p.7: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 158} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 1} true;
    call {:si_unique_call 159} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 160} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb5:
    assume {:verifier.code 1} true;
    call {:si_unique_call 161} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 1} true;
    call {:si_unique_call 162} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 163} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.ref.i64($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: i64) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.ref.i64($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 164} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 1} true;
    call {:si_unique_call 165} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 166} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dm_thin_get_mapped_count: ref;

axiom dm_thin_get_mapped_count == $sub.ref(0, 266632);

procedure dm_thin_get_mapped_count($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation dm_thin_get_mapped_count($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} down_read($p4);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p1, $i9);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} up_read($p11);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 267664);

procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 1} true;
    call {:si_unique_call 169} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 170} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64.i64($p0: ref, p.1: i64, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64.i64($p0: ref, p.1: i64, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 1} true;
    call {:si_unique_call 171} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 172} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 1} true;
    call {:si_unique_call 173} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 174} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 1} true;
    call {:si_unique_call 175} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 176} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64.i64($p0: ref, p.1: ref, p.2: i64, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64.i64($p0: ref, p.1: ref, p.2: i64, p.3: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 1} true;
    call {:si_unique_call 177} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 178} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 1} true;
    call {:si_unique_call 179} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 180} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 1} true;
    call {:si_unique_call 181} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 182} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 1} true;
    call {:si_unique_call 183} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 184} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64($p0: ref, p.1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64($p0: ref, p.1: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 1} true;
    call {:si_unique_call 185} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 186} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i64($p0: ref, p.1: i32, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i64($p0: ref, p.1: i32, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 1} true;
    call {:si_unique_call 187} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 188} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 1} true;
    call {:si_unique_call 189} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 190} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dm_thin_get_highest_mapped_block: ref;

axiom dm_thin_get_highest_mapped_block == $sub.ref(0, 268696);

procedure dm_thin_get_highest_mapped_block($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation dm_thin_get_highest_mapped_block($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} down_read($p4);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i8 := __highest_block($p0, $p1);
    call {:si_unique_call 193} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} up_read($p10);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 269728);

procedure sprintf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);



const down_read: ref;

axiom down_read == $sub.ref(0, 270760);

procedure down_read($p0: ref);
  free requires assertsPassed;



implementation down_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    return;
}



const __highest_block: ref;

axiom __highest_block == $sub.ref(0, 271792);

procedure __highest_block($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __highest_block($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 832)), $mul.ref(176, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $i10 := dm_btree_lookup($p5, $i7, $p8, $p9);
    call {:si_unique_call 197} {:cexpr "r"} boogie_si_record_i32($i10);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.4, $p2);
    call {:si_unique_call 198} {:cexpr "thin_root"} boogie_si_record_i64($i13);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 832)), $mul.ref(232, 1));
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i15 := dm_btree_find_highest_key($p14, $i13, $p1);
    call {:si_unique_call 200} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i12 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb3;
}



const up_read: ref;

axiom up_read == $sub.ref(0, 272824);

procedure up_read($p0: ref);
  free requires assertsPassed;



implementation up_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    return;
}



const dm_btree_lookup: ref;

axiom dm_btree_lookup == $sub.ref(0, 273856);

procedure dm_btree_lookup($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_btree_lookup($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 201} {:cexpr "dm_btree_lookup:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 1} true;
    call {:si_unique_call 202} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 203} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dm_btree_find_highest_key: ref;

axiom dm_btree_find_highest_key == $sub.ref(0, 274888);

procedure dm_btree_find_highest_key($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_btree_find_highest_key($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 204} {:cexpr "dm_btree_find_highest_key:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 1} true;
    call {:si_unique_call 205} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 206} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const get_dev_size: ref;

axiom get_dev_size == $sub.ref(0, 275920);

procedure get_dev_size($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation get_dev_size($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(8, 1));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $i3 := i_size_read($p2);
    call {:si_unique_call 208} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i4 := $ashr.i64($i3, 9);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const i_size_read: ref;

axiom i_size_read == $sub.ref(0, 276952);

procedure i_size_read($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation i_size_read($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(80, 1));
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const do_noflush_stop: ref;

axiom do_noflush_stop == $sub.ref(0, 277984);

procedure do_noflush_stop($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation do_noflush_stop($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $p1 := to_noflush($p0);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 0);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} pool_work_complete($p5);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    return;
}



const noflush_work: ref;

axiom noflush_work == $sub.ref(0, 279016);

procedure noflush_work($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation noflush_work($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $p2 := $alloc($mul.ref(184, $zext.i32.i64(1)));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p0);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} pool_work_wait($p4, $p6, $p1);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    return;
}



const pool_work_wait: ref;

axiom pool_work_wait == $sub.ref(0, 280048);

procedure pool_work_wait($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation pool_work_wait($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_82: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} __init_work($p5, 1);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p6, 137438953408);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p4);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 216} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p9, $p10, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} lockdep_init_map($p12, .str.151, $p3, 0);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} INIT_LIST_HEAD($p14);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p2);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} init_completion($p18);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 66576)), $mul.ref(96, 1));
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} vslice_dummy_var_82 := queue_work($p20, $p21);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} wait_for_completion($p23);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 281080);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 282112);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 283144);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 284176);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    return;
}



const init_completion: ref;

axiom init_completion == $sub.ref(0, 285208);

procedure init_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} __init_waitqueue_head($p3, .str.150, $p1);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 286240);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $i2 := ldv_queue_work_on_5(8192, $p0, $p1);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 227} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const wait_for_completion: ref;

axiom wait_for_completion == $sub.ref(0, 287272);

procedure wait_for_completion($p0: ref);
  free requires assertsPassed;



implementation wait_for_completion($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    return;
}



const ldv_queue_work_on_5: ref;

axiom ldv_queue_work_on_5 == $sub.ref(0, 288304);

procedure ldv_queue_work_on_5($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation ldv_queue_work_on_5($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} {:cexpr "ldv_queue_work_on_5:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 230} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 231} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} activate_work_1($p2, 2);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 289336);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 233} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 1} true;
    call {:si_unique_call 234} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 235} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const activate_work_1: ref;

axiom activate_work_1 == $sub.ref(0, 290368);

procedure activate_work_1($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation activate_work_1($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} {:cexpr "activate_work_1:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i2 := $M.5;
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.7;
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.9;
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.11;
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $M.12 := $p0;
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $M.11 := $i1;
    call {:si_unique_call 240} {:cexpr "ldv_work_1_3"} boogie_si_record_i32($i1);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $M.10 := $p0;
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $M.9 := $i1;
    call {:si_unique_call 239} {:cexpr "ldv_work_1_2"} boogie_si_record_i32($i1);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $M.8 := $p0;
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $M.7 := $i1;
    call {:si_unique_call 238} {:cexpr "ldv_work_1_1"} boogie_si_record_i32($i1);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $M.6 := $p0;
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $M.5 := $i1;
    call {:si_unique_call 237} {:cexpr "ldv_work_1_0"} boogie_si_record_i32($i1);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 291400);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    return;
}



const to_noflush: ref;

axiom to_noflush == $sub.ref(0, 292432);

procedure to_noflush($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation to_noflush($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $p1 := to_pool_work($p0);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pool_work_complete: ref;

axiom pool_work_complete == $sub.ref(0, 293464);

procedure pool_work_complete($p0: ref);
  free requires assertsPassed;



implementation pool_work_complete($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} complete_($p1);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    return;
}



const complete_: ref;

axiom complete_ == $sub.ref(0, 294496);

procedure complete_($p0: ref);
  free requires assertsPassed;



implementation complete_($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    return;
}



const to_pool_work: ref;

axiom to_pool_work == $sub.ref(0, 295528);

procedure to_pool_work($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation to_pool_work($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const dm_noflush_suspending: ref;

axiom dm_noflush_suspending == $sub.ref(0, 296560);

procedure dm_noflush_suspending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_noflush_suspending($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 1} true;
    call {:si_unique_call 243} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 244} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const do_noflush_start: ref;

axiom do_noflush_start == $sub.ref(0, 297592);

procedure do_noflush_start($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation do_noflush_start($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $p1 := to_noflush($p0);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 1);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} requeue_io($p6);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} pool_work_complete($p7);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    return;
}



const requeue_io: ref;

axiom requeue_io == $sub.ref(0, 298624);

procedure requeue_io($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation requeue_io($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} bio_list_init($p1);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $p3 := spinlock_check($p2);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $i4 := _raw_spin_lock_irqsave($p3);
    call {:si_unique_call 252} {:cexpr "flags"} boogie_si_record_i64($i4);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} __merge_bio_list($p1, $p5);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(184, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} __merge_bio_list($p1, $p6);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} spin_unlock_irqrestore($p7, $i4);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} error_bio_list($p1, 2);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} requeue_deferred_cells($p0);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    return;
}



const bio_list_init: ref;

axiom bio_list_init == $sub.ref(0, 299656);

procedure bio_list_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation bio_list_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $0.ref);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $0.ref);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 300688);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 301720);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 1} true;
    call {:si_unique_call 258} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 259} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __merge_bio_list: ref;

axiom __merge_bio_list == $sub.ref(0, 302752);

procedure __merge_bio_list($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __merge_bio_list($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} bio_list_merge($p0, $p1);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} bio_list_init($p1);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 303784);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    return;
}



const error_bio_list: ref;

axiom error_bio_list == $sub.ref(0, 304816);

procedure error_bio_list($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation error_bio_list($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} {:cexpr "error_bio_list:arg:error"} boogie_si_record_i32($i1);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $p2 := bio_list_pop($p0);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p5 := $p2;
    goto $bb4;

  $bb4:
    call $p6, $i7, $i8, $p5 := error_bio_list_loop_$bb4($p0, $i1, $p6, $i7, $i8, $p5);
    goto $bb4_last;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} bio_endio($p5, $i1);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $p6 := bio_list_pop($p0);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $p5 := $p6;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1033;
}



const requeue_deferred_cells: ref;

axiom requeue_deferred_cells == $sub.ref(0, 305848);

procedure requeue_deferred_cells($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation requeue_deferred_cells($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p20: ref;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} INIT_LIST_HEAD($p1);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p5 := spinlock_check($p4);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 272} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(152, 1));
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} list_splice_init($p7, $p1);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} spin_unlock_irqrestore($p8, $i6);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p1);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i17, $i18);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p20, $p21 := $p14, $p10;
    goto $bb4;

  $bb4:
    call $p23, $p24, $p26, $i27, $i28, $p20, $p21 := requeue_deferred_cells_loop_$bb4($p3, $i18, $p23, $p24, $p26, $i27, $i28, $p20, $p21);
    goto $bb4_last;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} cell_requeue($p3, $p21);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p20, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, $i18);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i28 == 1);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p20, $p21 := $p24, $p20;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1066;
}



const list_splice_init: ref;

axiom list_splice_init == $sub.ref(0, 306880);

procedure list_splice_init($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_splice_init($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i2 := list_empty($p0);
    call {:si_unique_call 277} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} __list_splice($p0, $p1, $p5);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} INIT_LIST_HEAD($p0);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cell_requeue: ref;

axiom cell_requeue == $sub.ref(0, 307912);

procedure cell_requeue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation cell_requeue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} cell_error_with_code($p0, $p1, 2);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    return;
}



const cell_error_with_code: ref;

axiom cell_error_with_code == $sub.ref(0, 308944);

procedure cell_error_with_code($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation cell_error_with_code($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} {:cexpr "cell_error_with_code:arg:error_code"} boogie_si_record_i32($i2);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(80, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} dm_cell_error($p4, $p1, $i2);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(80, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} dm_bio_prison_free_cell($p6, $p1);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    return;
}



const dm_cell_error: ref;

axiom dm_cell_error == $sub.ref(0, 309976);

procedure dm_cell_error($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation dm_cell_error($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} {:cexpr "dm_cell_error:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    return;
}



const dm_bio_prison_free_cell: ref;

axiom dm_bio_prison_free_cell == $sub.ref(0, 311008);

procedure dm_bio_prison_free_cell($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dm_bio_prison_free_cell($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 312040);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __list_splice: ref;

axiom __list_splice == $sub.ref(0, 313072);

procedure __list_splice($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __list_splice($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p4);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p2);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p6);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    return;
}



const bio_endio: ref;

axiom bio_endio == $sub.ref(0, 314104);

procedure bio_endio($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation bio_endio($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} {:cexpr "bio_endio:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    return;
}



const bio_list_pop: ref;

axiom bio_list_pop == $sub.ref(0, 315136);

procedure bio_list_pop($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation bio_list_pop($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p8);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $0.ref);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $0.ref);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 316168);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    return;
}



const bio_list_merge: ref;

axiom bio_list_merge == $sub.ref(0, 317200);

procedure bio_list_merge($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation bio_list_merge($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p16);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p19);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p11);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dm_per_bio_data: ref;

axiom dm_per_bio_data == $sub.ref(0, 318232);

procedure dm_per_bio_data($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation dm_per_bio_data($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} {:cexpr "dm_per_bio_data:arg:data_size"} boogie_si_record_i64($i1);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i3 := $sub.i64($sub.i64(0, 32), $i1);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref($i3, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const dm_deferred_entry_dec: ref;

axiom dm_deferred_entry_dec == $sub.ref(0, 319264);

procedure dm_deferred_entry_dec($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dm_deferred_entry_dec($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 320296);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    return;
}



const __complete_mapping_preparation: ref;

axiom __complete_mapping_preparation == $sub.ref(0, 321328);

procedure __complete_mapping_preparation($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation __complete_mapping_preparation($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(20, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i6 := atomic_dec_and_test($p5);
    call {:si_unique_call 289} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 66576)), $mul.ref(912, 1));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} list_add_tail($p8, $p9);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} wake_worker($p4);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 322360);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} __list_add($p0, $p3, $p1);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    return;
}



const wake_worker: ref;

axiom wake_worker == $sub.ref(0, 323392);

procedure wake_worker($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation wake_worker($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var vslice_dummy_var_83: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(96, 1));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(280, 1));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} vslice_dummy_var_83 := queue_work($p2, $p3);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    return;
}



const cell_defer_no_holder: ref;

axiom cell_defer_no_holder == $sub.ref(0, 324424);

procedure cell_defer_no_holder($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation cell_defer_no_holder($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $p5 := spinlock_check($p4);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 296} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} cell_release_no_holder($p3, $p1, $p7);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} spin_unlock_irqrestore($p8, $i6);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} wake_worker($p3);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    return;
}



const cell_release_no_holder: ref;

axiom cell_release_no_holder == $sub.ref(0, 325456);

procedure cell_release_no_holder($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation cell_release_no_holder($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(80, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} dm_cell_release_no_holder($p4, $p1, $p2);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(80, 1));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} dm_bio_prison_free_cell($p6, $p1);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    return;
}



const dm_cell_release_no_holder: ref;

axiom dm_cell_release_no_holder == $sub.ref(0, 326488);

procedure dm_cell_release_no_holder($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation dm_cell_release_no_holder($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 327520);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    return;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 328552);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 303} devirtbounce.2(0, $p2, $p1, $p2);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.13, $p1);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const thin_bio_map: ref;

axiom thin_bio_map == $sub.ref(0, 329584);

procedure thin_bio_map($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $CurrAddr, $M.16, $M.17, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation thin_bio_map($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i1;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $p5 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i9 := get_bio_block($p8, $p1);
    call {:si_unique_call 309} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} thin_hook_bio($p8, $p1);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $i18 := get_pool_mode($p17);
    call {:si_unique_call 313} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 12416);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} build_virtual_key($p25, $i9, $p5);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i28 := bio_detain($p27, $p5, $p1, $p3);
    call {:si_unique_call 318} {:cexpr "tmp___1"} boogie_si_record_i32($i28);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $i30 := dm_thin_find_block($p11, $i9, 0, $p2);
    call {:si_unique_call 320} {:cexpr "r"} boogie_si_record_i32($i30);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, $sub.i32(0, 11));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i30, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i30, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} bio_endio($p1, $sub.i32(0, 5));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.14, $p3);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} cell_defer_no_holder($p8, $p59);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb19:
    assume $i33 == 1;
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i64($i38);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 322} {:cexpr "tmp___2"} boogie_si_record_i64($i40);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} build_data_key($p44, $i46, $p5);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i49 := bio_detain($p48, $p5, $p1, $p4);
    call {:si_unique_call 327} {:cexpr "tmp___3"} boogie_si_record_i32($i49);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} inc_all_io_entry($p53, $p1);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.14, $p4);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} cell_defer_no_holder($p8, $p54);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.14, $p3);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} cell_defer_no_holder($p8, $p55);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p56);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} remap($p8, $p1, $i57);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb3;

  $bb30:
    assume $i50 == 1;
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.14, $p3);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} cell_defer_no_holder($p8, $p51);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb27:
    assume $i41 == 1;
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.14, $p3);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} thin_defer_cell($p8, $p42);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb17:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i30, $sub.i32(0, 11));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb21;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.14, $p3);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} thin_defer_cell($p8, $p58);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb15:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i30, $sub.i32(0, 61));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb21;

  $bb25:
    assume $i35 == 1;
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} thin_defer_bio_with_throttle($p8, $p1);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} bio_endio($p1, $sub.i32(0, 5));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} bio_endio($p1, 2);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;
}



const get_bio_block: ref;

axiom get_bio_block == $sub.ref(0, 330616);

procedure get_bio_block($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation get_bio_block($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i14: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    call {:si_unique_call 335} {:cexpr "block_nr"} boogie_si_record_i64($i6);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $i7 := block_size_is_power_of_two($p3);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 337} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i18 := $udiv.i64($i6, $i17);
    call {:si_unique_call 339} {:cexpr "block_nr"} boogie_si_record_i64($i18);
    assume {:verifier.code 0} true;
    $i14 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 66576)), $mul.ref(60, 1));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i13 := $lshr.i64($i6, $i12);
    call {:si_unique_call 338} {:cexpr "block_nr"} boogie_si_record_i64($i13);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;
}



const thin_hook_bio: ref;

axiom thin_hook_bio == $sub.ref(0, 331648);

procedure thin_hook_bio($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation thin_hook_bio($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $p2 := dm_per_bio_data($p1, 64);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p0);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $0.ref);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    return;
}



const thin_defer_bio_with_throttle: ref;

axiom thin_defer_bio_with_throttle == $sub.ref(0, 332680);

procedure thin_defer_bio_with_throttle($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation thin_defer_bio_with_throttle($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 66576)), $mul.ref(104, 1));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} throttle_lock($p4);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} thin_defer_bio($p0, $p1);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 66576)), $mul.ref(104, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} throttle_unlock($p5);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    return;
}



const build_virtual_key: ref;

axiom build_virtual_key == $sub.ref(0, 333712);

procedure build_virtual_key($p0: ref, $i1: i64, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation build_virtual_key($p0: ref, $i1: i64, $p2: ref)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} {:cexpr "build_virtual_key:arg:b"} boogie_si_record_i64($i1);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i1, 1);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} build_key($p0, 0, $i1, $i3, $p2);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    return;
}



const bio_detain: ref;

axiom bio_detain == $sub.ref(0, 334744);

procedure bio_detain($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bio_detain($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(80, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $p6 := dm_bio_prison_alloc_cell($p5, 16);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(80, 1));
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $i9 := dm_bio_detain($p8, $p1, $p2, $p6, $p3);
    call {:si_unique_call 348} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(80, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} dm_bio_prison_free_cell($p12, $p6);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dm_thin_find_block: ref;

axiom dm_thin_find_block == $sub.ref(0, 335776);

procedure dm_thin_find_block($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.0, $M.16, $M.17, $CurrAddr;



implementation dm_thin_find_block($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i1;
  var $p18: ref;
  var $i20: i1;
  var $p21: ref;
  var $p23: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i8;
  var $p37: ref;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 354} {:cexpr "dm_thin_find_block:arg:block"} boogie_si_record_i64($i1);
    call {:si_unique_call 355} {:cexpr "dm_thin_find_block:arg:can_issue_io"} boogie_si_record_i32($i2);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 8));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p12, $i11);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(1, 8));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p13, $i1);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p9, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} down_read($p14);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p9, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i2, 0);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p9, $mul.ref(0, 832)), $mul.ref(120, 1));
    assume {:verifier.code 0} true;
    $p22 := $p23;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p9, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p5);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p4);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $i28 := dm_btree_lookup($p22, $i25, $p26, $p27);
    call {:si_unique_call 359} {:cexpr "r"} boogie_si_record_i32($i28);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p9, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} up_read($p37);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i19 := $i28;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.4, $p4);
    call {:si_unique_call 360} {:cexpr "block_time"} boogie_si_record_i64($i30);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} unpack_block_time($i30, $p6, $p7);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.16, $p6);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p32, $i31);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.17, $p7);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i34 := __snapshotted_since($p0, $i33);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i8($i34);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, $i36);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p9, $mul.ref(0, 832)), $mul.ref(64, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p22 := $p21;
    goto $bb7;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} up_read($p18);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 336808);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 365} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const thin_defer_cell: ref;

axiom thin_defer_cell == $sub.ref(0, 337840);

procedure thin_defer_cell($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation thin_defer_cell($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 66576)), $mul.ref(104, 1));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} throttle_lock($p4);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $p6 := spinlock_check($p5);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $i7 := _raw_spin_lock_irqsave($p6);
    call {:si_unique_call 369} {:cexpr "flags"} boogie_si_record_i64($i7);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(152, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} list_add_tail($p8, $p9);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} spin_unlock_irqrestore($p10, $i7);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 66576)), $mul.ref(104, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} throttle_unlock($p11);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} wake_worker($p3);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    return;
}



const build_data_key: ref;

axiom build_data_key == $sub.ref(0, 338872);

procedure build_data_key($p0: ref, $i1: i64, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation build_data_key($p0: ref, $i1: i64, $p2: ref)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} {:cexpr "build_data_key:arg:b"} boogie_si_record_i64($i1);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i1, 1);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} build_key($p0, 1, $i1, $i3, $p2);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    return;
}



const inc_all_io_entry: ref;

axiom inc_all_io_entry == $sub.ref(0, 339904);

procedure inc_all_io_entry($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation inc_all_io_entry($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, 128);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $p6 := dm_per_bio_data($p1, 64);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(968, 1));
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $p10 := dm_deferred_entry_inc($p9);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p10);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const remap: ref;

axiom remap == $sub.ref(0, 340936);

procedure remap($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation remap($p0: ref, $p1: ref, $i2: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $p40: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} {:cexpr "remap:arg:block"} boogie_si_record_i64($i2);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    call {:si_unique_call 379} {:cexpr "bi_sector"} boogie_si_record_i64($i7);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p11);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $i13 := block_size_is_power_of_two($p4);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 381} {:cexpr "tmp"} boogie_si_record_i8($i14);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i31 := $urem.i64($i7, $i30);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32($i31);
    call {:si_unique_call 382} {:cexpr "_res"} boogie_si_record_i32($i32);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i34);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i36 := $mul.i64($i35, $i2);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i32);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i36, $i37);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p40, $i38);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 66576)), $mul.ref(60, 1));
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i19 := $shl.i64($i2, $i18);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i21, 1);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, $i7);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i25 := $or.i64($i19, $i24);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p27, $i25);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const block_size_is_power_of_two: ref;

axiom block_size_is_power_of_two == $sub.ref(0, 341968);

procedure block_size_is_power_of_two($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation block_size_is_power_of_two($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(60, 1));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i3 := $sge.i32($i2, 0);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dm_deferred_entry_inc: ref;

axiom dm_deferred_entry_inc == $sub.ref(0, 343000);

procedure dm_deferred_entry_inc($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dm_deferred_entry_inc($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $p1 := external_alloc();
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 344032);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 1} true;
    call {:si_unique_call 384} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 385} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const build_key: ref;

axiom build_key == $sub.ref(0, 345064);

procedure build_key($p0: ref, $i1: i32, $i2: i64, $i3: i64, $p4: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation build_key($p0: ref, $i1: i32, $i2: i64, $i3: i64, $p4: ref)
{
  var $i5: i1;
  var $i6: i32;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} {:cexpr "build_key:arg:ls"} boogie_si_record_i32($i1);
    call {:si_unique_call 387} {:cexpr "build_key:arg:b"} boogie_si_record_i64($i2);
    call {:si_unique_call 388} {:cexpr "build_key:arg:e"} boogie_si_record_i64($i3);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 0);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i8 := dm_thin_dev_id($p0);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, $i8);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, $i2);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i3);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    return;
}



const dm_thin_dev_id: ref;

axiom dm_thin_dev_id == $sub.ref(0, 346096);

procedure dm_thin_dev_id($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dm_thin_dev_id($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const throttle_lock: ref;

axiom throttle_lock == $sub.ref(0, 347128);

procedure throttle_lock($p0: ref);
  free requires assertsPassed;



implementation throttle_lock($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} down_read($p1);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    return;
}



const throttle_unlock: ref;

axiom throttle_unlock == $sub.ref(0, 348160);

procedure throttle_unlock($p0: ref);
  free requires assertsPassed;



implementation throttle_unlock($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} up_read($p1);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    return;
}



const unpack_block_time: ref;

axiom unpack_block_time == $sub.ref(0, 349192);

procedure unpack_block_time($i0: i64, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.16, $M.17;



implementation unpack_block_time($i0: i64, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} {:cexpr "unpack_block_time:arg:v"} boogie_si_record_i64($i0);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i64($i0, 24);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $M.16 := $store.i64($M.16, $p1, $i3);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i0);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 16777215);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, $p2, $i5);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    return;
}



const __snapshotted_since: ref;

axiom __snapshotted_since == $sub.ref(0, 350224);

procedure __snapshotted_since($p0: ref, $i1: i32) returns ($r: i1);
  free requires assertsPassed;



implementation __snapshotted_since($p0: ref, $i1: i32) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} {:cexpr "__snapshotted_since:arg:time"} boogie_si_record_i32($i1);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i32($i3, $i1);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dm_bio_prison_alloc_cell: ref;

axiom dm_bio_prison_alloc_cell == $sub.ref(0, 351256);

procedure dm_bio_prison_alloc_cell($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation dm_bio_prison_alloc_cell($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} {:cexpr "dm_bio_prison_alloc_cell:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $p2 := external_alloc();
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const dm_bio_detain: ref;

axiom dm_bio_detain == $sub.ref(0, 352288);

procedure dm_bio_detain($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_bio_detain($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 1} true;
    call {:si_unique_call 396} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 397} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const thin_defer_bio: ref;

axiom thin_defer_bio == $sub.ref(0, 353320);

procedure thin_defer_bio($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation thin_defer_bio($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $p5 := spinlock_check($p4);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 400} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} bio_list_add($p7, $p1);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} spin_unlock_irqrestore($p8, $i6);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} wake_worker($p3);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    return;
}



const bio_list_add: ref;

axiom bio_list_add == $sub.ref(0, 354352);

procedure bio_list_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation bio_list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $0.ref);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p1);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p1);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const list_del_rcu: ref;

axiom list_del_rcu == $sub.ref(0, 355384);

procedure list_del_rcu($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_del_rcu($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} __list_del_entry($p0);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $i2p.i64.ref($sub.i64(0, 2401263026316508672)));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    return;
}



const synchronize_rcu: ref;

axiom synchronize_rcu == $sub.ref(0, 356416);

procedure synchronize_rcu();
  free requires assertsPassed;



implementation synchronize_rcu()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} synchronize_sched();
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    return;
}



const thin_put: ref;

axiom thin_put == $sub.ref(0, 357448);

procedure thin_put($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation thin_put($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(208, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $i2 := atomic_dec_and_test($p1);
    call {:si_unique_call 407} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(216, 1));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} complete_($p4);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_27: ref;

axiom ldv_mutex_lock_27 == $sub.ref(0, 358480);

procedure ldv_mutex_lock_27($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_mutex_lock_27($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} ldv_mutex_lock_mutex_of_dm_thin_pool_table($p0);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} mutex_lock($p0);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const __pool_dec: ref;

axiom __pool_dec == $sub.ref(0, 359512);

procedure __pool_dec($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.42, $M.4, $M.58, $M.59, $M.60, $M.5, $M.7, $M.9, $M.11, $CurrAddr, $M.15, $M.45, $M.18, $M.6, $M.8, $M.10, $M.12, $M.16, $M.17, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.40, $M.25, $M.26, $M.29, $M.55, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation __pool_dec($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i1 := mutex_is_locked(dm_thin_pool_table);
    call {:si_unique_call 412} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 414} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(816, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 417} {:cexpr "tmp___1"} boogie_si_record_i64($i12);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(816, 1));
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i15, 1);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(816, 1));
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(816, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} __pool_destroy($p0);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    call {:si_unique_call 418} devirtbounce.3(0, .str.30, 2928, 12);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call __pool_dec_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 415} devirtbounce.3(0, .str.30, 2927, 12);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call __pool_dec_loop_$bb3();
    goto $bb3_last;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const dm_pool_close_thin_device: ref;

axiom dm_pool_close_thin_device == $sub.ref(0, 360544);

procedure dm_pool_close_thin_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dm_pool_close_thin_device($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} down_write($p3);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} __close_device($p0);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} up_write($p6);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const dm_put_device: ref;

axiom dm_put_device == $sub.ref(0, 361576);

procedure dm_put_device($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dm_put_device($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 362608);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} free_($p0);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_28: ref;

axiom ldv_mutex_unlock_28 == $sub.ref(0, 363640);

procedure ldv_mutex_unlock_28($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_mutex_unlock_28($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} ldv_mutex_unlock_mutex_of_dm_thin_pool_table($p0);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} mutex_unlock($p0);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_mutex_of_dm_thin_pool_table: ref;

axiom ldv_mutex_unlock_mutex_of_dm_thin_pool_table == $sub.ref(0, 364672);

procedure ldv_mutex_unlock_mutex_of_dm_thin_pool_table($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_mutex_unlock_mutex_of_dm_thin_pool_table($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i1 := $M.18;
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 2);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 427} {:cexpr "ldv_mutex_mutex_of_dm_thin_pool_table"} boogie_si_record_i32(1);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} ldv_error();
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 365704);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 366736);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 428} __VERIFIER_error();
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 367768);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 429} $free($p0);
    return;
}



const down_write: ref;

axiom down_write == $sub.ref(0, 368800);

procedure down_write($p0: ref);
  free requires assertsPassed;



implementation down_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    return;
}



const __close_device: ref;

axiom __close_device == $sub.ref(0, 369832);

procedure __close_device($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __close_device($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    return;
}



const up_write: ref;

axiom up_write == $sub.ref(0, 370864);

procedure up_write($p0: ref);
  free requires assertsPassed;



implementation up_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    return;
}



const mutex_is_locked: ref;

axiom mutex_is_locked == $sub.ref(0, 371896);

procedure mutex_is_locked($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_is_locked($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i2 := atomic_read($p1);
    call {:si_unique_call 431} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 1);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __pool_destroy: ref;

axiom __pool_destroy == $sub.ref(0, 372928);

procedure __pool_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.42, $M.4, $M.58, $M.59, $M.60, $M.5, $M.7, $M.9, $M.11, $CurrAddr, $M.15, $M.45, $M.18, $M.6, $M.8, $M.10, $M.12, $M.16, $M.17, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.40, $M.25, $M.26, $M.29, $M.55, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation __pool_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} __pool_table_remove($p0);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i3 := dm_pool_metadata_close($p2);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 434} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(80, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} dm_bio_prison_destroy($p7);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(88, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} dm_kcopyd_client_destroy($p9);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(96, 1));
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(976, 1));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(984, 1));
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} mempool_destroy($p26);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(960, 1));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} dm_deferred_set_destroy($p28);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(968, 1));
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} dm_deferred_set_destroy($p30);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p0);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} kfree($p31);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(976, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(984, 1));
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} mempool_free($p22, $p24);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(96, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} ldv_destroy_workqueue_17($p15);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} vslice_dummy_var_84 := printk.ref.ref(.str.76, .str.80);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const __pool_table_remove: ref;

axiom __pool_table_remove == $sub.ref(0, 373960);

procedure __pool_table_remove($p0: ref);
  free requires assertsPassed;



implementation __pool_table_remove($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i1 := mutex_is_locked(dm_thin_pool_table);
    call {:si_unique_call 445} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 447} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(0, 1));
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} list_del($p7);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 448} devirtbounce.3(0, .str.30, 560, 12);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call __pool_table_remove_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const dm_pool_metadata_close: ref;

axiom dm_pool_metadata_close == $sub.ref(0, 374992);

procedure dm_pool_metadata_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.42, $M.4, $M.58, $M.59, $M.60, $CurrAddr, $M.15, $M.45, $M.18, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.16, $M.17, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.40, $M.25, $M.26, $M.29, $M.55, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation dm_pool_metadata_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $i23: i32;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i33: i32;
  var $i15: i32;
  var $p34: ref;
  var $i35: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i1;
  var $i41: i8;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i8;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $p51: ref;
  var $i52: i8;
  var $i53: i1;
  var $p54: ref;
  var $i37: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} down_read($p1);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(528, 1)), $mul.ref(0, 1));
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i11, $i13);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i15 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} up_read($p34);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i15, 0);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $i40 := dm_bm_is_read_only($p39);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i8($i40);
    call {:si_unique_call 457} {:cexpr "tmp___0"} boogie_si_record_i8($i41);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i41);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i8.i1($i52);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i53 == 1);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} __destroy_persistent_data_objects($p0);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p0);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} kfree($p54);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb19:
    assume $i44 == 1;
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i46);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i47 == 1);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i48 := __commit_transaction($p0);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 459} {:cexpr "r"} boogie_si_record_i32($i48);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 0);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i49 == 1;
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} vslice_dummy_var_86 := printk.ref.ref.i32(.str.5, .str.6, $i48);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb21;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb18;

  $bb12:
    assume $i35 == 1;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} vslice_dummy_var_85 := printk.ref.i32(.str.4, $i15);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32(0, 16);
    goto $bb14;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p16, $i17, $p18 := $p8, 0, $p4;
    goto $bb4;

  $bb4:
    call $p19, $i20, $i21, $i22, $p24, $p25, $i23, $p27, $p28, $p30, $i31, $i32, $p16, $i17, $p18, $i33 := dm_pool_metadata_close_loop_$bb4($i13, $p19, $i20, $i21, $i22, $p24, $p25, $i23, $p27, $p28, $p30, $i31, $i32, $p16, $i17, $p18, $i33);
    goto $bb4_last;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p18, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} list_del($p24);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p18);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} kfree($p25);
    assume {:verifier.code 0} true;
    $i23 := $i17;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p16, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, $i13);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i33 := $i23;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i15 := $i33;
    goto $bb3;

  $bb9:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $p16, $i17, $p18 := $p28, $i23, $p16;
    goto $bb9_dummy;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i17, 1);
    call {:si_unique_call 451} {:cexpr "open_devices"} boogie_si_record_i32($i22);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1810;
}



const dm_bio_prison_destroy: ref;

axiom dm_bio_prison_destroy == $sub.ref(0, 376024);

procedure dm_bio_prison_destroy($p0: ref);
  free requires assertsPassed;



implementation dm_bio_prison_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    return;
}



const dm_kcopyd_client_destroy: ref;

axiom dm_kcopyd_client_destroy == $sub.ref(0, 377056);

procedure dm_kcopyd_client_destroy($p0: ref);
  free requires assertsPassed;



implementation dm_kcopyd_client_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    return;
}



const ldv_destroy_workqueue_17: ref;

axiom ldv_destroy_workqueue_17 == $sub.ref(0, 378088);

procedure ldv_destroy_workqueue_17($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11, $M.0, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.6, $M.8, $M.10, $M.12, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.42, $M.4, $M.58, $M.59, $M.60, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.55;



implementation ldv_destroy_workqueue_17($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} destroy_workqueue($p0);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} call_and_disable_all_1(2);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const mempool_free: ref;

axiom mempool_free == $sub.ref(0, 379120);

procedure mempool_free($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation mempool_free($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    return;
}



const mempool_destroy: ref;

axiom mempool_destroy == $sub.ref(0, 380152);

procedure mempool_destroy($p0: ref);
  free requires assertsPassed;



implementation mempool_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    return;
}



const dm_deferred_set_destroy: ref;

axiom dm_deferred_set_destroy == $sub.ref(0, 381184);

procedure dm_deferred_set_destroy($p0: ref);
  free requires assertsPassed;



implementation dm_deferred_set_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 382216);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    return;
}



const call_and_disable_all_1: ref;

axiom call_and_disable_all_1 == $sub.ref(0, 383248);

procedure call_and_disable_all_1($i0: i32);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11, $M.0, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.6, $M.8, $M.10, $M.12, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.42, $M.4, $M.58, $M.59, $M.60, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.55;



implementation call_and_disable_all_1($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} {:cexpr "call_and_disable_all_1:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i1 := $M.5;
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, $i0);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $M.7;
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, $i0);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $M.9;
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $i0);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := $M.11;
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $i0);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p12 := $M.12;
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} call_and_disable_work_1($p12);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p9 := $M.10;
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} call_and_disable_work_1($p9);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p6 := $M.8;
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} call_and_disable_work_1($p6);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p3 := $M.6;
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} call_and_disable_work_1($p3);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const call_and_disable_work_1: ref;

axiom call_and_disable_work_1 == $sub.ref(0, 384280);

procedure call_and_disable_work_1($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11, $M.0, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.6, $M.8, $M.10, $M.12, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.42, $M.4, $M.58, $M.59, $M.60, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.55;



implementation call_and_disable_work_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i1 := $M.5;
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i3 := $M.5;
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := $M.7;
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i10 == 1);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i11 := $M.7;
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 3);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i17 := $M.9;
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 2);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i18 == 1);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i19 := $M.9;
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 3);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i25 := $M.11;
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i26 == 1);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i27 := $M.11;
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 3);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p30 := $M.12;
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i29, $i31);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb34;

  $bb35:
    assume $i32 == 1;
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} do_worker($p0);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 477} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb30;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p22 := $M.10;
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb25;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} do_worker($p0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 475} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb21;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p14 := $M.8;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i13, $i15);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb16;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} do_worker($p0);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 473} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p6 := $M.6;
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i5, $i7);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} do_worker($p0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 471} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const do_worker: ref;

axiom do_worker == $sub.ref(0, 385312);

procedure do_worker($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.42, $M.4, $M.58, $M.59, $M.60, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.55;



implementation do_worker($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 280), 66576));
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 280), 66576)), $mul.ref(104, 1));
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} throttle_work_start($p3);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 280), 66576)), $mul.ref(40, 1));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} dm_pool_issue_prefetches($p5);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 280), 66576)), $mul.ref(104, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} throttle_work_update($p6);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 280), 66576)), $mul.ref(912, 1));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 280), 66576)), $mul.ref(1024, 1));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} process_prepared($p2, $p7, $p9);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 280), 66576)), $mul.ref(104, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} throttle_work_update($p10);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 280), 66576)), $mul.ref(928, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 280), 66576)), $mul.ref(1032, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} process_prepared($p2, $p11, $p13);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 280), 66576)), $mul.ref(104, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} throttle_work_update($p14);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} process_deferred_bios($p2);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 280), 66576)), $mul.ref(104, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} throttle_work_complete($p15);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const throttle_work_start: ref;

axiom throttle_work_start == $sub.ref(0, 386344);

procedure throttle_work_start($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation throttle_work_start($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i1 := $load.i64($M.0, jiffies);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 250);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(160, 1));
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i2);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    return;
}



const dm_pool_issue_prefetches: ref;

axiom dm_pool_issue_prefetches == $sub.ref(0, 387376);

procedure dm_pool_issue_prefetches($p0: ref);
  free requires assertsPassed;



implementation dm_pool_issue_prefetches($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} dm_tm_issue_prefetches($p2);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    return;
}



const throttle_work_update: ref;

axiom throttle_work_update == $sub.ref(0, 388408);

procedure throttle_work_update($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation throttle_work_update($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(168, 1));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(160, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, jiffies);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i7 := $ult.i64($i5, $i6);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} down_write($p8);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(168, 1));
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 1);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const process_prepared: ref;

axiom process_prepared == $sub.ref(0, 389440);

procedure process_prepared($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation process_prepared($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p21: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p19: ref;
  var $p20: ref;
  var vslice_dummy_var_87: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} INIT_LIST_HEAD($p3);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $p5 := spinlock_check($p4);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 493} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} list_splice_init($p1, $p3);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} spin_unlock_irqrestore($p7, $i6);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p10, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p3);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i16, $i17);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p19, $p20 := $p13, $p9;
    goto $bb4;

  $bb4:
    call $p21, $p24, $p25, $p27, $i28, $i29, $p19, $p20, vslice_dummy_var_87 := process_prepared_loop_$bb4($p2, $i17, $p21, $p24, $p25, $p27, $i28, $i29, $p19, $p20, vslice_dummy_var_87);
    goto $bb4_last;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p2);
    call {:si_unique_call 496} vslice_dummy_var_87 := devirtbounce.4($p21, $p20);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p19, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, $i17);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $p19, $p20 := $p25, $p19;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2061;
}



const process_deferred_bios: ref;

axiom process_deferred_bios == $sub.ref(0, 390472);

procedure process_deferred_bios($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.42, $M.4, $M.58, $M.59, $M.60, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.55;



implementation process_deferred_bios($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p5: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p31: ref;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p40: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $p2 := get_first_thin($p0);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} bio_list_init($p1);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $p10 := spinlock_check($p9);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $i11 := _raw_spin_lock_irqsave($p10);
    call {:si_unique_call 505} {:cexpr "flags"} boogie_si_record_i64($i11);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(896, 1));
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} bio_list_merge($p1, $p12);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(896, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} bio_list_init($p13);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} spin_unlock_irqrestore($p14, $i11);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $i15 := bio_list_empty($p1);
    call {:si_unique_call 510} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i26 := commit($p0);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 516} {:cexpr "tmp___4"} boogie_si_record_i32($i26);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, jiffies);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(808, 1));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p36, $i35);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $p37 := bio_list_pop($p1);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb33:
    assume $i39 == 1;
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p40 := $p37;
    goto $bb36;

  $bb36:
    call $p41, $i42, $i43, $p40 := process_deferred_bios_loop_$bb36($p1, $p41, $i42, $i43, $p40);
    goto $bb36_last;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} generic_make_request($p40);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $p41 := bio_list_pop($p1);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i43 == 1);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb38:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $p40 := $p41;
    goto $bb38_dummy;

  $bb22:
    assume $i27 == 1;
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $p28 := bio_list_pop($p1);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb24:
    assume $i30 == 1;
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p31 := $p28;
    goto $bb27;

  $bb27:
    call $p32, $i33, $i34, $p31 := process_deferred_bios_loop_$bb27($p1, $p32, $i33, $i34, $p31);
    goto $bb27_last;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} bio_endio($p31, $sub.i32(0, 5));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $p32 := bio_list_pop($p1);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i34 == 1);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb29:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $p31 := $p32;
    goto $bb29_dummy;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i16 == 1;
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i19 := dm_pool_changed_this_transaction($p18);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 512} {:cexpr "tmp___1"} boogie_si_record_i8($i20);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i23 == 1);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $i24 := need_commit_due_to_time($p0);
    call {:si_unique_call 514} {:cexpr "tmp___3"} boogie_si_record_i32($i24);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb17:
    assume $i25 == 1;
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume $i23 == 1;
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb13;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p5 := $p2;
    goto $bb4;

  $bb4:
    call $p6, $i7, $i8, $p5 := process_deferred_bios_loop_$bb4($p0, $p6, $i7, $i8, $p5);
    goto $bb4_last;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} process_thin_deferred_cells($p5);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} process_thin_deferred_bios($p5);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $p6 := get_next_thin($p0, $p5);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $p5 := $p6;
    goto $bb6_dummy;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb38_dummy:
    assume false;
    return;

  $bb36_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2151;

  $bb29_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2133;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2080;
}



const throttle_work_complete: ref;

axiom throttle_work_complete == $sub.ref(0, 391504);

procedure throttle_work_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation throttle_work_complete($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(168, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(168, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 0);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} up_write($p5);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_first_thin: ref;

axiom get_first_thin == $sub.ref(0, 392536);

procedure get_first_thin($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation get_first_thin($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} rcu_read_lock();
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(944, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $i4 := list_empty($p3);
    call {:si_unique_call 528} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $p16 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} rcu_read_unlock();
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $r := $p16;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(944, 1)), $mul.ref(0, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p8);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} __read_once_size($p9, $p11, 8);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.20, $p12);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i14 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 531} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p13);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} thin_get($p15);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p16 := $p13;
    goto $bb3;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const process_thin_deferred_cells: ref;

axiom process_thin_deferred_cells == $sub.ref(0, 393568);

procedure process_thin_deferred_cells($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.40, $M.16, $M.17, $CurrAddr, $M.25, $M.26, $M.29, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation process_thin_deferred_cells($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i34: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i33: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i15: i32;
  var $i58: i32;
  var $i59: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} INIT_LIST_HEAD($p1);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $p5 := spinlock_check($p4);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 538} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(152, 1));
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} list_splice_init($p7, $p1);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} spin_unlock_irqrestore($p8, $i6);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $i9 := list_empty($p1);
    call {:si_unique_call 542} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    call $p11, $p12, $i13, $i14, $i16, $p18, $p19, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p46, $p47, $p48, $i49, $i50, $i51, $p52, $p53, $p54, $p55, $i56, $i57, $i15, $i58, $i59 := process_thin_deferred_cells_loop_$bb5($p0, $p1, $p3, $p11, $p12, $i13, $i14, $i16, $p18, $p19, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p46, $p47, $p48, $i49, $i50, $i51, $p52, $p53, $p54, $p55, $i56, $i57, $i15, $i58, $i59);
    goto $bb5_last;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i13 := sort_cells($p12, $p1);
    call {:si_unique_call 544} {:cexpr "count"} boogie_si_record_i32($i13);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i14 := $ult.i32(0, $i13);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $i58 := list_empty($p1);
    call {:si_unique_call 561} {:cexpr "tmp___4"} boogie_si_record_i32($i58);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb32_dummy;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb9;

  $bb9:
    call $i16, $p18, $p19, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p46, $p47, $p48, $i49, $i50, $i51, $p52, $p53, $p54, $p55, $i56, $i57, $i15 := process_thin_deferred_cells_loop_$bb9($p0, $p3, $i13, $i16, $p18, $p19, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p46, $p47, $p48, $i49, $i50, $i51, $p52, $p53, $p54, $p55, $i56, $i57, $i15);
    goto $bb9_last;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 66576)), $mul.ref(1040, 1)), $mul.ref($i16, 8));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 546} {:cexpr "tmp___1"} boogie_si_record_i64($i26);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $i28 := ensure_next_mapping($p3);
    call {:si_unique_call 549} {:cexpr "tmp___3"} boogie_si_record_i32($i28);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i30, $i31 := $i13, $i15;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p19, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 128);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i51 == 1);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 66576)), $mul.ref(1008, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    call {:si_unique_call 558} devirtbounce.5($p55, $p0, $p19);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i15, 1);
    call {:si_unique_call 559} {:cexpr "i"} boogie_si_record_i32($i56);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i57 := $ult.i32($i56, $i13);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i57 == 1);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb29:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i15 := $i56;
    goto $bb29_dummy;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i51 == 1;
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 66576)), $mul.ref(1016, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    call {:si_unique_call 557} devirtbounce.5($p53, $p0, $p19);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i32 := $ult.i32($i31, $i30);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $p42 := spinlock_check($p41);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $i43 := _raw_spin_lock_irqsave($p42);
    call {:si_unique_call 554} {:cexpr "flags"} boogie_si_record_i64($i43);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(152, 1));
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} list_splice($p1, $p44);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} spin_unlock_irqrestore($p45, $i43);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    goto $bb20;

  $bb20:
    call $i34, $p36, $p37, $p38, $i39, $i40, $i33 := process_thin_deferred_cells_loop_$bb20($p1, $p3, $i30, $i34, $p36, $p37, $p38, $i39, $i40, $i33);
    goto $bb20_last;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 66576)), $mul.ref(1040, 1)), $mul.ref($i34, 8));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} list_add($p38, $p1);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i33, 1);
    call {:si_unique_call 551} {:cexpr "j"} boogie_si_record_i32($i39);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i40 := $ult.i32($i39, $i30);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i40 == 1);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb22:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i33 := $i39;
    goto $bb22_dummy;

  $bb11:
    assume $i27 == 1;
    call {:si_unique_call 547} devirtbounce.3(0, .str.30, 2155, 12);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call process_thin_deferred_cells_loop_$bb13();
    goto $bb13_last;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2241;

  $bb13_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto $bb13_dummy;

  $bb29_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2217;

  $bb32_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_2210;
}



const process_thin_deferred_bios: ref;

axiom process_thin_deferred_bios == $sub.ref(0, 394600);

procedure process_thin_deferred_bios($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.40, $M.16, $M.17, $CurrAddr, $M.25, $M.26, $M.29, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation process_thin_deferred_bios($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p22: ref;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $p2 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} bio_list_init($p1);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $p10 := spinlock_check($p9);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $i11 := _raw_spin_lock_irqsave($p10);
    call {:si_unique_call 568} {:cexpr "flags"} boogie_si_record_i64($i11);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $i13 := bio_list_empty($p12);
    call {:si_unique_call 570} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} __sort_thin_deferred_bios($p0);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} bio_list_merge($p1, $p16);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} bio_list_init($p17);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} spin_unlock_irqrestore($p18, $i11);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} blk_start_plug($p2);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $p19 := bio_list_pop($p1);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} blk_finish_plug($p2);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p22, $i23 := $p19, 0;
    goto $bb11;

  $bb11:
    call $i24, $i25, $p26, $p33, $i34, $i35, $i36, $p37, $p38, $p39, $p40, $i41, $i42, $i43, $p44, $p45, $p46, $p47, $i48, $i49, $p22, $i23 := process_thin_deferred_bios_loop_$bb11($p0, $p1, $p4, $i24, $i25, $p26, $p33, $i34, $i35, $i36, $p37, $p38, $p39, $p40, $i41, $i42, $i43, $p44, $p45, $p46, $p47, $i48, $i49, $p22, $i23);
    goto $bb11_last;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $i24 := ensure_next_mapping($p4);
    call {:si_unique_call 579} {:cexpr "tmp___2"} boogie_si_record_i32($i24);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p26 := $p22;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p22, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i35 := $and.i64($i34, 128);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i36 == 1);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 66576)), $mul.ref(992, 1));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    call {:si_unique_call 588} devirtbounce.6($p40, $p0, $p22);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i23, 1);
    call {:si_unique_call 589} {:cexpr "count"} boogie_si_record_i32($i41);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i23, 127);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $p47 := bio_list_pop($p1);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i49 == 1);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb23:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $p22, $i23 := $p47, $i41;
    goto $bb23_dummy;

  $bb20:
    assume $i43 == 1;
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 66576)), $mul.ref(104, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} throttle_work_update($p44);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} dm_pool_issue_prefetches($p46);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i36 == 1;
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 66576)), $mul.ref(1000, 1));
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    call {:si_unique_call 587} devirtbounce.6($p38, $p0, $p22);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $p28 := spinlock_check($p27);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i29 := _raw_spin_lock_irqsave($p28);
    call {:si_unique_call 582} {:cexpr "flags"} boogie_si_record_i64($i29);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} bio_list_add($p30, $p26);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} bio_list_merge($p31, $p1);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} spin_unlock_irqrestore($p32, $i29);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} spin_unlock_irqrestore($p15, $i11);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} error_thin_bio_list($p0, $p8, 2);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2320;
}



const get_next_thin: ref;

axiom get_next_thin == $sub.ref(0, 395632);

procedure get_next_thin($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation get_next_thin($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} rcu_read_lock();
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p6);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p3);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} __read_once_size($p7, $p9, 8);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p3);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.21, $p10);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $i12 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 598} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p11);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p13, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(944, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i16, $i18);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} thin_put($p1);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} rcu_read_unlock();
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} thin_get($p13);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} thin_put($p1);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} rcu_read_unlock();
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p14 := $p11;
    goto $bb3;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const bio_list_empty: ref;

axiom bio_list_empty == $sub.ref(0, 396664);

procedure bio_list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bio_list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const dm_pool_changed_this_transaction: ref;

axiom dm_pool_changed_this_transaction == $sub.ref(0, 397696);

procedure dm_pool_changed_this_transaction($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation dm_pool_changed_this_transaction($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i1;
  var $i24: i8;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p15: ref;
  var $p16: ref;
  var $i25: i8;
  var $p33: ref;
  var $i34: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} down_read($p1);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(528, 1)), $mul.ref(0, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i11, $i13);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} up_read($p33);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1($i25);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p15, $p16 := $p8, $p4;
    goto $bb4;

  $bb4:
    call $p17, $i18, $i19, $p20, $p27, $p28, $p30, $i31, $i32, $p15, $p16 := dm_pool_changed_this_transaction_loop_$bb4($i13, $p17, $i18, $i19, $p20, $p27, $p28, $p30, $i31, $i32, $p15, $p16);
    goto $bb4_last;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p20 := $p16;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, $i13);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $p15, $p16 := $p28, $p15;
    goto $bb10_dummy;

  $bb6:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 605} {:cexpr "r"} boogie_si_record_i8($i24);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2422;
}



const need_commit_due_to_time: ref;

axiom need_commit_due_to_time == $sub.ref(0, 398728);

procedure need_commit_due_to_time($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation need_commit_due_to_time($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i6: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i1 := $load.i64($M.0, jiffies);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(808, 1));
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i4 := $sub.i64($i1, $i3);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i5 := $slt.i64($i4, 0);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(808, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, jiffies);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64($i8, $i9);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 250);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i12 := $slt.i64($i11, 0);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i6 := $i12;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i6);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const commit: ref;

axiom commit == $sub.ref(0, 399760);

procedure commit($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.42, $M.4, $M.58, $M.59, $M.60, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.15, $M.16, $M.17, $M.55, $M.45, $M.18, $M.40, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation commit($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $i1 := get_pool_mode($p0);
    call {:si_unique_call 608} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i32($i1, 1);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $i6 := dm_pool_commit_metadata($p5);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 610} {:cexpr "r"} boogie_si_record_i32($i6);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} check_for_space($p0);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i3 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} metadata_operation_failed($p0, .str.38, $i6);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb3;
}



const generic_make_request: ref;

axiom generic_make_request == $sub.ref(0, 400792);

procedure generic_make_request($p0: ref);
  free requires assertsPassed;



implementation generic_make_request($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    return;
}



const dm_pool_commit_metadata: ref;

axiom dm_pool_commit_metadata == $sub.ref(0, 401824);

procedure dm_pool_commit_metadata($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.42, $M.4, $M.58, $M.59, $M.60, $CurrAddr, $M.15, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.16, $M.17, $M.40, $M.55, $M.25, $M.26, $M.29, $M.45, $M.18, $M.49, $M.47, $M.50, $M.48, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation dm_pool_commit_metadata($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i5: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} down_write($p1);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $i6 := __commit_transaction($p0);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    call {:si_unique_call 616} {:cexpr "r"} boogie_si_record_i32($i6);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i7 := $sle.i32($i6, 0);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $i8 := __begin_transaction($p0);
    call {:si_unique_call 618} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i5 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} up_write($p9);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const metadata_operation_failed: ref;

axiom metadata_operation_failed == $sub.ref(0, 402856);

procedure metadata_operation_failed($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $CurrAddr, $M.55, $M.45, $M.18, $M.15, $M.40, $M.16, $M.17, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.25, $M.26, $M.29, $M.58, $M.59, $M.60, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation metadata_operation_failed($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} {:cexpr "metadata_operation_failed:arg:r"} boogie_si_record_i32($i2);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $i3 := ___ratelimit(dm_ratelimit_state, .str.24);
    call {:si_unique_call 621} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} abort_transaction($p0);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} set_pool_mode($p0, 2);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $p7 := dm_device_name($p6);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} vslice_dummy_var_88 := printk.ref.ref.ref.i32(.str.25, $p7, $p1, $i2);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const check_for_space: ref;

axiom check_for_space == $sub.ref(0, 403888);

procedure check_for_space($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.15, $M.16, $M.17, $M.40, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation check_for_space($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i64;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $i2 := get_pool_mode($p0);
    call {:si_unique_call 628} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 1);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $i6 := dm_pool_get_free_block_count($p5, $p1);
    call {:si_unique_call 630} {:cexpr "r"} boogie_si_record_i32($i6);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p1);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} set_pool_mode($p0, 0);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dm_pool_get_free_block_count: ref;

axiom dm_pool_get_free_block_count == $sub.ref(0, 404920);

procedure dm_pool_get_free_block_count($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $CurrAddr, $M.16, $M.17, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation dm_pool_get_free_block_count($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} down_read($p2);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $i8 := dm_sm_get_nr_free($p7, $p1);
    call {:si_unique_call 634} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} up_read($p10);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const set_pool_mode: ref;

axiom set_pool_mode == $sub.ref(0, 405952);

procedure set_pool_mode($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation set_pool_mode($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i1;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} {:cexpr "set_pool_mode:arg:new_mode"} boogie_si_record_i32($i1);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(16, 1));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $i9 := dm_pool_metadata_needs_check($p8);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 638} {:cexpr "tmp"} boogie_si_record_i8($i10);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 639} {:cexpr "needs_check"} boogie_si_record_i8($i12);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $i13 := get_pool_mode($p0);
    call {:si_unique_call 641} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i14 := $M.22;
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i14, 250);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    call {:si_unique_call 642} {:cexpr "no_space_timeout"} boogie_si_record_i64($i16);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i1, 0);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i25 := $i1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i13, 3);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $i25;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i27, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i27, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i27);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 80)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i27);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    return;

  $bb18:
    assume $i30 == 1;
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i13, $i27);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} dm_pool_metadata_read_only($p35);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(992, 1));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, process_bio_fail);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(1000, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, process_bio_fail);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(1008, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, process_cell_fail);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(1016, 1));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, process_cell_fail);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(1024, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, process_prepared_mapping_fail);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(1032, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, process_prepared_discard_fail);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} error_retry_list($p0);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i33 == 1;
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} notify_of_pool_mode_change($p0, .str.10);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb16:
    assume $i29 == 1;
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i13, $i27);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} dm_pool_metadata_read_only($p44);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(992, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, process_bio_read_only);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(1000, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, process_bio_success);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(1008, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, process_cell_read_only);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(1016, 1));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, process_cell_success);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(1024, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, process_prepared_mapping_fail);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(1032, 1));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, process_prepared_discard_success);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} error_retry_list($p0);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i42 == 1;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} notify_of_pool_mode_change($p0, .str.11);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb14:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i27, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i31 == 1);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i13, $i27);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(992, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, process_bio_read_only);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(1000, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, process_discard_bio);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(1008, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p54, process_cell_read_only);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(1024, 1));
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, process_prepared_mapping);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} set_discard_callbacks($p0);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(64, 1)), $mul.ref(7, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i8.i1($i58);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb37;

  $bb37:
    assume !($i59 == 1);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i16, 0);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb38:
    assume $i60 == 1;
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(96, 1));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(584, 1));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} vslice_dummy_var_90 := queue_delayed_work($p62, $p63, $i16);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb36;

  $bb32:
    assume $i51 == 1;
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} notify_of_pool_mode_change($p0, .str.12);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb21:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i27, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb20;

  $bb23:
    assume $i32 == 1;
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i13, $i27);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} dm_pool_metadata_read_write($p67);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(992, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, process_bio);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(1000, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p69, process_discard_bio);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(1008, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, process_cell);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(1024, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p71, process_prepared_mapping);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} set_discard_callbacks($p0);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb41:
    assume $i65 == 1;
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} notify_of_pool_mode_change($p0, .str.13);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i27 := $i13;
    goto $bb12;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i12);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $p21 := dm_device_name($p20);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} vslice_dummy_var_89 := printk.ref.ref(.str.9, $p21);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i13, $i1);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := 2;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb9;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i24 := $i13;
    goto $bb8;
}



const dm_pool_metadata_needs_check: ref;

axiom dm_pool_metadata_needs_check == $sub.ref(0, 406984);

procedure dm_pool_metadata_needs_check($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation dm_pool_metadata_needs_check($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i8;
  var $p7: ref;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} down_read($p1);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(552, 1));
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, 1);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 658} {:cexpr "needs_check"} boogie_si_record_i8($i6);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} up_read($p7);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i6);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const dm_device_name: ref;

axiom dm_device_name == $sub.ref(0, 408016);

procedure dm_device_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dm_device_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $p1 := external_alloc();
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const notify_of_pool_mode_change: ref;

axiom notify_of_pool_mode_change == $sub.ref(0, 409048);

procedure notify_of_pool_mode_change($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation notify_of_pool_mode_change($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var vslice_dummy_var_91: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(16, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} dm_table_event($p5);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $p8 := dm_device_name($p7);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} vslice_dummy_var_91 := printk.ref.ref.ref(.str.14, $p8, $p1);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    return;
}



const dm_pool_metadata_read_only: ref;

axiom dm_pool_metadata_read_only == $sub.ref(0, 410080);

procedure dm_pool_metadata_read_only($p0: ref);
  free requires assertsPassed;



implementation dm_pool_metadata_read_only($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} down_write($p1);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} dm_bm_set_read_only($p3);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} up_write($p4);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    return;
}



const process_bio_fail: ref;

axiom process_bio_fail == $sub.ref(0, 411112);

procedure process_bio_fail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation process_bio_fail($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} bio_endio($p1, $sub.i32(0, 5));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    return;
}



const process_cell_fail: ref;

axiom process_cell_fail == $sub.ref(0, 412144);

procedure process_cell_fail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation process_cell_fail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} cell_error($p3, $p1);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    return;
}



const process_prepared_mapping_fail: ref;

axiom process_prepared_mapping_fail == $sub.ref(0, 413176);

procedure process_prepared_mapping_fail($p0: ref);
  free requires assertsPassed;



implementation process_prepared_mapping_fail($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} cell_error($p4, $p6);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} list_del($p7);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 66576)), $mul.ref(984, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} mempool_free($p8, $p14);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    return;
}



const process_prepared_discard_fail: ref;

axiom process_prepared_discard_fail == $sub.ref(0, 414208);

procedure process_prepared_discard_fail($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation process_prepared_discard_fail($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} bio_endio($p2, $sub.i32(0, 5));
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} free_discard_mapping($p0);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    return;
}



const error_retry_list: ref;

axiom error_retry_list == $sub.ref(0, 415240);

procedure error_retry_list($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation error_retry_list($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} rcu_read_lock();
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(944, 1)), $mul.ref(0, 1));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p7);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} __read_once_size($p8, $p10, 8);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.23, $p11);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $i13 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 681} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p12);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(944, 1));
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i16, $i18);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} rcu_read_unlock();
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p20 := $p12;
    goto $bb4;

  $bb4:
    call $p21, $p23, $p24, $p25, $p26, $p27, $p28, $p29, $i30, $p31, $p32, $i33, $i34, $p20 := error_retry_list_loop_$bb4($p3, $p4, $i18, $p21, $p23, $p24, $p25, $p26, $p27, $p28, $p29, $i30, $p31, $p32, $i33, $i34, $p20);
    goto $bb4_last;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 312)), $mul.ref(184, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} error_thin_bio_list($p20, $p21, $sub.i32(0, 5));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p24);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p3);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p4);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} __read_once_size($p25, $p27, 8);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p4);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.24, $p28);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $i30 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 685} {:cexpr "tmp___0"} boogie_si_record_i32($i30);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p29);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, $i18);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i34 == 1);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $p20 := $p29;
    goto $bb6_dummy;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2778;
}



const process_bio_read_only: ref;

axiom process_bio_read_only == $sub.ref(0, 416272);

procedure process_bio_read_only($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.15, $M.0, $M.16, $M.17, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation process_bio_read_only($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} __process_bio_read_only($p0, $p1, $0.ref);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    return;
}



const process_bio_success: ref;

axiom process_bio_success == $sub.ref(0, 417304);

procedure process_bio_success($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation process_bio_success($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} bio_endio($p1, 0);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    return;
}



const process_cell_read_only: ref;

axiom process_cell_read_only == $sub.ref(0, 418336);

procedure process_cell_read_only($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.15, $M.0, $M.16, $M.17, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation process_cell_read_only($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} __process_bio_read_only($p0, $p3, $p1);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    return;
}



const process_cell_success: ref;

axiom process_cell_success == $sub.ref(0, 419368);

procedure process_cell_success($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation process_cell_success($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} cell_success($p3, $p1);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    return;
}



const process_prepared_discard_success: ref;

axiom process_prepared_discard_success == $sub.ref(0, 420400);

procedure process_prepared_discard_success($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation process_prepared_discard_success($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} bio_endio($p2, 0);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} free_discard_mapping($p0);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    return;
}



const process_discard_bio: ref;

axiom process_discard_bio == $sub.ref(0, 421432);

procedure process_discard_bio($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.26, $M.15, $M.40, $M.16, $M.17, $CurrAddr, $M.29, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation process_discard_bio($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $p4 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} get_bio_block_range($p0, $p1, $p2, $p3);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.25, $p2);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.26, $p3);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i6, $i7);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.25, $p2);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.26, $p3);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} build_key($p10, 0, $i11, $i12, $p4);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $i15 := bio_detain($p14, $p4, $p1, $p5);
    call {:si_unique_call 701} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 66576)), $mul.ref(1016, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.14, $p5);
    call {:si_unique_call 702} devirtbounce.5($p20, $p0, $p21);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} bio_endio($p1, 0);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const process_prepared_mapping: ref;

axiom process_prepared_mapping == $sub.ref(0, 422464);

procedure process_prepared_mapping($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.51, $M.52, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $CurrAddr, $M.55, $M.45, $M.18, $M.15, $M.40, $M.16, $M.17, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.25, $M.26, $M.29, $M.58, $M.59, $M.60, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation process_prepared_mapping($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $i18 := dm_thin_insert_block($p13, $i15, $i17);
    call {:si_unique_call 707} {:cexpr "r"} boogie_si_record_i32($i18);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p6);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} inc_all_io_entry($p29, $p33);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} remap_and_issue($p2, $p37, $i39);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} inc_remap_and_issue_cell($p2, $p41, $i43);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} list_del($p44);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p0);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 66576)), $mul.ref(984, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} mempool_free($p45, $p47);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} inc_remap_and_issue_cell($p2, $p25, $i27);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} bio_endio($p6, 0);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} metadata_operation_failed($p4, .str.23, $i18);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} cell_error($p4, $p21);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} cell_error($p4, $p11);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const set_discard_callbacks: ref;

axiom set_discard_callbacks == $sub.ref(0, 423496);

procedure set_discard_callbacks($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation set_discard_callbacks($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(16, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $i6 := passdown_enabled($p5);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 716} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(1016, 1));
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, process_discard_cell_no_passdown);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(1032, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, process_prepared_discard_no_passdown);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(1016, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, process_discard_cell_passdown);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(1032, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, process_prepared_discard_passdown);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const queue_delayed_work: ref;

axiom queue_delayed_work == $sub.ref(0, 424528);

procedure queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} {:cexpr "queue_delayed_work:arg:delay"} boogie_si_record_i64($i2);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $i3 := ldv_queue_delayed_work_on_6(8192, $p0, $p1, $i2);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 719} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const dm_pool_metadata_read_write: ref;

axiom dm_pool_metadata_read_write == $sub.ref(0, 425560);

procedure dm_pool_metadata_read_write($p0: ref);
  free requires assertsPassed;



implementation dm_pool_metadata_read_write($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} down_write($p1);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} dm_bm_set_read_write($p3);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} up_write($p4);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    return;
}



const process_bio: ref;

axiom process_bio == $sub.ref(0, 426592);

procedure process_bio($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $CurrAddr, $M.16, $M.17, $M.29, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.42, $M.4, $M.58, $M.59, $M.60, $M.40, $M.25, $M.26, $M.55, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.41, $M.43, assertsPassed;



implementation process_bio($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $i6 := get_bio_block($p0, $p1);
    call {:si_unique_call 726} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} build_virtual_key($p8, $i6, $p3);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $i9 := bio_detain($p5, $p3, $p1, $p2);
    call {:si_unique_call 729} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.14, $p2);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} process_cell($p0, $p11);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const process_cell: ref;

axiom process_cell == $sub.ref(0, 427624);

procedure process_cell($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.15, $M.0, $M.16, $M.17, $M.29, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.42, $M.4, $M.58, $M.59, $M.60, $M.40, $M.25, $M.26, $M.55, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.41, $M.43, assertsPassed;



implementation process_cell($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i8;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $i34: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $i51: i64;
  var $i52: i32;
  var $p54: ref;
  var $i55: i64;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var vslice_dummy_var_92: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $i7 := get_bio_block($p0, $p6);
    call {:si_unique_call 733} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $i13 := dm_thin_find_block($p12, $i7, 1, $p2);
    call {:si_unique_call 736} {:cexpr "r"} boogie_si_record_i32($i13);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i13, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $i61 := ___ratelimit(dm_ratelimit_state, .str.32);
    call {:si_unique_call 750} {:cexpr "tmp___0"} boogie_si_record_i32($i61);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} cell_defer_no_holder($p0, $p1);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} bio_endio($p6, $sub.i32(0, 5));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb30:
    assume $i62 == 1;
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} vslice_dummy_var_92 := printk.ref.ref.i32(.str.19, .str.32, $i13);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} inc_all_io_entry($p4, $p6);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} remap_and_issue($p0, $p6, $i21);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} inc_remap_and_issue_cell($p0, $p1, $i23);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} process_shared_bio($p0, $p6, $i7, $p2, $p1);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i13, $sub.i32(0, 61));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} provision_block($p0, $p6, $i7, $p1);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i27 == 1;
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(24, 1));
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb19;

  $bb20:
    assume $i31 == 1;
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} inc_all_io_entry($p4, $p6);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} cell_defer_no_holder($p0, $p1);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i38 := $lshr.i32($i37, 9);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i38);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i34, $i39);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i43 := $ule.i64($i40, $i42);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i43 == 1);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.0, $p47);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i49 := $ult.i64($i46, $i48);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i49 == 1);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} zero_fill_bio($p6);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} bio_endio($p6, 0);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i49 == 1;
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} zero_fill_bio($p6);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i32($i51);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i64.i32($i55);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32($i52, $i56);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i58 := $shl.i32($i57, 9);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i58);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} remap_to_origin_and_issue($p0, $p6);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i43 == 1;
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} remap_to_origin_and_issue($p0, $p6);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} cell_requeue($p4, $p1);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const process_shared_bio: ref;

axiom process_shared_bio == $sub.ref(0, 428656);

procedure process_shared_bio($p0: ref, $p1: ref, $i2: i64, $p3: ref, $p4: ref);
  free requires assertsPassed;
  modifies $M.29, $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.42, $M.4, $M.58, $M.59, $M.60, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.55, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.51, $M.52, $M.41, $M.43, assertsPassed;



implementation process_shared_bio($p0: ref, $p1: ref, $i2: i64, $p3: ref, $p4: ref)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $p6 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 756} {:cexpr "process_shared_bio:arg:block"} boogie_si_record_i64($i2);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} build_data_key($p10, $i12, $p6);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i13 := bio_detain($p8, $p6, $p1, $p5);
    call {:si_unique_call 759} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 1);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $p25 := dm_per_bio_data($p1, 64);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p8, $mul.ref(0, 66576)), $mul.ref(960, 1));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $p29 := dm_deferred_entry_inc($p28);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p26, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, $p30, $p29);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} inc_all_io_entry($p8, $p1);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} remap_and_issue($p0, $p1, $i32);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.14, $p5);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} remap_and_issue_shared_cell($p0, $p33, $i35);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} remap_and_issue_shared_cell($p0, $p4, $i37);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb7;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.14, $p5);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} break_sharing($p0, $p1, $i2, $p6, $p3, $p24);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} cell_defer_no_holder($p0, $p4);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} cell_defer_no_holder($p0, $p4);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const remap_and_issue: ref;

axiom remap_and_issue == $sub.ref(0, 429688);

procedure remap_and_issue($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation remap_and_issue($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} {:cexpr "remap_and_issue:arg:block"} boogie_si_record_i64($i2);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} remap($p0, $p1, $i2);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} issue($p0, $p1);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    return;
}



const inc_remap_and_issue_cell: ref;

axiom inc_remap_and_issue_cell == $sub.ref(0, 430720);

procedure inc_remap_and_issue_cell($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation inc_remap_and_issue_cell($p0: ref, $p1: ref, $i2: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p14: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 773} {:cexpr "inc_remap_and_issue_cell:arg:block"} boogie_si_record_i64($i2);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p0);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} bio_list_init($p5);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} bio_list_init($p6);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p3);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} cell_visit_release($p8, __inc_remap_and_issue_cell, $p9, $p1);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $p11 := bio_list_pop($p10);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $p19 := bio_list_pop($p18);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p22 := $p19;
    goto $bb12;

  $bb12:
    call $p23, $p24, $p25, $i26, $i27, $p22 := inc_remap_and_issue_cell_loop_$bb12($i2, $p3, $p18, $p23, $p24, $p25, $i26, $i27, $p22);
    goto $bb12_last;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} remap_and_issue($p24, $p22, $i2);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $p25 := bio_list_pop($p18);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $p22 := $p25;
    goto $bb14_dummy;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p14 := $p11;
    goto $bb4;

  $bb4:
    call $p15, $i16, $i17, $p14 := inc_remap_and_issue_cell_loop_$bb4($p0, $p10, $p15, $i16, $i17, $p14);
    goto $bb4_last;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} thin_defer_bio($p0, $p14);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $p15 := bio_list_pop($p10);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $p14 := $p15;
    goto $bb6_dummy;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3149;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3133;
}



const remap_to_origin_and_issue: ref;

axiom remap_to_origin_and_issue == $sub.ref(0, 431752);

procedure remap_to_origin_and_issue($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation remap_to_origin_and_issue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} remap_to_origin($p0, $p1);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} issue($p0, $p1);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    return;
}



const zero_fill_bio: ref;

axiom zero_fill_bio == $sub.ref(0, 432784);

procedure zero_fill_bio($p0: ref);
  free requires assertsPassed;



implementation zero_fill_bio($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    return;
}



const provision_block: ref;

axiom provision_block == $sub.ref(0, 433816);

procedure provision_block($p0: ref, $p1: ref, $i2: i64, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.42, $M.4, $M.58, $M.59, $M.60, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.55, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.41, $M.43, assertsPassed;



implementation provision_block($p0: ref, $p1: ref, $i2: i64, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i23: i64;
  var $i24: i64;
  var $i25: i32;
  var $i26: i1;
  var vslice_dummy_var_93: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 786} {:cexpr "provision_block:arg:block"} boogie_si_record_i64($i2);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i13 := $and.i64($i12, 1);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i15 := alloc_data_block($p0, $p4);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    call {:si_unique_call 794} {:cexpr "r"} boogie_si_record_i32($i15);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i15, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $i25 := ___ratelimit(dm_ratelimit_state, .str.43);
    call {:si_unique_call 799} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} cell_error($p6, $p3);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i26 == 1;
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} vslice_dummy_var_93 := printk.ref.ref.i32(.str.34, .str.43, $i15);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(24, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i22 == 1);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p4);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} schedule_zero($p0, $i2, $i24, $p3, $p1);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i22 == 1;
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p4);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} schedule_external_copy($p0, $i2, $i23, $p3, $p1);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i15, $sub.i32(0, 28));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb13;

  $bb14:
    assume $i18 == 1;
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} retry_bios_on_resume($p6, $p3);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} zero_fill_bio($p1);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} cell_defer_no_holder($p0, $p3);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} bio_endio($p1, 0);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} inc_all_io_entry($p6, $p1);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} cell_defer_no_holder($p0, $p3);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} remap_and_issue($p0, $p1, 0);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ___ratelimit: ref;

axiom ___ratelimit == $sub.ref(0, 434848);

procedure ___ratelimit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ___ratelimit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 1} true;
    call {:si_unique_call 802} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 803} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const alloc_data_block: ref;

axiom alloc_data_block == $sub.ref(0, 435880);

procedure alloc_data_block($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.42, $M.4, $M.58, $M.59, $M.60, $M.15, $M.16, $M.17, $M.55, $M.40, $M.45, $M.18, $M.25, $M.26, $M.29, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation alloc_data_block($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $i5 := get_pool_mode($p4);
    call {:si_unique_call 806} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 807} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i7);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 809} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i7, 0);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 812} {:cexpr "tmp___1"} boogie_si_record_i64($i16);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $i21 := dm_pool_get_free_block_count($p20, $p2);
    call {:si_unique_call 814} {:cexpr "r"} boogie_si_record_i32($i21);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p2);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} check_low_water_mark($p4, $i23);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p2);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i36 := dm_pool_alloc_data_block($p35, $p1);
    call {:si_unique_call 824} {:cexpr "r"} boogie_si_record_i32($i36);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb23:
    assume $i37 == 1;
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} metadata_operation_failed($p4, .str.36, $i36);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i18 := $i36;
    goto $bb6;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $i26 := commit($p4);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    call {:si_unique_call 818} {:cexpr "r"} boogie_si_record_i32($i26);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $i30 := dm_pool_get_free_block_count($p29, $p2);
    call {:si_unique_call 820} {:cexpr "r"} boogie_si_record_i32($i30);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p2);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i33 == 1;
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} set_pool_mode($p4, 1);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 28);
    goto $bb6;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i31 == 1;
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} metadata_operation_failed($p4, .str.35, $i30);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i18 := $i30;
    goto $bb6;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i18 := $i26;
    goto $bb6;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} metadata_operation_failed($p4, .str.35, $i21);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i18 := $i21;
    goto $bb6;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} warn_slowpath_null(.str.30, 1407);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const schedule_external_copy: ref;

axiom schedule_external_copy == $sub.ref(0, 436912);

procedure schedule_external_copy($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref);
  free requires assertsPassed;
  modifies $M.0, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.51, $M.52, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.55, $M.58, $M.59, $M.60;



implementation schedule_external_copy($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} {:cexpr "schedule_external_copy:arg:virt_block"} boogie_si_record_i64($i1);
    call {:si_unique_call 827} {:cexpr "schedule_external_copy:arg:data_dest"} boogie_si_record_i64($i2);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i10 := $mul.i64($i9, $i1);
    call {:si_unique_call 828} {:cexpr "virt_block_begin"} boogie_si_record_i64($i10);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i1, 1);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i15 := $mul.i64($i11, $i14);
    call {:si_unique_call 829} {:cexpr "virt_block_end"} boogie_si_record_i64($i15);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i18 := $uge.i64($i17, $i15);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i26 := $ugt.i64($i25, $i10);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} schedule_zero($p0, $i1, $i2, $p3, $p4);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(24, 1));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i31 := $sub.i64($i30, $i10);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} schedule_copy($p0, $i1, $p28, $i1, $i2, $p3, $p4, $i31);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(24, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} schedule_copy($p0, $i1, $p20, $i1, $i2, $p3, $p4, $i23);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_205:
    assume !assertsPassed;
    return;
}



const schedule_zero: ref;

axiom schedule_zero == $sub.ref(0, 437944);

procedure schedule_zero($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.31, $M.32, $M.51, $M.52, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $CurrAddr, $M.55, $M.45, $M.18, $M.15, $M.40, $M.16, $M.17, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.25, $M.26, $M.29, $M.58, $M.59, $M.60, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation schedule_zero($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} {:cexpr "schedule_zero:arg:virt_block"} boogie_si_record_i64($i1);
    call {:si_unique_call 834} {:cexpr "schedule_zero:arg:data_block"} boogie_si_record_i64($i2);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $p7 := get_next_mapping($p6);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 88)), $mul.ref(20, 1));
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} atomic_set($p8, 1);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p0);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, $i1);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i1, 1);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, $i11);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i2);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p3);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 66576)), $mul.ref(64, 1)), $mul.ref(4, 1));
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} process_prepared_mapping($p7);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $i19 := io_overwrites_block($p6, $p4);
    call {:si_unique_call 838} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i20 == 1);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i24 := $mul.i64($i23, $i2);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i2, 1);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i29 := $mul.i64($i25, $i28);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} ll_zero($p0, $p7, $i24, $i29);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i20 == 1;
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} remap_and_issue_overwrite($p0, $p4, $i2, $p7);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const retry_bios_on_resume: ref;

axiom retry_bios_on_resume == $sub.ref(0, 438976);

procedure retry_bios_on_resume($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation retry_bios_on_resume($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $i3 := should_error_unserviceable_bio($p0);
    call {:si_unique_call 844} {:cexpr "error"} boogie_si_record_i32($i3);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} bio_list_init($p2);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} cell_release($p0, $p1, $p2);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $p5 := bio_list_pop($p2);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p8 := $p5;
    goto $bb8;

  $bb8:
    call $p9, $i10, $i11, $p8 := retry_bios_on_resume_loop_$bb8($p2, $p9, $i10, $i11, $p8);
    goto $bb8_last;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} retry_on_resume($p8);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} $p9 := bio_list_pop($p2);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $p8 := $p9;
    goto $bb10_dummy;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} cell_error_with_code($p0, $p1, $i3);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3376;
}



const cell_error: ref;

axiom cell_error == $sub.ref(0, 440008);

procedure cell_error($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation cell_error($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} cell_error_with_code($p0, $p1, $sub.i32(0, 5));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    return;
}



const should_error_unserviceable_bio: ref;

axiom should_error_unserviceable_bio == $sub.ref(0, 441040);

procedure should_error_unserviceable_bio($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation should_error_unserviceable_bio($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i10: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $i1 := get_pool_mode($p0);
    call {:si_unique_call 853} {:cexpr "tmp"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb6, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $i16 := ___ratelimit(dm_ratelimit_state, .str.20);
    call {:si_unique_call 858} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 5);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb19:
    assume $i17 == 1;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} vslice_dummy_var_95 := printk.ref(.str.22);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 5);
    goto $bb17;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i5 == 1);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(64, 1)), $mul.ref(7, 1));
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i15 := (if $i14 == 1 then $sub.i32(0, 28) else 0);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i10 := $i15;
    goto $bb17;

  $bb10:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb9;

  $bb12:
    assume $i6 == 1;
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $i7 := ___ratelimit(dm_ratelimit_state, .str.20);
    call {:si_unique_call 855} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 5);
    goto $bb17;

  $bb14:
    assume $i8 == 1;
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} vslice_dummy_var_94 := printk.ref(.str.21);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    goto $bb16;
}



const cell_release: ref;

axiom cell_release == $sub.ref(0, 442072);

procedure cell_release($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation cell_release($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(80, 1));
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} dm_cell_release($p4, $p1, $p2);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(80, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} dm_bio_prison_free_cell($p6, $p1);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    return;
}



const retry_on_resume: ref;

axiom retry_on_resume == $sub.ref(0, 443104);

procedure retry_on_resume($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation retry_on_resume($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $p1 := dm_per_bio_data($p0, 64);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $p6 := spinlock_check($p5);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $i7 := _raw_spin_lock_irqsave($p6);
    call {:si_unique_call 865} {:cexpr "flags"} boogie_si_record_i64($i7);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 312)), $mul.ref(184, 1));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} bio_list_add($p8, $p0);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} spin_unlock_irqrestore($p9, $i7);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    return;
}



const dm_cell_release: ref;

axiom dm_cell_release == $sub.ref(0, 444136);

procedure dm_cell_release($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation dm_cell_release($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    return;
}



const get_next_mapping: ref;

axiom get_next_mapping == $sub.ref(0, 445168);

procedure get_next_mapping($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation get_next_mapping($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(976, 1));
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(976, 1));
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 869} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 871} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p11, 0, 88, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} INIT_LIST_HEAD($p12);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $0.ref);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(976, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $0.ref);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 870} devirtbounce.3(0, .str.30, 1171, 12);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call get_next_mapping_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 446200);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    return;
}



const io_overwrites_block: ref;

axiom io_overwrites_block == $sub.ref(0, 447232);

procedure io_overwrites_block($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation io_overwrites_block($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $i7 := io_overlaps_block($p0, $p1);
    call {:si_unique_call 875} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb6;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb5;
}



const remap_and_issue_overwrite: ref;

axiom remap_and_issue_overwrite == $sub.ref(0, 448264);

procedure remap_and_issue_overwrite($p0: ref, $p1: ref, $i2: i64, $p3: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation remap_and_issue_overwrite($p0: ref, $p1: ref, $i2: i64, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} {:cexpr "remap_and_issue_overwrite:arg:data_begin"} boogie_si_record_i64($i2);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $p6 := dm_per_bio_data($p1, 64);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p3);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p1);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} save_and_set_endio($p1, $p10, overwrite_endio);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} inc_all_io_entry($p5, $p1);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} remap_and_issue($p0, $p1, $i2);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    return;
}



const ll_zero: ref;

axiom ll_zero == $sub.ref(0, 449296);

procedure ll_zero($p0: ref, $p1: ref, $i2: i64, $i3: i64);
  free requires assertsPassed;
  modifies $M.30, $M.31, $M.32, $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation ll_zero($p0: ref, $p1: ref, $i2: i64, $i3: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var vslice_dummy_var_96: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $p4 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 882} {:cexpr "ll_zero:arg:begin"} boogie_si_record_i64($i2);
    call {:si_unique_call 883} {:cexpr "ll_zero:arg:end"} boogie_si_record_i64($i3);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, $p9, $p8);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $M.31 := $store.i64($M.31, $p10, $i2);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64($i3, $i2);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $M.32 := $store.i64($M.32, $p12, $i11);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 66576)), $mul.ref(88, 1));
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p1);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $i18 := dm_kcopyd_zero($p16, 1, $p4, 0, copy_complete, $p17);
    call {:si_unique_call 885} {:cexpr "r"} boogie_si_record_i32($i18);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $i20 := ___ratelimit(dm_ratelimit_state, .str.41);
    call {:si_unique_call 887} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} copy_complete(1, 1, $p23);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i21 == 1;
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} vslice_dummy_var_96 := printk.ref(.str.42);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const copy_complete: ref;

axiom copy_complete == $sub.ref(0, 450328);

procedure copy_complete($i0: i32, $i1: i64, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation copy_complete($i0: i32, $i1: i64, $p2: ref)
{
  var $p3: ref;
  var $i4: i1;
  var $i6: i1;
  var $i5: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} {:cexpr "copy_complete:arg:read_err"} boogie_si_record_i32($i0);
    call {:si_unique_call 891} {:cexpr "copy_complete:arg:write_err"} boogie_si_record_i64($i1);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i0, 0);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i5 := 1;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i1, 0);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i7 := (if $i5 == 1 then $sub.i32(0, 5) else 0);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} complete_mapping_preparation($p3);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const dm_kcopyd_zero: ref;

axiom dm_kcopyd_zero == $sub.ref(0, 451360);

procedure dm_kcopyd_zero($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_kcopyd_zero($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 893} {:cexpr "dm_kcopyd_zero:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 894} {:cexpr "dm_kcopyd_zero:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 1} true;
    call {:si_unique_call 895} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 896} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const complete_mapping_preparation: ref;

axiom complete_mapping_preparation == $sub.ref(0, 452392);

procedure complete_mapping_preparation($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation complete_mapping_preparation($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $p6 := spinlock_check($p5);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $i7 := _raw_spin_lock_irqsave($p6);
    call {:si_unique_call 899} {:cexpr "flags"} boogie_si_record_i64($i7);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} __complete_mapping_preparation($p0);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} spin_unlock_irqrestore($p8, $i7);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    return;
}



const overwrite_endio: ref;

axiom overwrite_endio == $sub.ref(0, 453424);

procedure overwrite_endio($p0: ref, $i1: i32);



const save_and_set_endio: ref;

axiom save_and_set_endio == $sub.ref(0, 454456);

procedure save_and_set_endio($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation save_and_set_endio($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(72, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p4);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(72, 1));
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p2);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    return;
}



const io_overlaps_block: ref;

axiom io_overlaps_block == $sub.ref(0, 455488);

procedure io_overlaps_block($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation io_overlaps_block($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i6, 9);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i4, $i7);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 456520);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const schedule_copy: ref;

axiom schedule_copy == $sub.ref(0, 457552);

procedure schedule_copy($p0: ref, $i1: i64, $p2: ref, $i3: i64, $i4: i64, $p5: ref, $p6: ref, $i7: i64);
  free requires assertsPassed;
  modifies $M.0, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation schedule_copy($p0: ref, $i1: i64, $p2: ref, $i3: i64, $i4: i64, $p5: ref, $p6: ref, $i7: i64)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $i59: i1;
  var $p61: ref;
  var $i62: i8;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $i72: i32;
  var $i73: i64;
  var $i74: i64;
  var vslice_dummy_var_97: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $p8 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $p9 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 904} {:cexpr "schedule_copy:arg:virt_block"} boogie_si_record_i64($i1);
    call {:si_unique_call 905} {:cexpr "schedule_copy:arg:data_origin"} boogie_si_record_i64($i3);
    call {:si_unique_call 906} {:cexpr "schedule_copy:arg:data_dest"} boogie_si_record_i64($i4);
    call {:si_unique_call 907} {:cexpr "schedule_copy:arg:len"} boogie_si_record_i64($i7);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $p12 := get_next_mapping($p11);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p0);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p12, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, $i1);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i1, 1);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p12, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p16, $i15);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p12, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p17, $i4);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p5);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p12, $mul.ref(0, 88)), $mul.ref(20, 1));
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} atomic_set($p19, 3);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p11, $mul.ref(0, 66576)), $mul.ref(960, 1));
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p12, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $i23 := dm_deferred_set_add_work($p21, $p22);
    call {:si_unique_call 911} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $i25 := io_overwrites_block($p11, $p6);
    call {:si_unique_call 914} {:cexpr "tmp___2"} boogie_si_record_i32($i25);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $M.33 := $store.ref($M.33, $p29, $p28);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p11, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i33 := $mul.i64($i32, $i3);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $M.34 := $store.i64($M.34, $p34, $i33);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $M.35 := $store.i64($M.35, $p35, $i7);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p9, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p40, $p39);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p11, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i44 := $mul.i64($i43, $i4);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p9, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $M.37 := $store.i64($M.37, $p45, $i44);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p9, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $M.38 := $store.i64($M.38, $p46, $i7);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p11, $mul.ref(0, 66576)), $mul.ref(88, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p12);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} $i50 := dm_kcopyd_copy($p48, $p8, 1, $p9, 0, copy_complete, $p49);
    call {:si_unique_call 917} {:cexpr "r"} boogie_si_record_i32($i50);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, 0);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p11, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i57);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i59 := $ugt.i64($i58, $i7);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} complete_mapping_preparation($p12);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i59 == 1;
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 66576)), $mul.ref(64, 1)), $mul.ref(4, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i8.i1($i62);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb15;

  $bb16:
    assume $i63 == 1;
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p12, $mul.ref(0, 88)), $mul.ref(20, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} atomic_inc($p64);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p11, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i67 := $zext.i32.i64($i66);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i68 := $mul.i64($i67, $i4);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i69 := $add.i64($i68, $i7);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i4, 1);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p11, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i73 := $zext.i32.i64($i72);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i74 := $mul.i64($i70, $i73);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} ll_zero($p0, $p12, $i69, $i74);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i51 == 1;
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $i52 := ___ratelimit(dm_ratelimit_state, .str.39);
    call {:si_unique_call 920} {:cexpr "tmp___1"} boogie_si_record_i32($i52);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p12);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} copy_complete(1, 1, $p55);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i53 == 1;
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} vslice_dummy_var_97 := printk.ref(.str.40);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} remap_and_issue_overwrite($p0, $p6, $i4, $p12);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} complete_mapping_preparation($p12);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dm_deferred_set_add_work: ref;

axiom dm_deferred_set_add_work == $sub.ref(0, 458584);

procedure dm_deferred_set_add_work($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_deferred_set_add_work($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 1} true;
    call {:si_unique_call 925} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 926} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dm_kcopyd_copy: ref;

axiom dm_kcopyd_copy == $sub.ref(0, 459616);

procedure dm_kcopyd_copy($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_kcopyd_copy($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $i7: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 927} {:cexpr "dm_kcopyd_copy:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 928} {:cexpr "dm_kcopyd_copy:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 1} true;
    call {:si_unique_call 929} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 930} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 460648);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 931} devirtbounce.7(0, $p1, $p1);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 461680);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    return;
}



const check_low_water_mark: ref;

axiom check_low_water_mark == $sub.ref(0, 462712);

procedure check_low_water_mark($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation check_low_water_mark($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} {:cexpr "check_low_water_mark:arg:free_blocks"} boogie_si_record_i64($i1);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(48, 1));
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i4 := $uge.i64($i3, $i1);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(72, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $p10 := dm_device_name($p9);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} vslice_dummy_var_98 := printk.ref.ref(.str.37, $p10);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $p13 := spinlock_check($p12);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $i14 := _raw_spin_lock_irqsave($p13);
    call {:si_unique_call 938} {:cexpr "flags"} boogie_si_record_i64($i14);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(72, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 1);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} spin_unlock_irqrestore($p16, $i14);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(16, 1));
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} dm_table_event($p20);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb3;
}



const dm_pool_alloc_data_block: ref;

axiom dm_pool_alloc_data_block == $sub.ref(0, 463744);

procedure dm_pool_alloc_data_block($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $CurrAddr, $M.16, $M.17, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation dm_pool_alloc_data_block($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} down_write($p2);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $i8 := dm_sm_new_block($p7, $p1);
    call {:si_unique_call 943} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} up_write($p10);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const dm_sm_new_block: ref;

axiom dm_sm_new_block == $sub.ref(0, 464776);

procedure dm_sm_new_block($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $CurrAddr, $M.16, $M.17, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation dm_sm_new_block($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    call {:si_unique_call 945} $i4 := devirtbounce.8($p3, $p0, $p1);
    call {:si_unique_call 946} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dm_table_event: ref;

axiom dm_table_event == $sub.ref(0, 465808);

procedure dm_table_event($p0: ref);
  free requires assertsPassed;



implementation dm_table_event($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    return;
}



const remap_to_origin: ref;

axiom remap_to_origin == $sub.ref(0, 466840);

procedure remap_to_origin($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation remap_to_origin($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(24, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p5);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    return;
}



const issue: ref;

axiom issue == $sub.ref(0, 467872);

procedure issue($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation issue($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $i4 := bio_triggers_commit($p0, $p1);
    call {:si_unique_call 948} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $i8 := dm_thin_aborted_changes($p7);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 951} {:cexpr "tmp___0"} boogie_si_record_i8($i9);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $p12 := spinlock_check($p11);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $i13 := _raw_spin_lock_irqsave($p12);
    call {:si_unique_call 955} {:cexpr "flags"} boogie_si_record_i64($i13);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 66576)), $mul.ref(896, 1));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} bio_list_add($p14, $p1);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} spin_unlock_irqrestore($p15, $i13);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} bio_endio($p1, $sub.i32(0, 5));
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} generic_make_request($p1);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bio_triggers_commit: ref;

axiom bio_triggers_commit == $sub.ref(0, 468904);

procedure bio_triggers_commit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bio_triggers_commit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, 12288);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} $i8 := dm_thin_changed_this_transaction($p7);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 959} {:cexpr "tmp"} boogie_si_record_i8($i9);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb6;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb5;
}



const dm_thin_aborted_changes: ref;

axiom dm_thin_aborted_changes == $sub.ref(0, 469936);

procedure dm_thin_aborted_changes($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation dm_thin_aborted_changes($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} down_read($p3);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(37, 1));
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 961} {:cexpr "r"} boogie_si_record_i8($i7);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} up_read($p10);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i7);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const dm_thin_changed_this_transaction: ref;

axiom dm_thin_changed_this_transaction == $sub.ref(0, 470968);

procedure dm_thin_changed_this_transaction($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation dm_thin_changed_this_transaction($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} down_read($p3);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 964} {:cexpr "r"} boogie_si_record_i32($i7);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} up_read($p10);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i7, 0);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const __inc_remap_and_issue_cell: ref;

axiom __inc_remap_and_issue_cell == $sub.ref(0, 472000);

procedure __inc_remap_and_issue_cell($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __inc_remap_and_issue_cell($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $p4 := bio_list_pop($p3);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p7 := $p4;
    goto $bb4;

  $bb4:
    call $p8, $i9, $i10, $i11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $i19, $i20, $p7 := __inc_remap_and_issue_cell_loop_$bb4($p2, $p3, $p8, $i9, $i10, $i11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $i19, $i20, $p7);
    goto $bb4_last;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i10 := $and.i64($i9, 12416);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} inc_all_io_entry($p16, $p7);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} bio_list_add($p17, $p7);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $p18 := bio_list_pop($p3);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $p7 := $p18;
    goto $bb9_dummy;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} bio_list_add($p12, $p7);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3823;
}



const cell_visit_release: ref;

axiom cell_visit_release == $sub.ref(0, 473032);

procedure cell_visit_release($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation cell_visit_release($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(80, 1));
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} dm_cell_visit_release($p5, $p1, $p2, $p3);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(80, 1));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} dm_bio_prison_free_cell($p7, $p3);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    return;
}



const dm_cell_visit_release: ref;

axiom dm_cell_visit_release == $sub.ref(0, 474064);

procedure dm_cell_visit_release($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation dm_cell_visit_release($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    return;
}



const break_sharing: ref;

axiom break_sharing == $sub.ref(0, 475096);

procedure break_sharing($p0: ref, $p1: ref, $i2: i64, $p3: ref, $p4: ref, $p5: ref);
  free requires assertsPassed;
  modifies $M.0, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.42, $M.4, $M.58, $M.59, $M.60, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.55, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.51, $M.52, $M.41, $M.43, assertsPassed;



implementation break_sharing($p0: ref, $p1: ref, $i2: i64, $p3: ref, $p4: ref, $p5: ref)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i32;
  var $i17: i1;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 974} {:cexpr "break_sharing:arg:block"} boogie_si_record_i64($i2);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $i9 := alloc_data_block($p0, $p6);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    call {:si_unique_call 976} {:cexpr "r"} boogie_si_record_i32($i9);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i9, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $i16 := ___ratelimit(dm_ratelimit_state, .str.33);
    call {:si_unique_call 980} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} cell_error($p8, $p5);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} vslice_dummy_var_99 := printk.ref.ref.i32(.str.34, .str.33, $i9);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p6);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} schedule_internal_copy($p0, $i2, $i14, $i15, $p5, $p1);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i9, $sub.i32(0, 28));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} retry_bios_on_resume($p8, $p5);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_223:
    assume !assertsPassed;
    return;
}



const remap_and_issue_shared_cell: ref;

axiom remap_and_issue_shared_cell == $sub.ref(0, 476128);

procedure remap_and_issue_shared_cell($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation remap_and_issue_shared_cell($p0: ref, $p1: ref, $i2: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p14: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 984} {:cexpr "remap_and_issue_shared_cell:arg:block"} boogie_si_record_i64($i2);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p0);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} bio_list_init($p5);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} bio_list_init($p6);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p3);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} cell_visit_release($p8, __remap_and_issue_shared_cell, $p9, $p1);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} $p11 := bio_list_pop($p10);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $p19 := bio_list_pop($p18);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p22 := $p19;
    goto $bb12;

  $bb12:
    call $p23, $i24, $i25, $p22 := remap_and_issue_shared_cell_loop_$bb12($p0, $i2, $p18, $p23, $i24, $i25, $p22);
    goto $bb12_last;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} remap_and_issue($p0, $p22, $i2);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $p23 := bio_list_pop($p18);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i25 == 1);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $p22 := $p23;
    goto $bb14_dummy;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p14 := $p11;
    goto $bb4;

  $bb4:
    call $p15, $i16, $i17, $p14 := remap_and_issue_shared_cell_loop_$bb4($p0, $p10, $p15, $i16, $i17, $p14);
    goto $bb4_last;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} thin_defer_bio($p0, $p14);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $p15 := bio_list_pop($p10);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $p14 := $p15;
    goto $bb6_dummy;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3913;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3897;
}



const __remap_and_issue_shared_cell: ref;

axiom __remap_and_issue_shared_cell == $sub.ref(0, 477160);

procedure __remap_and_issue_shared_cell($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __remap_and_issue_shared_cell($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $p4 := bio_list_pop($p3);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p7 := $p4;
    goto $bb4;

  $bb4:
    call $p8, $i9, $i10, $i11, $i12, $p13, $i14, $i15, $i16, $p17, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $p25, $p26, $p27, $p28, $p29, $p30, $p31, $p32, $p33, $i34, $i35, $p7 := __remap_and_issue_shared_cell_loop_$bb4($p2, $p3, $p8, $i9, $i10, $i11, $i12, $p13, $i14, $i15, $i16, $p17, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $p25, $p26, $p27, $p28, $p29, $p30, $p31, $p32, $p33, $i34, $i35, $p7);
    goto $bb4_last;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i12 == 1);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 12416);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} $p18 := dm_per_bio_data($p7, 64);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 66576)), $mul.ref(960, 1));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $p26 := dm_deferred_entry_inc($p25);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p19, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p26);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} inc_all_io_entry($p31, $p7);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} bio_list_add($p32, $p7);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $p33 := bio_list_pop($p3);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i35 == 1);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $p7 := $p33;
    goto $bb12_dummy;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} bio_list_add($p17, $p7);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb7;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3931;
}



const schedule_internal_copy: ref;

axiom schedule_internal_copy == $sub.ref(0, 478192);

procedure schedule_internal_copy($p0: ref, $i1: i64, $i2: i64, $i3: i64, $p4: ref, $p5: ref);
  free requires assertsPassed;
  modifies $M.0, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation schedule_internal_copy($p0: ref, $i1: i64, $i2: i64, $i3: i64, $p4: ref, $p5: ref)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} {:cexpr "schedule_internal_copy:arg:virt_block"} boogie_si_record_i64($i1);
    call {:si_unique_call 1002} {:cexpr "schedule_internal_copy:arg:data_origin"} boogie_si_record_i64($i2);
    call {:si_unique_call 1003} {:cexpr "schedule_internal_copy:arg:data_dest"} boogie_si_record_i64($i3);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} schedule_copy($p0, $i1, $p7, $i2, $i3, $p4, $p5, $i12);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;
}



const dm_bm_set_read_write: ref;

axiom dm_bm_set_read_write == $sub.ref(0, 479224);

procedure dm_bm_set_read_write($p0: ref);
  free requires assertsPassed;



implementation dm_bm_set_read_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    return;
}



const ldv_queue_delayed_work_on_6: ref;

axiom ldv_queue_delayed_work_on_6 == $sub.ref(0, 480256);

procedure ldv_queue_delayed_work_on_6($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation ldv_queue_delayed_work_on_6($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i8;
  var $p8: ref;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} {:cexpr "ldv_queue_delayed_work_on_6:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 1006} {:cexpr "ldv_queue_delayed_work_on_6:arg:ldv_func_arg4"} boogie_si_record_i64($i3);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} $i4 := queue_delayed_work_on($i0, $p1, $p2, $i3);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 1008} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 1009} {:cexpr "ldv_func_res"} boogie_si_record_i8($i7);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} activate_work_1($p8, 2);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i7);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const queue_delayed_work_on: ref;

axiom queue_delayed_work_on == $sub.ref(0, 481288);

procedure queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1011} {:cexpr "queue_delayed_work_on:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1012} {:cexpr "queue_delayed_work_on:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1013} $i4 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1014} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i4);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const passdown_enabled: ref;

axiom passdown_enabled == $sub.ref(0, 482320);

procedure passdown_enabled($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation passdown_enabled($p0: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(72, 1)), $mul.ref(6, 1));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const process_discard_cell_passdown: ref;

axiom process_discard_cell_passdown == $sub.ref(0, 483352);

procedure process_discard_cell_passdown($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.40, $M.0, $M.15, $M.49, $M.47, $M.50, $M.48, $CurrAddr, $M.16, $M.17, $M.45, $M.18, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.25, $M.26, $M.29, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.55;



implementation process_discard_cell_passdown($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} $p4 := dm_per_bio_data($p3, 64);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $M.40 := $store.ref($M.40, $p6, $p1);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} break_up_discard_bio($p0, $i9, $i12, $p3);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} bio_endio($p3, 0);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;
}



const process_prepared_discard_passdown: ref;

axiom process_prepared_discard_passdown == $sub.ref(0, 484384);

procedure process_prepared_discard_passdown($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.45, $M.41, $M.42, $M.43, $M.4, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $CurrAddr, $M.55, $M.18, $M.15, $M.40, $M.16, $M.17, $M.51, $M.52, assertsPassed, $M.25, $M.26, $M.29, $M.58, $M.59, $M.60, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation process_prepared_discard_passdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i18: i32;
  var $i13: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $i11 := dm_thin_remove_range($p6, $i8, $i10);
    call {:si_unique_call 1019} {:cexpr "r"} boogie_si_record_i32($i11);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(17, 1));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i27 := $sub.i64($i24, $i26);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i22, $i27);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $i31 := issue_discard($p2, $i20, $i28, $p30);
    call {:si_unique_call 1027} {:cexpr "r"} boogie_si_record_i32($i31);
    assume {:verifier.code 0} true;
    $i18 := $i31;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i13 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} bio_endio($p33, $i13);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} cell_defer_no_holder($p2, $p35);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p0);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 66576)), $mul.ref(984, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} mempool_free($p36, $p38);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} $i17 := passdown_double_checking_shared_status($p0);
    call {:si_unique_call 1025} {:cexpr "r"} boogie_si_record_i32($i17);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} metadata_operation_failed($p4, .str.31, $i11);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb3;

  SeqInstr_235:
    assume !assertsPassed;
    return;
}



const process_discard_cell_no_passdown: ref;

axiom process_discard_cell_no_passdown == $sub.ref(0, 485416);

procedure process_discard_cell_no_passdown($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.45, $M.18, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.58, $M.59, $M.60, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.55, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation process_discard_cell_no_passdown($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} $p4 := get_next_mapping($p3);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p0);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, $i8);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i12);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p1);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p16);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 66576)), $mul.ref(968, 1));
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $i21 := dm_deferred_set_add_work($p19, $p20);
    call {:si_unique_call 1030} {:cexpr "tmp___0"} boogie_si_record_i32($i21);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 66576)), $mul.ref(1032, 1));
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 1031} devirtbounce.9($p24, $p4);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_238:
    assume !assertsPassed;
    return;
}



const process_prepared_discard_no_passdown: ref;

axiom process_prepared_discard_no_passdown == $sub.ref(0, 486448);

procedure process_prepared_discard_no_passdown($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.42, $M.43, $M.4, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $CurrAddr, $M.55, $M.45, $M.18, $M.15, $M.40, $M.16, $M.17, $M.51, $M.52, assertsPassed, $M.25, $M.26, $M.29, $M.58, $M.59, $M.60, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation process_prepared_discard_no_passdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 96)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} $i15 := dm_thin_remove_range($p4, $i9, $i14);
    call {:si_unique_call 1033} {:cexpr "r"} boogie_si_record_i32($i15);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} bio_endio($p22, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} cell_defer_no_holder($p2, $p24);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p0);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 66576)), $mul.ref(984, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} mempool_free($p25, $p29);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} metadata_operation_failed($p18, .str.31, $i15);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} bio_endio($p20, $sub.i32(0, 5));
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_241:
    assume !assertsPassed;
    return;
}



const dm_thin_remove_range: ref;

axiom dm_thin_remove_range == $sub.ref(0, 487480);

procedure dm_thin_remove_range($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.42, $M.43, $M.0, $M.4, $CurrAddr;



implementation dm_thin_remove_range($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} {:cexpr "dm_thin_remove_range:arg:begin"} boogie_si_record_i64($i1);
    call {:si_unique_call 1040} {:cexpr "dm_thin_remove_range:arg:end"} boogie_si_record_i64($i2);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} down_write($p5);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $i11 := __remove_range($p0, $i1, $i2);
    call {:si_unique_call 1043} {:cexpr "r"} boogie_si_record_i32($i11);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} up_write($p15);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;
}



const __remove_range: ref;

axiom __remove_range == $sub.ref(0, 488512);

procedure __remove_range($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.42, $M.43, $M.0, $M.4, $CurrAddr;



implementation __remove_range($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i64;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i64;
  var $i38: i32;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.41 := $store.i64($M.41, $p3, $i1);
    call {:si_unique_call 1050} {:cexpr "__remove_range:arg:end"} boogie_si_record_i64($i2);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 8));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $M.42 := $store.i64($M.42, $p12, $i11);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref(0, 832)), $mul.ref(176, 1));
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p9, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p5);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p6);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i18 := dm_btree_lookup($p13, $i15, $p16, $p17);
    call {:si_unique_call 1052} {:cexpr "r"} boogie_si_record_i32($i18);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.4, $p6);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $M.43 := $store.i64($M.43, $p7, $i21);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p9, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.43, $p7);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} dm_tm_inc($p23, $i24);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p9, $mul.ref(0, 832)), $mul.ref(176, 1));
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p9, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p5);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p9, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $i30 := dm_btree_remove($p25, $i27, $p28, $p29);
    call {:si_unique_call 1055} {:cexpr "r"} boogie_si_record_i32($i30);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p9, $mul.ref(0, 832)), $mul.ref(232, 1));
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.43, $p7);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $i34 := dm_btree_remove_leaves($p32, $i33, $p3, $i2, $p7, $p4);
    call {:si_unique_call 1057} {:cexpr "r"} boogie_si_record_i32($i34);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.44, $p4);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i38);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i40 := $sub.i64($i37, $i39);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p41, $i40);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 1);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.43, $p7);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $M.4 := $store.i64($M.4, $p6, $i43);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p9, $mul.ref(0, 832)), $mul.ref(176, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p9, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p5);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p6);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p9, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $i50 := dm_btree_insert($p44, $i46, $p47, $p48, $p49);
    call {:si_unique_call 1059} {:cexpr "tmp"} boogie_si_record_i32($i50);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i20 := $i50;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb8:
    assume $i35 == 1;
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i20 := $i34;
    goto $bb3;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i20 := $i30;
    goto $bb3;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    goto $bb3;
}



const dm_tm_inc: ref;

axiom dm_tm_inc == $sub.ref(0, 489544);

procedure dm_tm_inc($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation dm_tm_inc($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} {:cexpr "dm_tm_inc:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    return;
}



const dm_btree_remove: ref;

axiom dm_btree_remove == $sub.ref(0, 490576);

procedure dm_btree_remove($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_btree_remove($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1061} {:cexpr "dm_btree_remove:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1062} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1063} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dm_btree_remove_leaves: ref;

axiom dm_btree_remove_leaves == $sub.ref(0, 491608);

procedure dm_btree_remove_leaves($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_btree_remove_leaves($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1064} {:cexpr "dm_btree_remove_leaves:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1065} {:cexpr "dm_btree_remove_leaves:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1066} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1067} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const dm_btree_insert: ref;

axiom dm_btree_insert == $sub.ref(0, 492640);

procedure dm_btree_insert($p0: ref, $i1: i64, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_btree_insert($p0: ref, $i1: i64, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1068} {:cexpr "dm_btree_insert:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1069} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1070} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const passdown_double_checking_shared_status: ref;

axiom passdown_double_checking_shared_status == $sub.ref(0, 493672);

procedure passdown_double_checking_shared_status($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.45, $CurrAddr, $M.0;



implementation passdown_double_checking_shared_status($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i18: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i27: i8;
  var $i28: i1;
  var $i29: i64;
  var $i31: i64;
  var $i32: i1;
  var $i20: i64;
  var $i33: i64;
  var $i19: i64;
  var $i30: i64;
  var $i34: i1;
  var $i35: i64;
  var $i36: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i8;
  var $i45: i1;
  var $i46: i64;
  var $i48: i64;
  var $i49: i1;
  var $i38: i64;
  var $i50: i64;
  var $i37: i64;
  var $i47: i64;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $i17: i64;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $M.45 := $store.i8($M.45, $p1, 1);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    call {:si_unique_call 1072} {:cexpr "b"} boogie_si_record_i64($i7);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i9, $i11);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i15 := $sub.i64($i12, $i14);
    call {:si_unique_call 1073} {:cexpr "end"} boogie_si_record_i64($i15);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i7, $i15);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i17 := $i7;
    goto $bb4;

  $bb4:
    call $i18, $p21, $p22, $i23, $i24, $i25, $i27, $i28, $i29, $i31, $i32, $i20, $i33, $i19, $i30, $i34, $i35, $i36, $p39, $p40, $i41, $i42, $i43, $i44, $i45, $i46, $i48, $i49, $i38, $i50, $i37, $i47, $p51, $p52, $i53, $i54, $i55, $i56, $i17 := passdown_double_checking_shared_status_loop_$bb4($p0, $p1, $p3, $p5, $i15, $i18, $p21, $p22, $i23, $i24, $i25, $i27, $i28, $i29, $i31, $i32, $i20, $i33, $i19, $i30, $i34, $i35, $i36, $p39, $p40, $i41, $i42, $i43, $i44, $i45, $i46, $i48, $i49, $i38, $i50, $i37, $i47, $p51, $p52, $i53, $i54, $i55, $i56, $i17);
    goto $bb4_last;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ult.i64($i17, $i15);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i30 := $i19;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i30, $i15);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i30, 1);
    call {:si_unique_call 1077} {:cexpr "e"} boogie_si_record_i64($i35);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, $i15);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i37 := $i35;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i47 := $i37;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $i53 := issue_discard($p3, $i30, $i47, $p52);
    call {:si_unique_call 1081} {:cexpr "r"} boogie_si_record_i32($i53);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i55 := $i53;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i47, $i15);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i56 == 1);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb44:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i17 := $i47;
    goto $bb44_dummy;

  $bb41:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i26 := $i55;
    goto $bb13;

  $bb26:
    assume $i36 == 1;
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i38 := $i35;
    goto $bb29;

  $bb29:
    call $p39, $p40, $i41, $i42, $i43, $i44, $i45, $i46, $i48, $i49, $i38, $i50 := passdown_double_checking_shared_status_loop_$bb29($p1, $p5, $i15, $p39, $p40, $i41, $i42, $i43, $i44, $i45, $i46, $i48, $i49, $i38, $i50);
    goto $bb29_last;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i41 := dm_pool_block_is_used($p40, $i38, $p1);
    call {:si_unique_call 1079} {:cexpr "r"} boogie_si_record_i32($i41);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i43 := $i41;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.45, $p1);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i8.i1($i44);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i46 := $i38;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i38, 1);
    call {:si_unique_call 1082} {:cexpr "e"} boogie_si_record_i64($i48);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, $i15);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i50 := $i48;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i37 := $i50;
    goto $bb28;

  $bb38:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i38 := $i48;
    goto $bb38_dummy;

  $bb34:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb36;

  $bb31:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i26 := $i43;
    goto $bb13;

  $bb22:
    assume $i34 == 1;
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i20 := $i17;
    goto $bb9;

  $bb9:
    call $p21, $p22, $i23, $i24, $i25, $i27, $i28, $i29, $i31, $i32, $i20, $i33 := passdown_double_checking_shared_status_loop_$bb9($p1, $p5, $i15, $p21, $p22, $i23, $i24, $i25, $i27, $i28, $i29, $i31, $i32, $i20, $i33);
    goto $bb9_last;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $i23 := dm_pool_block_is_used($p22, $i20, $p1);
    call {:si_unique_call 1075} {:cexpr "r"} boogie_si_record_i32($i23);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i25 := $i23;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.45, $p1);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i29 := $i20;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb17;

  $bb15:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i20, 1);
    call {:si_unique_call 1076} {:cexpr "b"} boogie_si_record_i64($i31);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i32 := $ult.i64($i31, $i15);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i19 := $i33;
    goto $bb8;

  $bb19:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i20 := $i31;
    goto $bb19_dummy;

  $bb11:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb13;

  $bb38_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4284;

  $bb19_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4253;

  $bb44_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4247;
}



const issue_discard: ref;

axiom issue_discard == $sub.ref(0, 494704);

procedure issue_discard($p0: ref, $i1: i64, $i2: i64, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation issue_discard($p0: ref, $i1: i64, $i2: i64, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} {:cexpr "issue_discard:arg:data_b"} boogie_si_record_i64($i1);
    call {:si_unique_call 1084} {:cexpr "issue_discard:arg:data_e"} boogie_si_record_i64($i2);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} $i6 := block_to_sectors($p5, $i1);
    call {:si_unique_call 1086} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64($i2, $i1);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $i10 := block_to_sectors($p8, $i9);
    call {:si_unique_call 1088} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(16, 1));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} $i15 := __blkdev_issue_discard_async($p14, $i6, $i10, 0, 0, $p3);
    call {:si_unique_call 1090} {:cexpr "tmp___1"} boogie_si_record_i32($i15);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const block_to_sectors: ref;

axiom block_to_sectors == $sub.ref(0, 495736);

procedure block_to_sectors($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation block_to_sectors($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} {:cexpr "block_to_sectors:arg:b"} boogie_si_record_i64($i1);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $i2 := block_size_is_power_of_two($p0);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1093} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i13 := $mul.i64($i12, $i1);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i9 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(60, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i8 := $shl.i64($i1, $i7);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;
}



const __blkdev_issue_discard_async: ref;

axiom __blkdev_issue_discard_async == $sub.ref(0, 496768);

procedure __blkdev_issue_discard_async($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i64, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __blkdev_issue_discard_async($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i64, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $i53: i64;
  var $i54: i1;
  var $i55: i64;
  var $i56: i32;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $i61: i64;
  var $i62: i64;
  var $i63: i32;
  var $i64: i1;
  var $i65: i64;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i64;
  var $i78: i32;
  var $i79: i64;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $p85: ref;
  var $i86: i64;
  var $i87: i64;
  var $i89: i1;
  var $i47: i64;
  var $i48: i64;
  var $i52: i32;
  var $i10: i32;
  var vslice_dummy_var_100: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} $p6 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    call {:si_unique_call 1095} {:cexpr "__blkdev_issue_discard_async:arg:sector"} boogie_si_record_i64($i1);
    call {:si_unique_call 1096} {:cexpr "__blkdev_issue_discard_async:arg:nr_sects"} boogie_si_record_i64($i2);
    call {:si_unique_call 1097} {:cexpr "__blkdev_issue_discard_async:arg:gfp_mask"} boogie_si_record_i32($i3);
    call {:si_unique_call 1098} {:cexpr "__blkdev_issue_discard_async:arg:flags"} boogie_si_record_i64($i4);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} $p7 := bdev_get_queue($p0);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 4208)), $mul.ref(2504, 1));
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $i12 := constant_test_bit(14, $p11);
    call {:si_unique_call 1101} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4208)), $mul.ref(3488, 1)), $mul.ref(56, 1));
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i32($i16, 9);
    call {:si_unique_call 1102} {:cexpr "_max1"} boogie_si_record_i32($i17);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i32($i17, 1);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} $i20 := bdev_discard_alignment($p0);
    call {:si_unique_call 1104} {:cexpr "tmp___1"} boogie_si_record_i32($i20);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i21 := $ashr.i32($i20, 9);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i22 := $urem.i32($i21, $i19);
    call {:si_unique_call 1105} {:cexpr "alignment"} boogie_si_record_i32($i22);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 4208)), $mul.ref(3488, 1)), $mul.ref(48, 1));
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    call {:si_unique_call 1106} {:cexpr "_min1"} boogie_si_record_i32($i25);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i26 := $ult.i32($i25, 8388607);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i27 := 8388607;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i28 := $urem.i32($i27, $i19);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i27, $i28);
    call {:si_unique_call 1107} {:cexpr "max_discard_sectors"} boogie_si_record_i32($i29);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 1109} {:cexpr "tmp___2"} boogie_si_record_i64($i33);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i4);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 1);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i45 := 129;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} blk_start_plug($p6);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i2, 0);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} blk_finish_plug($p6);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i10 := $i52;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb26:
    assume $i46 == 1;
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i47, $i48 := $i1, $i2;
    goto $bb29;

  $bb29:
    call $p49, $i50, $i51, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $p81, $p82, $i83, $p85, $i86, $i87, $i89, $i47, $i48, vslice_dummy_var_100 := __blkdev_issue_discard_async_loop_$bb29($p0, $i3, $p5, $i19, $i22, $i29, $i45, $p49, $i50, $i51, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $p81, $p82, $i83, $p85, $i86, $i87, $i89, $i47, $i48, vslice_dummy_var_100);
    goto $bb29_last;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} $p49 := bio_alloc($i3, 1);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i53 := $zext.i32.i64($i29);
    call {:si_unique_call 1118} {:cexpr "__min2"} boogie_si_record_i64($i53);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i54 := $ult.i64($i48, $i53);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i54 == 1);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i55 := $i53;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i64.i32($i55);
    call {:si_unique_call 1119} {:cexpr "req_sects"} boogie_si_record_i32($i56);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i57 := $zext.i32.i64($i56);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, $i47);
    call {:si_unique_call 1120} {:cexpr "end_sect"} boogie_si_record_i64($i58);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64($i56);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i60 := $ult.i64($i59, $i48);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i78, $i79 := $i56, $i58;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} bio_chain($p49, $p5);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p49, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p81, $i47);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p49, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p82, $p0);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i83 := $shl.i32($i78, 9);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p49, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, $i83);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i86 := $zext.i32.i64($i78);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i87 := $sub.i64($i48, $i86);
    call {:si_unique_call 1127} {:cexpr "nr_sects"} boogie_si_record_i64($i87);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} submit_bio($i45, $p49);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} ___might_sleep(.str.30, 424, 0);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} vslice_dummy_var_100 := _cond_resched();
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i87, 0);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i89 == 1);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb44:
    assume $i89 == 1;
    assume {:verifier.code 0} true;
    $i47, $i48 := $i79, $i87;
    goto $bb44_dummy;

  $bb38:
    assume $i60 == 1;
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i61 := $zext.i32.i64($i19);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i62 := $urem.i64($i58, $i61);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i64.i32($i62);
    call {:si_unique_call 1121} {:cexpr "_res___0"} boogie_si_record_i32($i63);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, $i22);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i76, $i77 := $i56, $i58;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i78, $i79 := $i76, $i77;
    goto $bb43;

  $bb40:
    assume $i64 == 1;
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i22);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i66 := $sub.i64($i58, $i65);
    call {:si_unique_call 1122} {:cexpr "end_sect"} boogie_si_record_i64($i66);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i67 := $zext.i32.i64($i19);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i68 := $udiv.i64($i66, $i67);
    call {:si_unique_call 1123} {:cexpr "end_sect"} boogie_si_record_i64($i68);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i69 := $zext.i32.i64($i19);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i70 := $mul.i64($i69, $i68);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i22);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i72 := $add.i64($i70, $i71);
    call {:si_unique_call 1124} {:cexpr "end_sect"} boogie_si_record_i64($i72);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i64.i32($i72);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i64.i32($i47);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i73, $i74);
    call {:si_unique_call 1125} {:cexpr "req_sects"} boogie_si_record_i32($i75);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i76, $i77 := $i75, $i72;
    goto $bb42;

  $bb35:
    assume $i54 == 1;
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i55 := $i48;
    goto $bb37;

  $bb31:
    assume $i51 == 1;
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32(0, 12);
    goto $bb33;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p7, $mul.ref(0, 4208)), $mul.ref(2504, 1));
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $i39 := constant_test_bit(14, $p38);
    call {:si_unique_call 1111} {:cexpr "tmp___3"} boogie_si_record_i32($i39);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i40 == 1);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref(0, 4208)), $mul.ref(2504, 1));
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} $i42 := constant_test_bit(17, $p41);
    call {:si_unique_call 1113} {:cexpr "tmp___4"} boogie_si_record_i32($i42);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i44 := $or.i32(129, 256);
    call {:si_unique_call 1114} {:cexpr "type"} boogie_si_record_i32($i44);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb25;

  $bb21:
    assume $i43 == 1;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 95);
    goto $bb3;

  $bb19:
    assume $i40 == 1;
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 95);
    goto $bb3;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 95);
    goto $bb3;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i27 := $i25;
    goto $bb13;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 95);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 6);
    goto $bb3;

  $bb44_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4421;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 497800);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const bdev_discard_alignment: ref;

axiom bdev_discard_alignment == $sub.ref(0, 498832);

procedure bdev_discard_alignment($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bdev_discard_alignment($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p13: ref;
  var $i14: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $p1 := bdev_get_queue($p0);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(240, 1));
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i4, $i5);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 4208)), $mul.ref(3488, 1)), $mul.ref(60, 1));
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i11 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(256, 1));
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1592)), $mul.ref(80, 1));
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const blk_start_plug: ref;

axiom blk_start_plug == $sub.ref(0, 499864);

procedure blk_start_plug($p0: ref);
  free requires assertsPassed;



implementation blk_start_plug($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    return;
}



const bio_alloc: ref;

axiom bio_alloc == $sub.ref(0, 500896);

procedure bio_alloc($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation bio_alloc($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} {:cexpr "bio_alloc:arg:gfp_mask"} boogie_si_record_i32($i0);
    call {:si_unique_call 1134} {:cexpr "bio_alloc:arg:nr_iovecs"} boogie_si_record_i32($i1);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, fs_bio_set);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $p3 := bio_alloc_bioset($i0, $i1, $p2);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const bio_chain: ref;

axiom bio_chain == $sub.ref(0, 501928);

procedure bio_chain($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation bio_chain($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    return;
}



const submit_bio: ref;

axiom submit_bio == $sub.ref(0, 502960);

procedure submit_bio($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation submit_bio($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} {:cexpr "submit_bio:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    return;
}



const ___might_sleep: ref;

axiom ___might_sleep == $sub.ref(0, 503992);

procedure ___might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation ___might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} {:cexpr "___might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1138} {:cexpr "___might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    return;
}



const _cond_resched: ref;

axiom _cond_resched == $sub.ref(0, 505024);

procedure _cond_resched() returns ($r: i32);
  free requires assertsPassed;



implementation _cond_resched() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1139} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1140} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const blk_finish_plug: ref;

axiom blk_finish_plug == $sub.ref(0, 506056);

procedure blk_finish_plug($p0: ref);
  free requires assertsPassed;



implementation blk_finish_plug($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    return;
}



const bio_alloc_bioset: ref;

axiom bio_alloc_bioset == $sub.ref(0, 507088);

procedure bio_alloc_bioset($i0: i32, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation bio_alloc_bioset($i0: i32, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} {:cexpr "bio_alloc_bioset:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1142} {:cexpr "bio_alloc_bioset:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $p3 := external_alloc();
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const dm_pool_block_is_used: ref;

axiom dm_pool_block_is_used == $sub.ref(0, 508120);

procedure dm_pool_block_is_used($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.45, $CurrAddr;



implementation dm_pool_block_is_used($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i8;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1145} {:cexpr "dm_pool_block_is_used:arg:b"} boogie_si_record_i64($i1);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} down_read($p4);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $i7 := dm_sm_get_count($p6, $i1, $p3);
    call {:si_unique_call 1148} {:cexpr "r"} boogie_si_record_i32($i7);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} up_read($p12);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.46, $p3);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $M.45 := $store.i8($M.45, $p2, $i11);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dm_sm_get_count: ref;

axiom dm_sm_get_count == $sub.ref(0, 509152);

procedure dm_sm_get_count($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_sm_get_count($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} {:cexpr "dm_sm_get_count:arg:b"} boogie_si_record_i64($i1);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    call {:si_unique_call 1151} $i5 := devirtbounce.10($p4, $p0, $i1, $p2);
    call {:si_unique_call 1152} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const break_up_discard_bio: ref;

axiom break_up_discard_bio == $sub.ref(0, 510184);

procedure break_up_discard_bio($p0: ref, $i1: i64, $i2: i64, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.49, $M.47, $M.50, $M.48, $CurrAddr, $M.16, $M.17, $M.40, $M.45, $M.18, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.25, $M.26, $M.29, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.55;



implementation break_up_discard_bio($p0: ref, $i1: i64, $i2: i64, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i1;
  var $p39: ref;
  var $i40: i8;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} $p5 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1159} {:cexpr "break_up_discard_bio:arg:begin"} boogie_si_record_i64($i1);
    call {:si_unique_call 1160} {:cexpr "break_up_discard_bio:arg:end"} boogie_si_record_i64($i2);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i1, $i2);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i13 := $i1;
    goto $bb4;

  $bb4:
    call $i14, $i15, $p16, $p17, $i18, $i19, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $p28, $p29, $i30, $i31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $p39, $i40, $i41, $p42, $i43, $p44, $i45, $p46, $p47, $p48, $p49, $p50, $p51, $p52, $i53, $i54, $p55, $p56, $i57, $i13 := break_up_discard_bio_loop_$bb4($p0, $i2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p11, $i14, $i15, $p16, $p17, $i18, $i19, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $p28, $p29, $i30, $i31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $p39, $i40, $i41, $p42, $i43, $p44, $i45, $p46, $p47, $p48, $p49, $p50, $p51, $p52, $i53, $i54, $p55, $p56, $i57, $i13);
    goto $bb4_last;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $i14 := ensure_next_mapping($p11);
    call {:si_unique_call 1162} {:cexpr "r"} boogie_si_record_i32($i14);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} $i18 := dm_thin_find_mapped_range($p17, $i13, $i2, $p7, $p8, $p9, $p4);
    call {:si_unique_call 1164} {:cexpr "r"} boogie_si_record_i32($i18);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.47, $p9);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.48, $p8);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.49, $p7);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64($i23, $i24);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.47, $p9);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i25, $i26);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} build_key($p21, 1, $i22, $i27, $p5);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $i30 := bio_detain($p29, $p5, $0.ref, $p6);
    call {:si_unique_call 1167} {:cexpr "tmp"} boogie_si_record_i32($i30);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} $p35 := get_next_mapping($p11);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p0);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.50, $p4);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p35, $mul.ref(0, 88)), $mul.ref(17, 1));
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i8($i38);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, $i40);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.49, $p7);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p35, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p42, $i41);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.48, $p8);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p35, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p44, $i43);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.47, $p9);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p35, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p46, $i45);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.14, $p6);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p35, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $p47);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p35, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, $p3);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} __bio_inc_remaining($p3);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p11, $mul.ref(0, 66576)), $mul.ref(968, 1));
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p35, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $i53 := dm_deferred_set_add_work($p51, $p52);
    call {:si_unique_call 1172} {:cexpr "tmp___0"} boogie_si_record_i32($i53);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.48, $p8);
    call {:si_unique_call 1174} {:cexpr "begin"} boogie_si_record_i64($i57);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i33 := $i57;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, $i2);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i13 := $i33;
    goto $bb17_dummy;

  $bb20:
    assume $i54 == 1;
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p11, $mul.ref(0, 66576)), $mul.ref(1032, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    call {:si_unique_call 1173} devirtbounce.9($p56, $p35);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.48, $p8);
    call {:si_unique_call 1168} {:cexpr "begin"} boogie_si_record_i64($i32);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb16;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb17_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4564;
}



const ensure_next_mapping: ref;

axiom ensure_next_mapping == $sub.ref(0, 511216);

procedure ensure_next_mapping($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ensure_next_mapping($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(976, 1));
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(984, 1));
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $p8 := mempool_alloc($p7, 32);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(976, 1));
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p8);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(976, 1));
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i15 := (if $i14 == 1 then 0 else $sub.i32(0, 12));
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i5 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const dm_thin_find_mapped_range: ref;

axiom dm_thin_find_mapped_range == $sub.ref(0, 512248);

procedure dm_thin_find_mapped_range($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.0, $M.49, $M.47, $M.50, $M.48, $M.16, $M.17, $CurrAddr;



implementation dm_thin_find_mapped_range($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $p7: ref;
  var $i8: i1;
  var $i10: i1;
  var $i13: i32;
  var $i14: i1;
  var $i16: i1;
  var $i17: i32;
  var $i15: i64;
  var $i19: i64;
  var $i20: i1;
  var $i12: i64;
  var $i21: i64;
  var $i11: i64;
  var $i18: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i8;
  var $i27: i1;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i64;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p46: ref;
  var $i47: i8;
  var $i48: i1;
  var $i49: i32;
  var $i50: i8;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i45: i64;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $i34: i64;
  var $i35: i64;
  var $i57: i64;
  var $i33: i64;
  var $i41: i64;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $p7 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1177} {:cexpr "dm_thin_find_mapped_range:arg:begin"} boogie_si_record_i64($i1);
    call {:si_unique_call 1178} {:cexpr "dm_thin_find_mapped_range:arg:end"} boogie_si_record_i64($i2);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i8 := $ult.i64($i2, $i1);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $ult.i64($i1, $i2);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i11 := $i1;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i18 := $i11;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i18, $i2);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $M.49 := $store.i64($M.49, $p3, $i18);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $M.47 := $store.i64($M.47, $p5, $i24);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i26);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i8($i27);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $M.50 := $store.i8($M.50, $p6, $i28);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i18, 1);
    call {:si_unique_call 1182} {:cexpr "begin"} boogie_si_record_i64($i29);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.47, $p5);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 1);
    call {:si_unique_call 1183} {:cexpr "pool_end"} boogie_si_record_i64($i31);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i29, $i2);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i33 := $i29;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i41 := $i33;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $M.48 := $store.i64($M.48, $p4, $i41);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb23:
    assume $i32 == 1;
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i34, $i35 := $i31, $i29;
    goto $bb26;

  $bb26:
    call $i36, $i37, $i38, $i39, $p42, $i43, $i44, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i45, $i54, $i55, $i56, $i34, $i35, $i57 := dm_thin_find_mapped_range_loop_$bb26($p0, $i2, $p6, $p7, $i36, $i37, $i38, $i39, $p42, $i43, $i44, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i45, $i54, $i55, $i56, $i34, $i35, $i57);
    goto $bb26_last;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $i36 := dm_thin_find_block($p0, $i35, 1, $p7);
    call {:si_unique_call 1185} {:cexpr "r"} boogie_si_record_i32($i36);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i38, $i39 := $i35, $i36;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, $i34);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i45 := $i35;
    assume true;
    goto $bb34, $bb36;

  $bb36:
    assume !($i44 == 1);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i8.i1($i47);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i32($i48);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.50, $p6);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i50);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i49, $i52);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i45 := $i35;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i34, 1);
    call {:si_unique_call 1186} {:cexpr "pool_end"} boogie_si_record_i64($i54);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i35, 1);
    call {:si_unique_call 1187} {:cexpr "begin"} boogie_si_record_i64($i55);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, $i2);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i57 := $i55;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i33 := $i57;
    goto $bb25;

  $bb40:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i34, $i35 := $i54, $i55;
    goto $bb40_dummy;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i41 := $i45;
    goto $bb32;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb35;

  $bb28:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, $sub.i32(0, 61));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i40 == 1);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i9 := $i39;
    goto $bb3;

  $bb30:
    assume $i40 == 1;
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i41 := $i38;
    goto $bb32;

  $bb20:
    assume $i22 == 1;
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 61);
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i12 := $i1;
    goto $bb8;

  $bb8:
    call $i13, $i14, $i16, $i17, $i15, $i19, $i20, $i12, $i21 := dm_thin_find_mapped_range_loop_$bb8($p0, $i2, $p7, $i13, $i14, $i16, $i17, $i15, $i19, $i20, $i12, $i21);
    goto $bb8_last;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $i13 := dm_thin_find_block($p0, $i12, 1, $p7);
    call {:si_unique_call 1180} {:cexpr "r"} boogie_si_record_i32($i13);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i15 := $i12;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i18 := $i15;
    goto $bb16;

  $bb10:
    assume $i14 == 1;
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i13, $sub.i32(0, 61));
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i17 := $i13;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i12, 1);
    call {:si_unique_call 1181} {:cexpr "begin"} boogie_si_record_i64($i19);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i20 := $ult.i64($i19, $i2);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i11 := $i21;
    goto $bb7;

  $bb17:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i12 := $i19;
    goto $bb17_dummy;

  $bb12:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $i9 := $i17;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 61);
    goto $bb3;

  $bb40_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4706;

  $bb17_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4668;
}



const __bio_inc_remaining: ref;

axiom __bio_inc_remaining == $sub.ref(0, 513280);

procedure __bio_inc_remaining($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation __bio_inc_remaining($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(16, 1));
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i3 := $or.i64($i2, 256);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(16, 1));
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, $i3);
    call {:si_unique_call 1188} devirtbounce.11(0);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(68, 1));
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} atomic_inc($p5);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;
}



const mempool_alloc: ref;

axiom mempool_alloc == $sub.ref(0, 514312);

procedure mempool_alloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation mempool_alloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} {:cexpr "mempool_alloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} $p2 := external_alloc();
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dm_thin_insert_block: ref;

axiom dm_thin_insert_block == $sub.ref(0, 515344);

procedure dm_thin_insert_block($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.51, $M.52, $M.0, $CurrAddr;



implementation dm_thin_insert_block($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} {:cexpr "dm_thin_insert_block:arg:block"} boogie_si_record_i64($i1);
    call {:si_unique_call 1193} {:cexpr "dm_thin_insert_block:arg:data_block"} boogie_si_record_i64($i2);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} down_write($p5);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} $i11 := __insert($p0, $i1, $i2);
    call {:si_unique_call 1196} {:cexpr "r"} boogie_si_record_i32($i11);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} up_write($p15);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;
}



const __insert: ref;

axiom __insert == $sub.ref(0, 516376);

procedure __insert($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.51, $M.52, $M.0, $CurrAddr;



implementation __insert($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1201} {:cexpr "__insert:arg:block"} boogie_si_record_i64($i1);
    call {:si_unique_call 1202} {:cexpr "__insert:arg:data_block"} boogie_si_record_i64($i2);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 8));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $M.51 := $store.i64($M.51, $p10, $i9);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(1, 8));
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $M.51 := $store.i64($M.51, $p11, $i1);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 832)), $mul.ref(504, 1));
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} $i14 := pack_block_time($i2, $i13);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $M.52 := $store.i64($M.52, $p4, $i14);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 832)), $mul.ref(64, 1));
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p5);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p4);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $i21 := dm_btree_insert_notify($p15, $i17, $p18, $p19, $p20, $p3);
    call {:si_unique_call 1205} {:cexpr "r"} boogie_si_record_i32($i21);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 1);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.53, $p3);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 1);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p30, $i29);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    goto $bb3;
}



const pack_block_time: ref;

axiom pack_block_time == $sub.ref(0, 517408);

procedure pack_block_time($i0: i64, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation pack_block_time($i0: i64, $i1: i32) returns ($r: i64)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} {:cexpr "pack_block_time:arg:b"} boogie_si_record_i64($i0);
    call {:si_unique_call 1207} {:cexpr "pack_block_time:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i2 := $shl.i64($i0, 24);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i1);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i4 := $or.i64($i2, $i3);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dm_btree_insert_notify: ref;

axiom dm_btree_insert_notify == $sub.ref(0, 518440);

procedure dm_btree_insert_notify($p0: ref, $i1: i64, $p2: ref, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_btree_insert_notify($p0: ref, $i1: i64, $p2: ref, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1208} {:cexpr "dm_btree_insert_notify:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1209} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1210} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const get_bio_block_range: ref;

axiom get_bio_block_range == $sub.ref(0, 519472);

procedure get_bio_block_range($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.25, $M.26;



implementation get_bio_block_range($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i21: i8;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i64;
  var $i40: i64;
  var $i31: i64;
  var $i32: i64;
  var $i41: i1;
  var $i42: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    call {:si_unique_call 1211} {:cexpr "b"} boogie_si_record_i64($i8);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i12 := $lshr.i32($i11, 9);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, $i8);
    call {:si_unique_call 1212} {:cexpr "e"} boogie_si_record_i64($i14);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, $i8);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i19 := $sub.i64($i18, 1);
    call {:si_unique_call 1213} {:cexpr "b"} boogie_si_record_i64($i19);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} $i20 := block_size_is_power_of_two($p5);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i8($i20);
    call {:si_unique_call 1215} {:cexpr "tmp"} boogie_si_record_i8($i21);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i21);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i34);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i36 := $udiv.i64($i19, $i35);
    call {:si_unique_call 1218} {:cexpr "b"} boogie_si_record_i64($i36);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i38);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i40 := $udiv.i64($i14, $i39);
    call {:si_unique_call 1219} {:cexpr "e"} boogie_si_record_i64($i40);
    assume {:verifier.code 0} true;
    $i31, $i32 := $i36, $i40;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i41 := $ult.i64($i32, $i31);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $i32;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $M.25 := $store.i64($M.25, $p2, $i31);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $M.26 := $store.i64($M.26, $p3, $i42);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i41 == 1;
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i42 := $i31;
    goto $bb6;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 66576)), $mul.ref(60, 1));
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i26 := $lshr.i64($i19, $i25);
    call {:si_unique_call 1216} {:cexpr "b"} boogie_si_record_i64($i26);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 66576)), $mul.ref(60, 1));
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i28);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i30 := $lshr.i64($i14, $i29);
    call {:si_unique_call 1217} {:cexpr "e"} boogie_si_record_i64($i30);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i31, $i32 := $i26, $i30;
    goto $bb3;
}



const free_discard_mapping: ref;

axiom free_discard_mapping == $sub.ref(0, 520504);

procedure free_discard_mapping($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation free_discard_mapping($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 66576)), $mul.ref(984, 1));
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} mempool_free($p9, $p13);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} cell_defer_no_holder($p2, $p8);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cell_success: ref;

axiom cell_success == $sub.ref(0, 521536);

procedure cell_success($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation cell_success($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} cell_error_with_code($p0, $p1, 0);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    return;
}



const __process_bio_read_only: ref;

axiom __process_bio_read_only == $sub.ref(0, 522568);

procedure __process_bio_read_only($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.15, $M.0, $M.16, $M.17, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation __process_bio_read_only($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i1;
  var $i18: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i49: i64;
  var $i50: i1;
  var vslice_dummy_var_101: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1);
    call {:si_unique_call 1224} {:cexpr "rw"} boogie_si_record_i32($i7);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} $i8 := get_bio_block($p0, $p1);
    call {:si_unique_call 1226} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} $i11 := dm_thin_find_block($p10, $i8, 1, $p3);
    call {:si_unique_call 1228} {:cexpr "r"} boogie_si_record_i32($i11);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i11, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} $i46 := ___ratelimit(dm_ratelimit_state, .str.18);
    call {:si_unique_call 1241} {:cexpr "tmp___0"} boogie_si_record_i32($i46);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p2);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} bio_endio($p1, $sub.i32(0, 5));
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb37:
    assume $i50 == 1;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} cell_defer_no_holder($p0, $p2);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i47 == 1;
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} vslice_dummy_var_101 := printk.ref.ref.i32(.str.19, .str.18, $i11);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} inc_all_io_entry($p28, $p1);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} remap_and_issue($p0, $p1, $i30);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p2);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i32 == 1;
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} inc_remap_and_issue_cell($p0, $p2, $i34);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i7, 1);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb11;

  $bb12:
    assume $i18 == 1;
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb11;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} handle_unserviceable_bio($p24, $p1);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p2);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i26 == 1;
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} cell_defer_no_holder($p0, $p2);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb2:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i11, $sub.i32(0, 61));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p2);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i7, 0);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(24, 1));
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} zero_fill_bio($p1);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} bio_endio($p1, 0);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb30:
    assume $i43 == 1;
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} inc_all_io_entry($p45, $p1);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} remap_to_origin_and_issue($p0, $p1);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb27:
    assume $i37 == 1;
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} handle_unserviceable_bio($p39, $p1);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb24:
    assume $i36 == 1;
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} cell_defer_no_holder($p0, $p2);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    goto $bb26;
}



const handle_unserviceable_bio: ref;

axiom handle_unserviceable_bio == $sub.ref(0, 523600);

procedure handle_unserviceable_bio($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation handle_unserviceable_bio($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $i2 := should_error_unserviceable_bio($p0);
    call {:si_unique_call 1246} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} retry_on_resume($p1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} bio_endio($p1, $i2);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rcu_read_lock: ref;

axiom rcu_read_lock == $sub.ref(0, 524632);

procedure rcu_read_lock();
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation rcu_read_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} __rcu_read_lock();
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} rcu_lock_acquire(rcu_lock_map);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1252} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} $i3 := rcu_is_watching();
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1254} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} lockdep_rcu_suspicious(.str.15, 849, .str.16);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;

  SeqInstr_253:
    assume !assertsPassed;
    return;
}



const __read_once_size: ref;

axiom __read_once_size == $sub.ref(0, 525664);

procedure __read_once_size($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __read_once_size($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i8;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;

  $bb0:
    call {:si_unique_call 1256} {:cexpr "__read_once_size:arg:size"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call {:si_unique_call 1257} devirtbounce.11(0);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i2);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 1258} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p1, $p0, $i20, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    call {:si_unique_call 1259} devirtbounce.11(0);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i18);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i12);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p0);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i10);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 526696);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1260} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1261} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const error_thin_bio_list: ref;

axiom error_thin_bio_list == $sub.ref(0, 527728);

procedure error_thin_bio_list($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation error_thin_bio_list($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1263} {:cexpr "error_thin_bio_list:arg:error"} boogie_si_record_i32($i2);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} bio_list_init($p3);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $p5 := spinlock_check($p4);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 1267} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} __merge_bio_list($p3, $p1);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} spin_unlock_irqrestore($p7, $i6);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} error_bio_list($p3, $i2);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    return;
}



const rcu_read_unlock: ref;

axiom rcu_read_unlock == $sub.ref(0, 528760);

procedure rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation rcu_read_unlock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1272} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} __rcu_read_unlock();
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} rcu_lock_release(rcu_lock_map);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $i3 := rcu_is_watching();
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1274} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} lockdep_rcu_suspicious(.str.15, 900, .str.17);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const rcu_is_watching: ref;

axiom rcu_is_watching == $sub.ref(0, 529792);

procedure rcu_is_watching() returns ($r: i1);
  free requires assertsPassed;



implementation rcu_is_watching() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1278} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1279} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const lockdep_rcu_suspicious: ref;

axiom lockdep_rcu_suspicious == $sub.ref(0, 530824);

procedure lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} {:cexpr "lockdep_rcu_suspicious:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    return;
}



const __rcu_read_unlock: ref;

axiom __rcu_read_unlock == $sub.ref(0, 531856);

procedure __rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation __rcu_read_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} devirtbounce.11(0);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} __preempt_count_sub(1);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;
}



const rcu_lock_release: ref;

axiom rcu_lock_release == $sub.ref(0, 532888);

procedure rcu_lock_release($p0: ref);
  free requires assertsPassed;



implementation rcu_lock_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} lock_release($p0, 1, 0);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    return;
}



const lock_release: ref;

axiom lock_release == $sub.ref(0, 533920);

procedure lock_release($p0: ref, $i1: i32, $i2: i64);
  free requires assertsPassed;



implementation lock_release($p0: ref, $i1: i32, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} {:cexpr "lock_release:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1285} {:cexpr "lock_release:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_sub: ref;

axiom __preempt_count_sub == $sub.ref(0, 534952);

procedure __preempt_count_sub($i0: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation __preempt_count_sub($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} {:cexpr "__preempt_count_sub:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, $i0);
    call {:si_unique_call 1289} devirtbounce.12(0, __preempt_count, $i3, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 1288} devirtbounce.7(0, __preempt_count, __preempt_count);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 1287} devirtbounce.7(0, __preempt_count, __preempt_count);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_262:
    assume !assertsPassed;
    return;
}



const __rcu_read_lock: ref;

axiom __rcu_read_lock == $sub.ref(0, 535984);

procedure __rcu_read_lock();
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation __rcu_read_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} __preempt_count_add(1);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    call {:si_unique_call 1291} devirtbounce.11(0);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;
}



const rcu_lock_acquire: ref;

axiom rcu_lock_acquire == $sub.ref(0, 537016);

procedure rcu_lock_acquire($p0: ref);
  free requires assertsPassed;



implementation rcu_lock_acquire($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} lock_acquire($p0, 0, 0, 2, 0, $0.ref, 0);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    return;
}



const lock_acquire: ref;

axiom lock_acquire == $sub.ref(0, 538048);

procedure lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64);
  free requires assertsPassed;



implementation lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} {:cexpr "lock_acquire:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1294} {:cexpr "lock_acquire:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1295} {:cexpr "lock_acquire:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1296} {:cexpr "lock_acquire:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1297} {:cexpr "lock_acquire:arg:arg6"} boogie_si_record_i64($i6);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_add: ref;

axiom __preempt_count_add == $sub.ref(0, 539080);

procedure __preempt_count_add($i0: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation __preempt_count_add($i0: i32)
{
  var $i1: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} {:cexpr "__preempt_count_add:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    call {:si_unique_call 1301} devirtbounce.12(0, __preempt_count, $i0, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 1300} devirtbounce.7(0, __preempt_count, __preempt_count);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 1299} devirtbounce.7(0, __preempt_count, __preempt_count);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_271:
    assume !assertsPassed;
    return;
}



const dm_bm_set_read_only: ref;

axiom dm_bm_set_read_only == $sub.ref(0, 540112);

procedure dm_bm_set_read_only($p0: ref);
  free requires assertsPassed;



implementation dm_bm_set_read_only($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    return;
}



const dm_sm_get_nr_free: ref;

axiom dm_sm_get_nr_free == $sub.ref(0, 541144);

procedure dm_sm_get_nr_free($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $CurrAddr, $M.16, $M.17, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation dm_sm_get_nr_free($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    call {:si_unique_call 1302} $i4 := devirtbounce.8($p3, $p0, $p1);
    call {:si_unique_call 1303} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const abort_transaction: ref;

axiom abort_transaction == $sub.ref(0, 542176);

procedure abort_transaction($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $CurrAddr, $M.55, $M.45, $M.18, $M.15, $M.40, $M.16, $M.17, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.25, $M.26, $M.29, $M.58, $M.59, $M.60, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation abort_transaction($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $p3 := dm_device_name($p2);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $i4 := ___ratelimit(dm_ratelimit_state, .str.26);
    call {:si_unique_call 1306} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $i9 := dm_pool_abort_metadata($p8);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    call {:si_unique_call 1309} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} $i14 := dm_pool_metadata_set_needs_check($p13);
    call {:si_unique_call 1313} {:cexpr "tmp___2"} boogie_si_record_i32($i14);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} vslice_dummy_var_104 := printk.ref.ref(.str.29, $p3);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} set_pool_mode($p0, 3);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} vslice_dummy_var_103 := printk.ref.ref(.str.28, $p3);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} set_pool_mode($p0, 3);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} vslice_dummy_var_102 := printk.ref.ref(.str.27, $p3);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dm_pool_abort_metadata: ref;

axiom dm_pool_abort_metadata == $sub.ref(0, 543208);

procedure dm_pool_abort_metadata($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.55, $M.45, $M.18, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $CurrAddr, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.15, $M.40, $M.16, $M.17, $M.58, $M.59, $M.60, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation dm_pool_abort_metadata($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i5: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} down_write($p1);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} __set_abort_with_changes_flags($p0);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} __destroy_persistent_data_objects($p0);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $i6 := __create_persistent_data_objects($p0, 0);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    call {:si_unique_call 1321} {:cexpr "r"} boogie_si_record_i32($i6);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} up_write($p9);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 1);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const dm_pool_metadata_set_needs_check: ref;

axiom dm_pool_metadata_set_needs_check == $sub.ref(0, 544240);

procedure dm_pool_metadata_set_needs_check($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation dm_pool_metadata_set_needs_check($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} down_write($p2);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(552, 1));
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i5 := $or.i64($i4, 1);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(552, 1));
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p6, $i5);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} $i7 := superblock_lock($p0, $p1);
    call {:si_unique_call 1325} {:cexpr "r"} boogie_si_record_i32($i7);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.54, $p1);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $p11 := dm_block_data($p10);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(552, 1));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p12, $mul.ref(0, 368)), $mul.ref(4, 1));
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.54, $p1);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} vslice_dummy_var_106 := dm_bm_unlock($p17);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} up_write($p19);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} vslice_dummy_var_105 := printk.ref(.str.8);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const superblock_lock: ref;

axiom superblock_lock == $sub.ref(0, 545272);

procedure superblock_lock($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation superblock_lock($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} $i4 := dm_bm_write_lock($p3, 0, sb_validator, $p1);
    call {:si_unique_call 1331} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dm_block_data: ref;

axiom dm_block_data == $sub.ref(0, 546304);

procedure dm_block_data($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dm_block_data($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $p1 := external_alloc();
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const dm_bm_unlock: ref;

axiom dm_bm_unlock == $sub.ref(0, 547336);

procedure dm_bm_unlock($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_bm_unlock($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1333} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1334} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dm_bm_write_lock: ref;

axiom dm_bm_write_lock == $sub.ref(0, 548368);

procedure dm_bm_write_lock($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_bm_write_lock($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1335} {:cexpr "dm_bm_write_lock:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1336} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1337} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __set_abort_with_changes_flags: ref;

axiom __set_abort_with_changes_flags == $sub.ref(0, 549400);

procedure __set_abort_with_changes_flags($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __set_abort_with_changes_flags($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(528, 1)), $mul.ref(0, 1));
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i6, $i8);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p10 := $p3;
    goto $bb4;

  $bb4:
    call $p11, $i12, $i13, $p14, $i15, $p17, $p18, $p19, $p20, $i21, $i22, $p10 := __set_abort_with_changes_flags_loop_$bb4($i8, $p11, $i12, $i13, $p14, $i15, $p17, $p18, $p19, $p20, $i21, $i22, $p10);
    goto $bb4_last;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(37, 1));
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i13);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i15);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, $i8);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $p10 := $p18;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5225;
}



const __destroy_persistent_data_objects: ref;

axiom __destroy_persistent_data_objects == $sub.ref(0, 550432);

procedure __destroy_persistent_data_objects($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.45, $M.18, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.58, $M.59, $M.60, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.55, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation __destroy_persistent_data_objects($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} dm_sm_destroy($p2);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} dm_sm_destroy($p4);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} dm_tm_destroy($p6);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} dm_tm_destroy($p8);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} dm_block_manager_destroy($p10);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;
}



const __create_persistent_data_objects: ref;

axiom __create_persistent_data_objects == $sub.ref(0, 551464);

procedure __create_persistent_data_objects($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.55, $CurrAddr, $M.45, $M.18, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.15, $M.40, $M.16, $M.17, $M.58, $M.59, $M.60, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation __create_persistent_data_objects($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i19: i32;
  var vslice_dummy_var_107: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1343} {:cexpr "__create_persistent_data_objects:arg:format_device"} boogie_si_record_i1($i1);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(16, 1));
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} $p5 := dm_block_manager_create($p4, 4096, 64, 5);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p5);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $i10 := IS_ERR($p9);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 1346} {:cexpr "tmp___0"} boogie_si_record_i8($i11);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i2);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} $i21 := __open_or_format_metadata($p0, $i20);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    call {:si_unique_call 1351} {:cexpr "r"} boogie_si_record_i32($i21);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i19 := $i21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} dm_block_manager_destroy($p24);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} vslice_dummy_var_107 := printk.ref(.str.158);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} $i17 := PTR_ERR($p16);
    call {:si_unique_call 1349} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i17);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb3;
}



const dm_block_manager_create: ref;

axiom dm_block_manager_create == $sub.ref(0, 552496);

procedure dm_block_manager_create($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: ref);
  free requires assertsPassed;



implementation dm_block_manager_create($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} {:cexpr "dm_block_manager_create:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1354} {:cexpr "dm_block_manager_create:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1355} {:cexpr "dm_block_manager_create:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $p4 := external_alloc();
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 553528);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} $i1 := ldv_is_err($p0);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1358} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 554560);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 1360} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __open_or_format_metadata: ref;

axiom __open_or_format_metadata == $sub.ref(0, 555592);

procedure __open_or_format_metadata($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.55, $M.0, $CurrAddr, $M.45, $M.18, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.15, $M.40, $M.16, $M.17, $M.58, $M.59, $M.60, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation __open_or_format_metadata($p0: ref, $i1: i1) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i1);
    call {:si_unique_call 1362} {:cexpr "__open_or_format_metadata:arg:format_device"} boogie_si_record_i1($i1);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} $i6 := __superblock_all_zeroes($p5, $p2);
    call {:si_unique_call 1364} {:cexpr "r"} boogie_si_record_i32($i6);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.55, $p2);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} $i14 := __open_metadata($p0);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    call {:si_unique_call 1368} {:cexpr "tmp___1"} boogie_si_record_i32($i14);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i8 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i3);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb3;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} $i12 := __format_metadata($p0);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    call {:si_unique_call 1366} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb9;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;
}



const dm_block_manager_destroy: ref;

axiom dm_block_manager_destroy == $sub.ref(0, 556624);

procedure dm_block_manager_destroy($p0: ref);
  free requires assertsPassed;



implementation dm_block_manager_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    return;
}



const __superblock_all_zeroes: ref;

axiom __superblock_all_zeroes == $sub.ref(0, 557656);

procedure __superblock_all_zeroes($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.55, $CurrAddr;



implementation __superblock_all_zeroes($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i12: i32;
  var $p19: ref;
  var $i20: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $i3 := dm_bm_block_size($p0);
    call {:si_unique_call 1371} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i32($i3, 8);
    call {:si_unique_call 1372} {:cexpr "block_size___0"} boogie_si_record_i32($i4);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} $i5 := dm_bm_read_lock($p0, 0, $0.ref, $p2);
    call {:si_unique_call 1374} {:cexpr "r"} boogie_si_record_i32($i5);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.56, $p2);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $p9 := dm_block_data($p8);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $M.55 := $store.i32($M.55, $p1, 1);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i11 := $ult.i32(0, $i4);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.56, $p2);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $i20 := dm_bm_unlock($p19);
    call {:si_unique_call 1377} {:cexpr "tmp___1"} boogie_si_record_i32($i20);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i7 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb8;

  $bb8:
    call $i13, $p14, $i15, $i16, $i17, $i18, $i12 := __superblock_all_zeroes_loop_$bb8($i4, $p10, $i13, $p14, $i15, $i16, $i17, $i18, $i12);
    goto $bb8_last;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p10, $mul.ref($i13, 8));
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i12, 1);
    call {:si_unique_call 1378} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i18 := $ult.i32($i17, $i4);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i18 == 1);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb14:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i12 := $i17;
    goto $bb14_dummy;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $M.55 := $store.i32($M.55, $p1, 0);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5346;
}



const __format_metadata: ref;

axiom __format_metadata == $sub.ref(0, 558688);

procedure __format_metadata($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.45, $M.18, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $CurrAddr, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.15, $M.40, $M.16, $M.17, $M.58, $M.59, $M.60, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.55, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation __format_metadata($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $i17: i8;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i46: i32;
  var $i47: i1;
  var $i40: i32;
  var $p48: ref;
  var $p49: ref;
  var $i35: i32;
  var $p50: ref;
  var $p51: ref;
  var $i25: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i8: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} $i5 := dm_tm_create_with_sm($p2, 0, $p3, $p4);
    call {:si_unique_call 1380} {:cexpr "r"} boogie_si_record_i32($i5);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} $p11 := dm_sm_disk_create($p10, 0);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p11);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} $i16 := IS_ERR($p15);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 1384} {:cexpr "tmp___0"} boogie_si_record_i8($i17);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} $p28 := dm_tm_create_non_blocking_clone($p27);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p28);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} __setup_btree_details($p0);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(64, 1));
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $i38 := dm_btree_empty($p36, $p37);
    call {:si_unique_call 1396} {:cexpr "r"} boogie_si_record_i32($i38);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i38, 0);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(288, 1));
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(520, 1));
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $i43 := dm_btree_empty($p41, $p42);
    call {:si_unique_call 1399} {:cexpr "r"} boogie_si_record_i32($i43);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 0);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} $i46 := __write_initial_superblock($p0);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    call {:si_unique_call 1402} {:cexpr "r"} boogie_si_record_i32($i46);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb20:
    assume $i47 == 1;
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i40 := $i46;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} dm_tm_destroy($p49);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i35 := $i40;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} dm_sm_destroy($p51);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i25 := $i35;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} dm_tm_destroy($p53);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} dm_sm_destroy($p55);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i8 := $i25;
    goto $bb3;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i44 == 1;
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} vslice_dummy_var_111 := printk.ref(.str.162);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i40 := $i43;
    goto $bb15;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i40 := $i38;
    goto $bb15;

  $bb9:
    assume $i33 == 1;
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} vslice_dummy_var_110 := printk.ref(.str.161);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 12);
    goto $bb11;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} vslice_dummy_var_109 := printk.ref(.str.160);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} $i23 := PTR_ERR($p22);
    call {:si_unique_call 1387} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i23);
    call {:si_unique_call 1388} {:cexpr "r"} boogie_si_record_i32($i24);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} vslice_dummy_var_108 := printk.ref(.str.159);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i8 := $i5;
    goto $bb3;
}



const __open_metadata: ref;

axiom __open_metadata == $sub.ref(0, 559720);

procedure __open_metadata($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.45, $M.18, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.15, $M.40, $M.16, $M.17, $M.58, $M.59, $M.60, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.55, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation __open_metadata($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i64;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i1;
  var $i44: i8;
  var $i45: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i52: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i22: i32;
  var $p70: ref;
  var $i7: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} $i4 := dm_bm_read_lock($p3, 0, sb_validator, $p1);
    call {:si_unique_call 1405} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.56, $p1);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} $p9 := dm_block_data($p8);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 368)), $mul.ref(336, 1));
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(560, 1));
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i13, $i15);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $i23 := __check_incompat_features($p10, $p0);
    call {:si_unique_call 1411} {:cexpr "r"} boogie_si_record_i32($i23);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p10, $mul.ref(0, 368)), $mul.ref(192, 1));
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $i31 := dm_tm_open_with_sm($p26, 0, $p28, 128, $p29, $p30);
    call {:si_unique_call 1413} {:cexpr "r"} boogie_si_record_i32($i31);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p10, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} $p38 := dm_sm_disk_open($p35, $p37, 128);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p38);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} $i43 := IS_ERR($p42);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i8($i43);
    call {:si_unique_call 1417} {:cexpr "tmp___1"} boogie_si_record_i8($i44);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i8.i1($i44);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} $p55 := dm_tm_create_non_blocking_clone($p54);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $p55);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i59, 0);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} __setup_btree_details($p0);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.56, $p1);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $i63 := dm_bm_unlock($p62);
    call {:si_unique_call 1429} {:cexpr "tmp___2"} boogie_si_record_i32($i63);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i7 := $i63;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb19:
    assume $i60 == 1;
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} vslice_dummy_var_117 := printk.ref(.str.161);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} dm_sm_destroy($p65);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32(0, 12);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} dm_tm_destroy($p67);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} dm_sm_destroy($p69);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i22 := $i52;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.56, $p1);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} vslice_dummy_var_114 := dm_bm_unlock($p70);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i7 := $i22;
    goto $bb3;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i45 == 1;
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} vslice_dummy_var_116 := printk.ref(.str.167);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} $i50 := PTR_ERR($p49);
    call {:si_unique_call 1420} {:cexpr "tmp___0"} boogie_si_record_i64($i50);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i64.i32($i50);
    call {:si_unique_call 1421} {:cexpr "r"} boogie_si_record_i32($i51);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb17;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} vslice_dummy_var_115 := printk.ref(.str.166);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i22 := $i31;
    goto $bb7;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i22 := $i23;
    goto $bb7;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p10, $mul.ref(0, 368)), $mul.ref(336, 1));
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(560, 1));
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} vslice_dummy_var_113 := printk.ref.i32.i64(.str.165, $i18, $i20);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 22);
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} vslice_dummy_var_112 := printk.ref(.str.8);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i7 := $i4;
    goto $bb3;
}



const dm_bm_read_lock: ref;

axiom dm_bm_read_lock == $sub.ref(0, 560752);

procedure dm_bm_read_lock($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_bm_read_lock($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1430} {:cexpr "dm_bm_read_lock:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1431} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1432} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __check_incompat_features: ref;

axiom __check_incompat_features == $sub.ref(0, 561784);

procedure __check_incompat_features($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __check_incompat_features($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i64;
  var $i7: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(360, 1));
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    call {:si_unique_call 1433} {:cexpr "features"} boogie_si_record_i32($i3);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 832)), $mul.ref(16, 1));
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} $i12 := get_disk_ro($p11);
    call {:si_unique_call 1436} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(356, 1));
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    call {:si_unique_call 1437} {:cexpr "features"} boogie_si_record_i32($i15);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i15);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} vslice_dummy_var_119 := printk.ref.i64(.str.169, $i17);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i3);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} vslice_dummy_var_118 := printk.ref.i64(.str.168, $i5);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const dm_tm_open_with_sm: ref;

axiom dm_tm_open_with_sm == $sub.ref(0, 562816);

procedure dm_tm_open_with_sm($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_tm_open_with_sm($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1439} {:cexpr "dm_tm_open_with_sm:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1440} {:cexpr "dm_tm_open_with_sm:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1441} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1442} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const dm_sm_disk_open: ref;

axiom dm_sm_disk_open == $sub.ref(0, 563848);

procedure dm_sm_disk_open($p0: ref, $p1: ref, $i2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation dm_sm_disk_open($p0: ref, $p1: ref, $i2: i64) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} {:cexpr "dm_sm_disk_open:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} $p3 := external_alloc();
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const dm_tm_create_non_blocking_clone: ref;

axiom dm_tm_create_non_blocking_clone == $sub.ref(0, 564880);

procedure dm_tm_create_non_blocking_clone($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dm_tm_create_non_blocking_clone($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} $p1 := external_alloc();
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __setup_btree_details: ref;

axiom __setup_btree_details == $sub.ref(0, 565912);

procedure __setup_btree_details($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __setup_btree_details($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p12: ref;
  var $p15: ref;
  var $p18: ref;
  var $p21: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p43: ref;
  var $p46: ref;
  var $p49: ref;
  var $p52: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p67: ref;
  var $p70: ref;
  var $p73: ref;
  var $p76: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p88: ref;
  var $p91: ref;
  var $p94: ref;
  var $p97: ref;
  var $p100: ref;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p2);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(64, 1)), $mul.ref(8, 1));
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 2);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(64, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p8);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(64, 1)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 8);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(64, 1)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, data_block_inc);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(64, 1)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, data_block_dec);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(64, 1)), $mul.ref(16, 1)), $mul.ref(32, 1));
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, data_block_equal);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(120, 1));
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(64, 1));
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 1446} cmdloc_dummy_var_13 := $memcpy.i8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p26, $p28, 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(56, 1));
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p30);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(176, 1)), $mul.ref(0, 1));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p34);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(176, 1)), $mul.ref(8, 1));
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 1);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(232, 1));
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $p39);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 8);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, subtree_inc);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, subtree_dec);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(176, 1)), $mul.ref(16, 1)), $mul.ref(32, 1));
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, subtree_equal);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(232, 1)), $mul.ref(0, 1));
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $p57);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(232, 1)), $mul.ref(8, 1));
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, 1);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(232, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, $p63);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(232, 1)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, 8);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(232, 1)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, data_block_inc);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(232, 1)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p76, data_block_dec);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(232, 1)), $mul.ref(16, 1)), $mul.ref(32, 1));
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p79, data_block_equal);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(288, 1)), $mul.ref(0, 1));
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p83, $p81);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(288, 1)), $mul.ref(8, 1));
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, 1);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p88, $0.ref);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, 24);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p94, $0.ref);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p97, $0.ref);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(32, 1));
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p100, $0.ref);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    return;
}



const dm_sm_destroy: ref;

axiom dm_sm_destroy == $sub.ref(0, 566944);

procedure dm_sm_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.45, $M.18, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.58, $M.59, $M.60, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.55, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation dm_sm_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    call {:si_unique_call 1447} devirtbounce.13($p2, $p0);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;
}



const dm_tm_destroy: ref;

axiom dm_tm_destroy == $sub.ref(0, 567976);

procedure dm_tm_destroy($p0: ref);
  free requires assertsPassed;



implementation dm_tm_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    return;
}



const data_block_inc: ref;

axiom data_block_inc == $sub.ref(0, 569008);

procedure data_block_inc($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.17, $CurrAddr;



implementation data_block_inc($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var vslice_dummy_var_120: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 1451} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p6, $p1, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_16;
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p2);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} unpack_block_time($i7, $p3, $p4);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.16, $p3);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} vslice_dummy_var_120 := dm_sm_inc_block($p5, $i8);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    return;
}



const data_block_dec: ref;

axiom data_block_dec == $sub.ref(0, 570040);

procedure data_block_dec($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.17, $CurrAddr;



implementation data_block_dec($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var vslice_dummy_var_121: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.0;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 1457} cmdloc_dummy_var_19 := $memcpy.i8(cmdloc_dummy_var_17, cmdloc_dummy_var_18, $p6, $p1, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p2);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} unpack_block_time($i7, $p3, $p4);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.16, $p3);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} vslice_dummy_var_121 := dm_sm_dec_block($p5, $i8);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    return;
}



const data_block_equal: ref;

axiom data_block_equal == $sub.ref(0, 571072);

procedure data_block_equal($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.17, $CurrAddr;



implementation data_block_equal($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p3);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 1465} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p8, $p1, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p4);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.0;
    cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 1466} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p9, $p2, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_25;
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p3);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} unpack_block_time($i10, $p5, $p7);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p4);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} unpack_block_time($i11, $p6, $p7);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.16, $p5);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.16, $p6);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i12, $i13);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const subtree_inc: ref;

axiom subtree_inc == $sub.ref(0, 572104);

procedure subtree_inc($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation subtree_inc($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.0;
    cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 1470} cmdloc_dummy_var_28 := $memcpy.i8(cmdloc_dummy_var_26, cmdloc_dummy_var_27, $p4, $p1, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_28;
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p2);
    call {:si_unique_call 1471} {:cexpr "root"} boogie_si_record_i64($i5);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} dm_tm_inc($p7, $i5);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    return;
}



const subtree_dec: ref;

axiom subtree_dec == $sub.ref(0, 573136);

procedure subtree_dec($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation subtree_dec($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;
  var $i7: i1;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var vslice_dummy_var_122: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.0;
    cmdloc_dummy_var_30 := $M.0;
    call {:si_unique_call 1474} cmdloc_dummy_var_31 := $memcpy.i8(cmdloc_dummy_var_29, cmdloc_dummy_var_30, $p4, $p1, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_31;
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p2);
    call {:si_unique_call 1475} {:cexpr "root"} boogie_si_record_i64($i5);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} $i6 := dm_btree_del($p3, $i5);
    call {:si_unique_call 1477} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} vslice_dummy_var_122 := printk.ref(.str.163);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const subtree_equal: ref;

axiom subtree_equal == $sub.ref(0, 574168);

procedure subtree_equal($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation subtree_equal($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.0;
    cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 1481} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p5, $p1, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_34;
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.0;
    cmdloc_dummy_var_36 := $M.0;
    call {:si_unique_call 1482} cmdloc_dummy_var_37 := $memcpy.i8(cmdloc_dummy_var_35, cmdloc_dummy_var_36, $p6, $p2, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_37;
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p3);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p4);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i7, $i8);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const dm_btree_del: ref;

axiom dm_btree_del == $sub.ref(0, 575200);

procedure dm_btree_del($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dm_btree_del($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1483} {:cexpr "dm_btree_del:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1484} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1485} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dm_sm_dec_block: ref;

axiom dm_sm_dec_block == $sub.ref(0, 576232);

procedure dm_sm_dec_block($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dm_sm_dec_block($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} {:cexpr "dm_sm_dec_block:arg:b"} boogie_si_record_i64($i1);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    call {:si_unique_call 1487} $i4 := devirtbounce.14($p3, $p0, $i1);
    call {:si_unique_call 1488} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dm_sm_inc_block: ref;

axiom dm_sm_inc_block == $sub.ref(0, 577264);

procedure dm_sm_inc_block($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dm_sm_inc_block($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} {:cexpr "dm_sm_inc_block:arg:b"} boogie_si_record_i64($i1);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    call {:si_unique_call 1490} $i4 := devirtbounce.14($p3, $p0, $i1);
    call {:si_unique_call 1491} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const get_disk_ro: ref;

axiom get_disk_ro == $sub.ref(0, 578296);

procedure get_disk_ro($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_disk_ro($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(72, 1)), $mul.ref(1520, 1));
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dm_tm_create_with_sm: ref;

axiom dm_tm_create_with_sm == $sub.ref(0, 579328);

procedure dm_tm_create_with_sm($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_tm_create_with_sm($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1492} {:cexpr "dm_tm_create_with_sm:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1493} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1494} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dm_sm_disk_create: ref;

axiom dm_sm_disk_create == $sub.ref(0, 580360);

procedure dm_sm_disk_create($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation dm_sm_disk_create($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} {:cexpr "dm_sm_disk_create:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} $p2 := external_alloc();
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const dm_btree_empty: ref;

axiom dm_btree_empty == $sub.ref(0, 581392);

procedure dm_btree_empty($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_btree_empty($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1497} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1498} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __write_initial_superblock: ref;

axiom __write_initial_superblock == $sub.ref(0, 582424);

procedure __write_initial_superblock($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.42, $M.4, $M.58, $M.59, $M.60, $M.15, $M.16, $M.17, $M.40, $M.55, $M.25, $M.26, $M.29, $M.45, $M.18, $M.49, $M.47, $M.50, $M.48, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation __write_initial_superblock($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i14: i32;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(16, 1));
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 480)), $mul.ref(8, 1));
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} $i6 := i_size_read($p5);
    call {:si_unique_call 1501} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i7 := $ashr.i64($i6, 9);
    call {:si_unique_call 1502} {:cexpr "bdev_size"} boogie_si_record_i64($i7);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i64($i7, 33292800);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} $i12 := dm_sm_commit($p11);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    call {:si_unique_call 1504} {:cexpr "r"} boogie_si_record_i32($i12);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} $i15 := save_sm_roots($p0);
    call {:si_unique_call 1506} {:cexpr "r"} boogie_si_record_i32($i15);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} $i19 := dm_tm_pre_commit($p18);
    call {:si_unique_call 1508} {:cexpr "r"} boogie_si_record_i32($i19);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $i21 := superblock_lock_zero($p0, $p1);
    call {:si_unique_call 1510} {:cexpr "r"} boogie_si_record_i32($i21);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.57, $p1);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} $p24 := dm_block_data($p23);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 368)), $mul.ref(4, 1));
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 0);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p25, $mul.ref(0, 368)), $mul.ref(16, 1));
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.0;
    call {:si_unique_call 1512} cmdloc_dummy_var_39 := $memset.i8(cmdloc_dummy_var_38, $p28, 0, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_39;
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p25, $mul.ref(0, 368)), $mul.ref(32, 1));
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, 27022010);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p25, $mul.ref(0, 368)), $mul.ref(40, 1));
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 2);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p25, $mul.ref(0, 368)), $mul.ref(44, 1));
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 0);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p25, $mul.ref(0, 368)), $mul.ref(48, 1));
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p32, 0);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p25, $mul.ref(0, 368)), $mul.ref(56, 1));
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, 0);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} copy_sm_roots($p0, $p25);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p25, $mul.ref(0, 368)), $mul.ref(320, 1));
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p36, $i35);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(520, 1));
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p25, $mul.ref(0, 368)), $mul.ref(328, 1));
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i38);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p25, $mul.ref(0, 368)), $mul.ref(340, 1));
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, 8);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i41 := $lshr.i64($i9, 3);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p25, $mul.ref(0, 368)), $mul.ref(344, 1));
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p42, $i41);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(560, 1));
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i64.i32($i44);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p25, $mul.ref(0, 368)), $mul.ref(336, 1));
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.57, $p1);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $i50 := dm_tm_commit($p48, $p49);
    call {:si_unique_call 1515} {:cexpr "tmp___1"} boogie_si_record_i32($i50);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i14 := $i50;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i14 := $i21;
    goto $bb6;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i14 := $i19;
    goto $bb6;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb6;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb6;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i9 := 33292800;
    goto $bb3;
}



const dm_sm_commit: ref;

axiom dm_sm_commit == $sub.ref(0, 583456);

procedure dm_sm_commit($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.42, $M.4, $M.58, $M.59, $M.60, $M.15, $M.40, $M.16, $M.17, $M.55, $M.25, $M.26, $M.29, $M.45, $M.18, $M.49, $M.47, $M.50, $M.48, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation dm_sm_commit($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(56, 1));
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    call {:si_unique_call 1516} $i3 := devirtbounce.15($p2, $p0);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    call {:si_unique_call 1517} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;
}



const save_sm_roots: ref;

axiom save_sm_roots == $sub.ref(0, 584488);

procedure save_sm_roots($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr, $M.0, $M.15, $M.16, $M.17, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation save_sm_roots($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} $i4 := dm_sm_root_size($p3, $p1);
    call {:si_unique_call 1520} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(697, 1));
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p1);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} $i12 := dm_sm_copy_root($p8, $p10, $i11);
    call {:si_unique_call 1522} {:cexpr "r"} boogie_si_record_i32($i12);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} $i16 := dm_sm_root_size($p15, $p1);
    call {:si_unique_call 1524} {:cexpr "r"} boogie_si_record_i32($i16);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(569, 1));
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p1);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} $i23 := dm_sm_copy_root($p19, $p21, $i22);
    call {:si_unique_call 1526} {:cexpr "tmp"} boogie_si_record_i32($i23);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i6 := $i23;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i6 := $i16;
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i6 := $i12;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const dm_tm_pre_commit: ref;

axiom dm_tm_pre_commit == $sub.ref(0, 585520);

procedure dm_tm_pre_commit($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_tm_pre_commit($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1527} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1528} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const superblock_lock_zero: ref;

axiom superblock_lock_zero == $sub.ref(0, 586552);

procedure superblock_lock_zero($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation superblock_lock_zero($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} $i4 := dm_bm_write_lock_zero($p3, 0, sb_validator, $p1);
    call {:si_unique_call 1530} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const copy_sm_roots: ref;

axiom copy_sm_roots == $sub.ref(0, 587584);

procedure copy_sm_roots($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation copy_sm_roots($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(192, 1));
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(697, 1));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_40 := $M.0;
    cmdloc_dummy_var_41 := $M.0;
    call {:si_unique_call 1531} cmdloc_dummy_var_42 := $memcpy.i8(cmdloc_dummy_var_40, cmdloc_dummy_var_41, $p3, $p5, 128, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_42;
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(569, 1));
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_43 := $M.0;
    cmdloc_dummy_var_44 := $M.0;
    call {:si_unique_call 1532} cmdloc_dummy_var_45 := $memcpy.i8(cmdloc_dummy_var_43, cmdloc_dummy_var_44, $p7, $p9, 128, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_45;
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    return;
}



const dm_tm_commit: ref;

axiom dm_tm_commit == $sub.ref(0, 588616);

procedure dm_tm_commit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_tm_commit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1533} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1534} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dm_bm_write_lock_zero: ref;

axiom dm_bm_write_lock_zero == $sub.ref(0, 589648);

procedure dm_bm_write_lock_zero($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_bm_write_lock_zero($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1535} {:cexpr "dm_bm_write_lock_zero:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1536} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1537} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dm_sm_root_size: ref;

axiom dm_sm_root_size == $sub.ref(0, 590680);

procedure dm_sm_root_size($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $CurrAddr, $M.16, $M.17, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation dm_sm_root_size($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    call {:si_unique_call 1538} $i4 := devirtbounce.8($p3, $p0, $p1);
    call {:si_unique_call 1539} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dm_sm_copy_root: ref;

axiom dm_sm_copy_root == $sub.ref(0, 591712);

procedure dm_sm_copy_root($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dm_sm_copy_root($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} {:cexpr "dm_sm_copy_root:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    call {:si_unique_call 1541} $i5 := devirtbounce.16($p4, $p0, $p1, $i2);
    call {:si_unique_call 1542} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const dm_bm_block_size: ref;

axiom dm_bm_block_size == $sub.ref(0, 592744);

procedure dm_bm_block_size($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_bm_block_size($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1543} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1544} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 593776);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 594808);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __commit_transaction: ref;

axiom __commit_transaction == $sub.ref(0, 595840);

procedure __commit_transaction($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.42, $M.4, $M.58, $M.59, $M.60, $CurrAddr, $M.15, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.16, $M.17, $M.40, $M.55, $M.25, $M.26, $M.29, $M.45, $M.18, $M.49, $M.47, $M.50, $M.48, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation __commit_transaction($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} $i4 := __write_changed_details($p0);
    call {:si_unique_call 1549} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} $i9 := dm_sm_commit($p8);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    call {:si_unique_call 1551} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} $i13 := dm_tm_pre_commit($p12);
    call {:si_unique_call 1553} {:cexpr "r"} boogie_si_record_i32($i13);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} $i17 := dm_sm_root_size($p16, $p1);
    call {:si_unique_call 1555} {:cexpr "r"} boogie_si_record_i32($i17);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} $i21 := dm_sm_root_size($p20, $p2);
    call {:si_unique_call 1557} {:cexpr "r"} boogie_si_record_i32($i21);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 0);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} $i23 := save_sm_roots($p0);
    call {:si_unique_call 1559} {:cexpr "r"} boogie_si_record_i32($i23);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} $i25 := superblock_lock($p0, $p3);
    call {:si_unique_call 1561} {:cexpr "r"} boogie_si_record_i32($i25);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.54, $p3);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} $p28 := dm_block_data($p27);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(504, 1));
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p29, $mul.ref(0, 368)), $mul.ref(44, 1));
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p29, $mul.ref(0, 368)), $mul.ref(320, 1));
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p35, $i34);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(520, 1));
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p29, $mul.ref(0, 368)), $mul.ref(328, 1));
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, $i37);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(544, 1));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p29, $mul.ref(0, 368)), $mul.ref(48, 1));
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p41, $i40);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(552, 1));
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i64.i32($i43);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p29, $mul.ref(0, 368)), $mul.ref(4, 1));
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} copy_sm_roots($p0, $p29);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.54, $p3);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} $i49 := dm_tm_commit($p47, $p48);
    call {:si_unique_call 1565} {:cexpr "tmp___0"} boogie_si_record_i32($i49);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i6 := $i49;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb20:
    assume $i26 == 1;
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $i6 := $i25;
    goto $bb3;

  $bb17:
    assume $i24 == 1;
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i6 := $i23;
    goto $bb3;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i6 := $i21;
    goto $bb3;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i6 := $i17;
    goto $bb3;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i6 := $i13;
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb3;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const __begin_transaction: ref;

axiom __begin_transaction == $sub.ref(0, 596872);

procedure __begin_transaction($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __begin_transaction($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i6: i32;
  var vslice_dummy_var_123: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} $i4 := dm_bm_read_lock($p3, 0, sb_validator, $p1);
    call {:si_unique_call 1568} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.56, $p1);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} $p8 := dm_block_data($p7);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 368)), $mul.ref(44, 1));
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(504, 1));
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref(0, 368)), $mul.ref(320, 1));
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, $i14);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 368)), $mul.ref(328, 1));
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(520, 1));
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p18, $i17);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p9, $mul.ref(0, 368)), $mul.ref(48, 1));
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(544, 1));
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p21, $i20);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p9, $mul.ref(0, 368)), $mul.ref(4, 1));
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(552, 1));
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i24);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p9, $mul.ref(0, 368)), $mul.ref(336, 1));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(560, 1));
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i28);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.56, $p1);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} vslice_dummy_var_123 := dm_bm_unlock($p30);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const __write_changed_details: ref;

axiom __write_changed_details == $sub.ref(0, 597904);

procedure __write_changed_details($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.4, $M.58, $M.59, $M.60, $M.0, $CurrAddr;



implementation __write_changed_details($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p16: ref;
  var $p17: ref;
  var $i43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} $p1 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(528, 1)), $mul.ref(0, 1));
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i12, $i14);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $r := $i43;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p16, $p17 := $p9, $p5;
    goto $bb4;

  $bb4:
    call $p18, $i19, $i20, $p21, $i22, $p23, $i24, $p25, $p26, $i27, $p28, $p29, $i30, $p31, $p32, $i33, $p34, $p35, $p36, $i37, $p38, $p39, $i40, $i41, $i42, $p44, $i45, $i46, $p47, $p48, $p49, $p51, $p52, $p54, $i55, $i56, $p16, $p17 := __write_changed_details_loop_$bb4($p0, $p1, $p2, $i14, $p18, $i19, $i20, $p21, $i22, $p23, $i24, $p25, $p26, $i27, $p28, $p29, $i30, $p31, $p32, $i33, $p34, $p35, $p36, $i37, $p38, $p39, $i40, $i41, $i42, $p44, $i45, $i46, $p47, $p48, $p49, $p51, $p52, $p54, $i55, $i56, $p16, $p17);
    goto $bb4_last;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p16, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, $i14);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i56 == 1);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $p16, $p17 := $p52, $p16;
    goto $bb17_dummy;

  $bb6:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p17, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $M.42 := $store.i64($M.42, $p2, $i22);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p17, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $M.4 := $store.i64($M.4, $p25, $i24);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p17, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $M.58 := $store.i64($M.58, $p28, $i27);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p17, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $M.59 := $store.i32($M.59, $p31, $i30);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p17, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $M.60 := $store.i32($M.60, $p34, $i33);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(288, 1));
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(520, 1));
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p1);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(520, 1));
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} $i40 := dm_btree_insert($p35, $i37, $p2, $p38, $p39);
    call {:si_unique_call 1574} {:cexpr "r"} boogie_si_record_i32($i40);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i42 := $i40;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p17, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i46 == 1);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p17, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} list_del($p48);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p17);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} kfree($p49);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb14:
    assume $i46 == 1;
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p17, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, 0);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb12;

  $bb17_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6063;
}



const thin_get: ref;

axiom thin_get == $sub.ref(0, 598936);

procedure thin_get($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation thin_get($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(208, 1));
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} atomic_inc($p1);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;
}



const __sort_thin_deferred_bios: ref;

axiom __sort_thin_deferred_bios == $sub.ref(0, 599968);

procedure __sort_thin_deferred_bios($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __sort_thin_deferred_bios($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} bio_list_init($p1);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} bio_list_merge($p1, $p2);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} bio_list_init($p3);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} $p4 := bio_list_pop($p1);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} __extract_sorted_bios($p0);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p7 := $p4;
    goto $bb4;

  $bb4:
    call $p8, $i9, $i10, $p7 := __sort_thin_deferred_bios_loop_$bb4($p0, $p1, $p8, $i9, $i10, $p7);
    goto $bb4_last;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} __thin_bio_rb_add($p0, $p7);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} $p8 := bio_list_pop($p1);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $p7 := $p8;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6140;
}



const __thin_bio_rb_add: ref;

axiom __thin_bio_rb_add == $sub.ref(0, 601000);

procedure __thin_bio_rb_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __thin_bio_rb_add($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $i4: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p24: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p12: ref;
  var $p30: ref;
  var $p31: ref;
  var $p10: ref;
  var $p11: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    call {:si_unique_call 1586} {:cexpr "bi_sector"} boogie_si_record_i64($i4);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $p10, $p11 := $p6, $0.ref;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} $p32 := dm_per_bio_data($p1, 64);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} rb_link_node($p34, $p11, $p10);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p33, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(200, 1));
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} rb_insert_color($p35, $p36);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $p12 := $p6;
    goto $bb4;

  $bb4:
    call $p13, $p14, $p15, $p16, $p17, $p19, $i20, $i21, $p22, $p23, $p25, $p26, $p24, $p27, $i28, $i29, $p12, $p30, $p31 := __thin_bio_rb_add_loop_$bb4($i4, $p13, $p14, $p15, $p16, $p17, $p19, $i20, $i21, $p22, $p23, $p25, $p26, $p24, $p27, $i28, $i29, $p12, $p30, $p31);
    goto $bb4_last;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref($sub.ref(0, 32), 64));
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} $p17 := dm_bio_from_per_bio_data($p16, 64);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i64($i20, $i4);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p12);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 24)), $mul.ref(8, 1));
    assume {:verifier.code 0} true;
    $p24 := $p26;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p24);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $p30, $p31 := $p24, $p13;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p10, $p11 := $p30, $p31;
    goto $bb3;

  $bb9:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $p12 := $p24;
    goto $bb9_dummy;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p12);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $p24 := $p23;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6161;
}



const __extract_sorted_bios: ref;

axiom __extract_sorted_bios == $sub.ref(0, 602032);

procedure __extract_sorted_bios($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __extract_sorted_bios($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p5: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var vslice_dummy_var_124: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(200, 1));
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} $p2 := rb_first($p1);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    call {:si_unique_call 1596} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i21);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 1598} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i21, 0);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} vslice_dummy_var_124 := ldv__builtin_expect($i29, 0);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} warn_slowpath_null(.str.30, 2016);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $p5 := $p2;
    goto $bb4;

  $bb4:
    call $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $i14, $i15, $p5 := __extract_sorted_bios_loop_$bb4($p0, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $i14, $i15, $p5);
    goto $bb4_last;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($sub.ref(0, 32), 64));
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} $p9 := dm_bio_from_per_bio_data($p8, 64);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} bio_list_add($p10, $p9);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref($sub.ref(0, 32), 64)), $mul.ref(32, 1));
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 312)), $mul.ref(200, 1));
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} rb_erase($p11, $p12);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} $p13 := rb_next($p5);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $p5 := $p13;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6202;
}



const rb_first: ref;

axiom rb_first == $sub.ref(0, 603064);

procedure rb_first($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation rb_first($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} $p1 := external_alloc();
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dm_bio_from_per_bio_data: ref;

axiom dm_bio_from_per_bio_data == $sub.ref(0, 604096);

procedure dm_bio_from_per_bio_data($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation dm_bio_from_per_bio_data($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} {:cexpr "dm_bio_from_per_bio_data:arg:data_size"} boogie_si_record_i64($i1);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i1, 32);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref($i3, 136));
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const rb_erase: ref;

axiom rb_erase == $sub.ref(0, 605128);

procedure rb_erase($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation rb_erase($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    return;
}



const rb_next: ref;

axiom rb_next == $sub.ref(0, 606160);

procedure rb_next($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation rb_next($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} $p1 := external_alloc();
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const rb_link_node: ref;

axiom rb_link_node == $sub.ref(0, 607192);

procedure rb_link_node($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rb_link_node($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, $i3);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    return;
}



const rb_insert_color: ref;

axiom rb_insert_color == $sub.ref(0, 608224);

procedure rb_insert_color($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation rb_insert_color($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    return;
}



const sort_cells: ref;

axiom sort_cells == $sub.ref(0, 609256);

procedure sort_cells($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation sort_cells($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i17: i1;
  var $i18: i32;
  var $i20: i32;
  var $i21: i64;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i32: i32;
  var $i13: i32;
  var $i19: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p1);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i10, $i11);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i13 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i19 := $i13;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(1040, 1));
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i19);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} sort($p34, $i35, 8, cmp_cells, $0.ref);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $p14, $p15, $i16 := $p7, $p3, 0;
    goto $bb4;

  $bb4:
    call $i17, $i18, $i20, $i21, $p23, $p24, $p26, $p27, $p29, $i30, $i31, $p14, $p15, $i16, $i32 := sort_cells_loop_$bb4($p0, $i11, $i17, $i18, $i20, $i21, $p23, $p24, $p26, $p27, $p29, $i30, $i31, $p14, $p15, $i16, $i32);
    goto $bb4_last;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i32($i16, 8191);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i16, 1);
    call {:si_unique_call 1605} {:cexpr "count"} boogie_si_record_i32($i20);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i16);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(1040, 1)), $mul.ref($i21, 8));
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p15);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p15, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} list_del($p24);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p14, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, $i11);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i32 := $i20;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i13 := $i32;
    goto $bb3;

  $bb10:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $p14, $p15, $i16 := $p27, $p14, $i20;
    goto $bb10_dummy;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6279;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 610288);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} __list_add($p0, $p1, $p3);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    return;
}



const list_splice: ref;

axiom list_splice == $sub.ref(0, 611320);

procedure list_splice($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_splice($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} $i2 := list_empty($p0);
    call {:si_unique_call 1609} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} __list_splice($p0, $p1, $p5);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cmp_cells: ref;

axiom cmp_cells == $sub.ref(0, 612352);

procedure cmp_cells($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cmp_cells($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $i33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 1612} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 1615} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i32 := $ult.i64($i26, $i31);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p40, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i44 := $ugt.i64($i38, $i43);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb13:
    assume $i44 == 1;
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i33 := 1;
    goto $bb11;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 1);
    goto $bb11;

  $bb5:
    assume $i21 == 1;
    call {:si_unique_call 1616} devirtbounce.3(0, .str.30, 2104, 12);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call cmp_cells_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i13 == 1;
    call {:si_unique_call 1613} devirtbounce.3(0, .str.30, 2103, 12);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call cmp_cells_loop_$bb3();
    goto $bb3_last;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const sort: ref;

axiom sort == $sub.ref(0, 613384);

procedure sort($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref);
  free requires assertsPassed;



implementation sort($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} {:cexpr "sort:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1618} {:cexpr "sort:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    return;
}



const dm_tm_issue_prefetches: ref;

axiom dm_tm_issue_prefetches == $sub.ref(0, 614416);

procedure dm_tm_issue_prefetches($p0: ref);
  free requires assertsPassed;



implementation dm_tm_issue_prefetches($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    return;
}



const dm_bm_is_read_only: ref;

axiom dm_bm_is_read_only == $sub.ref(0, 615448);

procedure dm_bm_is_read_only($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation dm_bm_is_read_only($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1619} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1620} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 616480);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_lock_mutex_of_dm_thin_pool_table: ref;

axiom ldv_mutex_lock_mutex_of_dm_thin_pool_table == $sub.ref(0, 617512);

procedure ldv_mutex_lock_mutex_of_dm_thin_pool_table($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_mutex_lock_mutex_of_dm_thin_pool_table($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i1 := $M.18;
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 1622} {:cexpr "ldv_mutex_mutex_of_dm_thin_pool_table"} boogie_si_record_i32(2);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} ldv_error();
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_337:
    assume !assertsPassed;
    return;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 618544);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    return;
}



const synchronize_sched: ref;

axiom synchronize_sched == $sub.ref(0, 619576);

procedure synchronize_sched();
  free requires assertsPassed;



implementation synchronize_sched()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 620608);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_29: ref;

axiom ldv_mutex_lock_29 == $sub.ref(0, 621640);

procedure ldv_mutex_lock_29($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_mutex_lock_29($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} ldv_mutex_lock_mutex_of_dm_thin_pool_table($p0);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} mutex_lock($p0);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 622672);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1626} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const dm_table_get_md: ref;

axiom dm_table_get_md == $sub.ref(0, 623704);

procedure dm_table_get_md($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dm_table_get_md($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} $p1 := external_alloc();
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 624736);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    return;
}



const dm_get_device: ref;

axiom dm_get_device == $sub.ref(0, 625768);

procedure dm_get_device($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_get_device($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1629} {:cexpr "dm_get_device:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1630} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1631} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dm_table_get_mode: ref;

axiom dm_table_get_mode == $sub.ref(0, 626800);

procedure dm_table_get_mode($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_table_get_mode($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1632} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1633} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const read_dev_id: ref;

axiom read_dev_id == $sub.ref(0, 627832);

procedure read_dev_id($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation read_dev_id($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $i6: i1;
  var $i8: i1;
  var $i7: i32;
  var vslice_dummy_var_125: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} {:cexpr "read_dev_id:arg:warning"} boogie_si_record_i32($i2);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} $i3 := kstrtoull($p0, 10, $p1);
    call {:si_unique_call 1636} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i2, 0);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} vslice_dummy_var_125 := printk.ref.ref(.str.104, $p0);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p1);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i5, 16777215);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;
}



const dm_get_md: ref;

axiom dm_get_md == $sub.ref(0, 628864);

procedure dm_get_md($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation dm_get_md($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} {:cexpr "dm_get_md:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} $p1 := external_alloc();
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __pool_table_lookup: ref;

axiom __pool_table_lookup == $sub.ref(0, 629896);

procedure __pool_table_lookup($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __pool_table_lookup($p0: ref) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p12: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} $i1 := mutex_is_locked(dm_thin_pool_table);
    call {:si_unique_call 1641} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1643} {:cexpr "tmp___1"} boogie_si_record_i64($i5);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(160, 1)), $mul.ref(0, 1)));
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 66576)), $mul.ref(0, 1));
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, $p2i.ref.i64($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(160, 1))));
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p19 := $0.ref;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $r := $p19;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $p12 := $p7;
    goto $bb8;

  $bb8:
    call $p13, $p14, $i15, $i16, $i17, $p18, $p21, $p22, $p23, $p24, $i25, $i26, $p12 := __pool_table_lookup_loop_$bb8($p0, $p13, $p14, $i15, $i16, $i17, $p18, $p21, $p22, $p23, $p24, $i25, $i26, $p12);
    goto $bb8_last;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p0);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i15, $i16);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $p18 := $p12;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 66576)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 66576)), $mul.ref(0, 1));
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, $p2i.ref.i64($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(160, 1))));
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb14:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $p12 := $p22;
    goto $bb14_dummy;

  $bb10:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $p19 := $p18;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 1644} devirtbounce.3(0, .str.30, 568, 12);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call __pool_table_lookup_loop_$bb3();
    goto $bb3_last;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6458;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const __pool_inc: ref;

axiom __pool_inc == $sub.ref(0, 630928);

procedure __pool_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __pool_inc($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} $i1 := mutex_is_locked(dm_thin_pool_table);
    call {:si_unique_call 1646} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1648} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(816, 1));
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 1);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(816, 1));
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 1649} devirtbounce.3(0, .str.30, 2921, 12);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call __pool_inc_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const dm_pool_open_thin_device: ref;

axiom dm_pool_open_thin_device == $sub.ref(0, 631960);

procedure dm_pool_open_thin_device($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.61, $M.0, $M.4, $M.58, $M.59, $M.60, $CurrAddr;



implementation dm_pool_open_thin_device($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} {:cexpr "dm_pool_open_thin_device:arg:dev"} boogie_si_record_i64($i1);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} down_write($p3);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} $i7 := __open_device($p0, $i1, 0, $p2);
    call {:si_unique_call 1653} {:cexpr "r"} boogie_si_record_i32($i7);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} up_write($p9);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const dm_set_target_max_io_len: ref;

axiom dm_set_target_max_io_len == $sub.ref(0, 632992);

procedure dm_set_target_max_io_len($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dm_set_target_max_io_len($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1655} {:cexpr "dm_set_target_max_io_len:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1656} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1657} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_unlock_30: ref;

axiom ldv_mutex_unlock_30 == $sub.ref(0, 634024);

procedure ldv_mutex_unlock_30($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_mutex_unlock_30($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} ldv_mutex_unlock_mutex_of_dm_thin_pool_table($p0);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} mutex_unlock($p0);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_31: ref;

axiom ldv_mutex_lock_31 == $sub.ref(0, 635056);

procedure ldv_mutex_lock_31($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_mutex_lock_31($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} ldv_mutex_lock_mutex_of_dm_thin_pool_table($p0);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} mutex_lock($p0);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;
}



const list_add_tail_rcu: ref;

axiom list_add_tail_rcu == $sub.ref(0, 636088);

procedure list_add_tail_rcu($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail_rcu($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} __list_add_rcu($p0, $p3, $p1);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    return;
}



const dm_put: ref;

axiom dm_put == $sub.ref(0, 637120);

procedure dm_put($p0: ref);
  free requires assertsPassed;



implementation dm_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_32: ref;

axiom ldv_mutex_unlock_32 == $sub.ref(0, 638152);

procedure ldv_mutex_unlock_32($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_mutex_unlock_32($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} ldv_mutex_unlock_mutex_of_dm_thin_pool_table($p0);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} mutex_unlock($p0);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;
}



const __list_add_rcu: ref;

axiom __list_add_rcu == $sub.ref(0, 639184);

procedure __list_add_rcu($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add_rcu($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    return;
}



const __open_device: ref;

axiom __open_device == $sub.ref(0, 640216);

procedure __open_device($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.61, $M.0, $M.4, $M.58, $M.59, $M.60, $CurrAddr;



implementation __open_device($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p15: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 1667} {:cexpr "__open_device:arg:dev"} boogie_si_record_i64($i1);
    call {:si_unique_call 1668} {:cexpr "__open_device:arg:create"} boogie_si_record_i32($i2);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $M.61 := $store.i64($M.61, $p4, $i1);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(528, 1)), $mul.ref(0, 1));
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i11, $i13);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(288, 1));
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(520, 1));
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p5);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} $i37 := dm_btree_lookup($p33, $i35, $p4, $p36);
    call {:si_unique_call 1670} {:cexpr "r"} boogie_si_record_i32($i37);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i51 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} $p52 := kmalloc(64, 16);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p52);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p3);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i55, 0);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p3);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, $p0);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p3);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p60, $i1);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p3);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, 1);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i51, 0);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p3);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i66 := $zext.i1.i8($i63);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, $i66);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p3);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 64)), $mul.ref(37, 1));
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p68, 0);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.4, $p69);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p3);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p72, $i70);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.58, $p73);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p3);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p76, $i74);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.59, $p77);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p3);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i78);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.60, $p81);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p3);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, $i82);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p3);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} list_add($p86, $p87);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb25:
    assume $i56 == 1;
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 12);
    goto $bb10;

  $bb16:
    assume $i38 == 1;
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i37, $sub.i32(0, 61));
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i39 == 1);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i2, 0);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $M.4 := $store.i64($M.4, $p41, 0);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(544, 1));
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $M.58 := $store.i64($M.58, $p44, $i43);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(504, 1));
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $M.59 := $store.i32($M.59, $p47, $i46);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(504, 1));
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $M.60 := $store.i32($M.60, $p50, $i49);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $i51 := 1;
    goto $bb24;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i21 := $i37;
    goto $bb10;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb19;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $p15 := $p8;
    goto $bb4;

  $bb4:
    call $p16, $i17, $i18, $p19, $p27, $p28, $p29, $p30, $i31, $i32, $p15 := __open_device_loop_$bb4($i1, $i13, $p16, $i17, $i18, $p19, $p27, $p28, $p29, $p30, $i31, $i32, $p15);
    goto $bb4_last;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, $i1);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $p19 := $p15;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, $i13);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $p15 := $p28;
    goto $bb13_dummy;

  $bb6:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i2, 0);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 1);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p19, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p19);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb10;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 17);
    goto $bb10;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6546;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 641248);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1674} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 642280);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1677} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} $p2 := ldv_malloc($i0);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kstrtoull: ref;

axiom kstrtoull == $sub.ref(0, 643312);

procedure kstrtoull($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoull($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1679} {:cexpr "kstrtoull:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1680} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1681} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pool_ctr: ref;

axiom pool_ctr == $sub.ref(0, 644344);

procedure pool_ctr($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.62, $M.0, $M.63, $M.64, $M.18, $M.78, $M.79, $M.80, $M.81, $CurrAddr, assertsPassed, $M.42, $M.4, $M.58, $M.59, $M.60, $M.5, $M.7, $M.9, $M.11, $M.55, $M.15, $M.45, $M.6, $M.8, $M.10, $M.12, $M.16, $M.17, $M.51, $M.52, $M.41, $M.43, $M.40, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation pool_ctr($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i64;
  var $i40: i1;
  var $i41: i64;
  var $i42: i1;
  var $i43: i64;
  var $i44: i1;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i1;
  var $i74: i8;
  var $i75: i1;
  var $p76: ref;
  var $i77: i64;
  var $i78: i32;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i8;
  var $i84: i1;
  var $i85: i32;
  var $p87: ref;
  var $i88: i8;
  var $i89: i1;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i8;
  var $i113: i1;
  var $p114: ref;
  var $i115: i8;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var $p120: ref;
  var $i121: i64;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $i128: i1;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i79: i32;
  var $p135: ref;
  var $i49: i32;
  var $p136: ref;
  var $i34: i32;
  var $p137: ref;
  var $i13: i32;
  var $i134: i32;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1690} {:cexpr "pool_ctr:arg:argc"} boogie_si_record_i32($i1);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p3, 0);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} ldv_mutex_lock_21(dm_thin_pool_table);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i11 := $ule.i32($i1, 3);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $M.63 := $store.i32($M.63, $p14, $i1);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $M.64 := $store.ref($M.64, $p15, $p2);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} pool_features_init($p4);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} dm_consume_args($p5, 4);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} $i16 := parse_pool_features($p5, $p4, $p0);
    call {:si_unique_call 1696} {:cexpr "r"} boogie_si_record_i32($i16);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i21 := (if $i20 == 1 then 1 else 3);
    call {:si_unique_call 1697} {:cexpr "metadata_mode"} boogie_si_record_i32($i21);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p2);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} $i23 := dm_get_device($p0, $p22, $i21, $p9);
    call {:si_unique_call 1699} {:cexpr "r"} boogie_si_record_i32($i23);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p9);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} warn_if_metadata_device_too_big($p28);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p2, $mul.ref(1, 8));
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} $i31 := dm_get_device($p0, $p30, 3, $p6);
    call {:si_unique_call 1702} {:cexpr "r"} boogie_si_record_i32($i31);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p2, $mul.ref(2, 8));
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} $i37 := kstrtoul($p36, 10, $p7);
    call {:si_unique_call 1705} {:cexpr "tmp"} boogie_si_record_i32($i37);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i38 == 1);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p7);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i40 == 1);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p7);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i42 := $ule.i64($i41, 127);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p7);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i44 := $ugt.i64($i43, 2097152);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i44 == 1);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p7);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $i46 := $and.i64($i45, 127);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p2, $mul.ref(3, 8));
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} $i52 := kstrtoull($p51, 10, $p8);
    call {:si_unique_call 1708} {:cexpr "tmp___0"} boogie_si_record_i32($i52);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} $p55 := kzalloc(80, 208);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i58 := $eq.i64($i57, 0);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} $p61 := dm_table_get_md($p60);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.1, $p9);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, $p7);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 2);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i32($i68);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} $p71 := __pool_find($p61, $p64, $i65, $i69, $p70, $p3);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} $i73 := IS_ERR($p72);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i74 := $zext.i1.i8($i73);
    call {:si_unique_call 1713} {:cexpr "tmp___4"} boogie_si_record_i8($i74);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i8.i1($i74);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.62, $p3);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 0);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p56, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p93, $p71);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p56, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p94, $p0);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.1, $p9);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p56, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p96, $p95);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.1, $p6);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p56, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p98, $p97);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $i99 := $load.i64($M.0, $p8);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p56, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p100, $i99);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p10);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p4);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_46 := $M.0;
    cmdloc_dummy_var_47 := $M.0;
    call {:si_unique_call 1719} cmdloc_dummy_var_48 := $memcpy.i8(cmdloc_dummy_var_46, cmdloc_dummy_var_47, $p101, $p102, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_48;
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p56, $mul.ref(0, 80)), $mul.ref(64, 1));
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p10);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_49 := $M.0;
    cmdloc_dummy_var_50 := $M.0;
    call {:si_unique_call 1720} cmdloc_dummy_var_51 := $memcpy.i8(cmdloc_dummy_var_49, cmdloc_dummy_var_50, $p104, $p105, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_51;
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p56, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p10);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_52 := $M.0;
    cmdloc_dummy_var_53 := $M.0;
    call {:si_unique_call 1721} cmdloc_dummy_var_54 := $memcpy.i8(cmdloc_dummy_var_52, cmdloc_dummy_var_53, $p107, $p108, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_54;
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(36, 1));
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p109, 1);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(83, 1));
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p110, 1);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.0, $p111);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i8.i1($i112);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p120, $p55);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} $i121 := calc_metadata_threshold($p56);
    call {:si_unique_call 1723} {:cexpr "tmp___6"} boogie_si_record_i64($i121);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p56, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p71);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} $i127 := dm_pool_register_metadata_threshold($p125, $i121, metadata_low_callback, $p126);
    call {:si_unique_call 1725} {:cexpr "r"} boogie_si_record_i32($i127);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i127, 0);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p56, $mul.ref(0, 80)), $mul.ref(32, 1)), $mul.ref(16, 1));
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p130, pool_is_congested);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p56, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} dm_table_add_target_callbacks($p132, $p133);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} ldv_mutex_unlock_22(dm_thin_pool_table);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i134 := 0;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $r := $i134;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i128 == 1;
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i79 := $i127;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p56);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} kfree($p135);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $i49 := $i79;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.1, $p6);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} dm_put_device($p0, $p136);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i34 := $i49;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.1, $p9);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} dm_put_device($p0, $p137);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i13 := $i34;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} ldv_mutex_unlock_23(dm_thin_pool_table);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $i134 := $i13;
    goto $bb54;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i113 == 1;
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.0, $p114);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i8.i1($i115);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb47;

  $bb48:
    assume $i116 == 1;
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, 1);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(81, 1));
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p118, 1);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb38:
    assume $i81 == 1;
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.0, $p82);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i8.i1($i83);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i85 := $zext.i1.i32($i84);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p71, $mul.ref(0, 66576)), $mul.ref(64, 1)), $mul.ref(5, 1));
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i8.i1($i88);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $i90 := $zext.i1.i32($i89);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i85, $i90);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb40;

  $bb41:
    assume $i91 == 1;
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p92, .str.49);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} __pool_dec($p71);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $i79 := $sub.i32(0, 22);
    goto $bb36;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i75 == 1;
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p71);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} $i77 := PTR_ERR($p76);
    call {:si_unique_call 1715} {:cexpr "tmp___3"} boogie_si_record_i64($i77);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i64.i32($i77);
    call {:si_unique_call 1716} {:cexpr "r"} boogie_si_record_i32($i78);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i79 := $i78;
    goto $bb36;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i58 == 1;
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32(0, 12);
    goto $bb26;

  $bb28:
    assume $i53 == 1;
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p54, .str.48);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32(0, 22);
    goto $bb26;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, .str.47);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32(0, 22);
    goto $bb26;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb16;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb16;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb16;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb16;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, .str.46);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $i34 := $i31;
    goto $bb13;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, .str.45);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i13 := $i23;
    goto $bb3;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i13 := $i16;
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, .str.44);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb3;

  SeqInstr_352:
    assume !assertsPassed;
    return;
}



const pool_dtr: ref;

axiom pool_dtr == $sub.ref(0, 645376);

procedure pool_dtr($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18, assertsPassed, $M.42, $M.4, $M.58, $M.59, $M.60, $M.5, $M.7, $M.9, $M.11, $CurrAddr, $M.15, $M.45, $M.6, $M.8, $M.10, $M.12, $M.16, $M.17, $M.51, $M.52, $M.41, $M.43, $M.40, $M.25, $M.26, $M.29, $M.55, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation pool_dtr($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} ldv_mutex_lock_19(dm_thin_pool_table);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} unbind_control_target($p5, $p0);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} __pool_dec($p7);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} dm_put_device($p0, $p9);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} dm_put_device($p0, $p11);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} kfree($p12);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} ldv_mutex_unlock_20(dm_thin_pool_table);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;
}



const pool_map: ref;

axiom pool_map == $sub.ref(0, 646408);

procedure pool_map($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pool_map($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} $p8 := spinlock_check($p7);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} $i9 := _raw_spin_lock_irqsave($p8);
    call {:si_unique_call 1737} {:cexpr "flags"} boogie_si_record_i64($i9);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p13);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} spin_unlock_irqrestore($p15, $i9);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const pool_presuspend: ref;

axiom pool_presuspend == $sub.ref(0, 647440);

procedure pool_presuspend($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation pool_presuspend($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} $p7 := spinlock_check($p6);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} $i8 := _raw_spin_lock_irqsave($p7);
    call {:si_unique_call 1741} {:cexpr "flags"} boogie_si_record_i64($i8);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 66576)), $mul.ref(73, 1));
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 1);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} spin_unlock_irqrestore($p10, $i8);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} pool_suspend_active_thins($p5);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;
}



const pool_presuspend_undo: ref;

axiom pool_presuspend_undo == $sub.ref(0, 648472);

procedure pool_presuspend_undo($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation pool_presuspend_undo($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} pool_resume_active_thins($p5);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} $p7 := spinlock_check($p6);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} $i8 := _raw_spin_lock_irqsave($p7);
    call {:si_unique_call 1747} {:cexpr "flags"} boogie_si_record_i64($i8);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 66576)), $mul.ref(73, 1));
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} spin_unlock_irqrestore($p10, $i8);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;
}



const pool_postsuspend: ref;

axiom pool_postsuspend == $sub.ref(0, 649504);

procedure pool_postsuspend($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11, $M.0, $M.42, $M.4, $M.58, $M.59, $M.60, $CurrAddr, $M.6, $M.8, $M.10, $M.12, $M.15, $M.40, $M.16, $M.17, $M.55, $M.25, $M.26, $M.29, $M.45, $M.18, $M.49, $M.47, $M.50, $M.48, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation pool_postsuspend($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var vslice_dummy_var_126: i1;
  var vslice_dummy_var_127: i1;
  var vslice_dummy_var_128: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 66576)), $mul.ref(360, 1));
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} vslice_dummy_var_126 := ldv_cancel_delayed_work_24($p6);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 66576)), $mul.ref(584, 1));
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} vslice_dummy_var_127 := ldv_cancel_delayed_work_25($p8);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 66576)), $mul.ref(96, 1));
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} ldv_flush_workqueue_26($p11);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} vslice_dummy_var_128 := commit($p5);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  SeqInstr_382:
    assume !assertsPassed;
    return;
}



const pool_preresume: ref;

axiom pool_preresume == $sub.ref(0, 650536);

procedure pool_preresume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.42, $M.4, $M.58, $M.59, $M.60, $M.15, $M.40, $M.16, $M.17, $M.55, $M.25, $M.26, $M.29, $M.45, $M.18, $M.49, $M.47, $M.50, $M.48, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation pool_preresume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $i17: i8;
  var $i18: i1;
  var $i10: i32;
  var vslice_dummy_var_129: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} $i8 := bind_control_target($p7, $p0);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    call {:si_unique_call 1756} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} $i11 := maybe_resize_data_dev($p0, $p1);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    call {:si_unique_call 1758} {:cexpr "r"} boogie_si_record_i32($i11);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} $i13 := maybe_resize_metadata_dev($p0, $p2);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    call {:si_unique_call 1760} {:cexpr "r"} boogie_si_record_i32($i13);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p1);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i16 == 1);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p2);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} vslice_dummy_var_129 := commit($p7);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb12;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i10 := $i13;
    goto $bb3;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i10 := $i11;
    goto $bb3;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;

  SeqInstr_388:
    assume !assertsPassed;
    return;
}



const pool_resume: ref;

axiom pool_resume == $sub.ref(0, 651568);

procedure pool_resume($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation pool_resume($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} requeue_bios($p5);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} pool_resume_active_thins($p5);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} $p7 := spinlock_check($p6);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} $i8 := _raw_spin_lock_irqsave($p7);
    call {:si_unique_call 1766} {:cexpr "flags"} boogie_si_record_i64($i8);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 66576)), $mul.ref(72, 1));
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 66576)), $mul.ref(73, 1));
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} spin_unlock_irqrestore($p11, $i8);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 66576)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} do_waker($p13);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;
}



const pool_status: ref;

axiom pool_status == $sub.ref(0, 652600);

procedure pool_status($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32);
  free requires assertsPassed;
  modifies $M.65, $CurrAddr, $M.0, $M.66, $M.42, $M.4, $M.58, $M.59, $M.60, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.15, $M.16, $M.17, $M.55, $M.45, $M.18, $M.40, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation pool_status($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i82: i1;
  var $i83: i64;
  var $p84: ref;
  var $i85: i32;
  var $i86: i64;
  var $i87: i64;
  var $i88: i64;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $i92: i64;
  var $i93: i64;
  var $i94: i64;
  var $i95: i64;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i64;
  var $i100: i1;
  var $i101: i1;
  var $i102: i64;
  var $p103: ref;
  var $i104: i32;
  var $i105: i64;
  var $i106: i64;
  var $i107: i32;
  var $i108: i32;
  var $i109: i32;
  var $i111: i1;
  var $i112: i64;
  var $p113: ref;
  var $i114: i32;
  var $i115: i64;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $i110: i32;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $i123: i1;
  var $i124: i64;
  var $p125: ref;
  var $i126: i32;
  var $i127: i64;
  var $i128: i32;
  var $i129: i32;
  var $i130: i32;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $i136: i1;
  var $i137: i64;
  var $p138: ref;
  var $i139: i32;
  var $i140: i64;
  var $i141: i32;
  var $i142: i32;
  var $i143: i32;
  var $i145: i1;
  var $i146: i64;
  var $p147: ref;
  var $i148: i32;
  var $i149: i64;
  var $i150: i32;
  var $i151: i32;
  var $i152: i32;
  var $i144: i32;
  var $i131: i32;
  var $p154: ref;
  var $i155: i8;
  var $i156: i1;
  var $i157: i1;
  var $i158: i64;
  var $p159: ref;
  var $i160: i32;
  var $i161: i64;
  var $i162: i32;
  var $i163: i32;
  var $i164: i32;
  var $p167: ref;
  var $i168: i8;
  var $i169: i1;
  var $i170: i1;
  var $i171: i64;
  var $p172: ref;
  var $i173: i32;
  var $i174: i64;
  var $i175: i32;
  var $i176: i32;
  var $i177: i32;
  var $i179: i1;
  var $i180: i64;
  var $p181: ref;
  var $i182: i32;
  var $i183: i64;
  var $i184: i32;
  var $i185: i32;
  var $i186: i32;
  var $i178: i32;
  var $i165: i32;
  var $p188: ref;
  var $i189: i8;
  var $i190: i1;
  var $i191: i1;
  var $i192: i64;
  var $p193: ref;
  var $i194: i32;
  var $i195: i64;
  var $i196: i32;
  var $i197: i1;
  var $i198: i64;
  var $p199: ref;
  var $i200: i32;
  var $i201: i64;
  var $i202: i32;
  var $i203: i1;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $i210: i32;
  var $i211: i32;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $i217: i32;
  var $i218: i32;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $i226: i32;
  var $i227: i32;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $i233: i32;
  var $i234: i32;
  var $i236: i64;
  var $p237: ref;
  var $i238: i32;
  var $i239: i64;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $i243: i32;
  var $i244: i64;
  var $p245: ref;
  var $i246: i64;
  var $i247: i32;
  var $i248: i32;
  var $i249: i32;
  var $p250: ref;
  var $i251: i1;
  var $i252: i64;
  var $p253: ref;
  var $i254: i32;
  var $i255: i64;
  var $i256: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} $p11 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} $p12 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 1777} {:cexpr "pool_status:arg:type"} boogie_si_record_i32($i1);
    call {:si_unique_call 1778} {:cexpr "pool_status:arg:status_flags"} boogie_si_record_i32($i2);
    call {:si_unique_call 1779} {:cexpr "pool_status:arg:maxlen"} boogie_si_record_i32($i4);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $i203 := $ult.i32(0, $i4);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    $i248 := 0;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $i249 := $add.i32($i248, 0);
    call {:si_unique_call 1846} {:cexpr "sz"} boogie_si_record_i32($i249);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p15, $mul.ref(0, 80)), $mul.ref(64, 1));
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} emit_flags($p250, $p3, $i249, $i4);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb92:
    assume $i203 == 1;
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $p204 := $bitcast.ref.ref($p12);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p15, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $p206 := $load.ref($M.0, $p205);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p206, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p208, $mul.ref(0, 480)), $mul.ref(0, 1));
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $i210 := $load.i32($M.0, $p209);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i211 := $lshr.i32($i210, 20);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p15, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $p213 := $load.ref($M.0, $p212);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p213, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $p215 := $load.ref($M.0, $p214);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p215, $mul.ref(0, 480)), $mul.ref(0, 1));
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i217 := $load.i32($M.0, $p216);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $i218 := $and.i32($i217, 1048575);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} vslice_dummy_var_137 := sprintf.ref.ref.i32.i32($p204, .str.130, $i211, $i218);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $p220 := $bitcast.ref.ref($p11);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p15, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p222, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.0, $p223);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p224, $mul.ref(0, 480)), $mul.ref(0, 1));
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i226 := $load.i32($M.0, $p225);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i227 := $lshr.i32($i226, 20);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p15, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $p229 := $load.ref($M.0, $p228);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p229, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $p231 := $load.ref($M.0, $p230);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p231, $mul.ref(0, 480)), $mul.ref(0, 1));
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i233 := $load.i32($M.0, $p232);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i234 := $and.i32($i233, 1048575);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} vslice_dummy_var_138 := sprintf.ref.ref.i32.i32($p220, .str.130, $i227, $i234);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i236 := $zext.i32.i64(0);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($p3, $mul.ref($i236, 1));
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $i238 := $sub.i32($i4, 0);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i239 := $zext.i32.i64($i238);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $p240 := $bitcast.ref.ref($p11);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $p241 := $bitcast.ref.ref($p12);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p17, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i243 := $load.i32($M.0, $p242);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i244 := $zext.i32.i64($i243);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p15, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $i246 := $load.i64($M.0, $p245);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} $i247 := scnprintf.ref.i64.ref.ref.ref.i64.i64($p237, $i239, .str.131, $p240, $p241, $i244, $i246);
    call {:si_unique_call 1845} {:cexpr "tmp___31"} boogie_si_record_i32($i247);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i248 := $i247;
    goto $bb94;

  $bb2:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb6;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} $i21 := get_pool_mode($p17);
    call {:si_unique_call 1781} {:cexpr "tmp___1"} boogie_si_record_i32($i21);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 3);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i2, 1);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p17, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} $i36 := dm_pool_get_metadata_transaction_id($p35, $p5);
    call {:si_unique_call 1788} {:cexpr "r"} boogie_si_record_i32($i36);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p17, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} $i44 := dm_pool_get_free_metadata_block_count($p43, $p7);
    call {:si_unique_call 1792} {:cexpr "r"} boogie_si_record_i32($i44);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p17, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} $i52 := dm_pool_get_metadata_dev_size($p51, $p9);
    call {:si_unique_call 1796} {:cexpr "r"} boogie_si_record_i32($i52);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p17, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} $i60 := dm_pool_get_free_block_count($p59, $p6);
    call {:si_unique_call 1800} {:cexpr "r"} boogie_si_record_i32($i60);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p17, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} $i68 := dm_pool_get_data_dev_size($p67, $p8);
    call {:si_unique_call 1804} {:cexpr "r"} boogie_si_record_i32($i68);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p17, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} $i76 := dm_pool_get_metadata_snap($p75, $p10);
    call {:si_unique_call 1808} {:cexpr "r"} boogie_si_record_i32($i76);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i82 := $ult.i32(0, $i4);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i97 := 0;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i97, 0);
    call {:si_unique_call 1813} {:cexpr "sz"} boogie_si_record_i32($i98);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $i99 := $load.i64($M.66, $p10);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i99, 0);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i100 == 1);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i111 := $ult.i32($i98, $i4);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i117 := 0;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i118 := $add.i32($i117, $i98);
    call {:si_unique_call 1819} {:cexpr "sz"} boogie_si_record_i32($i118);
    assume {:verifier.code 0} true;
    $i110 := $i118;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 66576)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 1);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i122 == 1);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 66576)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 2);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i135 == 1);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i145 := $ult.i32($i110, $i4);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    $i151 := 0;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i152 := $add.i32($i151, $i110);
    call {:si_unique_call 1828} {:cexpr "sz"} boogie_si_record_i32($i152);
    assume {:verifier.code 0} true;
    $i144 := $i152;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i131 := $i144;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 66576)), $mul.ref(64, 1)), $mul.ref(5, 1));
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i155 := $load.i8($M.0, $p154);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $i156 := $trunc.i8.i1($i155);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i156 == 1);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i157 := $ult.i32($i131, $i4);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    $i163 := 0;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i164 := $add.i32($i163, $i131);
    call {:si_unique_call 1831} {:cexpr "sz"} boogie_si_record_i32($i164);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i165 := $i164;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 66576)), $mul.ref(64, 1)), $mul.ref(7, 1));
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i189 := $load.i8($M.0, $p188);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i190 := $trunc.i8.i1($i189);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i190 == 1);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i197 := $ult.i32($i165, $i4);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb89:
    assume $i197 == 1;
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i198 := $zext.i32.i64($i165);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($p3, $mul.ref($i198, 1));
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i200 := $sub.i32($i4, $i165);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i201 := $zext.i32.i64($i200);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} $i202 := scnprintf.ref.i64.ref($p199, $i201, .str.129);
    call {:si_unique_call 1841} {:cexpr "tmp___29"} boogie_si_record_i32($i202);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb83:
    assume $i190 == 1;
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $i191 := $ult.i32($i165, $i4);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb85:
    assume $i191 == 1;
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $i192 := $zext.i32.i64($i165);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($p3, $mul.ref($i192, 1));
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i194 := $sub.i32($i4, $i165);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i195 := $zext.i32.i64($i194);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} $i196 := scnprintf.ref.i64.ref($p193, $i195, .str.128);
    call {:si_unique_call 1839} {:cexpr "tmp___27"} boogie_si_record_i32($i196);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb70:
    assume $i157 == 1;
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $i158 := $zext.i32.i64($i131);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($p3, $mul.ref($i158, 1));
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i160 := $sub.i32($i4, $i131);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $i161 := $zext.i32.i64($i160);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} $i162 := scnprintf.ref.i64.ref($p159, $i161, .str.125);
    call {:si_unique_call 1830} {:cexpr "tmp___21"} boogie_si_record_i32($i162);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i163 := $i162;
    goto $bb72;

  $bb68:
    assume $i156 == 1;
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 66576)), $mul.ref(64, 1)), $mul.ref(6, 1));
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $i168 := $load.i8($M.0, $p167);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i8.i1($i168);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i169} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i169 == 1);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $i179 := $ult.i32($i131, $i4);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    $i185 := 0;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $i186 := $add.i32($i185, $i131);
    call {:si_unique_call 1837} {:cexpr "sz"} boogie_si_record_i32($i186);
    assume {:verifier.code 0} true;
    $i178 := $i186;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i165 := $i178;
    goto $bb73;

  $bb80:
    assume $i179 == 1;
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i180 := $zext.i32.i64($i131);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($p3, $mul.ref($i180, 1));
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $i182 := $sub.i32($i4, $i131);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i183 := $zext.i32.i64($i182);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} $i184 := scnprintf.ref.i64.ref($p181, $i183, .str.127);
    call {:si_unique_call 1836} {:cexpr "tmp___25"} boogie_si_record_i32($i184);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $i185 := $i184;
    goto $bb82;

  $bb74:
    assume $i169 == 1;
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $i170 := $ult.i32($i131, $i4);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    $i176 := 0;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $i177 := $add.i32($i176, $i131);
    call {:si_unique_call 1834} {:cexpr "sz"} boogie_si_record_i32($i177);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $i178 := $i177;
    goto $bb79;

  $bb76:
    assume $i170 == 1;
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i171 := $zext.i32.i64($i131);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($p3, $mul.ref($i171, 1));
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i173 := $sub.i32($i4, $i131);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $i174 := $zext.i32.i64($i173);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} $i175 := scnprintf.ref.i64.ref($p172, $i174, .str.126);
    call {:si_unique_call 1833} {:cexpr "tmp___23"} boogie_si_record_i32($i175);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i176 := $i175;
    goto $bb78;

  $bb65:
    assume $i145 == 1;
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i146 := $zext.i32.i64($i110);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($p3, $mul.ref($i146, 1));
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $i148 := $sub.i32($i4, $i110);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $i149 := $zext.i32.i64($i148);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} $i150 := scnprintf.ref.i64.ref($p147, $i149, .str.124);
    call {:si_unique_call 1827} {:cexpr "tmp___19"} boogie_si_record_i32($i150);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $i151 := $i150;
    goto $bb67;

  $bb59:
    assume $i135 == 1;
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $i136 := $ult.i32($i110, $i4);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    $i142 := 0;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i143 := $add.i32($i142, $i110);
    call {:si_unique_call 1825} {:cexpr "sz"} boogie_si_record_i32($i143);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $i144 := $i143;
    goto $bb64;

  $bb61:
    assume $i136 == 1;
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $i137 := $zext.i32.i64($i110);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($p3, $mul.ref($i137, 1));
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i139 := $sub.i32($i4, $i110);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $i140 := $zext.i32.i64($i139);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} $i141 := scnprintf.ref.i64.ref($p138, $i140, .str.123);
    call {:si_unique_call 1824} {:cexpr "tmp___17"} boogie_si_record_i32($i141);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i142 := $i141;
    goto $bb63;

  $bb53:
    assume $i122 == 1;
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i123 := $ult.i32($i110, $i4);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    $i129 := 0;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $i130 := $add.i32($i129, $i110);
    call {:si_unique_call 1822} {:cexpr "sz"} boogie_si_record_i32($i130);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i131 := $i130;
    goto $bb58;

  $bb55:
    assume $i123 == 1;
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $i124 := $zext.i32.i64($i110);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p3, $mul.ref($i124, 1));
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i126 := $sub.i32($i4, $i110);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $i127 := $zext.i32.i64($i126);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} $i128 := scnprintf.ref.i64.ref($p125, $i127, .str.122);
    call {:si_unique_call 1821} {:cexpr "tmp___15"} boogie_si_record_i32($i128);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i129 := $i128;
    goto $bb57;

  $bb50:
    assume $i111 == 1;
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i112 := $zext.i32.i64($i98);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p3, $mul.ref($i112, 1));
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $i114 := $sub.i32($i4, $i98);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i115 := $zext.i32.i64($i114);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} $i116 := scnprintf.ref.i64.ref($p113, $i115, .str.121);
    call {:si_unique_call 1818} {:cexpr "tmp___13"} boogie_si_record_i32($i116);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i117 := $i116;
    goto $bb52;

  $bb44:
    assume $i100 == 1;
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $i101 := $ult.i32($i98, $i4);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i108 := 0;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i108, $i98);
    call {:si_unique_call 1816} {:cexpr "sz"} boogie_si_record_i32($i109);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i110 := $i109;
    goto $bb49;

  $bb46:
    assume $i101 == 1;
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $i102 := $zext.i32.i64($i98);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p3, $mul.ref($i102, 1));
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i104 := $sub.i32($i4, $i98);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i105 := $zext.i32.i64($i104);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i106 := $load.i64($M.66, $p10);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} $i107 := scnprintf.ref.i64.ref.i64($p103, $i105, .str.120, $i106);
    call {:si_unique_call 1815} {:cexpr "tmp___11"} boogie_si_record_i32($i107);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $i108 := $i107;
    goto $bb48;

  $bb41:
    assume $i82 == 1;
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i83 := $zext.i32.i64(0);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p3, $mul.ref($i83, 1));
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i85 := $sub.i32($i4, 0);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i86 := $zext.i32.i64($i85);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.65, $p5);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.0, $p9);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.0, $p7);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i90 := $sub.i64($i88, $i89);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i91 := $load.i64($M.0, $p9);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.0, $p8);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.0, $p6);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i94 := $sub.i64($i92, $i93);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $i95 := $load.i64($M.0, $p8);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} $i96 := scnprintf.ref.i64.ref.i64.i64.i64.i64.i64($p84, $i86, .str.119, $i87, $i90, $i91, $i94, $i95);
    call {:si_unique_call 1812} {:cexpr "tmp___9"} boogie_si_record_i32($i96);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i97 := $i96;
    goto $bb43;

  $bb38:
    assume $i77 == 1;
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p17, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} $p80 := dm_device_name($p79);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} vslice_dummy_var_136 := printk.ref.ref.i32(.str.118, $p80, $i76);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i251 := $ult.i32(0, $i4);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb97:
    assume $i251 == 1;
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i252 := $zext.i32.i64(0);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($p3, $mul.ref($i252, 1));
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i254 := $sub.i32($i4, 0);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i255 := $zext.i32.i64($i254);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} $i256 := scnprintf.ref.i64.ref($p253, $i255, .str.132);
    call {:si_unique_call 1849} {:cexpr "tmp___33"} boogie_si_record_i32($i256);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb35:
    assume $i69 == 1;
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p17, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} $p72 := dm_device_name($p71);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} vslice_dummy_var_135 := printk.ref.ref.i32(.str.117, $p72, $i68);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb32:
    assume $i61 == 1;
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p17, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} $p64 := dm_device_name($p63);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} vslice_dummy_var_134 := printk.ref.ref.i32(.str.116, $p64, $i60);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb29:
    assume $i53 == 1;
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p17, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} $p56 := dm_device_name($p55);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} vslice_dummy_var_133 := printk.ref.ref.i32(.str.115, $p56, $i52);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb26:
    assume $i45 == 1;
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p17, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} $p48 := dm_device_name($p47);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} vslice_dummy_var_132 := printk.ref.ref.i32(.str.114, $p48, $i44);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume $i37 == 1;
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p17, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} $p40 := dm_device_name($p39);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} vslice_dummy_var_131 := printk.ref.ref.i32(.str.113, $p40, $i36);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} $i31 := dm_suspended($p0);
    call {:si_unique_call 1785} {:cexpr "tmp___2"} boogie_si_record_i32($i31);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i32 == 1;
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} vslice_dummy_var_130 := commit($p17);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i23 := $ult.i32(0, $i4);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64(0);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p3, $mul.ref($i24, 1));
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i4, 0);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} $i28 := scnprintf.ref.i64.ref($p25, $i27, .str.112);
    call {:si_unique_call 1783} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const pool_message: ref;

axiom pool_message == $sub.ref(0, 653632);

procedure pool_message($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.42, $M.4, $M.61, $M.58, $M.59, $M.60, $M.71, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.15, $M.16, $M.17, $M.55, $M.45, $M.18, $M.40, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation pool_message($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $p45: ref;
  var $i44: i32;
  var $i39: i32;
  var $i34: i32;
  var $i29: i32;
  var $i24: i32;
  var $i19: i32;
  var $i47: i1;
  var $i14: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} {:cexpr "pool_message:arg:argc"} boogie_si_record_i32($i1);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} $i8 := get_pool_mode($p7);
    call {:si_unique_call 1852} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i32($i8, 1);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p2);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} $i16 := strcasecmp($p15, .str.95);
    call {:si_unique_call 1856} {:cexpr "tmp___6"} boogie_si_record_i32($i16);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p2);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} $i21 := strcasecmp($p20, .str.96);
    call {:si_unique_call 1860} {:cexpr "tmp___5"} boogie_si_record_i32($i21);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p2);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} $i26 := strcasecmp($p25, .str.97);
    call {:si_unique_call 1864} {:cexpr "tmp___4"} boogie_si_record_i32($i26);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p2);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} $i31 := strcasecmp($p30, .str.98);
    call {:si_unique_call 1868} {:cexpr "tmp___3"} boogie_si_record_i32($i31);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p2);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} $i36 := strcasecmp($p35, .str.99);
    call {:si_unique_call 1872} {:cexpr "tmp___2"} boogie_si_record_i32($i36);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p2);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} $i41 := strcasecmp($p40, .str.100);
    call {:si_unique_call 1876} {:cexpr "tmp___1"} boogie_si_record_i32($i41);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p2);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} vslice_dummy_var_140 := printk.ref.ref(.str.101, $p45);
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 22);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i39 := $i44;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i34 := $i39;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i29 := $i34;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i24 := $i29;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i19 := $i24;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i19, 0);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i14 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb23:
    assume $i47 == 1;
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} vslice_dummy_var_141 := commit($p7);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i42 == 1;
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} $i43 := process_release_metadata_snap_mesg($i1, $p2, $p7);
    call {:si_unique_call 1878} {:cexpr "r"} boogie_si_record_i32($i43);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb22;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} $i38 := process_reserve_metadata_snap_mesg($i1, $p2, $p7);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    call {:si_unique_call 1874} {:cexpr "r"} boogie_si_record_i32($i38);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb19;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i32 == 1;
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} $i33 := process_set_transaction_id_mesg($i1, $p2, $p7);
    call {:si_unique_call 1870} {:cexpr "r"} boogie_si_record_i32($i33);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb16;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} $i28 := process_delete_mesg($i1, $p2, $p7);
    call {:si_unique_call 1866} {:cexpr "r"} boogie_si_record_i32($i28);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb13;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} $i23 := process_create_snap_mesg($i1, $p2, $p7);
    call {:si_unique_call 1862} {:cexpr "r"} boogie_si_record_i32($i23);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb10;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} $i18 := process_create_thin_mesg($i1, $p2, $p7);
    call {:si_unique_call 1858} {:cexpr "r"} boogie_si_record_i32($i18);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} $p12 := dm_device_name($p11);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} vslice_dummy_var_139 := printk.ref.ref(.str.94, $p12);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 95);
    goto $bb3;
}



const pool_merge: ref;

axiom pool_merge == $sub.ref(0, 654664);

procedure pool_merge($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.17, $CurrAddr;



implementation pool_merge($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} {:cexpr "pool_merge:arg:max_size"} boogie_si_record_i32($i3);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} $p11 := bdev_get_queue($p10);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 4208)), $mul.ref(304, 1));
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p20);
    call {:si_unique_call 1883} {:cexpr "pool_merge:arg:_min1"} boogie_si_record_i32($i3);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p11, $mul.ref(0, 4208)), $mul.ref(304, 1));
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    call {:si_unique_call 1884} $i24 := devirtbounce($p23, $p11, $p1, $p2);
    call {:si_unique_call 1885} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i3, $i24);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i16 := $i26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $i26 := $i3;
    goto $bb7;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $i16 := $i3;
    goto $bb3;
}



const pool_iterate_devices: ref;

axiom pool_iterate_devices == $sub.ref(0, 655696);

procedure pool_iterate_devices($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pool_iterate_devices($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    call {:si_unique_call 1886} $i10 := devirtbounce.1($p1, $p0, $p7, 0, $i9, $p2);
    call {:si_unique_call 1887} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const pool_io_hints: ref;

axiom pool_io_hints == $sub.ref(0, 656728);

procedure pool_io_hints($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation pool_io_hints($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i8;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i50: i8;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i64;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $i60: i8;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $p72: ref;
  var $i73: i8;
  var $i74: i1;
  var $p75: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(44, 1));
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i32($i8, 9);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    call {:si_unique_call 1888} {:cexpr "io_opt_sectors"} boogie_si_record_i64($i10);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $i15 := $ult.i32($i12, $i14);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i44);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $i46 := $ugt.i64($i45, $i10);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i46 == 1);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} $i49 := is_factor($i10, $i48);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i8($i49);
    call {:si_unique_call 1894} {:cexpr "tmp___3"} boogie_si_record_i8($i50);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i50);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 80)), $mul.ref(72, 1)), $mul.ref(5, 1));
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i8.i1($i73);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i74 == 1);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, 0);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    return;

  $bb28:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} disable_passdown_if_not_supported($p4);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb21:
    assume $i53 == 1;
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p6, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i56 := $zext.i32.i64($i55);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} $i59 := is_factor($i56, $i58);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i8($i59);
    call {:si_unique_call 1896} {:cexpr "tmp___2"} boogie_si_record_i8($i60);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i8.i1($i60);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i61 == 1);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $i67 := $shl.i32($i66, 9);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} blk_limits_io_min($p1, $i67);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p6, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $i70 := $shl.i32($i69, 9);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} blk_limits_io_opt($p1, $i70);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i61 == 1;
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $i64 := $shl.i32($i63, 9);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} blk_limits_io_min($p1, $i64);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb18:
    assume $i51 == 1;
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb20;

  $bb15:
    assume $i46 == 1;
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call $p16, $i17, $p18, $i19, $i20, $i21, $i22, $p23, $i24, $i25, $p26, $p27, $i28, $i29, $i30, $i31, $p32, $p33, $i34, $i35, $p36, $i37, $i38, $i39, $i40, $i41, $i42 := pool_io_hints_loop_$bb3($p1, $p6, $p16, $i17, $p18, $i19, $i20, $i21, $i22, $p23, $i24, $i25, $p26, $p27, $i28, $i29, $i30, $i31, $p32, $p33, $i34, $i35, $p36, $i37, $i38, $i39, $i40, $i41, $i42);
    goto $bb3_last;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i34);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} $i38 := is_factor($i35, $i37);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i8($i38);
    call {:si_unique_call 1890} {:cexpr "tmp___0"} boogie_si_record_i8($i39);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i42 == 1;
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i19, 1);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i17, $i20);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i28);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} $i30 := __rounddown_pow_of_two($i29);
    call {:si_unique_call 1892} {:cexpr "tmp"} boogie_si_record_i64($i30);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32($i30);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    goto corral_source_split_7504_dummy;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i24, 1);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8:
    assume $i40 == 1;
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb10;

  corral_source_split_7504_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_7474;
}



const __rounddown_pow_of_two: ref;

axiom __rounddown_pow_of_two == $sub.ref(0, 657760);

procedure __rounddown_pow_of_two($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __rounddown_pow_of_two($i0: i64) returns ($r: i64)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} {:cexpr "__rounddown_pow_of_two:arg:n"} boogie_si_record_i64($i0);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} $i1 := fls_long($i0);
    call {:si_unique_call 1903} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32($i1, 1);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64(1, $i3);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const is_factor: ref;

axiom is_factor == $sub.ref(0, 658792);

procedure is_factor($i0: i64, $i1: i32) returns ($r: i1);
  free requires assertsPassed;



implementation is_factor($i0: i64, $i1: i32) returns ($r: i1)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} {:cexpr "is_factor:arg:block_size___0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1905} {:cexpr "is_factor:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i3 := $urem.i64($i0, $i2);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    call {:si_unique_call 1906} {:cexpr "_res"} boogie_si_record_i32($i4);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const blk_limits_io_min: ref;

axiom blk_limits_io_min == $sub.ref(0, 659824);

procedure blk_limits_io_min($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_limits_io_min($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} {:cexpr "blk_limits_io_min:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    return;
}



const blk_limits_io_opt: ref;

axiom blk_limits_io_opt == $sub.ref(0, 660856);

procedure blk_limits_io_opt($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_limits_io_opt($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} {:cexpr "blk_limits_io_opt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    return;
}



const disable_passdown_if_not_supported: ref;

axiom disable_passdown_if_not_supported == $sub.ref(0, 661888);

procedure disable_passdown_if_not_supported($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation disable_passdown_if_not_supported($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i1;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p19: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p32: ref;
  var vslice_dummy_var_142: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} $p8 := bdev_get_queue($p7);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(72, 1)), $mul.ref(6, 1));
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} $i14 := data_dev_supports_discard($p0);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 1912} {:cexpr "tmp___0"} boogie_si_record_i8($i15);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    $p20 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 4208)), $mul.ref(3488, 1)), $mul.ref(48, 1));
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $i24 := $ult.i32($i21, $i23);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $p25 := $0.ref;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p19 := $p25;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p19);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i27 == 1;
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p1);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} $p29 := bdevname($p7, $p28);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} vslice_dummy_var_142 := printk.ref.ref.ref(.str.93, $p29, $p19);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(72, 1)), $mul.ref(6, 1));
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 0);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $p25 := .str.92;
    goto $bb13;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $p19 := .str.91;
    goto $bb10;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb7;
}



const data_dev_supports_discard: ref;

axiom data_dev_supports_discard == $sub.ref(0, 662920);

procedure data_dev_supports_discard($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation data_dev_supports_discard($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} $p5 := bdev_get_queue($p4);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 4208)), $mul.ref(2504, 1));
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} $i9 := constant_test_bit(14, $p8);
    call {:si_unique_call 1917} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb6;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb5;
}



const bdevname: ref;

axiom bdevname == $sub.ref(0, 663952);

procedure bdevname($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation bdevname($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} $p2 := external_alloc();
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fls_long: ref;

axiom fls_long == $sub.ref(0, 664984);

procedure fls_long($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation fls_long($i0: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} {:cexpr "fls_long:arg:l"} boogie_si_record_i64($i0);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} $i1 := fls64($i0);
    call {:si_unique_call 1921} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fls64: ref;

axiom fls64 == $sub.ref(0, 666016);

procedure fls64($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation fls64($i0: i64) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} {:cexpr "fls64:arg:x"} boogie_si_record_i64($i0);
    call {:si_unique_call 1923} $i1 := devirtbounce.17(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 1924} {:cexpr "bitpos"} boogie_si_record_i32($i1);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const strcasecmp: ref;

axiom strcasecmp == $sub.ref(0, 667048);

procedure strcasecmp($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation strcasecmp($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1925} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1926} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const process_create_thin_mesg: ref;

axiom process_create_thin_mesg == $sub.ref(0, 668080);

procedure process_create_thin_mesg($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr, $M.42, $M.4, $M.61, $M.0, $M.58, $M.59, $M.60;



implementation process_create_thin_mesg($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i6: i32;
  var vslice_dummy_var_143: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1928} {:cexpr "process_create_thin_mesg:arg:argc"} boogie_si_record_i32($i0);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} $i4 := check_arg_count($i0, 2);
    call {:si_unique_call 1930} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p1, $mul.ref(1, 8));
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} $i9 := read_dev_id($p8, $p3, 1);
    call {:si_unique_call 1932} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p3);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} $i14 := dm_pool_create_thin($p12, $i13);
    call {:si_unique_call 1934} {:cexpr "r"} boogie_si_record_i32($i14);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p1, $mul.ref(1, 8));
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} vslice_dummy_var_143 := printk.ref.ref(.str.102, $p17);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $i6 := $i14;
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const process_create_snap_mesg: ref;

axiom process_create_snap_mesg == $sub.ref(0, 669112);

procedure process_create_snap_mesg($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr, $M.42, $M.71, $M.4, $M.0, $M.61, $M.58, $M.59, $M.60;



implementation process_create_snap_mesg($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i7: i32;
  var vslice_dummy_var_144: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1937} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1938} {:cexpr "process_create_snap_mesg:arg:argc"} boogie_si_record_i32($i0);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} $i5 := check_arg_count($i0, 3);
    call {:si_unique_call 1940} {:cexpr "r"} boogie_si_record_i32($i5);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p1, $mul.ref(1, 8));
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} $i10 := read_dev_id($p9, $p3, 1);
    call {:si_unique_call 1942} {:cexpr "r"} boogie_si_record_i32($i10);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p1, $mul.ref(2, 8));
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} $i14 := read_dev_id($p13, $p4, 1);
    call {:si_unique_call 1944} {:cexpr "r"} boogie_si_record_i32($i14);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p3);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p4);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} $i20 := dm_pool_create_snap($p17, $i18, $i19);
    call {:si_unique_call 1946} {:cexpr "r"} boogie_si_record_i32($i20);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p1, $mul.ref(1, 8));
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p1, $mul.ref(2, 8));
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} vslice_dummy_var_144 := printk.ref.ref.ref(.str.105, $p23, $p25);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $i7 := $i20;
    goto $bb3;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $i7 := $i14;
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $i7 := $i10;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;
}



const process_delete_mesg: ref;

axiom process_delete_mesg == $sub.ref(0, 670144);

procedure process_delete_mesg($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr, $M.42, $M.61, $M.0, $M.4, $M.58, $M.59, $M.60;



implementation process_delete_mesg($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i6: i32;
  var vslice_dummy_var_145: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1949} {:cexpr "process_delete_mesg:arg:argc"} boogie_si_record_i32($i0);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1950} $i4 := check_arg_count($i0, 2);
    call {:si_unique_call 1951} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p1, $mul.ref(1, 8));
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} $i9 := read_dev_id($p8, $p3, 1);
    call {:si_unique_call 1953} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p3);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} $i14 := dm_pool_delete_thin_device($p12, $i13);
    call {:si_unique_call 1955} {:cexpr "r"} boogie_si_record_i32($i14);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i6 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p1, $mul.ref(1, 8));
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} vslice_dummy_var_145 := printk.ref.ref(.str.106, $p17);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const process_set_transaction_id_mesg: ref;

axiom process_set_transaction_id_mesg == $sub.ref(0, 671176);

procedure process_set_transaction_id_mesg($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation process_set_transaction_id_mesg($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i7: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1959} {:cexpr "process_set_transaction_id_mesg:arg:argc"} boogie_si_record_i32($i0);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} $i5 := check_arg_count($i0, 3);
    call {:si_unique_call 1961} {:cexpr "r"} boogie_si_record_i32($i5);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p1, $mul.ref(1, 8));
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} $i10 := kstrtoull($p9, 10, $p3);
    call {:si_unique_call 1963} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p1, $mul.ref(2, 8));
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} $i17 := kstrtoull($p16, 10, $p4);
    call {:si_unique_call 1966} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p3);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p4);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} $i26 := dm_pool_set_metadata_transaction_id($p23, $i24, $i25);
    call {:si_unique_call 1969} {:cexpr "r"} boogie_si_record_i32($i26);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p1, $mul.ref(1, 8));
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p1, $mul.ref(2, 8));
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} vslice_dummy_var_148 := printk.ref.ref.ref(.str.109, $p29, $p31);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $i7 := $i26;
    goto $bb3;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p1, $mul.ref(2, 8));
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} vslice_dummy_var_147 := printk.ref.ref(.str.108, $p20);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p1, $mul.ref(1, 8));
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} vslice_dummy_var_146 := printk.ref.ref(.str.107, $p13);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;
}



const process_reserve_metadata_snap_mesg: ref;

axiom process_reserve_metadata_snap_mesg == $sub.ref(0, 672208);

procedure process_reserve_metadata_snap_mesg($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.42, $M.4, $M.58, $M.59, $M.60, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.15, $M.16, $M.17, $M.55, $M.45, $M.18, $M.40, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation process_reserve_metadata_snap_mesg($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i5: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} {:cexpr "process_reserve_metadata_snap_mesg:arg:argc"} boogie_si_record_i32($i0);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} $i3 := check_arg_count($i0, 1);
    call {:si_unique_call 1973} {:cexpr "r"} boogie_si_record_i32($i3);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} vslice_dummy_var_149 := commit($p2);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} $i9 := dm_pool_reserve_metadata_snap($p8);
    call {:si_unique_call 1976} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} vslice_dummy_var_150 := printk.ref(.str.110);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;
}



const process_release_metadata_snap_mesg: ref;

axiom process_release_metadata_snap_mesg == $sub.ref(0, 673240);

procedure process_release_metadata_snap_mesg($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation process_release_metadata_snap_mesg($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i5: i32;
  var vslice_dummy_var_151: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} {:cexpr "process_release_metadata_snap_mesg:arg:argc"} boogie_si_record_i32($i0);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} $i3 := check_arg_count($i0, 1);
    call {:si_unique_call 1980} {:cexpr "r"} boogie_si_record_i32($i3);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} $i8 := dm_pool_release_metadata_snap($p7);
    call {:si_unique_call 1982} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} vslice_dummy_var_151 := printk.ref(.str.111);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;
}



const check_arg_count: ref;

axiom check_arg_count == $sub.ref(0, 674272);

procedure check_arg_count($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation check_arg_count($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i4: i32;
  var vslice_dummy_var_152: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} {:cexpr "check_arg_count:arg:argc"} boogie_si_record_i32($i0);
    call {:si_unique_call 1985} {:cexpr "check_arg_count:arg:args_required"} boogie_si_record_i32($i1);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i0, $i1);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} vslice_dummy_var_152 := printk.ref.i32.i32(.str.103, $i0, $i1);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const dm_pool_release_metadata_snap: ref;

axiom dm_pool_release_metadata_snap == $sub.ref(0, 675304);

procedure dm_pool_release_metadata_snap($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation dm_pool_release_metadata_snap($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} down_write($p1);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} $i5 := __release_metadata_snap($p0);
    call {:si_unique_call 1989} {:cexpr "r"} boogie_si_record_i32($i5);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} up_write($p7);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const __release_metadata_snap: ref;

axiom __release_metadata_snap == $sub.ref(0, 676336);

procedure __release_metadata_snap($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __release_metadata_snap($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i5: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} $i3 := superblock_lock($p0, $p1);
    call {:si_unique_call 1994} {:cexpr "r"} boogie_si_record_i32($i3);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.54, $p1);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} $p7 := dm_block_data($p6);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 368)), $mul.ref(56, 1));
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    call {:si_unique_call 1996} {:cexpr "held_root"} boogie_si_record_i64($i10);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 368)), $mul.ref(56, 1));
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, 0);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.54, $p1);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} vslice_dummy_var_153 := dm_bm_unlock($p12);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i10, 0);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} $i18 := dm_tm_read_lock($p17, $i10, sb_validator, $p2);
    call {:si_unique_call 2000} {:cexpr "r"} boogie_si_record_i32($i18);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.67, $p2);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} $p21 := dm_block_data($p20);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(320, 1));
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2002} vslice_dummy_var_155 := dm_sm_dec_block($p24, $i26);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(328, 1));
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} vslice_dummy_var_156 := dm_sm_dec_block($p29, $i31);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} vslice_dummy_var_157 := dm_sm_dec_block($p34, $i10);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.67, $p2);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} $i39 := dm_tm_unlock($p37, $p38);
    call {:si_unique_call 2006} {:cexpr "tmp___1"} boogie_si_record_i32($i39);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $i5 := $i39;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i5 := $i18;
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} vslice_dummy_var_154 := printk.ref(.str.172);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;
}



const dm_tm_read_lock: ref;

axiom dm_tm_read_lock == $sub.ref(0, 677368);

procedure dm_tm_read_lock($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_tm_read_lock($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2007} {:cexpr "dm_tm_read_lock:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2008} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 2009} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dm_tm_unlock: ref;

axiom dm_tm_unlock == $sub.ref(0, 678400);

procedure dm_tm_unlock($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_tm_unlock($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2010} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2011} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dm_pool_reserve_metadata_snap: ref;

axiom dm_pool_reserve_metadata_snap == $sub.ref(0, 679432);

procedure dm_pool_reserve_metadata_snap($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation dm_pool_reserve_metadata_snap($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} down_write($p1);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} $i5 := __reserve_metadata_snap($p0);
    call {:si_unique_call 2014} {:cexpr "r"} boogie_si_record_i32($i5);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2015} up_write($p7);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const __reserve_metadata_snap: ref;

axiom __reserve_metadata_snap == $sub.ref(0, 680464);

procedure __reserve_metadata_snap($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __reserve_metadata_snap($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i11: i32;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2017} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} vslice_dummy_var_158 := dm_sm_inc_block($p5, 0);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} $i9 := dm_tm_shadow_block($p8, 0, sb_validator, $p2, $p1);
    call {:si_unique_call 2021} {:cexpr "r"} boogie_si_record_i32($i9);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.68, $p1);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 2023} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.69, $p2);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} $i19 := dm_block_location($p18);
    call {:si_unique_call 2026} {:cexpr "held_root"} boogie_si_record_i64($i19);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.69, $p2);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} $p21 := dm_block_data($p20);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(56, 1));
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_55 := $M.0;
    call {:si_unique_call 2031} cmdloc_dummy_var_56 := $memset.i8(cmdloc_dummy_var_55, $p34, 0, 128, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_56;
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(192, 1));
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_57 := $M.0;
    call {:si_unique_call 2032} cmdloc_dummy_var_58 := $memset.i8(cmdloc_dummy_var_57, $p36, 0, 128, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_58;
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(320, 1));
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} dm_tm_inc($p38, $i40);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(328, 1));
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2034} dm_tm_inc($p42, $i44);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.69, $p2);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} vslice_dummy_var_161 := dm_tm_unlock($p46, $p47);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} $i49 := superblock_lock($p0, $p3);
    call {:si_unique_call 2037} {:cexpr "r"} boogie_si_record_i32($i49);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.54, $p3);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} $p54 := dm_block_data($p53);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 368)), $mul.ref(56, 1));
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p56, $i19);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.54, $p3);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} vslice_dummy_var_162 := dm_bm_unlock($p57);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb12:
    assume $i50 == 1;
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2038} dm_tm_dec($p52, $i19);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $i11 := $i49;
    goto $bb3;

  $bb9:
    assume $i25 == 1;
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2028} vslice_dummy_var_159 := printk.ref(.str.171);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} dm_tm_dec($p28, $i19);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.69, $p2);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} vslice_dummy_var_160 := dm_tm_unlock($p30, $p31);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 16);
    goto $bb3;

  $bb5:
    assume $i17 == 1;
    call {:si_unique_call 2024} devirtbounce.3(0, .str.170, 1214, 12);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call __reserve_metadata_snap_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb3;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;
}



const dm_tm_shadow_block: ref;

axiom dm_tm_shadow_block == $sub.ref(0, 681496);

procedure dm_tm_shadow_block($p0: ref, $i1: i64, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_tm_shadow_block($p0: ref, $i1: i64, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2041} {:cexpr "dm_tm_shadow_block:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2042} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 2043} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const dm_block_location: ref;

axiom dm_block_location == $sub.ref(0, 682528);

procedure dm_block_location($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dm_block_location($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2044} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 2045} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dm_tm_dec: ref;

axiom dm_tm_dec == $sub.ref(0, 683560);

procedure dm_tm_dec($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation dm_tm_dec($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} {:cexpr "dm_tm_dec:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    return;
}



const dm_pool_set_metadata_transaction_id: ref;

axiom dm_pool_set_metadata_transaction_id == $sub.ref(0, 684592);

procedure dm_pool_set_metadata_transaction_id($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dm_pool_set_metadata_transaction_id($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i7: i32;
  var $p13: ref;
  var vslice_dummy_var_163: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} {:cexpr "dm_pool_set_metadata_transaction_id:arg:current_id"} boogie_si_record_i64($i1);
    call {:si_unique_call 2048} {:cexpr "dm_pool_set_metadata_transaction_id:arg:new_id"} boogie_si_record_i64($i2);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} down_write($p3);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(544, 1));
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, $i1);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(544, 1));
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, $i2);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} up_write($p13);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} vslice_dummy_var_163 := printk.ref(.str.7);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const dm_pool_delete_thin_device: ref;

axiom dm_pool_delete_thin_device == $sub.ref(0, 685624);

procedure dm_pool_delete_thin_device($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.61, $M.0, $M.4, $M.58, $M.59, $M.60, $CurrAddr;



implementation dm_pool_delete_thin_device($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} {:cexpr "dm_pool_delete_thin_device:arg:dev"} boogie_si_record_i64($i1);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} down_write($p2);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} $i6 := __delete_device($p0, $i1);
    call {:si_unique_call 2055} {:cexpr "r"} boogie_si_record_i32($i6);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} up_write($p8);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const __delete_device: ref;

axiom __delete_device == $sub.ref(0, 686656);

procedure __delete_device($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.61, $M.0, $M.4, $M.58, $M.59, $M.60, $CurrAddr;



implementation __delete_device($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2059} {:cexpr "__delete_device:arg:dev"} boogie_si_record_i64($i1);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $M.42 := $store.i64($M.42, $p2, $i1);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} $i4 := __open_device($p0, $i1, 0, $p3);
    call {:si_unique_call 2061} {:cexpr "r"} boogie_si_record_i32($i4);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.70, $p3);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i9, 1);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.70, $p3);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} list_del($p13);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.70, $p3);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} kfree($p15);
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(288, 1));
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(520, 1));
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(520, 1));
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} $i20 := dm_btree_remove($p16, $i18, $p2, $p19);
    call {:si_unique_call 2066} {:cexpr "r"} boogie_si_record_i32($i20);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(176, 1));
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} $i26 := dm_btree_remove($p22, $i24, $p2, $p25);
    call {:si_unique_call 2068} {:cexpr "r"} boogie_si_record_i32($i26);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $i6 := $i26;
    goto $bb3;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $i6 := $i20;
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.70, $p3);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} __close_device($p11);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 16);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const dm_pool_create_snap: ref;

axiom dm_pool_create_snap == $sub.ref(0, 687688);

procedure dm_pool_create_snap($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.71, $M.4, $M.0, $M.61, $M.58, $M.59, $M.60, $CurrAddr;



implementation dm_pool_create_snap($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} {:cexpr "dm_pool_create_snap:arg:dev"} boogie_si_record_i64($i1);
    call {:si_unique_call 2070} {:cexpr "dm_pool_create_snap:arg:origin"} boogie_si_record_i64($i2);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} down_write($p3);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} $i7 := __create_snap($p0, $i1, $i2);
    call {:si_unique_call 2073} {:cexpr "r"} boogie_si_record_i32($i7);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} up_write($p9);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const __create_snap: ref;

axiom __create_snap == $sub.ref(0, 688720);

procedure __create_snap($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.71, $M.4, $M.0, $M.61, $M.58, $M.59, $M.60, $CurrAddr;



implementation __create_snap($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i1;
  var $i39: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $p54: ref;
  var $i14: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2076} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} $p6 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2080} {:cexpr "__create_snap:arg:dev"} boogie_si_record_i64($i1);
    call {:si_unique_call 2081} {:cexpr "__create_snap:arg:origin"} boogie_si_record_i64($i2);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $M.42 := $store.i64($M.42, $p3, $i2);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $M.71 := $store.i64($M.71, $p4, $i1);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(288, 1));
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(520, 1));
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p6);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} $i12 := dm_btree_lookup($p8, $i10, $p4, $p11);
    call {:si_unique_call 2083} {:cexpr "r"} boogie_si_record_i32($i12);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(176, 1));
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p7);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} $i19 := dm_btree_lookup($p15, $i17, $p3, $p18);
    call {:si_unique_call 2085} {:cexpr "r"} boogie_si_record_i32($i19);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.4, $p7);
    call {:si_unique_call 2086} {:cexpr "origin_root"} boogie_si_record_i64($i21);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} dm_tm_inc($p23, $i21);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $M.4 := $store.i64($M.4, $p7, $i21);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $M.42 := $store.i64($M.42, $p3, $i1);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(176, 1));
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p7);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} $i29 := dm_btree_insert($p24, $i26, $p3, $p27, $p28);
    call {:si_unique_call 2089} {:cexpr "r"} boogie_si_record_i32($i29);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(504, 1));
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, 1);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(504, 1));
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} $i37 := __open_device($p0, $i1, 1, $p5);
    call {:si_unique_call 2092} {:cexpr "r"} boogie_si_record_i32($i37);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.72, $p5);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(504, 1));
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} $i43 := __set_snapshot_details($p0, $p40, $i2, $i42);
    call {:si_unique_call 2096} {:cexpr "r"} boogie_si_record_i32($i43);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.72, $p5);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} __close_device($p44);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i43, 0);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb15:
    assume $i45 == 1;
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $i39 := $i43;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(176, 1));
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.0, $p47);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} vslice_dummy_var_164 := dm_btree_remove($p46, $i48, $p3, $p49);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(288, 1));
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(520, 1));
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(520, 1));
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2094} vslice_dummy_var_165 := dm_btree_remove($p51, $i53, $p3, $p54);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $i14 := $i39;
    goto $bb3;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $i39 := $i37;
    goto $bb13;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(48, 1));
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} dm_tm_dec($p32, $i21);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $i14 := $i29;
    goto $bb3;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $i14 := $i19;
    goto $bb3;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 17);
    goto $bb3;
}



const __set_snapshot_details: ref;

axiom __set_snapshot_details == $sub.ref(0, 689752);

procedure __set_snapshot_details($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.61, $M.0, $M.4, $M.58, $M.59, $M.60, $CurrAddr;



implementation __set_snapshot_details($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2099} {:cexpr "__set_snapshot_details:arg:origin"} boogie_si_record_i64($i2);
    call {:si_unique_call 2100} {:cexpr "__set_snapshot_details:arg:time"} boogie_si_record_i32($i3);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} $i5 := __open_device($p0, $i2, 0, $p4);
    call {:si_unique_call 2102} {:cexpr "r"} boogie_si_record_i32($i5);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.73, $p4);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 1);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.73, $p4);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i3);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.73, $p4);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, $i14);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i3);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.73, $p4);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} __close_device($p17);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;
}



const dm_pool_create_thin: ref;

axiom dm_pool_create_thin == $sub.ref(0, 690784);

procedure dm_pool_create_thin($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.4, $M.61, $M.0, $M.58, $M.59, $M.60, $CurrAddr;



implementation dm_pool_create_thin($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} {:cexpr "dm_pool_create_thin:arg:dev"} boogie_si_record_i64($i1);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} down_write($p2);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2106} $i6 := __create_thin($p0, $i1);
    call {:si_unique_call 2107} {:cexpr "r"} boogie_si_record_i32($i6);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2108} up_write($p8);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const __create_thin: ref;

axiom __create_thin == $sub.ref(0, 691816);

procedure __create_thin($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.4, $M.61, $M.0, $M.58, $M.59, $M.60, $CurrAddr;



implementation __create_thin($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i64;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p35: ref;
  var $i36: i64;
  var $p38: ref;
  var $i13: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2110} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} $p4 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2112} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2114} {:cexpr "__create_thin:arg:dev"} boogie_si_record_i64($i1);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $M.42 := $store.i64($M.42, $p3, $i1);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(288, 1));
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(520, 1));
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p4);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} $i11 := dm_btree_lookup($p7, $i9, $p3, $p10);
    call {:si_unique_call 2116} {:cexpr "r"} boogie_si_record_i32($i11);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(232, 1));
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} $i15 := dm_btree_empty($p14, $p2);
    call {:si_unique_call 2118} {:cexpr "r"} boogie_si_record_i32($i15);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.74, $p2);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $M.4 := $store.i64($M.4, $p6, $i17);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(176, 1));
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p6);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} $i23 := dm_btree_insert($p18, $i20, $p3, $p21, $p22);
    call {:si_unique_call 2120} {:cexpr "r"} boogie_si_record_i32($i23);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} $i28 := __open_device($p0, $i1, 1, $p5);
    call {:si_unique_call 2123} {:cexpr "r"} boogie_si_record_i32($i28);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.75, $p5);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} __close_device($p38);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $i13 := $i28;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(176, 1));
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(512, 1));
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} vslice_dummy_var_167 := dm_btree_remove($p30, $i32, $p3, $p33);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(232, 1));
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.74, $p2);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} vslice_dummy_var_168 := dm_btree_del($p35, $i36);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $i13 := $i28;
    goto $bb3;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(232, 1));
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.74, $p2);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} vslice_dummy_var_166 := dm_btree_del($p25, $i26);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $i13 := $i23;
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $i13 := $i15;
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 17);
    goto $bb3;
}



const dm_suspended: ref;

axiom dm_suspended == $sub.ref(0, 692848);

procedure dm_suspended($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_suspended($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2127} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2128} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dm_pool_get_metadata_transaction_id: ref;

axiom dm_pool_get_metadata_transaction_id == $sub.ref(0, 693880);

procedure dm_pool_get_metadata_transaction_id($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65;



implementation dm_pool_get_metadata_transaction_id($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} down_read($p2);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(544, 1));
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $M.65 := $store.i64($M.65, $p1, $i7);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2130} up_read($p9);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const dm_pool_get_free_metadata_block_count: ref;

axiom dm_pool_get_free_metadata_block_count == $sub.ref(0, 694912);

procedure dm_pool_get_free_metadata_block_count($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $CurrAddr, $M.16, $M.17, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation dm_pool_get_free_metadata_block_count($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} down_read($p2);
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} $i8 := dm_sm_get_nr_free($p7, $p1);
    call {:si_unique_call 2133} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} up_read($p10);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const dm_pool_get_metadata_dev_size: ref;

axiom dm_pool_get_metadata_dev_size == $sub.ref(0, 695944);

procedure dm_pool_get_metadata_dev_size($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $CurrAddr, $M.16, $M.17, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation dm_pool_get_metadata_dev_size($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} down_read($p2);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2136} $i8 := dm_sm_get_nr_blocks($p7, $p1);
    call {:si_unique_call 2137} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2138} up_read($p10);
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const dm_pool_get_data_dev_size: ref;

axiom dm_pool_get_data_dev_size == $sub.ref(0, 696976);

procedure dm_pool_get_data_dev_size($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $CurrAddr, $M.16, $M.17, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation dm_pool_get_data_dev_size($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} down_read($p2);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2140} $i8 := dm_sm_get_nr_blocks($p7, $p1);
    call {:si_unique_call 2141} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2142} up_read($p10);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const dm_pool_get_metadata_snap: ref;

axiom dm_pool_get_metadata_snap == $sub.ref(0, 698008);

procedure dm_pool_get_metadata_snap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.66, $CurrAddr;



implementation dm_pool_get_metadata_snap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} down_read($p2);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2144} $i6 := __get_metadata_snap($p0, $p1);
    call {:si_unique_call 2145} {:cexpr "r"} boogie_si_record_i32($i6);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} up_read($p8);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const emit_flags: ref;

axiom emit_flags == $sub.ref(0, 699040);

procedure emit_flags($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;



implementation emit_flags($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i8;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i8;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $i40: i8;
  var $i41: i1;
  var $i42: i1;
  var $i43: i64;
  var $p44: ref;
  var $i45: i32;
  var $i46: i64;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $i52: i8;
  var $i53: i1;
  var $i54: i1;
  var $i55: i64;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $i64: i8;
  var $i65: i1;
  var $i66: i1;
  var $i67: i64;
  var $p68: ref;
  var $i69: i32;
  var $i70: i64;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $i78: i1;
  var $i79: i64;
  var $p80: ref;
  var $i81: i32;
  var $i82: i64;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $p87: ref;
  var $i88: i8;
  var $i89: i1;
  var $i90: i1;
  var $i91: i64;
  var $p92: ref;
  var $i93: i32;
  var $i94: i64;
  var $i95: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} {:cexpr "emit_flags:arg:sz"} boogie_si_record_i32($i2);
    call {:si_unique_call 2148} {:cexpr "emit_flags:arg:maxlen"} boogie_si_record_i32($i3);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $i7 := $xor.i1($i6, 1);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $i12 := $xor.i1($i11, 1);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i8, $i13);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $i18 := $xor.i1($i17, 1);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i14, $i19);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i20, $i24);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i25, $i29);
    call {:si_unique_call 2149} {:cexpr "count"} boogie_si_record_i32($i30);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $i31 := $ult.i32($i2, $i3);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, $i2);
    call {:si_unique_call 2152} {:cexpr "sz"} boogie_si_record_i32($i38);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i40);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i41 == 1);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $i42 := $ult.i32($i38, $i3);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, $i38);
    call {:si_unique_call 2155} {:cexpr "sz"} boogie_si_record_i32($i49);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i8.i1($i52);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i53 == 1);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $i54 := $ult.i32($i50, $i3);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i60 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, $i50);
    call {:si_unique_call 2158} {:cexpr "sz"} boogie_si_record_i32($i61);
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $i62 := $i61;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i8.i1($i64);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i65 == 1);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $i66 := $ult.i32($i62, $i3);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i72 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i72, $i62);
    call {:si_unique_call 2161} {:cexpr "sz"} boogie_si_record_i32($i73);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $i74 := $i73;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 2);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i86 := $i74;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i8.i1($i88);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    return;

  $bb28:
    assume $i89 == 1;
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $i90 := $ult.i32($i86, $i3);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i90 == 1;
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $i91 := $zext.i32.i64($i86);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p1, $mul.ref($i91, 1));
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $i93 := $sub.i32($i3, $i86);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $i94 := $zext.i32.i64($i93);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} $i95 := scnprintf.ref.i64.ref($p92, $i94, .str.128);
    call {:si_unique_call 2166} {:cexpr "tmp___9"} boogie_si_record_i32($i95);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb22:
    assume $i77 == 1;
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $i78 := $ult.i32($i74, $i3);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i84 := 0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i84, $i74);
    call {:si_unique_call 2164} {:cexpr "sz"} boogie_si_record_i32($i85);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $i86 := $i85;
    goto $bb27;

  $bb24:
    assume $i78 == 1;
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $i79 := $zext.i32.i64($i74);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p1, $mul.ref($i79, 1));
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $i81 := $sub.i32($i3, $i74);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $i82 := $zext.i32.i64($i81);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2162} $i83 := scnprintf.ref.i64.ref($p80, $i82, .str.135);
    call {:si_unique_call 2163} {:cexpr "tmp___7"} boogie_si_record_i32($i83);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $i84 := $i83;
    goto $bb26;

  $bb18:
    assume $i66 == 1;
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $i67 := $zext.i32.i64($i62);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p1, $mul.ref($i67, 1));
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $i69 := $sub.i32($i3, $i62);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $i70 := $zext.i32.i64($i69);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} $i71 := scnprintf.ref.i64.ref($p68, $i70, .str.127);
    call {:si_unique_call 2160} {:cexpr "tmp___5"} boogie_si_record_i32($i71);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $i72 := $i71;
    goto $bb20;

  $bb16:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i74 := $i62;
    goto $bb21;

  $bb12:
    assume $i54 == 1;
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $i55 := $zext.i32.i64($i50);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p1, $mul.ref($i55, 1));
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32($i3, $i50);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i57);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2156} $i59 := scnprintf.ref.i64.ref($p56, $i58, .str.125);
    call {:si_unique_call 2157} {:cexpr "tmp___3"} boogie_si_record_i32($i59);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $i60 := $i59;
    goto $bb14;

  $bb10:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i62 := $i50;
    goto $bb15;

  $bb6:
    assume $i42 == 1;
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i38);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p1, $mul.ref($i43, 1));
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32($i3, $i38);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i46 := $zext.i32.i64($i45);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} $i47 := scnprintf.ref.i64.ref($p44, $i46, .str.134);
    call {:si_unique_call 2154} {:cexpr "tmp___1"} boogie_si_record_i32($i47);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $i48 := $i47;
    goto $bb8;

  $bb4:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i50 := $i38;
    goto $bb9;

  $bb1:
    assume $i31 == 1;
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i2);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p1, $mul.ref($i32, 1));
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32($i3, $i2);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i34);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2150} $i36 := scnprintf.ref.i64.ref.i32($p33, $i35, .str.133, $i30);
    call {:si_unique_call 2151} {:cexpr "tmp"} boogie_si_record_i32($i36);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb3;
}



const __get_metadata_snap: ref;

axiom __get_metadata_snap == $sub.ref(0, 700072);

procedure __get_metadata_snap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.66, $CurrAddr;



implementation __get_metadata_snap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(24, 1));
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} $i5 := dm_bm_read_lock($p4, 0, sb_validator, $p2);
    call {:si_unique_call 2169} {:cexpr "r"} boogie_si_record_i32($i5);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.56, $p2);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} $p9 := dm_block_data($p8);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 368)), $mul.ref(56, 1));
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $M.66 := $store.i64($M.66, $p1, $i12);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.56, $p2);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} $i14 := dm_bm_unlock($p13);
    call {:si_unique_call 2172} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $i7 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;
}



const dm_sm_get_nr_blocks: ref;

axiom dm_sm_get_nr_blocks == $sub.ref(0, 701104);

procedure dm_sm_get_nr_blocks($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $CurrAddr, $M.16, $M.17, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation dm_sm_get_nr_blocks($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    call {:si_unique_call 2173} $i4 := devirtbounce.8($p3, $p0, $p1);
    call {:si_unique_call 2174} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const requeue_bios: ref;

axiom requeue_bios == $sub.ref(0, 702136);

procedure requeue_bios($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation requeue_bios($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} rcu_read_lock();
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(944, 1)), $mul.ref(0, 1));
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p7);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2180} __read_once_size($p8, $p10, 8);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.76, $p11);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} $i13 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 2182} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p12);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(944, 1));
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i16, $i18);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2192} rcu_read_unlock();
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $p20 := $p12;
    goto $bb4;

  $bb4:
    call $p21, $p22, $i23, $p24, $p25, $p26, $p27, $p29, $p30, $p31, $p32, $p33, $p34, $p35, $i36, $p37, $p38, $i39, $i40, $p20 := requeue_bios_loop_$bb4($p3, $p4, $i18, $p21, $p22, $i23, $p24, $p25, $p26, $p27, $p29, $p30, $p31, $p32, $p33, $p34, $p35, $i36, $p37, $p38, $i39, $i40, $p20);
    goto $bb4_last;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} $p22 := spinlock_check($p21);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} $i23 := _raw_spin_lock_irqsave($p22);
    call {:si_unique_call 2185} {:cexpr "flags"} boogie_si_record_i64($i23);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p20, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p20, $mul.ref(0, 312)), $mul.ref(184, 1));
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} bio_list_merge($p24, $p25);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p20, $mul.ref(0, 312)), $mul.ref(184, 1));
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2187} bio_list_init($p26);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p20, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} spin_unlock_irqrestore($p27, $i23);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p30);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p3);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p4);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} __read_once_size($p31, $p33, 8);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p4);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.77, $p34);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2190} $i36 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 2191} {:cexpr "tmp___1"} boogie_si_record_i32($i36);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p35);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, $i18);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i40 == 1);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $p20 := $p35;
    goto $bb6_dummy;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8508;
}



const pool_resume_active_thins: ref;

axiom pool_resume_active_thins == $sub.ref(0, 703168);

procedure pool_resume_active_thins($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation pool_resume_active_thins($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2193} $p1 := get_first_thin($p0);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $p4 := $p1;
    goto $bb4;

  $bb4:
    call $p5, $p6, $p7, $i8, $i9, $p4 := pool_resume_active_thins_loop_$bb4($p0, $p5, $p6, $p7, $i8, $i9, $p4);
    goto $bb4_last;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} dm_internal_resume($p6);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2195} $p7 := get_next_thin($p0, $p4);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $p4 := $p7;
    goto $bb6_dummy;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8546;
}



const do_waker: ref;

axiom do_waker == $sub.ref(0, 704200);

procedure do_waker($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation do_waker($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_169: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2196} $p1 := to_delayed_work($p0);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 360), 66576));
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2197} wake_worker($p3);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 360), 66576)), $mul.ref(96, 1));
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 360), 66576)), $mul.ref(360, 1));
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2198} vslice_dummy_var_169 := queue_delayed_work($p5, $p6, 250);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    return;
}



const to_delayed_work: ref;

axiom to_delayed_work == $sub.ref(0, 705232);

procedure to_delayed_work($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation to_delayed_work($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const dm_internal_resume: ref;

axiom dm_internal_resume == $sub.ref(0, 706264);

procedure dm_internal_resume($p0: ref);
  free requires assertsPassed;



implementation dm_internal_resume($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    return;
}



const bind_control_target: ref;

axiom bind_control_target == $sub.ref(0, 707296);

procedure bind_control_target($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation bind_control_target($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p7: ref;
  var $i8: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2199} $i5 := get_pool_mode($p0);
    call {:si_unique_call 2200} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 80)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 2201} {:cexpr "new_mode"} boogie_si_record_i32($i8);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 80)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i5);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(16, 1));
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p1);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(64, 1));
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p12);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p13);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_59 := $M.0;
    cmdloc_dummy_var_60 := $M.0;
    call {:si_unique_call 2202} cmdloc_dummy_var_61 := $memcpy.i8(cmdloc_dummy_var_59, cmdloc_dummy_var_60, $p14, $p15, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_61;
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(48, 1));
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p18, $i17);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2203} set_pool_mode($p0, $i8);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;
}



const maybe_resize_data_dev: ref;

axiom maybe_resize_data_dev == $sub.ref(0, 708328);

procedure maybe_resize_data_dev($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.15, $M.16, $M.17, $M.55, $M.45, $M.18, $M.40, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.25, $M.26, $M.29, $M.58, $M.59, $M.60, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation maybe_resize_data_dev($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i1;
  var $i35: i8;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i22: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2204} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    call {:si_unique_call 2205} {:cexpr "data_size"} boogie_si_record_i64($i9);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 0);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $i13 := $udiv.i64($i9, $i12);
    call {:si_unique_call 2206} {:cexpr "data_size"} boogie_si_record_i64($i13);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2207} $i16 := dm_pool_get_data_dev_size($p15, $p2);
    call {:si_unique_call 2208} {:cexpr "r"} boogie_si_record_i32($i16);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p2);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $i24 := $ult.i64($i13, $i23);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p2);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $i31 := $ugt.i64($i13, $i30);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p7, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2213} $i34 := dm_pool_metadata_needs_check($p33);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i8($i34);
    call {:si_unique_call 2214} {:cexpr "tmp___2"} boogie_si_record_i8($i35);
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p2);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p7, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2219} $i50 := dm_pool_resize_data_dev($p49, $i13);
    call {:si_unique_call 2220} {:cexpr "r"} boogie_si_record_i32($i50);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 1);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i51 == 1;
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2221} metadata_operation_failed($p7, .str.85, $i50);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $i22 := $i50;
    goto $bb3;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i42 == 1;
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p7, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2217} $p45 := dm_device_name($p44);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p2);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} vslice_dummy_var_173 := printk.ref.ref.i64.i64(.str.84, $p45, $i46, $i13);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i36 == 1;
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} $p39 := dm_device_name($p38);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2216} vslice_dummy_var_172 := printk.ref.ref(.str.83, $p39);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p7, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2211} $p27 := dm_device_name($p26);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p2);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2212} vslice_dummy_var_171 := printk.ref.ref.i64.i64(.str.82, $p27, $i13, $i28);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2209} $p20 := dm_device_name($p19);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2210} vslice_dummy_var_170 := printk.ref.ref(.str.81, $p20);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $i22 := $i16;
    goto $bb3;
}



const maybe_resize_metadata_dev: ref;

axiom maybe_resize_metadata_dev == $sub.ref(0, 709360);

procedure maybe_resize_metadata_dev($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.15, $M.16, $M.17, $M.55, $M.45, $M.18, $M.40, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.25, $M.26, $M.29, $M.58, $M.59, $M.60, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation maybe_resize_metadata_dev($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i1;
  var $i32: i8;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i19: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2222} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 0);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 66576)), $mul.ref(32, 1));
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2223} $i10 := get_metadata_dev_size_in_blocks($p9);
    call {:si_unique_call 2224} {:cexpr "metadata_dev_size"} boogie_si_record_i64($i10);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2225} $i13 := dm_pool_get_metadata_dev_size($p12, $p2);
    call {:si_unique_call 2226} {:cexpr "r"} boogie_si_record_i32($i13);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p2);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $i21 := $ult.i64($i10, $i20);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p2);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $i28 := $ugt.i64($i10, $i27);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p7, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2231} $i31 := dm_pool_metadata_needs_check($p30);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i8($i31);
    call {:si_unique_call 2232} {:cexpr "tmp___2"} boogie_si_record_i8($i32);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i32);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p7, $mul.ref(0, 66576)), $mul.ref(32, 1));
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} warn_if_metadata_device_too_big($p39);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p7, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2236} $p42 := dm_device_name($p41);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p2);
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2237} vslice_dummy_var_177 := printk.ref.ref.i64.i64(.str.89, $p42, $i43, $i10);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p7, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2238} $i47 := dm_pool_resize_metadata_dev($p46, $i10);
    call {:si_unique_call 2239} {:cexpr "r"} boogie_si_record_i32($i47);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 1);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i48 == 1;
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2240} metadata_operation_failed($p7, .str.90, $i47);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $i19 := $i47;
    goto $bb3;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i33 == 1;
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} $p36 := dm_device_name($p35);
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2234} vslice_dummy_var_176 := printk.ref.ref(.str.88, $p36);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p7, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2229} $p24 := dm_device_name($p23);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p2);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} vslice_dummy_var_175 := printk.ref.ref.i64.i64(.str.87, $p24, $i10, $i25);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2227} $p17 := dm_device_name($p16);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} vslice_dummy_var_174 := printk.ref.ref(.str.86, $p17);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $i19 := $i13;
    goto $bb3;
}



const get_metadata_dev_size_in_blocks: ref;

axiom get_metadata_dev_size_in_blocks == $sub.ref(0, 710392);

procedure get_metadata_dev_size_in_blocks($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation get_metadata_dev_size_in_blocks($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2241} $i1 := get_metadata_dev_size($p0);
    call {:si_unique_call 2242} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $i2 := $udiv.i64($i1, 8);
    call {:si_unique_call 2243} {:cexpr "metadata_dev_size"} boogie_si_record_i64($i2);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const warn_if_metadata_device_too_big: ref;

axiom warn_if_metadata_device_too_big == $sub.ref(0, 711424);

procedure warn_if_metadata_device_too_big($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation warn_if_metadata_device_too_big($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var vslice_dummy_var_178: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2244} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2245} $i2 := get_dev_size($p0);
    call {:si_unique_call 2246} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i64($i2, 33554432);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2247} $p5 := bdevname($p0, $p4);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} vslice_dummy_var_178 := printk.ref.ref.i32(.str.57, $p5, 33292800);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dm_pool_resize_metadata_dev: ref;

axiom dm_pool_resize_metadata_dev == $sub.ref(0, 712456);

procedure dm_pool_resize_metadata_dev($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.16, $M.17, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation dm_pool_resize_metadata_dev($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2249} {:cexpr "dm_pool_resize_metadata_dev:arg:new_count"} boogie_si_record_i64($i1);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} down_write($p2);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2251} $i8 := __resize_space_map($p7, $i1);
    call {:si_unique_call 2252} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2253} up_write($p10);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const __resize_space_map: ref;

axiom __resize_space_map == $sub.ref(0, 713488);

procedure __resize_space_map($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.16, $M.17, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation __resize_space_map($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;
  var $i9: i1;
  var $i11: i64;
  var $i12: i64;
  var $i13: i32;
  var $i5: i32;
  var vslice_dummy_var_179: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2255} {:cexpr "__resize_space_map:arg:new_count"} boogie_si_record_i64($i1);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2256} $i3 := dm_sm_get_nr_blocks($p0, $p2);
    call {:si_unique_call 2257} {:cexpr "r"} boogie_si_record_i32($i3);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p2);
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i1, $i6);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p2);
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $i9 := $ult.i64($i1, $i8);
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p2);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64($i1, $i11);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2259} $i13 := dm_sm_extend($p0, $i12);
    call {:si_unique_call 2260} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $i5 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2258} vslice_dummy_var_179 := printk.ref(.str.173);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;
}



const dm_sm_extend: ref;

axiom dm_sm_extend == $sub.ref(0, 714520);

procedure dm_sm_extend($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dm_sm_extend($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2261} {:cexpr "dm_sm_extend:arg:extra_blocks"} boogie_si_record_i64($i1);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    call {:si_unique_call 2262} $i4 := devirtbounce.14($p3, $p0, $i1);
    call {:si_unique_call 2263} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const get_metadata_dev_size: ref;

axiom get_metadata_dev_size == $sub.ref(0, 715552);

procedure get_metadata_dev_size($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation get_metadata_dev_size($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} $i1 := get_dev_size($p0);
    call {:si_unique_call 2265} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 33292800);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $i3 := 33292800;
    goto $bb3;
}



const dm_pool_resize_data_dev: ref;

axiom dm_pool_resize_data_dev == $sub.ref(0, 716584);

procedure dm_pool_resize_data_dev($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.16, $M.17, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation dm_pool_resize_data_dev($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} {:cexpr "dm_pool_resize_data_dev:arg:new_count"} boogie_si_record_i64($i1);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2267} down_write($p2);
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(40, 1));
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2268} $i8 := __resize_space_map($p7, $i1);
    call {:si_unique_call 2269} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} up_write($p10);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const ldv_cancel_delayed_work_24: ref;

axiom ldv_cancel_delayed_work_24 == $sub.ref(0, 717616);

procedure ldv_cancel_delayed_work_24($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation ldv_cancel_delayed_work_24($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2271} $i1 := cancel_delayed_work($p0);
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2272} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 2273} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} disable_work_1($p5);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_cancel_delayed_work_25: ref;

axiom ldv_cancel_delayed_work_25 == $sub.ref(0, 718648);

procedure ldv_cancel_delayed_work_25($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation ldv_cancel_delayed_work_25($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2275} $i1 := cancel_delayed_work($p0);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2276} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 2277} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} disable_work_1($p5);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_flush_workqueue_26: ref;

axiom ldv_flush_workqueue_26 == $sub.ref(0, 719680);

procedure ldv_flush_workqueue_26($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11, $M.0, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.6, $M.8, $M.10, $M.12, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.42, $M.4, $M.58, $M.59, $M.60, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.55;



implementation ldv_flush_workqueue_26($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2279} flush_workqueue($p0);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2280} call_and_disable_all_1(2);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_439:
    assume !assertsPassed;
    return;
}



const flush_workqueue: ref;

axiom flush_workqueue == $sub.ref(0, 720712);

procedure flush_workqueue($p0: ref);
  free requires assertsPassed;



implementation flush_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    return;
}



const cancel_delayed_work: ref;

axiom cancel_delayed_work == $sub.ref(0, 721744);

procedure cancel_delayed_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_delayed_work($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2281} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 2282} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_work_1: ref;

axiom disable_work_1 == $sub.ref(0, 722776);

procedure disable_work_1($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation disable_work_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $i1 := $M.5;
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 3);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $i3 := $M.5;
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $M.7;
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 3);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $i11 := $M.7;
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := $M.9;
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i18 == 1);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $i19 := $M.9;
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i25 := $M.11;
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 3);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i26 == 1);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $i27 := $M.11;
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p29 := $M.12;
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i30, $i31);
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb33;

  $bb34:
    assume $i32 == 1;
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 2286} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p21 := $M.10;
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb24;

  $bb25:
    assume $i24 == 1;
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 2285} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $M.8;
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i14, $i15);
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb16:
    assume $i16 == 1;
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 2284} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $M.6;
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i6, $i7);
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 2283} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const pool_suspend_active_thins: ref;

axiom pool_suspend_active_thins == $sub.ref(0, 723808);

procedure pool_suspend_active_thins($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation pool_suspend_active_thins($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2287} $p1 := get_first_thin($p0);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $p4 := $p1;
    goto $bb4;

  $bb4:
    call $p5, $p6, $p7, $i8, $i9, $p4 := pool_suspend_active_thins_loop_$bb4($p0, $p5, $p6, $p7, $i8, $i9, $p4);
    goto $bb4_last;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2288} dm_internal_suspend_noflush($p6);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2289} $p7 := get_next_thin($p0, $p4);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $p4 := $p7;
    goto $bb6_dummy;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8910;
}



const dm_internal_suspend_noflush: ref;

axiom dm_internal_suspend_noflush == $sub.ref(0, 724840);

procedure dm_internal_suspend_noflush($p0: ref);
  free requires assertsPassed;



implementation dm_internal_suspend_noflush($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_19: ref;

axiom ldv_mutex_lock_19 == $sub.ref(0, 725872);

procedure ldv_mutex_lock_19($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_mutex_lock_19($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2290} ldv_mutex_lock_mutex_of_dm_thin_pool_table($p0);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2291} mutex_lock($p0);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_448:
    assume !assertsPassed;
    return;
}



const unbind_control_target: ref;

axiom unbind_control_target == $sub.ref(0, 726904);

procedure unbind_control_target($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation unbind_control_target($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(16, 1));
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(16, 1));
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_unlock_20: ref;

axiom ldv_mutex_unlock_20 == $sub.ref(0, 727936);

procedure ldv_mutex_unlock_20($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_mutex_unlock_20($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} ldv_mutex_unlock_mutex_of_dm_thin_pool_table($p0);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2293} mutex_unlock($p0);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_21: ref;

axiom ldv_mutex_lock_21 == $sub.ref(0, 728968);

procedure ldv_mutex_lock_21($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_mutex_lock_21($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2294} ldv_mutex_lock_mutex_of_dm_thin_pool_table($p0);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2295} mutex_lock($p0);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_454:
    assume !assertsPassed;
    return;
}



const pool_features_init: ref;

axiom pool_features_init == $sub.ref(0, 730000);

procedure pool_features_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pool_features_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 1);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 1);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 1);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 0);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    return;
}



const dm_consume_args: ref;

axiom dm_consume_args == $sub.ref(0, 731032);

procedure dm_consume_args($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation dm_consume_args($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2296} {:cexpr "dm_consume_args:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    return;
}



const parse_pool_features: ref;

axiom parse_pool_features == $sub.ref(0, 732064);

procedure parse_pool_features($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.78, $M.79, $M.80, $M.81, $M.0, $CurrAddr;



implementation parse_pool_features($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i40: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2297} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2298} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $M.78 := $store.i32($M.78, $p6, 0);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $M.79 := $store.i32($M.79, $p8, 4);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $M.80 := $store.ref($M.80, $p10, .str.50);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.63, $p11);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2299} $i17 := dm_read_arg_group($p15, $p0, $p3, $p16);
    call {:si_unique_call 2300} {:cexpr "r"} boogie_si_record_i32($i17);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.81, $p3);
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i40 := $i17;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $i14 := $i40;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call $p21, $i22, $i23, $i24, $i25, $p26, $i27, $i28, $p29, $i30, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $p38, $i41, $i42, $i43 := parse_pool_features_loop_$bb11($p0, $p1, $p3, $i17, $p21, $i22, $i23, $i24, $i25, $p26, $i27, $i28, $p29, $i30, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $p38, $i41, $i42, $i43);
    goto $bb11_last;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i43 == 1);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb31:
    assume $i43 == 1;
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2301} $p21 := dm_shift_arg($p0);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.81, $p3);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32($i22, 1);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $M.81 := $store.i32($M.81, $p3, $i23);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2302} $i24 := strcasecmp($p21, .str.51);
    call {:si_unique_call 2303} {:cexpr "tmp___3"} boogie_si_record_i32($i24);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2304} $i27 := strcasecmp($p21, .str.52);
    call {:si_unique_call 2305} {:cexpr "tmp___2"} boogie_si_record_i32($i27);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i28 == 1);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2306} $i30 := strcasecmp($p21, .str.53);
    call {:si_unique_call 2307} {:cexpr "tmp___1"} boogie_si_record_i32($i30);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i31 == 1);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} $i33 := strcasecmp($p21, .str.54);
    call {:si_unique_call 2309} {:cexpr "tmp___0"} boogie_si_record_i32($i33);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i34 == 1);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2310} $i36 := strcasecmp($p21, .str.55);
    call {:si_unique_call 2311} {:cexpr "tmp"} boogie_si_record_i32($i36);
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i37 == 1);
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, .str.56);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 22);
    goto $bb28;

  $bb25:
    assume $i37 == 1;
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, 1);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.81, $p3);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i42 == 1);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb29_dummy;

  $bb22:
    assume $i34 == 1;
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 2);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 0);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 0);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 0);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb29_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i17, 0);
    goto corral_source_split_8987;
}



const kstrtoul: ref;

axiom kstrtoul == $sub.ref(0, 733096);

procedure kstrtoul($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoul($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} {:cexpr "kstrtoul:arg:base"} boogie_si_record_i32($i1);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2313} $i3 := kstrtoull($p0, $i1, $p2);
    call {:si_unique_call 2314} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __pool_find: ref;

axiom __pool_find == $sub.ref(0, 734128);

procedure __pool_find($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref, $p5: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.62, $CurrAddr, $M.42, $M.4, $M.58, $M.59, $M.60, $M.5, $M.7, $M.9, $M.11, $M.55, $M.15, $M.45, $M.18, $M.6, $M.8, $M.10, $M.12, $M.16, $M.17, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.40, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation __pool_find($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref, $p5: ref) returns ($r: ref)
{
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p29: ref;
  var $p28: ref;
  var $p17: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2315} {:cexpr "__pool_find:arg:block_size___0"} boogie_si_record_i64($i2);
    call {:si_unique_call 2316} {:cexpr "__pool_find:arg:read_only"} boogie_si_record_i32($i3);
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} $p6 := __pool_table_lookup_metadata_dev($p1);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2318} $p18 := __pool_table_lookup($p0);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} $p29 := pool_create($p0, $p1, $i2, $i3, $p4);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $M.62 := $store.i32($M.62, $p5, 1);
    assume {:verifier.code 0} true;
    $p28 := $p29;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p17 := $p28;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $p16 := $p17;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $r := $p16;
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref(0, 66576)), $mul.ref(32, 1));
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p1);
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i23, $i24);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2323} __pool_inc($p18);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    $p28 := $p18;
    goto $bb13;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, .str.59);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2322} $p26 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $p16 := $p26;
    goto $bb5;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i11, $i12);
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2320} __pool_inc($p6);
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $p17 := $p6;
    goto $bb7;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, .str.58);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2319} $p14 := ERR_PTR($sub.i64(0, 16));
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $p16 := $p14;
    goto $bb5;
}



const calc_metadata_threshold: ref;

axiom calc_metadata_threshold == $sub.ref(0, 735160);

procedure calc_metadata_threshold($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation calc_metadata_threshold($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2324} $i5 := get_metadata_dev_size_in_blocks($p4);
    call {:si_unique_call 2325} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $i6 := $udiv.i64($i5, 4);
    call {:si_unique_call 2326} {:cexpr "quarter"} boogie_si_record_i64($i6);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $i7 := $ult.i64(1024, $i6);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $i8 := 1024;
    goto $bb3;
}



const metadata_low_callback: ref;

axiom metadata_low_callback == $sub.ref(0, 736192);

procedure metadata_low_callback($p0: ref);
  free requires assertsPassed;



implementation metadata_low_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var vslice_dummy_var_180: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2327} $p4 := dm_device_name($p3);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2328} vslice_dummy_var_180 := printk.ref.ref(.str.79, $p4);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 66576)), $mul.ref(16, 1));
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} dm_table_event($p9);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    return;
}



const dm_pool_register_metadata_threshold: ref;

axiom dm_pool_register_metadata_threshold == $sub.ref(0, 737224);

procedure dm_pool_register_metadata_threshold($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_pool_register_metadata_threshold($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2330} {:cexpr "dm_pool_register_metadata_threshold:arg:threshold"} boogie_si_record_i64($i1);
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2331} down_write($p4);
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(32, 1));
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} $i7 := dm_sm_register_threshold_callback($p6, $i1, $p2, $p3);
    call {:si_unique_call 2333} {:cexpr "r"} boogie_si_record_i32($i7);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2334} up_write($p8);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pool_is_congested: ref;

axiom pool_is_congested == $sub.ref(0, 738256);

procedure pool_is_congested($p0: ref, $i1: i32) returns ($r: i32);



const dm_table_add_target_callbacks: ref;

axiom dm_table_add_target_callbacks == $sub.ref(0, 739288);

procedure dm_table_add_target_callbacks($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dm_table_add_target_callbacks($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_22: ref;

axiom ldv_mutex_unlock_22 == $sub.ref(0, 740320);

procedure ldv_mutex_unlock_22($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_mutex_unlock_22($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2335} ldv_mutex_unlock_mutex_of_dm_thin_pool_table($p0);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2336} mutex_unlock($p0);
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_23: ref;

axiom ldv_mutex_unlock_23 == $sub.ref(0, 741352);

procedure ldv_mutex_unlock_23($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_mutex_unlock_23($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2337} ldv_mutex_unlock_mutex_of_dm_thin_pool_table($p0);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2338} mutex_unlock($p0);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_463:
    assume !assertsPassed;
    return;
}



const bdi_congested: ref;

axiom bdi_congested == $sub.ref(0, 742384);

procedure bdi_congested($p0: ref, $i1: i32) returns ($r: i32);



const wb_congested: ref;

axiom wb_congested == $sub.ref(0, 743416);

procedure wb_congested($p0: ref, $i1: i32) returns ($r: i32);



const dm_sm_register_threshold_callback: ref;

axiom dm_sm_register_threshold_callback == $sub.ref(0, 744448);

procedure dm_sm_register_threshold_callback($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_sm_register_threshold_callback($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} {:cexpr "dm_sm_register_threshold_callback:arg:threshold"} boogie_si_record_i64($i1);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    call {:si_unique_call 2340} $i10 := devirtbounce.19($p9, $p0, $i1, $p2, $p3);
    call {:si_unique_call 2341} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const __pool_table_lookup_metadata_dev: ref;

axiom __pool_table_lookup_metadata_dev == $sub.ref(0, 745480);

procedure __pool_table_lookup_metadata_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __pool_table_lookup_metadata_dev($p0: ref) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p12: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} $i1 := mutex_is_locked(dm_thin_pool_table);
    call {:si_unique_call 2343} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2344} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 2345} {:cexpr "tmp___1"} boogie_si_record_i64($i5);
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(160, 1)), $mul.ref(0, 1)));
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 66576)), $mul.ref(0, 1));
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, $p2i.ref.i64($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(160, 1))));
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p19 := $0.ref;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $r := $p19;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $p12 := $p7;
    goto $bb8;

  $bb8:
    call $p13, $p14, $i15, $i16, $i17, $p18, $p21, $p22, $p23, $p24, $i25, $i26, $p12 := __pool_table_lookup_metadata_dev_loop_$bb8($p0, $p13, $p14, $i15, $i16, $i17, $p18, $p21, $p22, $p23, $p24, $i25, $i26, $p12);
    goto $bb8_last;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 66576)), $mul.ref(32, 1));
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p0);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i15, $i16);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $p18 := $p12;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 66576)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 66576)), $mul.ref(0, 1));
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, $p2i.ref.i64($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(160, 1))));
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb14:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $p12 := $p22;
    goto $bb14_dummy;

  $bb10:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $p19 := $p18;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 2346} devirtbounce.3(0, .str.30, 584, 12);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call __pool_table_lookup_metadata_dev_loop_$bb3();
    goto $bb3_last;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9171;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 746512);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2347} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2348} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const pool_create: ref;

axiom pool_create == $sub.ref(0, 747544);

procedure pool_create($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.42, $M.4, $M.58, $M.59, $M.60, $M.5, $M.7, $M.9, $M.11, $M.55, $M.15, $M.45, $M.18, $M.6, $M.8, $M.10, $M.12, $M.16, $M.17, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.40, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation pool_create($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $i16: i8;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i1;
  var $i21: i8;
  var $i22: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i64;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i1;
  var $i57: i8;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i32;
  var $i64: i64;
  var $p65: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $p88: ref;
  var $p90: ref;
  var $p91: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p99: ref;
  var $p102: ref;
  var $p105: ref;
  var $p106: ref;
  var $p108: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $p116: ref;
  var $p118: ref;
  var $p119: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p127: ref;
  var $p130: ref;
  var $p133: ref;
  var $p134: ref;
  var $p136: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i64;
  var $p144: ref;
  var $p145: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $i161: i1;
  var $p162: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i64;
  var $i169: i1;
  var $p170: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $i178: i64;
  var $i179: i1;
  var $p180: ref;
  var $p181: ref;
  var $i182: i64;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p171: ref;
  var $p188: ref;
  var $p189: ref;
  var $p163: ref;
  var $p190: ref;
  var $p191: ref;
  var $p74: ref;
  var $p192: ref;
  var $p193: ref;
  var $p66: ref;
  var $p194: ref;
  var $p195: ref;
  var $p50: ref;
  var $p196: ref;
  var $p30: ref;
  var $i197: i32;
  var $i198: i1;
  var $p24: ref;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var vslice_dummy_var_181: ref;
  var vslice_dummy_var_182: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2350} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2351} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2354} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2355} $p11 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} $p12 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2357} $p13 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2358} $p14 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2359} {:cexpr "pool_create:arg:block_size___0"} boogie_si_record_i64($i2);
    call {:si_unique_call 2360} {:cexpr "pool_create:arg:read_only"} boogie_si_record_i32($i3);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i3, 0);
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i8($i15);
    call {:si_unique_call 2361} {:cexpr "format_device"} boogie_si_record_i8($i16);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2362} $p18 := dm_pool_metadata_open($p1, $i2, $i17);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2363} $i20 := IS_ERR($p19);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i8($i20);
    call {:si_unique_call 2364} {:cexpr "tmp"} boogie_si_record_i8($i21);
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i21);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2365} $p25 := kmalloc(66576, 208);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p18);
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32($i2);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    $i34 := $sub.i64($i2, 1);
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $i35 := $and.i64($i34, $i2);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i36 == 1);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} $i38 := __ffs($i2);
    call {:si_unique_call 2370} {:cexpr "tmp___1"} boogie_si_record_i64($i38);
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i64.i32($i38);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(60, 1));
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(48, 1));
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p41, 0);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(64, 1));
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2371} pool_features_init($p42);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2372} $p43 := dm_bio_prison_create();
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(80, 1));
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $p43);
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(80, 1));
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, 0);
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2375} $p51 := dm_kcopyd_client_create(dm_kcopyd_throttle);
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(88, 1));
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, $p51);
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(88, 1));
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} $i56 := IS_ERR($p55);
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i8($i56);
    call {:si_unique_call 2377} {:cexpr "tmp___3"} boogie_si_record_i8($i57);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i57);
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} $p67 := __alloc_workqueue_key.ref.i32.i32.ref.ref(.str.65, 131082, 1, $p5, .str.64);
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(96, 1));
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $p67);
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(96, 1));
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $i72 := $eq.i64($i71, 0);
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(104, 1));
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2386} throttle_init($p75);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(280, 1));
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2387} __init_work($p76, 0);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p77, 137438953408);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(280, 1)), $mul.ref(0, 1));
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p7);
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_62 := $M.0;
    cmdloc_dummy_var_63 := $M.0;
    call {:si_unique_call 2388} cmdloc_dummy_var_64 := $memcpy.i8(cmdloc_dummy_var_62, cmdloc_dummy_var_63, $p80, $p81, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_64;
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(280, 1)), $mul.ref(32, 1));
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2389} lockdep_init_map($p83, .str.67, $p6, 0);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(280, 1)), $mul.ref(8, 1));
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2390} INIT_LIST_HEAD($p85);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(280, 1)), $mul.ref(24, 1));
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p88, do_worker);
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2391} __init_work($p90, 0);
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p9, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p91, 137438953408);
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(360, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p9);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_65 := $M.0;
    cmdloc_dummy_var_66 := $M.0;
    call {:si_unique_call 2392} cmdloc_dummy_var_67 := $memcpy.i8(cmdloc_dummy_var_65, cmdloc_dummy_var_66, $p95, $p96, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_67;
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(360, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2393} lockdep_init_map($p99, .str.68, $p8, 0);
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(360, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} INIT_LIST_HEAD($p102);
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(360, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p106, do_waker);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(360, 1)), $mul.ref(80, 1));
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2395} init_timer_key($p108, 2097152, .str.69, $p10);
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(360, 1)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p111, delayed_work_timer_fn);
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(360, 1));
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p112);
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(360, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p116, $i113);
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(584, 1)), $mul.ref(0, 1));
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2396} __init_work($p118, 0);
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p12, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p119, 137438953408);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(584, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p12);
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_68 := $M.0;
    cmdloc_dummy_var_69 := $M.0;
    call {:si_unique_call 2397} cmdloc_dummy_var_70 := $memcpy.i8(cmdloc_dummy_var_68, cmdloc_dummy_var_69, $p123, $p124, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_70;
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(584, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2398} lockdep_init_map($p127, .str.70, $p11, 0);
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(584, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2399} INIT_LIST_HEAD($p130);
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(584, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p134, do_no_space_timeout);
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(584, 1)), $mul.ref(80, 1));
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2400} init_timer_key($p136, 2097152, .str.71, $p13);
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(584, 1)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p139, delayed_work_timer_fn);
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(584, 1));
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    $i141 := $p2i.ref.i64($p140);
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(584, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p144, $i141);
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(824, 1));
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2401} vslice_dummy_var_181 := spinlock_check($p145);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(824, 1)), $mul.ref(0, 1));
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p148);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2402} __raw_spin_lock_init($p149, .str.72, $p14);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(896, 1));
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2403} bio_list_init($p150);
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(912, 1));
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2404} INIT_LIST_HEAD($p151);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(928, 1));
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2405} INIT_LIST_HEAD($p152);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(944, 1));
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2406} INIT_LIST_HEAD($p153);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(72, 1));
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p154, 0);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(73, 1));
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p155, 1);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2407} $p156 := dm_deferred_set_create();
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(960, 1));
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p157, $p156);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(960, 1));
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p159);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $i161 := $eq.i64($i160, 0);
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2410} $p164 := dm_deferred_set_create();
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(968, 1));
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p165, $p164);
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(968, 1));
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.0, $p166);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $i168 := $p2i.ref.i64($p167);
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $i169 := $eq.i64($i168, 0);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i169} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(976, 1));
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p172, $0.ref);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    $p173 := $M.82;
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2413} $p174 := mempool_create_slab_pool(1024, $p173);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(984, 1));
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p175, $p174);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(984, 1));
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $i178 := $p2i.ref.i64($p177);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $i179 := $eq.i64($i178, 0);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(816, 1));
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p181, 1);
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    $i182 := $load.i64($M.0, jiffies);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(808, 1));
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p183, $i182);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p184, $p0);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(32, 1));
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p185, $p1);
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2416} __pool_table_insert($p26);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $p24 := $p25;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $r := $p24;
    return;

  $bb32:
    assume $i179 == 1;
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, .str.75);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2414} $p180 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(968, 1));
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $p187 := $load.ref($M.0, $p186);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2415} dm_deferred_set_destroy($p187);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    $p171 := $p180;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(960, 1));
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $p189 := $load.ref($M.0, $p188);
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2412} dm_deferred_set_destroy($p189);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $p163 := $p171;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(96, 1));
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2409} ldv_destroy_workqueue_18($p191);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $p74 := $p163;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(88, 1));
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.0, $p192);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2385} dm_kcopyd_client_destroy($p193);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $p66 := $p74;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(80, 1));
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.0, $p194);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2382} dm_bio_prison_destroy($p195);
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $p50 := $p66;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $p196 := $bitcast.ref.ref($p26);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2374} kfree($p196);
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $p30 := $p50;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2367} $i197 := dm_pool_metadata_close($p18);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    call {:si_unique_call 2368} {:cexpr "tmp___5"} boogie_si_record_i32($i197);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    $i198 := $ne.i32($i197, 0);
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i198} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $p24 := $p30;
    goto $bb3;

  $bb36:
    assume $i198 == 1;
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2417} vslice_dummy_var_182 := printk.ref.ref(.str.76, .str.77);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i169 == 1;
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, .str.74);
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2411} $p170 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $p171 := $p170;
    goto $bb30;

  $bb24:
    assume $i161 == 1;
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, .str.73);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2408} $p162 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $p163 := $p162;
    goto $bb26;

  $bb20:
    assume $i72 == 1;
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, .str.66);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2384} $p73 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $p74 := $p73;
    goto $bb22;

  $bb16:
    assume $i58 == 1;
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(88, 1));
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2378} $i62 := PTR_ERR($p61);
    call {:si_unique_call 2379} {:cexpr "tmp___2"} boogie_si_record_i64($i62);
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i64.i32($i62);
    call {:si_unique_call 2380} {:cexpr "r"} boogie_si_record_i32($i63);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, .str.63);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i63);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2381} $p65 := ERR_PTR($i64);
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $p66 := $p65;
    goto $bb18;

  $bb12:
    assume $i48 == 1;
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, .str.62);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} $p49 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $p50 := $p49;
    goto $bb14;

  $bb9:
    assume $i36 == 1;
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p26, $mul.ref(0, 66576)), $mul.ref(60, 1));
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $sub.i32(0, 1));
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, .str.61);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2366} $p29 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $p30 := $p29;
    goto $bb7;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, .str.60);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $p24 := $p18;
    goto $bb3;

  SeqInstr_466:
    assume !assertsPassed;
    return;
}



const dm_pool_metadata_open: ref;

axiom dm_pool_metadata_open == $sub.ref(0, 748576);

procedure dm_pool_metadata_open($p0: ref, $i1: i64, $i2: i1) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.55, $M.42, $M.4, $M.58, $M.59, $M.60, $M.15, $M.45, $M.18, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.16, $M.17, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.40, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation dm_pool_metadata_open($p0: ref, $i1: i64, $i2: i1) returns ($r: ref)
{
  var $p3: ref;
  var $i4: i8;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i31: i64;
  var $p32: ref;
  var $p12: ref;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2418} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2419} {:cexpr "dm_pool_metadata_open:arg:data_block_size"} boogie_si_record_i64($i1);
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i2);
    call {:si_unique_call 2420} {:cexpr "dm_pool_metadata_open:arg:format_device"} boogie_si_record_i1($i2);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2421} $p5 := kmalloc(832, 208);
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 832)), $mul.ref(344, 1));
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2424} __init_rwsem($p13, .str.1, $p3);
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 832)), $mul.ref(504, 1));
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 832)), $mul.ref(528, 1));
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2425} INIT_LIST_HEAD($p15);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 832)), $mul.ref(568, 1));
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 0);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 832)), $mul.ref(16, 1));
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p0);
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 832)), $mul.ref(560, 1));
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p18, $i1);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i4);
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2426} $i20 := __create_persistent_data_objects($p6, $i19);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    call {:si_unique_call 2427} {:cexpr "r"} boogie_si_record_i32($i20);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2430} $i26 := __begin_transaction($p6);
    call {:si_unique_call 2431} {:cexpr "r"} boogie_si_record_i32($i26);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, 0);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p12 := $p5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2432} $i28 := dm_pool_metadata_close($p6);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    call {:si_unique_call 2433} {:cexpr "tmp___2"} boogie_si_record_i32($i28);
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i26);
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2435} $p32 := ERR_PTR($i31);
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $p12 := $p32;
    goto $bb3;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2434} vslice_dummy_var_184 := printk.ref.ref(.str.2, .str.3);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p6);
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2428} kfree($p22);
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i20);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2429} $p24 := ERR_PTR($i23);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $p12 := $p24;
    goto $bb3;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2422} vslice_dummy_var_183 := printk.ref(.str);
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2423} $p10 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    $p12 := $p10;
    goto $bb3;
}



const __ffs: ref;

axiom __ffs == $sub.ref(0, 749608);

procedure __ffs($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __ffs($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2436} {:cexpr "__ffs:arg:word"} boogie_si_record_i64($i0);
    call {:si_unique_call 2437} $i1 := devirtbounce.20(0, $i0);
    call {:si_unique_call 2438} {:cexpr "word"} boogie_si_record_i64($i1);
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dm_bio_prison_create: ref;

axiom dm_bio_prison_create == $sub.ref(0, 750640);

procedure dm_bio_prison_create() returns ($r: ref);
  free requires assertsPassed;



implementation dm_bio_prison_create() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2439} $p0 := external_alloc();
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const dm_kcopyd_client_create: ref;

axiom dm_kcopyd_client_create == $sub.ref(0, 751672);

procedure dm_kcopyd_client_create($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dm_kcopyd_client_create($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2440} $p1 := external_alloc();
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 752704);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2441} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2442} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2443} $p5 := external_alloc();
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const throttle_init: ref;

axiom throttle_init == $sub.ref(0, 753736);

procedure throttle_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation throttle_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2444} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2445} __init_rwsem($p2, .str.78, $p1);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(168, 1));
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 0);
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    return;
}



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 754768);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2446} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    return;
}



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 755800);

procedure delayed_work_timer_fn($i0: i64);



const do_no_space_timeout: ref;

axiom do_no_space_timeout == $sub.ref(0, 756832);

procedure do_no_space_timeout($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation do_no_space_timeout($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2447} $p1 := to_delayed_work($p0);
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 584), 66576));
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2448} $i4 := get_pool_mode($p3);
    call {:si_unique_call 2449} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 66576)), $mul.ref(64, 1)), $mul.ref(7, 1));
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2450} set_pool_mode($p3, 2);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb3;
}



const dm_deferred_set_create: ref;

axiom dm_deferred_set_create == $sub.ref(0, 757864);

procedure dm_deferred_set_create() returns ($r: ref);
  free requires assertsPassed;



implementation dm_deferred_set_create() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2451} $p0 := external_alloc();
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const mempool_create_slab_pool: ref;

axiom mempool_create_slab_pool == $sub.ref(0, 758896);

procedure mempool_create_slab_pool($i0: i32, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation mempool_create_slab_pool($i0: i32, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2452} {:cexpr "mempool_create_slab_pool:arg:min_nr"} boogie_si_record_i32($i0);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2453} $p3 := mempool_create($i0, mempool_alloc_slab, mempool_free_slab, $p2);
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __pool_table_insert: ref;

axiom __pool_table_insert == $sub.ref(0, 759928);

procedure __pool_table_insert($p0: ref);
  free requires assertsPassed;



implementation __pool_table_insert($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2454} $i1 := mutex_is_locked(dm_thin_pool_table);
    call {:si_unique_call 2455} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2456} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 2457} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 66576)), $mul.ref(0, 1));
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2459} list_add($p7, $add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(160, 1)));
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 2458} devirtbounce.3(0, .str.30, 554, 12);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call __pool_table_insert_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv_destroy_workqueue_18: ref;

axiom ldv_destroy_workqueue_18 == $sub.ref(0, 760960);

procedure ldv_destroy_workqueue_18($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11, $M.0, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.6, $M.8, $M.10, $M.12, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.42, $M.4, $M.58, $M.59, $M.60, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.55;



implementation ldv_destroy_workqueue_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2460} destroy_workqueue($p0);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2461} call_and_disable_all_1(2);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_484:
    assume !assertsPassed;
    return;
}



const mempool_alloc_slab: ref;

axiom mempool_alloc_slab == $sub.ref(0, 761992);

procedure mempool_alloc_slab($i0: i32, $p1: ref) returns ($r: ref);



const mempool_free_slab: ref;

axiom mempool_free_slab == $sub.ref(0, 763024);

procedure mempool_free_slab($p0: ref, $p1: ref);



const mempool_create: ref;

axiom mempool_create == $sub.ref(0, 764056);

procedure mempool_create($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation mempool_create($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} {:cexpr "mempool_create:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2463} $p4 := external_alloc();
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const __init_rwsem: ref;

axiom __init_rwsem == $sub.ref(0, 765088);

procedure __init_rwsem($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_rwsem($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 766120);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2464} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(2012, $i0);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dm_read_arg_group: ref;

axiom dm_read_arg_group == $sub.ref(0, 767152);

procedure dm_read_arg_group($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_read_arg_group($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2465} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 2466} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dm_shift_arg: ref;

axiom dm_shift_arg == $sub.ref(0, 768184);

procedure dm_shift_arg($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dm_shift_arg($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2467} $p1 := external_alloc();
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const sb_prepare_for_write: ref;

axiom sb_prepare_for_write == $sub.ref(0, 769216);

procedure sb_prepare_for_write($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation sb_prepare_for_write($p0: ref, $p1: ref, $i2: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2468} {:cexpr "sb_prepare_for_write:arg:block_size___0"} boogie_si_record_i64($i2);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2469} $p3 := dm_block_data($p1);
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2470} $i5 := dm_block_location($p1);
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 368)), $mul.ref(8, 1));
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p6, $i5);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 368)), $mul.ref(4, 1));
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64($i2, 4);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2471} $i10 := dm_bm_checksum($p8, $i9, 160774);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    return;
}



const sb_check: ref;

axiom sb_check == $sub.ref(0, 770248);

procedure sb_check($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation sb_check($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i13: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2472} {:cexpr "sb_check:arg:block_size___0"} boogie_si_record_i64($i2);
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2473} $p3 := dm_block_data($p1);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2474} $i5 := dm_block_location($p1);
    call {:si_unique_call 2475} {:cexpr "tmp___1"} boogie_si_record_i64($i5);
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 368)), $mul.ref(8, 1));
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i5, $i7);
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 368)), $mul.ref(32, 1));
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 27022010);
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 368)), $mul.ref(4, 1));
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64($i2, 4);
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2480} $i23 := dm_bm_checksum($p21, $i22, 160774);
    call {:si_unique_call 2481} {:cexpr "csum_le"} boogie_si_record_i32($i23);
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, $i23);
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2482} vslice_dummy_var_187 := printk.ref.i32.i32(.str.176, $i23, $i28);
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 84);
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 368)), $mul.ref(32, 1));
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2479} vslice_dummy_var_186 := printk.ref.i64.i64(.str.175, $i18, 27022010);
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 84);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2476} $i9 := dm_block_location($p1);
    call {:si_unique_call 2477} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 368)), $mul.ref(8, 1));
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2478} vslice_dummy_var_185 := printk.ref.i64.i64(.str.174, $i11, $i9);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 15);
    goto $bb3;
}



const dm_bm_checksum: ref;

axiom dm_bm_checksum == $sub.ref(0, 771280);

procedure dm_bm_checksum($p0: ref, $i1: i64, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dm_bm_checksum($p0: ref, $i1: i64, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2483} {:cexpr "dm_bm_checksum:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 2484} {:cexpr "dm_bm_checksum:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2485} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 2486} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 772312);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2487} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2488} $p1 := calloc(1, $i0);
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2489} __VERIFIER_assume($i4);
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 773344);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2490} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 2491} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_71 := $M.0;
    call {:si_unique_call 2492} cmdloc_dummy_var_72 := $memset.i8(cmdloc_dummy_var_71, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_72;
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const work_init_3: ref;

axiom work_init_3 == $sub.ref(0, 774376);

procedure work_init_3();
  free requires assertsPassed;
  modifies $M.83, $M.84, $M.85, $M.86;



implementation work_init_3()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $M.83 := 0;
    call {:si_unique_call 2493} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(0);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    $M.84 := 0;
    call {:si_unique_call 2494} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(0);
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    $M.85 := 0;
    call {:si_unique_call 2495} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(0);
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $M.86 := 0;
    call {:si_unique_call 2496} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(0);
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_3: ref;

axiom invoke_work_3 == $sub.ref(0, 775408);

procedure invoke_work_3();
  free requires assertsPassed;
  modifies $M.83, $M.0, $M.84, $M.85, $M.86, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation invoke_work_3()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2497} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2498} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2499} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2512} ldv_stop();
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    $i21 := $M.86;
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    $i23 := $M.86;
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.86 := 4;
    call {:si_unique_call 2509} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(4);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $p25 := $M.87;
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2510} do_no_space_timeout($p25);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 2511} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(1);
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $i16 := $M.85;
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $i18 := $M.85;
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.85 := 4;
    call {:si_unique_call 2506} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(4);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $p20 := $M.87;
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2507} do_no_space_timeout($p20);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 2508} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(1);
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $i11 := $M.84;
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $i13 := $M.84;
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.84 := 4;
    call {:si_unique_call 2503} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(4);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    $p15 := $M.87;
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2504} do_no_space_timeout($p15);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 2505} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(1);
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $i6 := $M.83;
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    $i8 := $M.83;
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.83 := 4;
    call {:si_unique_call 2500} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(4);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    $p10 := $M.87;
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} do_no_space_timeout($p10);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 2502} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(1);
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 776440);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const work_init_2: ref;

axiom work_init_2 == $sub.ref(0, 777472);

procedure work_init_2();
  free requires assertsPassed;
  modifies $M.88, $M.89, $M.90, $M.91;



implementation work_init_2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $M.88 := 0;
    call {:si_unique_call 2513} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $M.89 := 0;
    call {:si_unique_call 2514} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $M.90 := 0;
    call {:si_unique_call 2515} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    $M.91 := 0;
    call {:si_unique_call 2516} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    return;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 778504);

procedure work_init_1();
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    $M.5 := 0;
    call {:si_unique_call 2517} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 2518} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 2519} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    $M.11 := 0;
    call {:si_unique_call 2520} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_1: ref;

axiom invoke_work_1 == $sub.ref(0, 779536);

procedure invoke_work_1();
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11, $M.0, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.6, $M.8, $M.10, $M.12, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.42, $M.4, $M.58, $M.59, $M.60, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.55;



implementation invoke_work_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2521} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2522} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2523} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2536} ldv_stop();
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $i21 := $M.11;
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    $i23 := $M.11;
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.11 := 4;
    call {:si_unique_call 2533} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(4);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $p25 := $M.6;
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2534} do_worker($p25);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 2535} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $i16 := $M.9;
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    $i18 := $M.9;
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.9 := 4;
    call {:si_unique_call 2530} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(4);
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $p20 := $M.6;
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2531} do_worker($p20);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 2532} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $i11 := $M.7;
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    $i13 := $M.7;
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.7 := 4;
    call {:si_unique_call 2527} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(4);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    $p15 := $M.6;
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2528} do_worker($p15);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 2529} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $i6 := $M.5;
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $i8 := $M.5;
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.5 := 4;
    call {:si_unique_call 2524} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(4);
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    $p10 := $M.6;
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2525} do_worker($p10);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 2526} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const ldv_target_type_5: ref;

axiom ldv_target_type_5 == $sub.ref(0, 780568);

procedure ldv_target_type_5();
  free requires assertsPassed;
  modifies $M.92, $M.0, $CurrAddr;



implementation ldv_target_type_5()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2537} $p0 := ldv_init_zalloc(88);
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    $M.92 := $p0;
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    return;
}



const ldv_target_type_6: ref;

axiom ldv_target_type_6 == $sub.ref(0, 781600);

procedure ldv_target_type_6();
  free requires assertsPassed;
  modifies $M.93, $M.0, $CurrAddr;



implementation ldv_target_type_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2538} $p0 := ldv_init_zalloc(88);
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $M.93 := $p0;
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_2: ref;

axiom invoke_work_2 == $sub.ref(0, 782632);

procedure invoke_work_2();
  free requires assertsPassed;
  modifies $M.88, $M.89, $M.90, $M.91, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation invoke_work_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2539} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2540} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2541} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2554} ldv_stop();
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $i21 := $M.91;
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    $i23 := $M.91;
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.91 := 4;
    call {:si_unique_call 2551} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(4);
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $p25 := $M.94;
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2552} do_waker($p25);
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 2553} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    $i16 := $M.90;
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    $i18 := $M.90;
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.90 := 4;
    call {:si_unique_call 2548} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(4);
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $p20 := $M.94;
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2549} do_waker($p20);
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 2550} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $i11 := $M.89;
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $i13 := $M.89;
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.89 := 4;
    call {:si_unique_call 2545} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(4);
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    $p15 := $M.94;
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2546} do_waker($p15);
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 2547} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    $i6 := $M.88;
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $i8 := $M.88;
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.88 := 4;
    call {:si_unique_call 2542} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(4);
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    $p10 := $M.94;
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} do_waker($p10);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 2544} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const main: ref;

axiom main == $sub.ref(0, 783664);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.95, $M.96, $M.5, $M.7, $M.9, $M.11, $M.97, $M.98, $M.99, $M.83, $M.84, $M.85, $M.86, $M.100, $M.88, $M.89, $M.90, $M.91, $M.101, $M.102, $M.62, $M.63, $M.64, $M.103, $M.104, $M.105, $M.92, $M.93, $M.106, $M.107, $M.87, $M.6, $M.8, $M.10, $M.12, $M.94, $M.109, $M.108, $M.18, $M.112, $M.111, $M.110, $M.121, $M.82, $M.22, $M.127, $CurrAddr, $M.78, $M.79, $M.80, $M.81, $M.16, $M.17, $M.65, $M.2, assertsPassed, $M.66, $M.61, $M.4, $M.58, $M.59, $M.60, $M.15, $M.42, $M.71, $M.40, $M.25, $M.26, $M.29, $M.55, $M.49, $M.47, $M.50, $M.48, $M.45, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.43;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $p68: ref;
  var $i70: i32;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $i123: i32;
  var $i124: i32;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $p128: ref;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $p133: ref;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $p143: ref;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $i153: i32;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $i158: i32;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i163: i32;
  var $i165: i32;
  var $i166: i1;
  var $p167: ref;
  var $i168: i32;
  var $i170: i32;
  var $i171: i1;
  var $p172: ref;
  var $i173: i32;
  var $i175: i32;
  var $i176: i1;
  var $p177: ref;
  var $i178: i32;
  var $i179: i32;
  var $i180: i1;
  var $i181: i32;
  var $i182: i1;
  var $p183: ref;
  var $i184: i32;
  var $i185: i1;
  var $p186: ref;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $i193: i32;
  var $i194: i1;
  var $p195: ref;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $i200: i32;
  var $i201: i1;
  var $p202: ref;
  var $i204: i32;
  var $i205: i1;
  var $p206: ref;
  var $i208: i32;
  var $i209: i1;
  var $p210: ref;
  var $i212: i32;
  var $i213: i1;
  var $p214: ref;
  var $i215: i32;
  var $i217: i32;
  var $i218: i1;
  var $p219: ref;
  var $i220: i32;
  var $i222: i32;
  var $i223: i1;
  var $p224: ref;
  var $i225: i32;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $i230: i32;
  var $i232: i32;
  var $i233: i1;
  var $p234: ref;
  var $i235: i32;
  var $i237: i32;
  var $i238: i1;
  var $p239: ref;
  var $i240: i32;
  var $i241: i1;
  var $p242: ref;
  var $i243: i32;
  var $i244: i32;
  var $i245: i32;
  var $i246: i32;
  var $i247: i1;
  var $p248: ref;
  var $i249: i32;
  var $i250: i32;
  var $i251: i32;
  var $i252: i32;
  var $i253: i1;
  var $p254: ref;
  var $i255: i32;
  var $i256: i32;
  var $i257: i32;
  var $i258: i32;
  var $i259: i1;
  var $p260: ref;
  var $i261: i32;
  var $i262: i32;
  var $i263: i32;
  var $i264: i32;
  var $i265: i1;
  var $p266: ref;
  var $i267: i32;
  var $i268: i32;
  var $i269: i32;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $i273: i32;
  var $i274: i1;
  var $p275: ref;
  var $i276: i32;
  var $i277: i1;
  var $p278: ref;
  var $i279: i32;
  var $i280: i1;
  var $p281: ref;
  var $i282: i32;
  var $i283: i1;
  var $p284: ref;
  var $i285: i32;
  var $i286: i1;
  var $p287: ref;
  var $i288: i32;
  var $i289: i1;
  var $p290: ref;
  var $i291: i32;
  var $i292: i1;
  var $i293: i32;
  var $i294: i1;
  var $i295: i32;
  var $i296: i1;
  var $i297: i32;
  var $i298: i1;
  var $i299: i1;
  var $i300: i1;
  var $i301: i32;
  var $i302: i1;
  var $i303: i32;
  var $i304: i1;
  var $i305: i32;
  var $i306: i1;
  var $i307: i32;
  var $i308: i32;
  var $i309: i1;
  var $i310: i32;
  var $i311: i1;
  var $i312: i32;
  var $i313: i1;
  var $i314: i32;
  var $i315: i1;
  var $i316: i32;
  var $i317: i1;
  var $i318: i32;
  var $i319: i1;
  var $i320: i1;
  var $i321: i1;
  var $i322: i1;
  var $i323: i1;
  var $i324: i1;
  var $i325: i1;
  var $i326: i1;
  var $i327: i1;
  var $i328: i1;
  var $i329: i1;
  var $i330: i1;
  var $i331: i1;
  var $i332: i32;
  var $i333: i1;
  var $p334: ref;
  var $i335: i32;
  var $i336: i32;
  var $i337: i32;
  var $i338: i1;
  var $i339: i32;
  var $i340: i32;
  var $i341: i32;
  var $i342: i1;
  var $p343: ref;
  var $i344: i32;
  var $i346: i32;
  var $i347: i1;
  var $p348: ref;
  var $i349: i32;
  var $i351: i32;
  var $i352: i1;
  var $p353: ref;
  var $i354: i32;
  var $i356: i32;
  var $i357: i1;
  var $p358: ref;
  var $i359: i32;
  var $i361: i32;
  var $i362: i1;
  var $p363: ref;
  var $i364: i32;
  var $i366: i32;
  var $i367: i1;
  var $p368: ref;
  var $i369: i32;
  var $i370: i32;
  var $i371: i32;
  var $i372: i1;
  var $p373: ref;
  var $i374: i32;
  var $i375: i32;
  var $i376: i32;
  var $i377: i1;
  var $p378: ref;
  var $i379: i32;
  var $i380: i32;
  var $i381: i32;
  var $i382: i1;
  var $p383: ref;
  var $i384: i32;
  var $i385: i32;
  var $i386: i32;
  var $i387: i1;
  var $p388: ref;
  var $p389: ref;
  var $i391: i32;
  var $i392: i1;
  var $p393: ref;
  var $p394: ref;
  var $i396: i32;
  var $i397: i1;
  var $p398: ref;
  var $p399: ref;
  var $i401: i32;
  var $i402: i1;
  var $p403: ref;
  var $p404: ref;
  var $i406: i32;
  var $i407: i1;
  var $p408: ref;
  var $p409: ref;
  var $i411: i32;
  var $i412: i1;
  var $p413: ref;
  var $i414: i32;
  var $i416: i32;
  var $i417: i1;
  var $p418: ref;
  var $i419: i32;
  var $i421: i32;
  var $i422: i1;
  var $p423: ref;
  var $i424: i32;
  var $i426: i32;
  var $i427: i1;
  var $p428: ref;
  var $i429: i32;
  var $i431: i32;
  var $i432: i1;
  var $p433: ref;
  var $i434: i32;
  var $i436: i32;
  var $i437: i1;
  var $p438: ref;
  var $i439: i32;
  var $i440: i32;
  var $i441: i1;
  var $i442: i32;
  var $i443: i1;
  var $p444: ref;
  var $i445: i32;
  var $i446: i1;
  var $p447: ref;
  var $i448: i32;
  var $i449: i1;
  var $p450: ref;
  var $i451: i32;
  var $i452: i1;
  var $p453: ref;
  var $i454: i32;
  var $i455: i1;
  var $p456: ref;
  var $i457: i32;
  var $i458: i1;
  var $p459: ref;
  var $i461: i32;
  var $i462: i1;
  var $p463: ref;
  var $i465: i32;
  var $i466: i1;
  var $p467: ref;
  var $i469: i32;
  var $i470: i1;
  var $p471: ref;
  var $i473: i32;
  var $i474: i1;
  var $p475: ref;
  var $i476: i32;
  var $i477: i1;
  var $p478: ref;
  var $i479: i32;
  var $i480: i32;
  var $i481: i32;
  var $i482: i32;
  var $i483: i1;
  var $p484: ref;
  var $i485: i32;
  var $i486: i32;
  var $i487: i32;
  var $i488: i32;
  var $i489: i1;
  var $p490: ref;
  var $i491: i32;
  var $i492: i32;
  var $i493: i32;
  var $i494: i32;
  var $i495: i1;
  var $p496: ref;
  var $i497: i32;
  var $i498: i32;
  var $i499: i32;
  var $i500: i32;
  var $i501: i1;
  var $p502: ref;
  var $i503: i32;
  var $i504: i32;
  var $i505: i32;
  var $i506: i32;
  var $i507: i1;
  var $p508: ref;
  var $i509: i32;
  var $i510: i1;
  var vslice_dummy_var_188: ref;
  var vslice_dummy_var_189: ref;
  var vslice_dummy_var_190: ref;
  var vslice_dummy_var_191: ref;
  var vslice_dummy_var_192: ref;
  var vslice_dummy_var_193: ref;
  var vslice_dummy_var_194: ref;
  var vslice_dummy_var_195: ref;
  var vslice_dummy_var_196: ref;
  var vslice_dummy_var_197: ref;
  var vslice_dummy_var_198: ref;
  var vslice_dummy_var_199: ref;
  var vslice_dummy_var_200: ref;
  var vslice_dummy_var_201: ref;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;
  var vslice_dummy_var_206: i32;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i32;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i32;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;
  var vslice_dummy_var_227: i32;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i32;
  var vslice_dummy_var_230: i32;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;
  var vslice_dummy_var_234: i32;
  var vslice_dummy_var_235: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;
  var vslice_dummy_var_240: i32;

  $bb0:
    call {:si_unique_call 2555} $initialize();
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2556} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 2557} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2558} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2560} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2562} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2563} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2564} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2565} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2566} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2567} $p10 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2568} $p11 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2569} $p12 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2570} $p13 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2571} $p14 := ldv_init_zalloc(1);
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2572} $p15 := ldv_init_zalloc(80);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2573} $p17 := ldv_init_zalloc(1);
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2574} $p18 := ldv_init_zalloc(136);
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2575} $p20 := ldv_init_zalloc(8);
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2576} $p22 := ldv_init_zalloc(8);
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2577} $p24 := ldv_init_zalloc(32);
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2578} $p26 := ldv_init_zalloc(16);
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2579} $p28 := ldv_init_zalloc(16);
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2580} $p30 := ldv_init_zalloc(1);
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2581} $p31 := ldv_init_zalloc(8);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2582} $p33 := ldv_init_zalloc(136);
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2583} $p35 := ldv_init_zalloc(32);
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2584} $p37 := ldv_init_zalloc(1);
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2585} $p38 := ldv_init_zalloc(136);
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2586} $p40 := ldv_init_zalloc(80);
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2587} ldv_initialize();
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p0);
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2588} vslice_dummy_var_188 := ldv_memset($p42, 0, 4);
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p1);
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2589} vslice_dummy_var_189 := ldv_memset($p44, 0, 8);
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p2);
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} vslice_dummy_var_190 := ldv_memset($p46, 0, 4);
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p3);
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2591} vslice_dummy_var_191 := ldv_memset($p48, 0, 4);
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p4);
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2592} vslice_dummy_var_192 := ldv_memset($p50, 0, 4);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p5);
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2593} vslice_dummy_var_193 := ldv_memset($p52, 0, 4);
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p6);
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} vslice_dummy_var_194 := ldv_memset($p54, 0, 4);
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p7);
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2595} vslice_dummy_var_195 := ldv_memset($p56, 0, 4);
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p8);
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} vslice_dummy_var_196 := ldv_memset($p58, 0, 8);
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p9);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2597} vslice_dummy_var_197 := ldv_memset($p60, 0, 4);
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p10);
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} vslice_dummy_var_198 := ldv_memset($p62, 0, 4);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p11);
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2599} vslice_dummy_var_199 := ldv_memset($p64, 0, 4);
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p12);
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2600} vslice_dummy_var_200 := ldv_memset($p66, 0, 4);
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p13);
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2601} vslice_dummy_var_201 := ldv_memset($p68, 0, 4);
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    $M.95 := 0;
    call {:si_unique_call 2602} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    $M.96 := 0;
    call {:si_unique_call 2603} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2604} work_init_1();
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2605} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    $M.98 := 0;
    call {:si_unique_call 2606} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $M.99 := 1;
    call {:si_unique_call 2607} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2608} work_init_3();
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    $M.100 := 1;
    call {:si_unique_call 2609} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2610} work_init_2();
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $M.101 := 1;
    call {:si_unique_call 2611} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    $M.102 := 0;
    call {:si_unique_call 2612} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $p98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $p107, $i108, $i109, $i110, $i111, $p112, $i113, $i114, $i115, $i116, $p117, $i118, $i119, $i120, $i121, $p122, $i123, $i124, $i125, $i126, $p127, $p128, $i130, $i131, $p132, $p133, $i135, $i136, $p137, $p138, $i140, $i141, $p142, $p143, $i145, $i146, $p147, $p148, $i150, $i151, $p152, $i153, $i155, $i156, $p157, $i158, $i160, $i161, $p162, $i163, $i165, $i166, $p167, $i168, $i170, $i171, $p172, $i173, $i175, $i176, $p177, $i178, $i179, $i180, $i181, $i182, $p183, $i184, $i185, $p186, $i187, $i188, $p189, $i190, $i191, $p192, $i193, $i194, $p195, $i196, $i197, $p198, $i200, $i201, $p202, $i204, $i205, $p206, $i208, $i209, $p210, $i212, $i213, $p214, $i215, $i217, $i218, $p219, $i220, $i222, $i223, $p224, $i225, $i227, $i228, $p229, $i230, $i232, $i233, $p234, $i235, $i237, $i238, $p239, $i240, $i241, $p242, $i243, $i244, $i245, $i246, $i247, $p248, $i249, $i250, $i251, $i252, $i253, $p254, $i255, $i256, $i257, $i258, $i259, $p260, $i261, $i262, $i263, $i264, $i265, $p266, $i267, $i268, $i269, $i270, $i271, $p272, $i273, $i274, $p275, $i276, $i277, $p278, $i279, $i280, $p281, $i282, $i283, $p284, $i285, $i286, $p287, $i288, $i289, $p290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $i330, $i331, $i332, $i333, $p334, $i335, $i336, $i337, $i338, $i339, $i340, $i341, $i342, $p343, $i344, $i346, $i347, $p348, $i349, $i351, $i352, $p353, $i354, $i356, $i357, $p358, $i359, $i361, $i362, $p363, $i364, $i366, $i367, $p368, $i369, $i370, $i371, $i372, $p373, $i374, $i375, $i376, $i377, $p378, $i379, $i380, $i381, $i382, $p383, $i384, $i385, $i386, $i387, $p388, $p389, $i391, $i392, $p393, $p394, $i396, $i397, $p398, $p399, $i401, $i402, $p403, $p404, $i406, $i407, $p408, $p409, $i411, $i412, $p413, $i414, $i416, $i417, $p418, $i419, $i421, $i422, $p423, $i424, $i426, $i427, $p428, $i429, $i431, $i432, $p433, $i434, $i436, $i437, $p438, $i439, $i440, $i441, $i442, $i443, $p444, $i445, $i446, $p447, $i448, $i449, $p450, $i451, $i452, $p453, $i454, $i455, $p456, $i457, $i458, $p459, $i461, $i462, $p463, $i465, $i466, $p467, $i469, $i470, $p471, $i473, $i474, $p475, $i476, $i477, $p478, $i479, $i480, $i481, $i482, $i483, $p484, $i485, $i486, $i487, $i488, $i489, $p490, $i491, $i492, $i493, $i494, $i495, $p496, $i497, $i498, $i499, $i500, $i501, $p502, $i503, $i504, $i505, $i506, $i507, $p508, $i509, $i510, vslice_dummy_var_202, vslice_dummy_var_203, vslice_dummy_var_204, vslice_dummy_var_205, vslice_dummy_var_206, vslice_dummy_var_207, vslice_dummy_var_208, vslice_dummy_var_209, vslice_dummy_var_210, vslice_dummy_var_211, vslice_dummy_var_212, vslice_dummy_var_213, vslice_dummy_var_214, vslice_dummy_var_215, vslice_dummy_var_216, vslice_dummy_var_217, vslice_dummy_var_218, vslice_dummy_var_219, vslice_dummy_var_220, vslice_dummy_var_221, vslice_dummy_var_222, vslice_dummy_var_223, vslice_dummy_var_224, vslice_dummy_var_225, vslice_dummy_var_226, vslice_dummy_var_227, vslice_dummy_var_228, vslice_dummy_var_229, vslice_dummy_var_230, vslice_dummy_var_231, vslice_dummy_var_232, vslice_dummy_var_233, vslice_dummy_var_234, vslice_dummy_var_235, vslice_dummy_var_236, vslice_dummy_var_237, vslice_dummy_var_238, vslice_dummy_var_239, vslice_dummy_var_240 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $p14, $p16, $p17, $p19, $p21, $p23, $p25, $p27, $p29, $p30, $p32, $p34, $p36, $p37, $p39, $p41, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $p98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $p107, $i108, $i109, $i110, $i111, $p112, $i113, $i114, $i115, $i116, $p117, $i118, $i119, $i120, $i121, $p122, $i123, $i124, $i125, $i126, $p127, $p128, $i130, $i131, $p132, $p133, $i135, $i136, $p137, $p138, $i140, $i141, $p142, $p143, $i145, $i146, $p147, $p148, $i150, $i151, $p152, $i153, $i155, $i156, $p157, $i158, $i160, $i161, $p162, $i163, $i165, $i166, $p167, $i168, $i170, $i171, $p172, $i173, $i175, $i176, $p177, $i178, $i179, $i180, $i181, $i182, $p183, $i184, $i185, $p186, $i187, $i188, $p189, $i190, $i191, $p192, $i193, $i194, $p195, $i196, $i197, $p198, $i200, $i201, $p202, $i204, $i205, $p206, $i208, $i209, $p210, $i212, $i213, $p214, $i215, $i217, $i218, $p219, $i220, $i222, $i223, $p224, $i225, $i227, $i228, $p229, $i230, $i232, $i233, $p234, $i235, $i237, $i238, $p239, $i240, $i241, $p242, $i243, $i244, $i245, $i246, $i247, $p248, $i249, $i250, $i251, $i252, $i253, $p254, $i255, $i256, $i257, $i258, $i259, $p260, $i261, $i262, $i263, $i264, $i265, $p266, $i267, $i268, $i269, $i270, $i271, $p272, $i273, $i274, $p275, $i276, $i277, $p278, $i279, $i280, $p281, $i282, $i283, $p284, $i285, $i286, $p287, $i288, $i289, $p290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $i330, $i331, $i332, $i333, $p334, $i335, $i336, $i337, $i338, $i339, $i340, $i341, $i342, $p343, $i344, $i346, $i347, $p348, $i349, $i351, $i352, $p353, $i354, $i356, $i357, $p358, $i359, $i361, $i362, $p363, $i364, $i366, $i367, $p368, $i369, $i370, $i371, $i372, $p373, $i374, $i375, $i376, $i377, $p378, $i379, $i380, $i381, $i382, $p383, $i384, $i385, $i386, $i387, $p388, $p389, $i391, $i392, $p393, $p394, $i396, $i397, $p398, $p399, $i401, $i402, $p403, $p404, $i406, $i407, $p408, $p409, $i411, $i412, $p413, $i414, $i416, $i417, $p418, $i419, $i421, $i422, $p423, $i424, $i426, $i427, $p428, $i429, $i431, $i432, $p433, $i434, $i436, $i437, $p438, $i439, $i440, $i441, $i442, $i443, $p444, $i445, $i446, $p447, $i448, $i449, $p450, $i451, $i452, $p453, $i454, $i455, $p456, $i457, $i458, $p459, $i461, $i462, $p463, $i465, $i466, $p467, $i469, $i470, $p471, $i473, $i474, $p475, $i476, $i477, $p478, $i479, $i480, $i481, $i482, $i483, $p484, $i485, $i486, $i487, $i488, $i489, $p490, $i491, $i492, $i493, $i494, $i495, $p496, $i497, $i498, $i499, $i500, $i501, $p502, $i503, $i504, $i505, $i506, $i507, $p508, $i509, $i510, vslice_dummy_var_202, vslice_dummy_var_203, vslice_dummy_var_204, vslice_dummy_var_205, vslice_dummy_var_206, vslice_dummy_var_207, vslice_dummy_var_208, vslice_dummy_var_209, vslice_dummy_var_210, vslice_dummy_var_211, vslice_dummy_var_212, vslice_dummy_var_213, vslice_dummy_var_214, vslice_dummy_var_215, vslice_dummy_var_216, vslice_dummy_var_217, vslice_dummy_var_218, vslice_dummy_var_219, vslice_dummy_var_220, vslice_dummy_var_221, vslice_dummy_var_222, vslice_dummy_var_223, vslice_dummy_var_224, vslice_dummy_var_225, vslice_dummy_var_226, vslice_dummy_var_227, vslice_dummy_var_228, vslice_dummy_var_229, vslice_dummy_var_230, vslice_dummy_var_231, vslice_dummy_var_232, vslice_dummy_var_233, vslice_dummy_var_234, vslice_dummy_var_235, vslice_dummy_var_236, vslice_dummy_var_237, vslice_dummy_var_238, vslice_dummy_var_239, vslice_dummy_var_240);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i70, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i70, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i70, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i70, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2821} ldv_stop();
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb191_dummy;

  $bb9:
    assume $i74 == 1;
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    $i316 := $M.102;
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    $i317 := $ne.i32($i316, 0);
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb234:
    assume $i317 == 1;
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2734} $i318 := __VERIFIER_nondet_int();
    call {:si_unique_call 2735} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i318);
    call {:si_unique_call 2736} {:cexpr "tmp___18"} boogie_si_record_i32($i318);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $i319 := $slt.i32($i318, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    $i320 := $slt.i32($i318, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    $i321 := $slt.i32($i318, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    $i322 := $slt.i32($i318, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    $i323 := $eq.i32($i318, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    assume !($i323 == 1);
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2820} ldv_stop();
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb245:
    assume $i323 == 1;
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    $i509 := $M.102;
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    $i510 := $eq.i32($i509, 5);
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  $bb383:
    assume !($i510 == 1);
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb382:
    assume $i510 == 1;
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2818} vslice_dummy_var_240 := ldv_resume_5();
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $M.102 := 2;
    call {:si_unique_call 2819} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb243:
    assume $i322 == 1;
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    $i506 := $M.102;
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    $i507 := $eq.i32($i506, 2);
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  $bb380:
    assume !($i507 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb379:
    assume $i507 == 1;
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    $p508 := $M.92;
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2816} thin_presuspend($p508);
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    $M.102 := 3;
    call {:si_unique_call 2817} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb241:
    assume $i321 == 1;
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    $i476 := $M.102;
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    $i477 := $eq.i32($i476, 4);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  $bb365:
    assume !($i477 == 1);
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    $i482 := $M.102;
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    $i483 := $eq.i32($i482, 1);
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  $bb368:
    assume !($i483 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    $i488 := $M.102;
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    $i489 := $eq.i32($i488, 3);
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  $bb371:
    assume !($i489 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    $i494 := $M.102;
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    $i495 := $eq.i32($i494, 2);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  $bb374:
    assume !($i495 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    $i500 := $M.102;
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    $i501 := $eq.i32($i500, 5);
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  $bb377:
    assume !($i501 == 1);
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb376:
    assume $i501 == 1;
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    $p502 := $M.92;
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    $i503 := $load.i32($M.0, $p12);
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    $i504 := $load.i32($M.0, $p7);
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    $i505 := $load.i32($M.0, $p10);
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2814} thin_status($p502, $i503, $i504, $p37, $i505);
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    $M.102 := 5;
    call {:si_unique_call 2815} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb373:
    assume $i495 == 1;
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    $p496 := $M.92;
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $i497 := $load.i32($M.0, $p12);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    $i498 := $load.i32($M.0, $p7);
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    $i499 := $load.i32($M.0, $p10);
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2812} thin_status($p496, $i497, $i498, $p37, $i499);
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    $M.102 := 2;
    call {:si_unique_call 2813} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb370:
    assume $i489 == 1;
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    $p490 := $M.92;
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    $i491 := $load.i32($M.0, $p12);
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    $i492 := $load.i32($M.0, $p7);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    $i493 := $load.i32($M.0, $p10);
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2810} thin_status($p490, $i491, $i492, $p37, $i493);
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    $M.102 := 3;
    call {:si_unique_call 2811} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb367:
    assume $i483 == 1;
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    $p484 := $M.92;
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $i485 := $load.i32($M.0, $p12);
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    $i486 := $load.i32($M.0, $p7);
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    $i487 := $load.i32($M.0, $p10);
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2808} thin_status($p484, $i485, $i486, $p37, $i487);
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 2809} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb364:
    assume $i477 == 1;
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    $p478 := $M.92;
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    $i479 := $load.i32($M.0, $p12);
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    $i480 := $load.i32($M.0, $p7);
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    $i481 := $load.i32($M.0, $p10);
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2806} thin_status($p478, $i479, $i480, $p37, $i481);
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    $M.102 := 4;
    call {:si_unique_call 2807} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb239:
    assume $i320 == 1;
    assume {:verifier.code 0} true;
    $i324 := $slt.i32($i318, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    $i325 := $slt.i32($i318, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i325 == 1);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    $i473 := $M.102;
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    $i474 := $eq.i32($i473, 3);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  $bb362:
    assume !($i474 == 1);
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb361:
    assume $i474 == 1;
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    $p475 := $M.92;
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2804} thin_postsuspend($p475);
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    $M.102 := 4;
    call {:si_unique_call 2805} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb250:
    assume $i325 == 1;
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    $i457 := $M.102;
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    $i458 := $eq.i32($i457, 4);
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb349, $bb350;

  $bb350:
    assume !($i458 == 1);
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    $i461 := $M.102;
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    $i462 := $eq.i32($i461, 3);
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  $bb353:
    assume !($i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    $i465 := $M.102;
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $i466 := $eq.i32($i465, 2);
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb355, $bb356;

  $bb356:
    assume !($i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    $i469 := $M.102;
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    $i470 := $eq.i32($i469, 5);
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  $bb359:
    assume !($i470 == 1);
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb358:
    assume $i470 == 1;
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    $p471 := $M.92;
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2802} vslice_dummy_var_239 := thin_map($p471, $p34);
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    $M.102 := 5;
    call {:si_unique_call 2803} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb355:
    assume $i466 == 1;
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    $p467 := $M.92;
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2800} vslice_dummy_var_238 := thin_map($p467, $p34);
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    $M.102 := 2;
    call {:si_unique_call 2801} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb352:
    assume $i462 == 1;
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    $p463 := $M.92;
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2798} vslice_dummy_var_237 := thin_map($p463, $p34);
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    $M.102 := 3;
    call {:si_unique_call 2799} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb349:
    assume $i458 == 1;
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    $p459 := $M.92;
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2796} vslice_dummy_var_236 := thin_map($p459, $p34);
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    $M.102 := 4;
    call {:si_unique_call 2797} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb248:
    assume $i324 == 1;
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    $i442 := $M.102;
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    $i443 := $eq.i32($i442, 4);
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  $bb335:
    assume !($i443 == 1);
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    $i445 := $M.102;
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $i446 := $eq.i32($i445, 1);
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  $bb338:
    assume !($i446 == 1);
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    $i448 := $M.102;
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    $i449 := $eq.i32($i448, 3);
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  $bb341:
    assume !($i449 == 1);
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    $i451 := $M.102;
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    $i452 := $eq.i32($i451, 2);
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb343, $bb344;

  $bb344:
    assume !($i452 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    $i454 := $M.102;
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    $i455 := $eq.i32($i454, 5);
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  $bb347:
    assume !($i455 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb346:
    assume $i455 == 1;
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    $p456 := $M.92;
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2794} thin_io_hints($p456, $p41);
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $M.102 := 5;
    call {:si_unique_call 2795} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb343:
    assume $i452 == 1;
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    $p453 := $M.92;
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2792} thin_io_hints($p453, $p41);
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    $M.102 := 2;
    call {:si_unique_call 2793} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb340:
    assume $i449 == 1;
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $p450 := $M.92;
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2790} thin_io_hints($p450, $p41);
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    $M.102 := 3;
    call {:si_unique_call 2791} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb337:
    assume $i446 == 1;
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    $p447 := $M.92;
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2788} thin_io_hints($p447, $p41);
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 2789} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb334:
    assume $i443 == 1;
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $p444 := $M.92;
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2786} thin_io_hints($p444, $p41);
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $M.102 := 4;
    call {:si_unique_call 2787} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb237:
    assume $i319 == 1;
    assume {:verifier.code 0} true;
    $i326 := $slt.i32($i318, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    $i327 := $slt.i32($i318, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    $i328 := $slt.i32($i318, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i328 == 1);
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $i436 := $M.102;
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $i437 := $eq.i32($i436, 4);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  $bb329:
    assume !($i437 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb328:
    assume $i437 == 1;
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    $p438 := $M.92;
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2783} $i439 := thin_preresume($p438);
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    $M.107 := $i439;
    call {:si_unique_call 2784} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i439);
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    $i440 := $M.107;
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    $i441 := $eq.i32($i440, 0);
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  $bb331:
    assume !($i441 == 1);
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb330:
    assume $i441 == 1;
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $M.102 := 5;
    call {:si_unique_call 2785} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb256:
    assume $i328 == 1;
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    $i411 := $M.102;
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $i412 := $eq.i32($i411, 4);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb314:
    assume !($i412 == 1);
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    $i416 := $M.102;
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    $i417 := $eq.i32($i416, 1);
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  $bb317:
    assume !($i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    $i421 := $M.102;
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $i422 := $eq.i32($i421, 3);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i422 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    $i426 := $M.102;
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    $i427 := $eq.i32($i426, 2);
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  $bb323:
    assume !($i427 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    $i431 := $M.102;
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $i432 := $eq.i32($i431, 5);
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  $bb326:
    assume !($i432 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb325:
    assume $i432 == 1;
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    $p433 := $M.92;
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $i434 := $load.i32($M.0, $p11);
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2781} vslice_dummy_var_235 := thin_merge($p433, $p36, $p29, $i434);
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    $M.102 := 5;
    call {:si_unique_call 2782} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb322:
    assume $i427 == 1;
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $p428 := $M.92;
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    $i429 := $load.i32($M.0, $p11);
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2779} vslice_dummy_var_234 := thin_merge($p428, $p36, $p29, $i429);
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    $M.102 := 2;
    call {:si_unique_call 2780} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb319:
    assume $i422 == 1;
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $p423 := $M.92;
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    $i424 := $load.i32($M.0, $p11);
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2777} vslice_dummy_var_233 := thin_merge($p423, $p36, $p29, $i424);
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    $M.102 := 3;
    call {:si_unique_call 2778} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb316:
    assume $i417 == 1;
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    $p418 := $M.92;
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    $i419 := $load.i32($M.0, $p11);
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2775} vslice_dummy_var_232 := thin_merge($p418, $p36, $p29, $i419);
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 2776} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb313:
    assume $i412 == 1;
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    $p413 := $M.92;
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    $i414 := $load.i32($M.0, $p11);
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2773} vslice_dummy_var_231 := thin_merge($p413, $p36, $p29, $i414);
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    $M.102 := 4;
    call {:si_unique_call 2774} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb254:
    assume $i327 == 1;
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    $i386 := $M.102;
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    $i387 := $eq.i32($i386, 4);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  $bb299:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    $i391 := $M.102;
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    $i392 := $eq.i32($i391, 1);
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    $i396 := $M.102;
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $i397 := $eq.i32($i396, 3);
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    $i401 := $M.102;
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    $i402 := $eq.i32($i401, 2);
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i402 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    $i406 := $M.102;
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $i407 := $eq.i32($i406, 5);
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb311:
    assume !($i407 == 1);
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb310:
    assume $i407 == 1;
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    $p408 := $M.92;
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    $p409 := $load.ref($M.0, $p8);
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2771} vslice_dummy_var_230 := thin_iterate_devices($p408, $p409, $p30);
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $M.102 := 5;
    call {:si_unique_call 2772} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb307:
    assume $i402 == 1;
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    $p403 := $M.92;
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    $p404 := $load.ref($M.0, $p8);
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2769} vslice_dummy_var_229 := thin_iterate_devices($p403, $p404, $p30);
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $M.102 := 2;
    call {:si_unique_call 2770} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb304:
    assume $i397 == 1;
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    $p398 := $M.92;
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    $p399 := $load.ref($M.0, $p8);
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2767} vslice_dummy_var_228 := thin_iterate_devices($p398, $p399, $p30);
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $M.102 := 3;
    call {:si_unique_call 2768} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb301:
    assume $i392 == 1;
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    $p393 := $M.92;
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    $p394 := $load.ref($M.0, $p8);
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2765} vslice_dummy_var_227 := thin_iterate_devices($p393, $p394, $p30);
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 2766} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb298:
    assume $i387 == 1;
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $p388 := $M.92;
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    $p389 := $load.ref($M.0, $p8);
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2763} vslice_dummy_var_226 := thin_iterate_devices($p388, $p389, $p30);
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    $M.102 := 4;
    call {:si_unique_call 2764} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb252:
    assume $i326 == 1;
    assume {:verifier.code 0} true;
    $i329 := $slt.i32($i318, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    $i330 := $slt.i32($i318, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i330 == 1);
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    $i366 := $M.102;
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    $i367 := $eq.i32($i366, 4);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i367 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    $i371 := $M.102;
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    $i372 := $eq.i32($i371, 3);
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    $i376 := $M.102;
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    $i377 := $eq.i32($i376, 2);
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  $bb293:
    assume !($i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    $i381 := $M.102;
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    $i382 := $eq.i32($i381, 5);
    goto corral_source_split_10552;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb295:
    assume $i382 == 1;
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    $p383 := $M.92;
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2760} thin_dtr($p383);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 2761} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    $i384 := $M.98;
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    $i385 := $sub.i32($i384, 1);
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    $M.98 := $i385;
    call {:si_unique_call 2762} {:cexpr "ref_cnt"} boogie_si_record_i32($i385);
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    goto $bb297;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  $bb292:
    assume $i377 == 1;
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    $p378 := $M.92;
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2757} thin_dtr($p378);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 2758} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    $i379 := $M.98;
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    $i380 := $sub.i32($i379, 1);
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    $M.98 := $i380;
    call {:si_unique_call 2759} {:cexpr "ref_cnt"} boogie_si_record_i32($i380);
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    goto $bb294;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  $bb289:
    assume $i372 == 1;
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    $p373 := $M.92;
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} thin_dtr($p373);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 2755} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    $i374 := $M.98;
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    $i375 := $sub.i32($i374, 1);
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    $M.98 := $i375;
    call {:si_unique_call 2756} {:cexpr "ref_cnt"} boogie_si_record_i32($i375);
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    goto $bb291;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb286:
    assume $i367 == 1;
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $p368 := $M.92;
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2751} thin_dtr($p368);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 2752} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $i369 := $M.98;
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    $i370 := $sub.i32($i369, 1);
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    $M.98 := $i370;
    call {:si_unique_call 2753} {:cexpr "ref_cnt"} boogie_si_record_i32($i370);
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    goto $bb288;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  $bb260:
    assume $i330 == 1;
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $i341 := $M.102;
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    $i342 := $eq.i32($i341, 4);
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    $i346 := $M.102;
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    $i347 := $eq.i32($i346, 1);
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $i351 := $M.102;
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $i352 := $eq.i32($i351, 3);
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    $i356 := $M.102;
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    $i357 := $eq.i32($i356, 2);
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    $i361 := $M.102;
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    $i362 := $eq.i32($i361, 5);
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb283:
    assume $i362 == 1;
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    $p363 := $M.92;
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    $i364 := $load.i32($M.0, $p13);
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2749} vslice_dummy_var_225 := thin_endio($p363, $p39, $i364);
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    $M.102 := 5;
    call {:si_unique_call 2750} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb280:
    assume $i357 == 1;
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $p358 := $M.92;
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    $i359 := $load.i32($M.0, $p13);
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2747} vslice_dummy_var_224 := thin_endio($p358, $p39, $i359);
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    $M.102 := 2;
    call {:si_unique_call 2748} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb277:
    assume $i352 == 1;
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    $p353 := $M.92;
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $i354 := $load.i32($M.0, $p13);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2745} vslice_dummy_var_223 := thin_endio($p353, $p39, $i354);
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    $M.102 := 3;
    call {:si_unique_call 2746} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb274:
    assume $i347 == 1;
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    $p348 := $M.92;
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    $i349 := $load.i32($M.0, $p13);
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2743} vslice_dummy_var_222 := thin_endio($p348, $p39, $i349);
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 2744} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb271:
    assume $i342 == 1;
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    $p343 := $M.92;
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $i344 := $load.i32($M.0, $p13);
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2741} vslice_dummy_var_221 := thin_endio($p343, $p39, $i344);
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    $M.102 := 4;
    call {:si_unique_call 2742} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb258:
    assume $i329 == 1;
    assume {:verifier.code 0} true;
    $i331 := $eq.i32($i318, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    assume !($i331 == 1);
    goto $bb247;

  $bb262:
    assume $i331 == 1;
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    $i332 := $M.102;
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    $i333 := $eq.i32($i332, 1);
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb264:
    assume $i333 == 1;
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    $p334 := $M.92;
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $i335 := $load.i32($M.0, $p9);
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2737} $i336 := thin_ctr($p334, $i335, $p32);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $M.106 := $i336;
    call {:si_unique_call 2738} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i336);
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    $i337 := $M.106;
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $i338 := $eq.i32($i337, 0);
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb266:
    assume $i338 == 1;
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    $M.102 := 2;
    call {:si_unique_call 2739} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $i339 := $M.98;
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $i340 := $add.i32($i339, 1);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    $M.98 := $i340;
    call {:si_unique_call 2740} {:cexpr "ref_cnt"} boogie_si_record_i32($i340);
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    goto $bb268;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i73 == 1;
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    $i314 := $M.101;
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    $i315 := $ne.i32($i314, 0);
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb231:
    assume $i315 == 1;
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2733} invoke_work_2();
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb5:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i70, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i75 == 1);
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    $i312 := $M.100;
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    $i313 := $ne.i32($i312, 0);
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb228:
    assume $i313 == 1;
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2732} invoke_work_3();
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    goto $bb230;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i75 == 1;
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    $i295 := $M.99;
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $i296 := $ne.i32($i295, 0);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb198:
    assume $i296 == 1;
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2715} $i297 := __VERIFIER_nondet_int();
    call {:si_unique_call 2716} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i297);
    call {:si_unique_call 2717} {:cexpr "tmp___17"} boogie_si_record_i32($i297);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $i298 := $slt.i32($i297, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i298 == 1);
    assume {:verifier.code 0} true;
    $i299 := $eq.i32($i297, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    assume !($i299 == 1);
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2731} ldv_stop();
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb203:
    assume $i299 == 1;
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    $i305 := $M.99;
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i305, 1);
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb216:
    assume $i306 == 1;
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2721} $i307 := dm_thin_init();
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    $M.105 := $i307;
    call {:si_unique_call 2722} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i307);
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    $i308 := $M.105;
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    $i309 := $ne.i32($i308, 0);
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $i310 := $M.105;
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i310, 0);
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb221:
    assume $i311 == 1;
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    $M.99 := 2;
    call {:si_unique_call 2724} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 2725} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2726} ldv_target_type_5();
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 2727} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2728} ldv_initialize_dm_block_validator_4();
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2729} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2730} ldv_target_type_6();
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb218:
    assume $i309 == 1;
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    $M.99 := 3;
    call {:si_unique_call 2723} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2720} ldv_check_final_state();
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  $bb201:
    assume $i298 == 1;
    assume {:verifier.code 0} true;
    $i300 := $eq.i32($i297, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    assume !($i300 == 1);
    goto $bb205;

  $bb206:
    assume $i300 == 1;
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    $i301 := $M.99;
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i301, 2);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    assume !($i302 == 1);
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb208:
    assume $i302 == 1;
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $i303 := $M.98;
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $i304 := $eq.i32($i303, 0);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    assume !($i304 == 1);
    goto $bb210;

  $bb211:
    assume $i304 == 1;
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2718} dm_thin_exit();
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    $M.99 := 3;
    call {:si_unique_call 2719} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb3:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i70, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i70, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i77 == 1);
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    $i293 := $M.97;
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    $i294 := $ne.i32($i293, 0);
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb195:
    assume $i294 == 1;
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2714} invoke_work_1();
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    goto $bb197;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i77 == 1;
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    $i291 := $M.96;
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    $i292 := $ne.i32($i291, 0);
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb192:
    assume $i292 == 1;
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2713} ldv_main_exported_4();
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb14:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i70, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb11;

  $bb18:
    assume $i78 == 1;
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    $i79 := $M.95;
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb20:
    assume $i80 == 1;
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2616} $i81 := __VERIFIER_nondet_int();
    call {:si_unique_call 2617} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i81);
    call {:si_unique_call 2618} {:cexpr "tmp___16"} boogie_si_record_i32($i81);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i81, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i81, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i81, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i81, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i81, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2712} ldv_stop();
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb31:
    assume $i86 == 1;
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    $i276 := $M.95;
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $i277 := $eq.i32($i276, 4);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $i279 := $M.95;
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    $i280 := $eq.i32($i279, 1);
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $i282 := $M.95;
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    $i283 := $eq.i32($i282, 3);
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i283 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $i285 := $M.95;
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    $i286 := $eq.i32($i285, 2);
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $i288 := $M.95;
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    $i289 := $eq.i32($i288, 5);
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb185:
    assume $i289 == 1;
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    $p290 := $M.93;
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2710} pool_presuspend_undo($p290);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    $M.95 := 5;
    call {:si_unique_call 2711} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    goto $bb187;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  $bb182:
    assume $i286 == 1;
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $p287 := $M.93;
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2708} pool_presuspend_undo($p287);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 2709} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    goto $bb184;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  $bb179:
    assume $i283 == 1;
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    $p284 := $M.93;
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2706} pool_presuspend_undo($p284);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 2707} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    goto $bb181;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb176:
    assume $i280 == 1;
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    $p281 := $M.93;
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2704} pool_presuspend_undo($p281);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2705} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    goto $bb178;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  $bb173:
    assume $i277 == 1;
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    $p278 := $M.93;
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2702} pool_presuspend_undo($p278);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    $M.95 := 4;
    call {:si_unique_call 2703} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    goto $bb175;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i85 == 1;
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $i273 := $M.95;
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    $i274 := $eq.i32($i273, 5);
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb170:
    assume $i274 == 1;
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    $p275 := $M.93;
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2700} pool_resume($p275);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 2701} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    goto $bb172;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i81, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i87 == 1);
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $i270 := $M.95;
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, 2);
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb167:
    assume $i271 == 1;
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    $p272 := $M.93;
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2698} pool_presuspend($p272);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 2699} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    goto $bb169;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i87 == 1;
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    $i240 := $M.95;
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i240, 4);
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $i246 := $M.95;
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i246, 1);
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $i252 := $M.95;
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i252, 3);
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $i258 := $M.95;
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i258, 2);
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i264 := $M.95;
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    $i265 := $eq.i32($i264, 5);
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb164:
    assume $i265 == 1;
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    $p266 := $M.93;
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    $i267 := $load.i32($M.0, $p6);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    $i268 := $load.i32($M.0, $p4);
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    $i269 := $load.i32($M.0, $p0);
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2696} pool_status($p266, $i267, $i268, $p17, $i269);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    $M.95 := 5;
    call {:si_unique_call 2697} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    goto $bb166;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb161:
    assume $i259 == 1;
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    $p260 := $M.93;
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    $i261 := $load.i32($M.0, $p6);
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    $i262 := $load.i32($M.0, $p4);
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    $i263 := $load.i32($M.0, $p0);
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2694} pool_status($p260, $i261, $i262, $p17, $i263);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 2695} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    goto $bb163;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  $bb158:
    assume $i253 == 1;
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    $p254 := $M.93;
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    $i255 := $load.i32($M.0, $p6);
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    $i256 := $load.i32($M.0, $p4);
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    $i257 := $load.i32($M.0, $p0);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} pool_status($p254, $i255, $i256, $p17, $i257);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 2693} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    goto $bb160;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  $bb155:
    assume $i247 == 1;
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    $p248 := $M.93;
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    $i249 := $load.i32($M.0, $p6);
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    $i250 := $load.i32($M.0, $p4);
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    $i251 := $load.i32($M.0, $p0);
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} pool_status($p248, $i249, $i250, $p17, $i251);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2691} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    goto $bb157;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  $bb152:
    assume $i241 == 1;
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    $p242 := $M.93;
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    $i243 := $load.i32($M.0, $p6);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    $i244 := $load.i32($M.0, $p4);
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    $i245 := $load.i32($M.0, $p0);
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2688} pool_status($p242, $i243, $i244, $p17, $i245);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $M.95 := 4;
    call {:si_unique_call 2689} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    goto $bb154;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i81, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i81, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i89 == 1);
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    $i237 := $M.95;
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 3);
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb149:
    assume $i238 == 1;
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    $p239 := $M.93;
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2686} pool_postsuspend($p239);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $M.95 := 4;
    call {:si_unique_call 2687} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    goto $bb151;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i89 == 1;
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    $i212 := $M.95;
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 4);
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $i217 := $M.95;
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 1);
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $i222 := $M.95;
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 3);
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $i227 := $M.95;
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 2);
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $i232 := $M.95;
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $i233 := $eq.i32($i232, 5);
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb146:
    assume $i233 == 1;
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    $p234 := $M.93;
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    $i235 := $load.i32($M.0, $p2);
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2684} vslice_dummy_var_220 := pool_message($p234, $i235, $p21);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $M.95 := 5;
    call {:si_unique_call 2685} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    goto $bb148;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb143:
    assume $i228 == 1;
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $p229 := $M.93;
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    $i230 := $load.i32($M.0, $p2);
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2682} vslice_dummy_var_219 := pool_message($p229, $i230, $p21);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 2683} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    goto $bb145;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  $bb140:
    assume $i223 == 1;
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $p224 := $M.93;
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    $i225 := $load.i32($M.0, $p2);
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2680} vslice_dummy_var_218 := pool_message($p224, $i225, $p21);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 2681} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    goto $bb142;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb137:
    assume $i218 == 1;
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    $p219 := $M.93;
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    $i220 := $load.i32($M.0, $p2);
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2678} vslice_dummy_var_217 := pool_message($p219, $i220, $p21);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2679} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  $bb134:
    assume $i213 == 1;
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    $p214 := $M.93;
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.0, $p2);
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2676} vslice_dummy_var_216 := pool_message($p214, $i215, $p21);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    $M.95 := 4;
    call {:si_unique_call 2677} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    goto $bb136;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i88 == 1;
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    $i196 := $M.95;
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i196, 4);
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $i200 := $M.95;
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i200, 3);
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $i204 := $M.95;
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i204, 2);
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i208 := $M.95;
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i208, 5);
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb131:
    assume $i209 == 1;
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    $p210 := $M.93;
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2674} vslice_dummy_var_215 := pool_map($p210, $p19);
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    $M.95 := 5;
    call {:si_unique_call 2675} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb128:
    assume $i205 == 1;
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    $p206 := $M.93;
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} vslice_dummy_var_214 := pool_map($p206, $p19);
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 2673} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb125:
    assume $i201 == 1;
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    $p202 := $M.93;
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2670} vslice_dummy_var_213 := pool_map($p202, $p19);
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 2671} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb122:
    assume $i197 == 1;
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    $p198 := $M.93;
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} vslice_dummy_var_212 := pool_map($p198, $p19);
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    $M.95 := 4;
    call {:si_unique_call 2669} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb23:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i81, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i81, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i81, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i92 == 1);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    $i181 := $M.95;
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, 4);
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i184 := $M.95;
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 1);
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i187 := $M.95;
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 3);
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i190 := $M.95;
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 2);
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i193 := $M.95;
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i193, 5);
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb119:
    assume $i194 == 1;
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    $p195 := $M.93;
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2666} pool_io_hints($p195, $p16);
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    $M.95 := 5;
    call {:si_unique_call 2667} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb116:
    assume $i191 == 1;
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    $p192 := $M.93;
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2664} pool_io_hints($p192, $p16);
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 2665} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb113:
    assume $i188 == 1;
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $p189 := $M.93;
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} pool_io_hints($p189, $p16);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 2663} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb110:
    assume $i185 == 1;
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    $p186 := $M.93;
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2660} pool_io_hints($p186, $p16);
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2661} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb107:
    assume $i182 == 1;
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    $p183 := $M.93;
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2658} pool_io_hints($p183, $p16);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $M.95 := 4;
    call {:si_unique_call 2659} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb44:
    assume $i92 == 1;
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $i175 := $M.95;
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, 4);
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb101:
    assume $i176 == 1;
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    $p177 := $M.93;
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2655} $i178 := pool_preresume($p177);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    $M.104 := $i178;
    call {:si_unique_call 2656} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i178);
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    $i179 := $M.104;
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 0);
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb103:
    assume $i180 == 1;
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    $M.95 := 5;
    call {:si_unique_call 2657} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    goto $bb105;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i91 == 1;
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $i150 := $M.95;
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 4);
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i155 := $M.95;
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 1);
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i160 := $M.95;
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 3);
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i165 := $M.95;
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 2);
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i170 := $M.95;
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 5);
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb98:
    assume $i171 == 1;
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    $p172 := $M.93;
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    $i173 := $load.i32($M.0, $p3);
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2653} vslice_dummy_var_211 := pool_merge($p172, $p25, $p27, $i173);
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    $M.95 := 5;
    call {:si_unique_call 2654} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb95:
    assume $i166 == 1;
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    $p167 := $M.93;
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    $i168 := $load.i32($M.0, $p3);
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2651} vslice_dummy_var_210 := pool_merge($p167, $p25, $p27, $i168);
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 2652} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb92:
    assume $i161 == 1;
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    $p162 := $M.93;
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, $p3);
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2649} vslice_dummy_var_209 := pool_merge($p162, $p25, $p27, $i163);
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 2650} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb89:
    assume $i156 == 1;
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    $p157 := $M.93;
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.0, $p3);
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2647} vslice_dummy_var_208 := pool_merge($p157, $p25, $p27, $i158);
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2648} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb86:
    assume $i151 == 1;
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $p152 := $M.93;
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.0, $p3);
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2645} vslice_dummy_var_207 := pool_merge($p152, $p25, $p27, $i153);
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    $M.95 := 4;
    call {:si_unique_call 2646} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb40:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i81, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $slt.i32($i81, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i94 == 1);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $i125 := $M.95;
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 4);
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i130 := $M.95;
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i130, 1);
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i135 := $M.95;
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 3);
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i140 := $M.95;
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 2);
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i145 := $M.95;
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 5);
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb83:
    assume $i146 == 1;
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $p147 := $M.93;
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, $p1);
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} vslice_dummy_var_206 := pool_iterate_devices($p147, $p148, $p14);
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    $M.95 := 5;
    call {:si_unique_call 2644} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb80:
    assume $i141 == 1;
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    $p142 := $M.93;
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p1);
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2641} vslice_dummy_var_205 := pool_iterate_devices($p142, $p143, $p14);
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 2642} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb77:
    assume $i136 == 1;
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $p137 := $M.93;
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p1);
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2639} vslice_dummy_var_204 := pool_iterate_devices($p137, $p138, $p14);
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 2640} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb74:
    assume $i131 == 1;
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    $p132 := $M.93;
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p1);
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2637} vslice_dummy_var_203 := pool_iterate_devices($p132, $p133, $p14);
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2638} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb71:
    assume $i126 == 1;
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    $p127 := $M.93;
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p1);
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2635} vslice_dummy_var_202 := pool_iterate_devices($p127, $p128, $p14);
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    $M.95 := 4;
    call {:si_unique_call 2636} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb48:
    assume $i94 == 1;
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    $i105 := $M.95;
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 4);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i110 := $M.95;
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 3);
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i115 := $M.95;
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 2);
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i120 := $M.95;
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 5);
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb68:
    assume $i121 == 1;
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $p122 := $M.93;
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} pool_dtr($p122);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2633} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    $i123 := $M.98;
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    $i124 := $sub.i32($i123, 1);
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    $M.98 := $i124;
    call {:si_unique_call 2634} {:cexpr "ref_cnt"} boogie_si_record_i32($i124);
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    goto $bb70;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  $bb65:
    assume $i116 == 1;
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    $p117 := $M.93;
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2629} pool_dtr($p117);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2630} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $i118 := $M.98;
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    $i119 := $sub.i32($i118, 1);
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $M.98 := $i119;
    call {:si_unique_call 2631} {:cexpr "ref_cnt"} boogie_si_record_i32($i119);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    goto $bb67;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb62:
    assume $i111 == 1;
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    $p112 := $M.93;
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2626} pool_dtr($p112);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2627} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $i113 := $M.98;
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $i114 := $sub.i32($i113, 1);
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    $M.98 := $i114;
    call {:si_unique_call 2628} {:cexpr "ref_cnt"} boogie_si_record_i32($i114);
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    goto $bb64;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  $bb59:
    assume $i106 == 1;
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    $p107 := $M.93;
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2623} pool_dtr($p107);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2624} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    $i108 := $M.98;
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    $i109 := $sub.i32($i108, 1);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    $M.98 := $i109;
    call {:si_unique_call 2625} {:cexpr "ref_cnt"} boogie_si_record_i32($i109);
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    goto $bb61;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i81, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb33;

  $bb50:
    assume $i95 == 1;
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    $i96 := $M.95;
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 1);
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb52:
    assume $i97 == 1;
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    $p98 := $M.93;
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p5);
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} $i100 := pool_ctr($p98, $i99, $p23);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    $M.103 := $i100;
    call {:si_unique_call 2620} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i100);
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    $i101 := $M.103;
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 0);
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb54:
    assume $i102 == 1;
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 2621} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $i103 := $M.98;
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i103, 1);
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    $M.98 := $i104;
    call {:si_unique_call 2622} {:cexpr "ref_cnt"} boogie_si_record_i32($i104);
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  $bb191_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2613} $i70 := __VERIFIER_nondet_int();
    call {:si_unique_call 2614} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i70);
    call {:si_unique_call 2615} {:cexpr "tmp___15"} boogie_si_record_i32($i70);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 784696);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_4: ref;

axiom ldv_main_exported_4 == $sub.ref(0, 785728);

procedure ldv_main_exported_4();
  free requires assertsPassed;
  modifies $M.0, $M.96, $M.98, $CurrAddr;



implementation ldv_main_exported_4()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i32;
  var $i30: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i37: i32;
  var $i38: i32;
  var vslice_dummy_var_241: ref;
  var vslice_dummy_var_242: ref;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i32;
  var vslice_dummy_var_245: i32;
  var vslice_dummy_var_246: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2822} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2823} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2824} vslice_dummy_var_241 := ldv_memset($p2, 0, 8);
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2825} vslice_dummy_var_242 := ldv_memset($p4, 0, 8);
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2826} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 2827} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    call {:si_unique_call 2828} {:cexpr "tmp"} boogie_si_record_i32($i6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2841} ldv_stop();
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    $i34 := $M.96;
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 1);
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume $i35 == 1;
    goto corral_source_split_10847;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2838} vslice_dummy_var_246 := ldv_probe_4();
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    $M.96 := 2;
    call {:si_unique_call 2839} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    $i37 := $M.98;
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, 1);
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    $M.98 := $i38;
    call {:si_unique_call 2840} {:cexpr "ref_cnt"} boogie_si_record_i32($i38);
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    $i29 := $M.96;
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 2);
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i30 == 1;
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2835} vslice_dummy_var_245 := ldv_release_4();
    goto corral_source_split_10841;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 2836} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    $i32 := $M.98;
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i32, 1);
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    $M.98 := $i33;
    call {:si_unique_call 2837} {:cexpr "ref_cnt"} boogie_si_record_i32($i33);
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    $i24 := $M.96;
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 2);
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i25 == 1;
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    $p26 := $M.108;
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    $p27 := $M.109;
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p0);
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2833} sb_prepare_for_write($p26, $p27, $i28);
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    $M.96 := 2;
    call {:si_unique_call 2834} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i6, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    $i12 := $M.96;
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1);
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i18 := $M.96;
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 2);
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i19 == 1;
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    $p20 := $M.108;
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    $p21 := $M.109;
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p1);
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2831} vslice_dummy_var_244 := sb_check($p20, $p21, $i22);
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    $M.96 := 2;
    call {:si_unique_call 2832} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $p14 := $M.108;
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    $p15 := $M.109;
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p1);
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2829} vslice_dummy_var_243 := sb_check($p14, $p15, $i16);
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 2830} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const dm_thin_exit: ref;

axiom dm_thin_exit == $sub.ref(0, 786760);

procedure dm_thin_exit();
  free requires assertsPassed;



implementation dm_thin_exit()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2842} dm_unregister_target(thin_target);
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2843} dm_unregister_target(pool_target);
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    $p0 := $M.82;
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2844} kmem_cache_destroy($p0);
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    return;
}



const dm_thin_init: ref;

axiom dm_thin_init == $sub.ref(0, 787792);

procedure dm_thin_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.82, $M.0, $CurrAddr;



implementation dm_thin_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i5: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2845} pool_table_init();
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2846} $i0 := dm_register_target(thin_target);
    call {:si_unique_call 2847} {:cexpr "r"} boogie_si_record_i32($i0);
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2848} $i3 := dm_register_target(pool_target);
    call {:si_unique_call 2849} {:cexpr "r"} boogie_si_record_i32($i3);
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2851} $p6 := kmem_cache_create(.str.138, 88, 8, 0, $0.ref);
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    $M.82 := $p6;
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    $p7 := $M.82;
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2852} dm_unregister_target(pool_target);
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2850} dm_unregister_target(thin_target);
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    $i2 := $i5;
    goto $bb3;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb7;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    $i2 := $i0;
    goto $bb3;
}



const ldv_initialize_dm_block_validator_4: ref;

axiom ldv_initialize_dm_block_validator_4 == $sub.ref(0, 788824);

procedure ldv_initialize_dm_block_validator_4();
  free requires assertsPassed;
  modifies $M.109, $M.108, $M.0, $CurrAddr;



implementation ldv_initialize_dm_block_validator_4()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2853} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 2854} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    $M.109 := $p0;
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2855} $p2 := ldv_init_zalloc(24);
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    $M.108 := $p2;
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    return;
}



const ldv_resume_5: ref;

axiom ldv_resume_5 == $sub.ref(0, 789856);

procedure ldv_resume_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2856} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2857} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 790888);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    $i0 := $M.110;
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.111;
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 1);
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.112;
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 1);
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.18;
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1);
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2861} ldv_error();
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_616:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_10916;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2860} ldv_error();
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2859} ldv_error();
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2858} ldv_error();
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_607:
    assume !assertsPassed;
    return;
}



const pool_table_init: ref;

axiom pool_table_init == $sub.ref(0, 791920);

procedure pool_table_init();
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation pool_table_init()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2862} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2863} __mutex_init(dm_thin_pool_table, .str.139, $p0);
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2864} INIT_LIST_HEAD($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(160, 1)));
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    return;
}



const dm_register_target: ref;

axiom dm_register_target == $sub.ref(0, 792952);

procedure dm_register_target($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_register_target($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2865} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2866} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_10930;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kmem_cache_create: ref;

axiom kmem_cache_create == $sub.ref(0, 793984);

procedure kmem_cache_create($p0: ref, $i1: i64, $i2: i64, $i3: i64, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kmem_cache_create($p0: ref, $i1: i64, $i2: i64, $i3: i64, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2867} {:cexpr "kmem_cache_create:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 2868} {:cexpr "kmem_cache_create:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 2869} {:cexpr "kmem_cache_create:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2870} $p5 := external_alloc();
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const dm_unregister_target: ref;

axiom dm_unregister_target == $sub.ref(0, 795016);

procedure dm_unregister_target($p0: ref);
  free requires assertsPassed;



implementation dm_unregister_target($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 796048);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    return;
}



const kmem_cache_destroy: ref;

axiom kmem_cache_destroy == $sub.ref(0, 797080);

procedure kmem_cache_destroy($p0: ref);
  free requires assertsPassed;



implementation kmem_cache_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    return;
}



const ldv_release_4: ref;

axiom ldv_release_4 == $sub.ref(0, 798112);

procedure ldv_release_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2871} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2872} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_4: ref;

axiom ldv_probe_4 == $sub.ref(0, 799144);

procedure ldv_probe_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2873} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2874} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 800176);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2875} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 1} true;
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 801208);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 802240);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 803272);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_619:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 804304);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 805336);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 806368);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 807400);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 808432);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 809464);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 810496);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 811528);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 812560);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 813592);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2876} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 2877} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2878} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_10962;

  corral_source_split_10962:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2879} __VERIFIER_assume($i4);
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 814624);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 815656);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 816688);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 817720);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2880} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2881} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2882} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2883} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2884} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 2885} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2886} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2887} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 2888} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2889} __VERIFIER_assume($i7);
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_10977;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2890} __VERIFIER_assume($i11);
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 818752);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 819784);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 820816);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 821848);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 822880);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 823912);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2891} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2892} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2893} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2894} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2895} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 2896} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2897} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2898} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 2899} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2900} __VERIFIER_assume($i7);
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2901} __VERIFIER_assume($i11);
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 824944);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 825976);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 827008);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 828040);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 829072);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 830104);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 831136);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 832168);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 833200);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2902} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2903} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2904} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2905} __VERIFIER_assume($i10);
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 834232);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2906} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 2907} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2908} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 835264);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2909} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 2910} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2911} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 836296);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2912} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2913} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 837328);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 838360);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2914} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2915} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 839392);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 840424);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 841456);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2916} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 2917} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2918} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2919} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2920} $p6 := malloc($i5);
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_73 := $M.0;
    call {:si_unique_call 2921} cmdloc_dummy_var_74 := $memset.i8(cmdloc_dummy_var_73, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_74;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 842488);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 843520);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.83, $M.87, $M.84, $M.85, $M.86, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.88, $M.94, $M.89, $M.90, $M.91, $M.92, $M.93, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.109, $M.108, $M.18, $M.112, $M.111, $M.110, $M.121, $M.82, $M.0, $M.22, $M.127;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 2922} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.83 := 0;
    call {:si_unique_call 2923} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(0);
    $M.87 := $0.ref;
    $M.84 := 0;
    call {:si_unique_call 2924} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(0);
    $M.85 := 0;
    call {:si_unique_call 2925} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(0);
    $M.86 := 0;
    call {:si_unique_call 2926} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(0);
    $M.5 := 0;
    call {:si_unique_call 2927} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    $M.6 := $0.ref;
    $M.7 := 0;
    call {:si_unique_call 2928} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    $M.8 := $0.ref;
    $M.9 := 0;
    call {:si_unique_call 2929} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    $M.10 := $0.ref;
    $M.11 := 0;
    call {:si_unique_call 2930} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.12 := $0.ref;
    $M.88 := 0;
    call {:si_unique_call 2931} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    $M.94 := $0.ref;
    $M.89 := 0;
    call {:si_unique_call 2932} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    $M.90 := 0;
    call {:si_unique_call 2933} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    $M.91 := 0;
    call {:si_unique_call 2934} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    $M.92 := $0.ref;
    $M.93 := $0.ref;
    $M.95 := 0;
    call {:si_unique_call 2935} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.96 := 0;
    call {:si_unique_call 2936} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.97 := 0;
    call {:si_unique_call 2937} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.98 := 0;
    call {:si_unique_call 2938} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.99 := 0;
    call {:si_unique_call 2939} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.100 := 0;
    call {:si_unique_call 2940} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.101 := 0;
    call {:si_unique_call 2941} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.102 := 0;
    call {:si_unique_call 2942} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.103 := 0;
    call {:si_unique_call 2943} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.104 := 0;
    call {:si_unique_call 2944} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.105 := 0;
    call {:si_unique_call 2945} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.106 := 0;
    call {:si_unique_call 2946} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.107 := 0;
    call {:si_unique_call 2947} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.109 := $0.ref;
    $M.108 := $0.ref;
    $M.18 := 1;
    call {:si_unique_call 2948} {:cexpr "ldv_mutex_mutex_of_dm_thin_pool_table"} boogie_si_record_i32(1);
    $M.112 := 1;
    call {:si_unique_call 2949} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    $M.111 := 1;
    call {:si_unique_call 2950} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    $M.110 := 1;
    call {:si_unique_call 2951} {:cexpr "ldv_mutex_i_mutex_of_inode"} boogie_si_record_i32(1);
    $M.121 := $store.i64($M.121, pool_target, 7);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(8, 1)), .str.137);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(16, 1)), __this_module);
    $M.121 := $store.i32($M.121, $add.ref($add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(0, 4)), 1);
    $M.121 := $store.i32($M.121, $add.ref($add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(1, 4)), 15);
    $M.121 := $store.i32($M.121, $add.ref($add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(2, 4)), 0);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(40, 1)), pool_ctr);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(48, 1)), pool_dtr);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(56, 1)), pool_map);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(64, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(72, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(80, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(88, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(96, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(104, 1)), pool_presuspend);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(112, 1)), pool_presuspend_undo);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(120, 1)), pool_postsuspend);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(128, 1)), pool_preresume);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(136, 1)), pool_resume);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(144, 1)), pool_status);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(152, 1)), pool_message);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(160, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(168, 1)), pool_merge);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(176, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(184, 1)), pool_iterate_devices);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(192, 1)), pool_io_hints);
    $M.121 := $store.ref($M.121, $add.ref($add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref($add.ref(pool_target, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(8, 1)), $0.ref);
    $M.121 := $store.i64($M.121, thin_target, 0);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(8, 1)), .str.136);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(16, 1)), __this_module);
    $M.121 := $store.i32($M.121, $add.ref($add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(0, 4)), 1);
    $M.121 := $store.i32($M.121, $add.ref($add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(1, 4)), 15);
    $M.121 := $store.i32($M.121, $add.ref($add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(2, 4)), 0);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(40, 1)), thin_ctr);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(48, 1)), thin_dtr);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(56, 1)), thin_map);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(64, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(72, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(80, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(88, 1)), thin_endio);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(96, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(104, 1)), thin_presuspend);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(112, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(120, 1)), thin_postsuspend);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(128, 1)), thin_preresume);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(136, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(144, 1)), thin_status);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(152, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(160, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(168, 1)), thin_merge);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(176, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(184, 1)), thin_iterate_devices);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(192, 1)), thin_io_hints);
    $M.121 := $store.ref($M.121, $add.ref($add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref($add.ref(thin_target, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(8, 1)), $0.ref);
    $M.82 := $0.ref;
    $M.0 := $store.i32($M.0, dm_thin_pool_table, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(160, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(160, 1)), $mul.ref(8, 1)), $0.ref);
    $M.22 := 60;
    call {:si_unique_call 2952} {:cexpr "no_space_timeout_secs"} boogie_si_record_i32(60);
    $M.127 := $store.i8($M.127, .str.130, 37);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.130, $mul.ref(0, 6)), $mul.ref(1, 1)), 117);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.130, $mul.ref(0, 6)), $mul.ref(2, 1)), 58);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.130, $mul.ref(0, 6)), $mul.ref(3, 1)), 37);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.130, $mul.ref(0, 6)), $mul.ref(4, 1)), 117);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(.str.130, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.38, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(10, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(11, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(22, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.10, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 8)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 8)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 8)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 8)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 8)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 8)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.11, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 10)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 10)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 10)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 10)), $mul.ref(4, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 10)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 10)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 10)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 10)), $mul.ref(8, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.12, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 18)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 18)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 18)), $mul.ref(3, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 18)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 18)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 18)), $mul.ref(6, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 18)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 18)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 18)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 18)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 18)), $mul.ref(11, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 18)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 18)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 18)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 18)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 18)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.12, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.13, 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 6)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 6)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 6)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 6)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.44, 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(2, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(10, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(18, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(19, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(20, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.140, 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(7, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(12, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.142, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(12, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(17, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(21, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(23, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(24, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(25, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(26, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, .str.143, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(12, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(21, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(22, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(23, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(24, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.144, 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(2, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(10, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.145, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(2, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(6, 1)), 39);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(18, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(20, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(21, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(23, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(24, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(25, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(26, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(27, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(28, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(29, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(30, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, .str.146, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(2, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(6, 1)), 39);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(9, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(19, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(20, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(21, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(23, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(24, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.147, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(2, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(6, 1)), 39);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(15, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(21, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(22, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(23, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(24, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(25, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(26, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(27, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(28, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(29, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(30, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(31, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(32, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(33, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(34, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(35, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(36, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(37, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(38, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(39, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(40, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(41, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(42, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(43, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(44, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(45, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(46, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.147, $mul.ref(0, 48)), $mul.ref(47, 1)), 0);
    $M.0 := $store.i8($M.0, .str.148, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(2, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(6, 1)), 39);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(15, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(19, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(20, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(23, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(24, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(25, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(28, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(29, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(30, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(31, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(32, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(33, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, .str.149, 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(14, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(20, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(21, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(22, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(24, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(25, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(26, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(27, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(28, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(29, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(30, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(31, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(32, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(33, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(34, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(35, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(36, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(37, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(38, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(39, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(40, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(41, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(42, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(43, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(44, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(45, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(46, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(47, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(48, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(49, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(50, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(51, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(52, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(53, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 55)), $mul.ref(54, 1)), 0);
    $M.0 := $store.i8($M.0, .str.91, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.92, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(2, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(21, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(22, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(23, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(24, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(25, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(26, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(28, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(29, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(30, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(31, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(32, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(33, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(34, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(35, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(36, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(37, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(38, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(39, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 41)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, .str.45, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(12, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(22, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(23, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(24, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(25, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(26, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(27, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(28, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(29, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(30, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(31, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(32, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(33, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(34, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, .str.46, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(12, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(21, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(22, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(23, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(24, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.47, 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 19)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 19)), $mul.ref(2, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 19)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 19)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 19)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 19)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 19)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 19)), $mul.ref(8, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 19)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 19)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 19)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 19)), $mul.ref(12, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 19)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 19)), $mul.ref(14, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 19)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 19)), $mul.ref(16, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.48, 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(2, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(10, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(12, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(18, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(21, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.49, 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(22, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(23, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(24, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(25, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(26, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(27, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(28, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(29, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(30, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(31, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(32, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(33, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(34, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(35, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(36, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(37, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(38, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(39, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(40, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(41, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(42, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(43, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(44, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(45, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(46, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 48)), $mul.ref(47, 1)), 0);
    $M.0 := $store.i8($M.0, .str.58, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(11, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(21, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(22, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(24, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(25, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(26, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(27, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(28, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(29, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(30, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(31, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(32, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(33, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(34, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(35, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(36, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(37, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(38, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(39, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 41)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, .str.59, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(2, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(3, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(19, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(22, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(24, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(25, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(26, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(27, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(28, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(29, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(30, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(31, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(32, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(33, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(34, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(35, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 37)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i8($M.0, .str.60, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(13, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(22, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(24, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(25, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(26, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(28, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(29, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, .str.61, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(15, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(17, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(19, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(22, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(24, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(25, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(26, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(28, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(29, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(30, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(31, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, .str.62, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(13, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(19, 1)), 39);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(22, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(23, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(24, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(26, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(27, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(28, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(29, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(30, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(31, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, .str.63, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(13, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(19, 1)), 39);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(22, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(23, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(24, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(25, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(26, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(27, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(28, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(29, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(30, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(31, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(32, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(33, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(34, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, .str.66, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(13, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(19, 1)), 39);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(22, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(23, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(24, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(25, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(26, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(27, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(28, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(29, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(30, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, .str.73, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(13, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(19, 1)), 39);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(22, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(23, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(24, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(25, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(26, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(27, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(28, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(29, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(30, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(31, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(32, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(33, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(34, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(35, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(36, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(37, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(38, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(39, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(40, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(41, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(42, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(43, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(44, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(45, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 47)), $mul.ref(46, 1)), 0);
    $M.0 := $store.i8($M.0, .str.74, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(13, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(19, 1)), 39);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(22, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(23, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(24, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(25, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(26, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(27, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(28, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(29, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(30, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(31, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(32, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(33, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(34, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(35, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(36, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(37, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(38, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(39, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(40, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 42)), $mul.ref(41, 1)), 0);
    $M.0 := $store.i8($M.0, .str.75, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(13, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(19, 1)), 39);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(22, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(23, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(24, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(25, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(26, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(27, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(28, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(29, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(30, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(31, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(32, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(33, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(34, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(35, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(36, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, .str.56, 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(18, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(22, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(23, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(24, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(25, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(26, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(28, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(29, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(30, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(31, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(32, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(33, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(34, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    call {:si_unique_call 2953} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 844552);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.17, $CurrAddr;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i20 := $eq.ref(pool_iterate_devices, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i20 == 1);
    $i19 := $eq.ref(subtree_equal, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i19 == 1);
    $i18 := $eq.ref(data_block_equal, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i18 == 1);
    $i17 := $eq.ref(thin_iterate_devices, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume false;
    return;

  $bb2:
    assume $i17 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    $p3 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 2954} $i4 := thin_iterate_devices($p1, $p2, $p3);
    $r := $i4;
    return;

  $bb3:
    assume $i18 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    $p7 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 2955} $i8 := data_block_equal($p5, $p6, $p7);
    $r := $i8;
    return;

  $bb4:
    assume $i19 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    $p11 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 2956} $i12 := subtree_equal($p9, $p10, $p11);
    $r := $i12;
    return;

  $bb5:
    assume $i20 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    $p15 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 2957} $i16 := pool_iterate_devices($p13, $p14, $p15);
    $r := $i16;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 845584);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 846616);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 847648);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 848680);

procedure devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 849712);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i41 := $eq.ref(mempool_free_slab, $p0);
    assume true;
    goto $bb21, $bb41;

  $bb41:
    assume !($i41 == 1);
    $i40 := $eq.ref(pool_io_hints, $p0);
    assume true;
    goto $bb20, $bb40;

  $bb40:
    assume !($i40 == 1);
    $i39 := $eq.ref(subtree_dec, $p0);
    assume true;
    goto $bb19, $bb39;

  $bb39:
    assume !($i39 == 1);
    $i38 := $eq.ref(subtree_inc, $p0);
    assume {:branchcond $i38} true;
    goto $bb18, $bb38;

  $bb38:
    assume !($i38 == 1);
    $i37 := $eq.ref(data_block_dec, $p0);
    assume true;
    goto $bb17, $bb37;

  $bb37:
    assume !($i37 == 1);
    $i36 := $eq.ref(data_block_inc, $p0);
    assume true;
    goto $bb16, $bb36;

  $bb36:
    assume !($i36 == 1);
    $i35 := $eq.ref(process_discard_cell_no_passdown, $p0);
    assume true;
    goto $bb15, $bb35;

  $bb35:
    assume !($i35 == 1);
    $i34 := $eq.ref(process_discard_cell_passdown, $p0);
    assume true;
    goto $bb14, $bb34;

  $bb34:
    assume !($i34 == 1);
    $i33 := $eq.ref(__remap_and_issue_shared_cell, $p0);
    assume {:branchcond $i33} true;
    goto $bb13, $bb33;

  $bb33:
    assume !($i33 == 1);
    $i32 := $eq.ref(__inc_remap_and_issue_cell, $p0);
    assume true;
    goto $bb12, $bb32;

  $bb32:
    assume !($i32 == 1);
    $i31 := $eq.ref(process_cell, $p0);
    assume true;
    goto $bb11, $bb31;

  $bb31:
    assume !($i31 == 1);
    $i30 := $eq.ref(process_bio, $p0);
    assume {:branchcond $i30} true;
    goto $bb10, $bb30;

  $bb30:
    assume !($i30 == 1);
    $i29 := $eq.ref(process_discard_bio, $p0);
    assume true;
    goto $bb9, $bb29;

  $bb29:
    assume !($i29 == 1);
    $i28 := $eq.ref(process_cell_success, $p0);
    assume true;
    goto $bb8, $bb28;

  $bb28:
    assume !($i28 == 1);
    $i27 := $eq.ref(process_cell_read_only, $p0);
    assume true;
    goto $bb7, $bb27;

  $bb27:
    assume !($i27 == 1);
    $i26 := $eq.ref(process_bio_success, $p0);
    assume true;
    goto $bb6, $bb26;

  $bb26:
    assume !($i26 == 1);
    $i25 := $eq.ref(process_bio_read_only, $p0);
    assume true;
    goto $bb5, $bb25;

  $bb25:
    assume !($i25 == 1);
    $i24 := $eq.ref(process_cell_fail, $p0);
    assume true;
    goto $bb4, $bb24;

  $bb24:
    assume !($i24 == 1);
    $i23 := $eq.ref(process_bio_fail, $p0);
    assume {:branchcond $i23} true;
    goto $bb3, $bb23;

  $bb23:
    assume !($i23 == 1);
    $i22 := $eq.ref(thin_io_hints, $p0);
    assume true;
    goto $bb2, $bb22;

  $bb22:
    assume !($i22 == 1);
    assume false;
    return;

  $bb2:
    assume $i22 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2958} thin_io_hints($p1, $p2);
    return;

  $bb3:
    assume $i23 == 1;
    $p3 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2959} process_bio_fail(arg, $p3);
    return;

  $bb4:
    assume $i24 == 1;
    call {:si_unique_call 2960} process_cell_fail(arg, arg1);
    return;

  $bb5:
    assume $i25 == 1;
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2961} process_bio_read_only(arg, $p4);
    return;

  $bb6:
    assume $i26 == 1;
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2962} process_bio_success(arg, $p5);
    return;

  $bb7:
    assume $i27 == 1;
    call {:si_unique_call 2963} process_cell_read_only(arg, arg1);
    return;

  $bb8:
    assume $i28 == 1;
    call {:si_unique_call 2964} process_cell_success(arg, arg1);
    return;

  $bb9:
    assume $i29 == 1;
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2965} process_discard_bio(arg, $p6);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    return;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i30 == 1;
    $p7 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2966} process_bio(arg, $p7);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    return;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i31 == 1;
    call {:si_unique_call 2967} process_cell(arg, arg1);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    return;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i32 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2968} __inc_remap_and_issue_cell($p8, arg1);
    return;

  $bb13:
    assume $i33 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2969} __remap_and_issue_shared_cell($p9, arg1);
    return;

  $bb14:
    assume $i34 == 1;
    call {:si_unique_call 2970} process_discard_cell_passdown(arg, arg1);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    return;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i35 == 1;
    call {:si_unique_call 2971} process_discard_cell_no_passdown(arg, arg1);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    return;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i36 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2972} data_block_inc($p10, $p11);
    return;

  $bb17:
    assume $i37 == 1;
    $p12 := $bitcast.ref.ref(arg);
    $p13 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2973} data_block_dec($p12, $p13);
    return;

  $bb18:
    assume $i38 == 1;
    $p14 := $bitcast.ref.ref(arg);
    $p15 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2974} subtree_inc($p14, $p15);
    return;

  $bb19:
    assume $i39 == 1;
    $p16 := $bitcast.ref.ref(arg);
    $p17 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2975} subtree_dec($p16, $p17);
    return;

  $bb20:
    assume $i40 == 1;
    $p18 := $bitcast.ref.ref(arg);
    $p19 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2976} pool_io_hints($p18, $p19);
    return;

  $bb21:
    assume $i41 == 1;
    $p20 := $bitcast.ref.ref(arg);
    $p21 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2977} mempool_free_slab($p20, $p21);
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 850744);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i44 := $eq.ref(mempool_free_slab, $p0);
    assume true;
    goto $bb21, $bb41;

  $bb41:
    assume !($i44 == 1);
    $i43 := $eq.ref(pool_io_hints, $p0);
    assume true;
    goto $bb20, $bb40;

  $bb40:
    assume !($i43 == 1);
    $i42 := $eq.ref(subtree_dec, $p0);
    assume true;
    goto $bb19, $bb39;

  $bb39:
    assume !($i42 == 1);
    $i41 := $eq.ref(subtree_inc, $p0);
    assume true;
    goto $bb18, $bb38;

  $bb38:
    assume !($i41 == 1);
    $i40 := $eq.ref(data_block_dec, $p0);
    assume true;
    goto $bb17, $bb37;

  $bb37:
    assume !($i40 == 1);
    $i39 := $eq.ref(data_block_inc, $p0);
    assume true;
    goto $bb16, $bb36;

  $bb36:
    assume !($i39 == 1);
    $i38 := $eq.ref(process_discard_cell_no_passdown, $p0);
    assume {:branchcond $i38} true;
    goto $bb15, $bb35;

  $bb35:
    assume !($i38 == 1);
    $i37 := $eq.ref(process_discard_cell_passdown, $p0);
    assume true;
    goto $bb14, $bb34;

  $bb34:
    assume !($i37 == 1);
    $i36 := $eq.ref(__remap_and_issue_shared_cell, $p0);
    assume true;
    goto $bb13, $bb33;

  $bb33:
    assume !($i36 == 1);
    $i35 := $eq.ref(__inc_remap_and_issue_cell, $p0);
    assume true;
    goto $bb12, $bb32;

  $bb32:
    assume !($i35 == 1);
    $i34 := $eq.ref(process_cell, $p0);
    assume true;
    goto $bb11, $bb31;

  $bb31:
    assume !($i34 == 1);
    $i33 := $eq.ref(process_bio, $p0);
    assume {:branchcond $i33} true;
    goto $bb10, $bb30;

  $bb30:
    assume !($i33 == 1);
    $i32 := $eq.ref(process_discard_bio, $p0);
    assume true;
    goto $bb9, $bb29;

  $bb29:
    assume !($i32 == 1);
    $i31 := $eq.ref(process_cell_success, $p0);
    assume true;
    goto $bb8, $bb28;

  $bb28:
    assume !($i31 == 1);
    $i30 := $eq.ref(process_cell_read_only, $p0);
    assume {:branchcond $i30} true;
    goto $bb7, $bb27;

  $bb27:
    assume !($i30 == 1);
    $i29 := $eq.ref(process_bio_success, $p0);
    assume true;
    goto $bb6, $bb26;

  $bb26:
    assume !($i29 == 1);
    $i28 := $eq.ref(process_bio_read_only, $p0);
    assume true;
    goto $bb5, $bb25;

  $bb25:
    assume !($i28 == 1);
    $i27 := $eq.ref(process_cell_fail, $p0);
    assume true;
    goto $bb4, $bb24;

  $bb24:
    assume !($i27 == 1);
    $i26 := $eq.ref(process_bio_fail, $p0);
    assume true;
    goto $bb3, $bb23;

  $bb23:
    assume !($i26 == 1);
    $i25 := $eq.ref(thin_io_hints, $p0);
    assume true;
    goto $bb2, $bb22;

  $bb22:
    assume !($i25 == 1);
    assume false;
    return;

  $bb2:
    assume $i25 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2978} thin_io_hints($p1, $p2);
    return;

  $bb3:
    assume $i26 == 1;
    call {:si_unique_call 2979} process_bio_fail(arg, arg1);
    return;

  $bb4:
    assume $i27 == 1;
    $p3 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2980} process_cell_fail(arg, $p3);
    return;

  $bb5:
    assume $i28 == 1;
    call {:si_unique_call 2981} process_bio_read_only(arg, arg1);
    return;

  $bb6:
    assume $i29 == 1;
    call {:si_unique_call 2982} process_bio_success(arg, arg1);
    return;

  $bb7:
    assume $i30 == 1;
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2983} process_cell_read_only(arg, $p4);
    return;

  $bb8:
    assume $i31 == 1;
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2984} process_cell_success(arg, $p5);
    return;

  $bb9:
    assume $i32 == 1;
    call {:si_unique_call 2985} process_discard_bio(arg, arg1);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    return;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i33 == 1;
    call {:si_unique_call 2986} process_bio(arg, arg1);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    return;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i34 == 1;
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2987} process_cell(arg, $p6);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    return;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i35 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2988} __inc_remap_and_issue_cell($p7, $p8);
    return;

  $bb13:
    assume $i36 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2989} __remap_and_issue_shared_cell($p9, $p10);
    return;

  $bb14:
    assume $i37 == 1;
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2990} process_discard_cell_passdown(arg, $p11);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    return;

  SeqInstr_646:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i38 == 1;
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2991} process_discard_cell_no_passdown(arg, $p12);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    return;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i39 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2992} data_block_inc($p13, $p14);
    return;

  $bb17:
    assume $i40 == 1;
    $p15 := $bitcast.ref.ref(arg);
    $p16 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2993} data_block_dec($p15, $p16);
    return;

  $bb18:
    assume $i41 == 1;
    $p17 := $bitcast.ref.ref(arg);
    $p18 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2994} subtree_inc($p17, $p18);
    return;

  $bb19:
    assume $i42 == 1;
    $p19 := $bitcast.ref.ref(arg);
    $p20 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2995} subtree_dec($p19, $p20);
    return;

  $bb20:
    assume $i43 == 1;
    $p21 := $bitcast.ref.ref(arg);
    $p22 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2996} pool_io_hints($p21, $p22);
    return;

  $bb21:
    assume $i44 == 1;
    $p23 := $bitcast.ref.ref(arg);
    $p24 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2997} mempool_free_slab($p23, $p24);
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 851776);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i60 := $eq.ref(mempool_free_slab, $p0);
    assume true;
    goto $bb21, $bb41;

  $bb41:
    assume !($i60 == 1);
    $i59 := $eq.ref(pool_io_hints, $p0);
    assume true;
    goto $bb20, $bb40;

  $bb40:
    assume !($i59 == 1);
    $i58 := $eq.ref(subtree_dec, $p0);
    assume {:branchcond $i58} true;
    goto $bb19, $bb39;

  $bb39:
    assume !($i58 == 1);
    $i57 := $eq.ref(subtree_inc, $p0);
    assume true;
    goto $bb18, $bb38;

  $bb38:
    assume !($i57 == 1);
    $i56 := $eq.ref(data_block_dec, $p0);
    assume true;
    goto $bb17, $bb37;

  $bb37:
    assume !($i56 == 1);
    $i55 := $eq.ref(data_block_inc, $p0);
    assume {:branchcond $i55} true;
    goto $bb16, $bb36;

  $bb36:
    assume !($i55 == 1);
    $i54 := $eq.ref(process_discard_cell_no_passdown, $p0);
    assume true;
    goto $bb15, $bb35;

  $bb35:
    assume !($i54 == 1);
    $i53 := $eq.ref(process_discard_cell_passdown, $p0);
    assume true;
    goto $bb14, $bb34;

  $bb34:
    assume !($i53 == 1);
    $i52 := $eq.ref(__remap_and_issue_shared_cell, $p0);
    assume {:branchcond $i52} true;
    goto $bb13, $bb33;

  $bb33:
    assume !($i52 == 1);
    $i51 := $eq.ref(__inc_remap_and_issue_cell, $p0);
    assume true;
    goto $bb12, $bb32;

  $bb32:
    assume !($i51 == 1);
    $i50 := $eq.ref(process_cell, $p0);
    assume {:branchcond $i50} true;
    goto $bb11, $bb31;

  $bb31:
    assume !($i50 == 1);
    $i49 := $eq.ref(process_bio, $p0);
    assume true;
    goto $bb10, $bb30;

  $bb30:
    assume !($i49 == 1);
    $i48 := $eq.ref(process_discard_bio, $p0);
    assume {:branchcond $i48} true;
    goto $bb9, $bb29;

  $bb29:
    assume !($i48 == 1);
    $i47 := $eq.ref(process_cell_success, $p0);
    assume {:branchcond $i47} true;
    goto $bb8, $bb28;

  $bb28:
    assume !($i47 == 1);
    $i46 := $eq.ref(process_cell_read_only, $p0);
    assume true;
    goto $bb7, $bb27;

  $bb27:
    assume !($i46 == 1);
    $i45 := $eq.ref(process_bio_success, $p0);
    assume true;
    goto $bb6, $bb26;

  $bb26:
    assume !($i45 == 1);
    $i44 := $eq.ref(process_bio_read_only, $p0);
    assume true;
    goto $bb5, $bb25;

  $bb25:
    assume !($i44 == 1);
    $i43 := $eq.ref(process_cell_fail, $p0);
    assume true;
    goto $bb4, $bb24;

  $bb24:
    assume !($i43 == 1);
    $i42 := $eq.ref(process_bio_fail, $p0);
    assume true;
    goto $bb3, $bb23;

  $bb23:
    assume !($i42 == 1);
    $i41 := $eq.ref(thin_io_hints, $p0);
    assume true;
    goto $bb2, $bb22;

  $bb22:
    assume !($i41 == 1);
    assume false;
    return;

  $bb2:
    assume $i41 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2998} thin_io_hints($p1, $p2);
    return;

  $bb3:
    assume $i42 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2999} process_bio_fail($p3, $p4);
    return;

  $bb4:
    assume $i43 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3000} process_cell_fail($p5, $p6);
    return;

  $bb5:
    assume $i44 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3001} process_bio_read_only($p7, $p8);
    return;

  $bb6:
    assume $i45 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3002} process_bio_success($p9, $p10);
    return;

  $bb7:
    assume $i46 == 1;
    $p11 := $bitcast.ref.ref(arg);
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3003} process_cell_read_only($p11, $p12);
    return;

  $bb8:
    assume $i47 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3004} process_cell_success($p13, $p14);
    return;

  $bb9:
    assume $i48 == 1;
    $p15 := $bitcast.ref.ref(arg);
    $p16 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3005} process_discard_bio($p15, $p16);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    return;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i49 == 1;
    $p17 := $bitcast.ref.ref(arg);
    $p18 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3006} process_bio($p17, $p18);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    return;

  SeqInstr_655:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i50 == 1;
    $p19 := $bitcast.ref.ref(arg);
    $p20 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3007} process_cell($p19, $p20);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    return;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i51 == 1;
    $p21 := $bitcast.ref.ref(arg);
    $p22 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3008} __inc_remap_and_issue_cell($p21, $p22);
    return;

  $bb13:
    assume $i52 == 1;
    $p23 := $bitcast.ref.ref(arg);
    $p24 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3009} __remap_and_issue_shared_cell($p23, $p24);
    return;

  $bb14:
    assume $i53 == 1;
    $p25 := $bitcast.ref.ref(arg);
    $p26 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3010} process_discard_cell_passdown($p25, $p26);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    return;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i54 == 1;
    $p27 := $bitcast.ref.ref(arg);
    $p28 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3011} process_discard_cell_no_passdown($p27, $p28);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    return;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i55 == 1;
    $p29 := $bitcast.ref.ref(arg);
    $p30 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3012} data_block_inc($p29, $p30);
    return;

  $bb17:
    assume $i56 == 1;
    $p31 := $bitcast.ref.ref(arg);
    $p32 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3013} data_block_dec($p31, $p32);
    return;

  $bb18:
    assume $i57 == 1;
    $p33 := $bitcast.ref.ref(arg);
    $p34 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3014} subtree_inc($p33, $p34);
    return;

  $bb19:
    assume $i58 == 1;
    $p35 := $bitcast.ref.ref(arg);
    $p36 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3015} subtree_dec($p35, $p36);
    return;

  $bb20:
    assume $i59 == 1;
    $p37 := $bitcast.ref.ref(arg);
    $p38 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3016} pool_io_hints($p37, $p38);
    return;

  $bb21:
    assume $i60 == 1;
    $p39 := $bitcast.ref.ref(arg);
    $p40 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3017} mempool_free_slab($p39, $p40);
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 852808);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $CurrAddr, $M.16, $M.17, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(pool_map, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i12 == 1);
    $i11 := $eq.ref(cmp_cells, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i11 == 1);
    $i10 := $eq.ref(thin_map, $p0);
    assume true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume false;
    return;

  $bb2:
    assume $i10 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3018} $i3 := thin_map($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i11 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3019} $i6 := cmp_cells($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i12 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3020} $i9 := pool_map($p7, $p8);
    $r := $i9;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 853840);

procedure devirtbounce.9(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.45, $M.18, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.58, $M.59, $M.60, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.55, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation devirtbounce.9(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i34 := $eq.ref(do_no_space_timeout, $p0);
    assume true;
    goto $bb21, $bb41;

  $bb41:
    assume !($i34 == 1);
    $i33 := $eq.ref(metadata_low_callback, $p0);
    assume {:branchcond $i33} true;
    goto $bb20, $bb40;

  $bb40:
    assume !($i33 == 1);
    $i32 := $eq.ref(do_waker, $p0);
    assume true;
    goto $bb19, $bb39;

  $bb39:
    assume !($i32 == 1);
    $i31 := $eq.ref(pool_resume, $p0);
    assume true;
    goto $bb18, $bb38;

  $bb38:
    assume !($i31 == 1);
    $i30 := $eq.ref(pool_postsuspend, $p0);
    assume {:branchcond $i30} true;
    goto $bb17, $bb37;

  $bb37:
    assume !($i30 == 1);
    $i29 := $eq.ref(pool_presuspend_undo, $p0);
    assume true;
    goto $bb16, $bb36;

  $bb36:
    assume !($i29 == 1);
    $i28 := $eq.ref(pool_presuspend, $p0);
    assume true;
    goto $bb15, $bb35;

  $bb35:
    assume !($i28 == 1);
    $i27 := $eq.ref(pool_dtr, $p0);
    assume true;
    goto $bb14, $bb34;

  $bb34:
    assume !($i27 == 1);
    $i26 := $eq.ref(process_prepared_discard_no_passdown, $p0);
    assume true;
    goto $bb13, $bb33;

  $bb33:
    assume !($i26 == 1);
    $i25 := $eq.ref(process_prepared_discard_passdown, $p0);
    assume true;
    goto $bb12, $bb32;

  $bb32:
    assume !($i25 == 1);
    $i24 := $eq.ref(process_prepared_mapping, $p0);
    assume true;
    goto $bb11, $bb31;

  $bb31:
    assume !($i24 == 1);
    $i23 := $eq.ref(process_prepared_discard_success, $p0);
    assume {:branchcond $i23} true;
    goto $bb10, $bb30;

  $bb30:
    assume !($i23 == 1);
    $i22 := $eq.ref(process_prepared_discard_fail, $p0);
    assume true;
    goto $bb9, $bb29;

  $bb29:
    assume !($i22 == 1);
    $i21 := $eq.ref(process_prepared_mapping_fail, $p0);
    assume true;
    goto $bb8, $bb28;

  $bb28:
    assume !($i21 == 1);
    $i20 := $eq.ref(do_worker, $p0);
    assume true;
    goto $bb7, $bb27;

  $bb27:
    assume !($i20 == 1);
    $i19 := $eq.ref(do_noflush_start, $p0);
    assume true;
    goto $bb6, $bb26;

  $bb26:
    assume !($i19 == 1);
    $i18 := $eq.ref(do_noflush_stop, $p0);
    assume true;
    goto $bb5, $bb25;

  $bb25:
    assume !($i18 == 1);
    $i17 := $eq.ref(thin_postsuspend, $p0);
    assume true;
    goto $bb4, $bb24;

  $bb24:
    assume !($i17 == 1);
    $i16 := $eq.ref(thin_presuspend, $p0);
    assume true;
    goto $bb3, $bb23;

  $bb23:
    assume !($i16 == 1);
    $i15 := $eq.ref(thin_dtr, $p0);
    assume true;
    goto $bb2, $bb22;

  $bb22:
    assume !($i15 == 1);
    assume false;
    return;

  $bb2:
    assume $i15 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3021} thin_dtr($p1);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    return;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i16 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3022} thin_presuspend($p2);
    return;

  $bb4:
    assume $i17 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3023} thin_postsuspend($p3);
    return;

  $bb5:
    assume $i18 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3024} do_noflush_stop($p4);
    return;

  $bb6:
    assume $i19 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3025} do_noflush_start($p5);
    return;

  $bb7:
    assume $i20 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3026} do_worker($p6);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    return;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i21 == 1;
    call {:si_unique_call 3027} process_prepared_mapping_fail(arg);
    return;

  $bb9:
    assume $i22 == 1;
    call {:si_unique_call 3028} process_prepared_discard_fail(arg);
    return;

  $bb10:
    assume $i23 == 1;
    call {:si_unique_call 3029} process_prepared_discard_success(arg);
    return;

  $bb11:
    assume $i24 == 1;
    call {:si_unique_call 3030} process_prepared_mapping(arg);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    return;

  SeqInstr_673:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i25 == 1;
    call {:si_unique_call 3031} process_prepared_discard_passdown(arg);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    return;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i26 == 1;
    call {:si_unique_call 3032} process_prepared_discard_no_passdown(arg);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    return;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i27 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3033} pool_dtr($p7);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    return;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i28 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3034} pool_presuspend($p8);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    return;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i29 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3035} pool_presuspend_undo($p9);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    return;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i30 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3036} pool_postsuspend($p10);
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    return;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i31 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3037} pool_resume($p11);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    return;

  SeqInstr_694:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i32 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3038} do_waker($p12);
    return;

  $bb20:
    assume $i33 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3039} metadata_low_callback($p13);
    return;

  $bb21:
    assume $i34 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3040} do_no_space_timeout($p14);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    return;

  SeqInstr_697:
    assume !assertsPassed;
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 854872);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 855904);

procedure devirtbounce.11(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 856936);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 857968);

procedure devirtbounce.13(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.45, $M.18, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.58, $M.59, $M.60, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.55, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation devirtbounce.13(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i40 := $eq.ref(do_no_space_timeout, $p0);
    assume true;
    goto $bb21, $bb41;

  $bb41:
    assume !($i40 == 1);
    $i39 := $eq.ref(metadata_low_callback, $p0);
    assume true;
    goto $bb20, $bb40;

  $bb40:
    assume !($i39 == 1);
    $i38 := $eq.ref(do_waker, $p0);
    assume {:branchcond $i38} true;
    goto $bb19, $bb39;

  $bb39:
    assume !($i38 == 1);
    $i37 := $eq.ref(pool_resume, $p0);
    assume true;
    goto $bb18, $bb38;

  $bb38:
    assume !($i37 == 1);
    $i36 := $eq.ref(pool_postsuspend, $p0);
    assume true;
    goto $bb17, $bb37;

  $bb37:
    assume !($i36 == 1);
    $i35 := $eq.ref(pool_presuspend_undo, $p0);
    assume true;
    goto $bb16, $bb36;

  $bb36:
    assume !($i35 == 1);
    $i34 := $eq.ref(pool_presuspend, $p0);
    assume true;
    goto $bb15, $bb35;

  $bb35:
    assume !($i34 == 1);
    $i33 := $eq.ref(pool_dtr, $p0);
    assume {:branchcond $i33} true;
    goto $bb14, $bb34;

  $bb34:
    assume !($i33 == 1);
    $i32 := $eq.ref(process_prepared_discard_no_passdown, $p0);
    assume true;
    goto $bb13, $bb33;

  $bb33:
    assume !($i32 == 1);
    $i31 := $eq.ref(process_prepared_discard_passdown, $p0);
    assume true;
    goto $bb12, $bb32;

  $bb32:
    assume !($i31 == 1);
    $i30 := $eq.ref(process_prepared_mapping, $p0);
    assume {:branchcond $i30} true;
    goto $bb11, $bb31;

  $bb31:
    assume !($i30 == 1);
    $i29 := $eq.ref(process_prepared_discard_success, $p0);
    assume true;
    goto $bb10, $bb30;

  $bb30:
    assume !($i29 == 1);
    $i28 := $eq.ref(process_prepared_discard_fail, $p0);
    assume true;
    goto $bb9, $bb29;

  $bb29:
    assume !($i28 == 1);
    $i27 := $eq.ref(process_prepared_mapping_fail, $p0);
    assume true;
    goto $bb8, $bb28;

  $bb28:
    assume !($i27 == 1);
    $i26 := $eq.ref(do_worker, $p0);
    assume true;
    goto $bb7, $bb27;

  $bb27:
    assume !($i26 == 1);
    $i25 := $eq.ref(do_noflush_start, $p0);
    assume true;
    goto $bb6, $bb26;

  $bb26:
    assume !($i25 == 1);
    $i24 := $eq.ref(do_noflush_stop, $p0);
    assume true;
    goto $bb5, $bb25;

  $bb25:
    assume !($i24 == 1);
    $i23 := $eq.ref(thin_postsuspend, $p0);
    assume {:branchcond $i23} true;
    goto $bb4, $bb24;

  $bb24:
    assume !($i23 == 1);
    $i22 := $eq.ref(thin_presuspend, $p0);
    assume true;
    goto $bb3, $bb23;

  $bb23:
    assume !($i22 == 1);
    $i21 := $eq.ref(thin_dtr, $p0);
    assume true;
    goto $bb2, $bb22;

  $bb22:
    assume !($i21 == 1);
    assume false;
    return;

  $bb2:
    assume $i21 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3041} thin_dtr($p1);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    return;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i22 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3042} thin_presuspend($p2);
    return;

  $bb4:
    assume $i23 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3043} thin_postsuspend($p3);
    return;

  $bb5:
    assume $i24 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3044} do_noflush_stop($p4);
    return;

  $bb6:
    assume $i25 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3045} do_noflush_start($p5);
    return;

  $bb7:
    assume $i26 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3046} do_worker($p6);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    return;

  SeqInstr_703:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i27 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3047} process_prepared_mapping_fail($p7);
    return;

  $bb9:
    assume $i28 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3048} process_prepared_discard_fail($p8);
    return;

  $bb10:
    assume $i29 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3049} process_prepared_discard_success($p9);
    return;

  $bb11:
    assume $i30 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3050} process_prepared_mapping($p10);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    return;

  SeqInstr_706:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i31 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3051} process_prepared_discard_passdown($p11);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    return;

  SeqInstr_709:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i32 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3052} process_prepared_discard_no_passdown($p12);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    return;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i33 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3053} pool_dtr($p13);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    return;

  SeqInstr_715:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i34 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3054} pool_presuspend($p14);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    return;

  SeqInstr_718:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i35 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3055} pool_presuspend_undo($p15);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    return;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i36 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3056} pool_postsuspend($p16);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    return;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i37 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3057} pool_resume($p17);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    return;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i38 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3058} do_waker($p18);
    return;

  $bb20:
    assume $i39 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3059} metadata_low_callback($p19);
    return;

  $bb21:
    assume $i40 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3060} do_no_space_timeout($p20);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    return;

  SeqInstr_730:
    assume !assertsPassed;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 859000);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 860032);

procedure devirtbounce.15(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.42, $M.4, $M.58, $M.59, $M.60, $M.15, $M.40, $M.16, $M.17, $M.55, $M.25, $M.26, $M.29, $M.45, $M.18, $M.49, $M.47, $M.50, $M.48, $M.51, $M.52, $M.41, $M.43, assertsPassed, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation devirtbounce.15(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(pool_preresume, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(thin_preresume, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3061} $i2 := thin_preresume($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3062} $i4 := pool_preresume($p3);
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    $r := $i4;
    return;

  SeqInstr_733:
    assume !assertsPassed;
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 861064);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(sb_check, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3063} $i3 := sb_check($p1, $p2, arg2);
    $r := $i3;
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 862096);

procedure devirtbounce.17(funcPtr: ref, arg: i64, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: i64, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 863128);

procedure devirtbounce.18(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 864160);

procedure devirtbounce.19(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.19(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 865192);

procedure devirtbounce.20(funcPtr: ref, arg: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.20(funcPtr: ref, arg: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.83, $M.87, $M.84, $M.85, $M.86, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.88, $M.94, $M.89, $M.90, $M.91, $M.92, $M.93, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.109, $M.108, $M.18, $M.112, $M.111, $M.110, $M.121, $M.82, $M.0, $M.22, $M.127, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 3064} __SMACK_static_init();
    call {:si_unique_call 3065} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $M.95, $M.96, $M.5, $M.7, $M.9, $M.11, $M.97, $M.98, $M.99, $M.83, $M.84, $M.85, $M.86, $M.100, $M.88, $M.89, $M.90, $M.91, $M.101, $M.102, $M.62, $M.63, $M.64, $M.103, $M.104, $M.105, $M.92, $M.93, $M.106, $M.107, $M.87, $M.6, $M.8, $M.10, $M.12, $M.94, $M.109, $M.108, $M.18, $M.112, $M.111, $M.110, $M.121, $M.82, $M.22, $M.127, $CurrAddr, $M.78, $M.79, $M.80, $M.81, $M.16, $M.17, $M.65, $M.2, $M.66, $M.61, $M.4, $M.58, $M.59, $M.60, $M.15, $M.42, $M.71, $M.40, $M.25, $M.26, $M.29, $M.55, $M.49, $M.47, $M.50, $M.48, $M.45, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.43;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation thin_endio_loop_$bb19(in_$p9: ref, in_$i61: i64, in_$p65: ref, in_$p66: ref, in_$p68: ref, in_$p69: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$p63: ref, in_$p64: ref) returns (out_$p65: ref, out_$p66: ref, out_$p68: ref, out_$p69: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$p63: ref, out_$p64: ref)
{

  entry:
    out_$p65, out_$p66, out_$p68, out_$p69, out_$p71, out_$i72, out_$i73, out_$p63, out_$p64 := in_$p65, in_$p66, in_$p68, in_$p69, in_$p71, in_$i72, in_$i73, in_$p63, in_$p64;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_392;

  $bb21:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$p63, out_$p64 := out_$p69, out_$p63;
    goto $bb21_dummy;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i64(out_$i72, in_$i61);
    goto corral_source_split_402;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(out_$p71);
    goto corral_source_split_401;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p63, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_400;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    goto corral_source_split_399;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_398;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref($add.ref(out_$p63, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_397;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} list_add_tail(out_$p65, out_$p66);
    goto corral_source_split_396;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p9, $mul.ref(0, 66576)), $mul.ref(928, 1));
    goto corral_source_split_395;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p64, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_394;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p65, out_$p66, out_$p68, out_$p69, out_$p71, out_$i72, out_$i73, out_$p63, out_$p64 := thin_endio_loop_$bb19(in_$p9, in_$i61, out_$p65, out_$p66, out_$p68, out_$p69, out_$p71, out_$i72, out_$i73, out_$p63, out_$p64);
    return;

  exit:
    return;
}



procedure thin_endio_loop_$bb19(in_$p9: ref, in_$i61: i64, in_$p65: ref, in_$p66: ref, in_$p68: ref, in_$p69: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$p63: ref, in_$p64: ref) returns (out_$p65: ref, out_$p66: ref, out_$p68: ref, out_$p69: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$p63: ref, out_$p64: ref);



implementation thin_endio_loop_$bb6(in_$i28: i64, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p30: ref, in_$p31: ref) returns (out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p30: ref, out_$p31: ref)
{

  entry:
    out_$p32, out_$p34, out_$p35, out_$p37, out_$i38, out_$i39, out_$p30, out_$p31 := in_$p32, in_$p34, in_$p35, in_$p37, in_$i38, in_$i39, in_$p30, in_$p31;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_345;

  $bb8:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$p30, out_$p31 := out_$p35, out_$p30;
    goto $bb8_dummy;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i64(out_$i38, in_$i28);
    goto corral_source_split_355;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_354;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p30, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_353;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    goto corral_source_split_352;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_351;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_350;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} __complete_mapping_preparation(out_$p31);
    goto corral_source_split_349;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} list_del(out_$p32);
    goto corral_source_split_348;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_347;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p32, out_$p34, out_$p35, out_$p37, out_$i38, out_$i39, out_$p30, out_$p31 := thin_endio_loop_$bb6(in_$i28, out_$p32, out_$p34, out_$p35, out_$p37, out_$i38, out_$i39, out_$p30, out_$p31);
    return;

  exit:
    return;
}



procedure thin_endio_loop_$bb6(in_$i28: i64, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p30: ref, in_$p31: ref) returns (out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p30: ref, out_$p31: ref);
  modifies $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation error_bio_list_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p5: ref) returns (out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p5: ref)
{

  entry:
    out_$p6, out_$i7, out_$i8, out_$p5 := in_$p6, in_$i7, in_$i8, in_$p5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1033;

  $bb6:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$p5 := out_$p6;
    goto $bb6_dummy;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_1038;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64(out_$p6);
    goto corral_source_split_1037;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} out_$p6 := bio_list_pop(in_$p0);
    goto corral_source_split_1036;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} bio_endio(out_$p5, in_$i1);
    goto corral_source_split_1035;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$i7, out_$i8, out_$p5 := error_bio_list_loop_$bb4(in_$p0, in_$i1, out_$p6, out_$i7, out_$i8, out_$p5);
    return;

  exit:
    return;
}



procedure error_bio_list_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p5: ref) returns (out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p5: ref);
  modifies $M.0;



implementation requeue_deferred_cells_loop_$bb4(in_$p3: ref, in_$i18: i64, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p20: ref, in_$p21: ref) returns (out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p20: ref, out_$p21: ref)
{

  entry:
    out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p20, out_$p21 := in_$p23, in_$p24, in_$p26, in_$i27, in_$i28, in_$p20, in_$p21;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1066;

  $bb6:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p20, out_$p21 := out_$p24, out_$p20;
    goto $bb6_dummy;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, in_$i18);
    goto corral_source_split_1074;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_1073;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p20, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1072;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    goto corral_source_split_1071;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_1070;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p20, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1069;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} cell_requeue(in_$p3, out_$p21);
    goto corral_source_split_1068;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p20, out_$p21 := requeue_deferred_cells_loop_$bb4(in_$p3, in_$i18, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p20, out_$p21);
    return;

  exit:
    return;
}



procedure requeue_deferred_cells_loop_$bb4(in_$p3: ref, in_$i18: i64, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p20: ref, in_$p21: ref) returns (out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p20: ref, out_$p21: ref);



implementation __pool_dec_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} __pool_dec_loop_$bb7();
    return;

  exit:
    return;
}



procedure __pool_dec_loop_$bb7();



implementation __pool_dec_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} __pool_dec_loop_$bb3();
    return;

  exit:
    return;
}



procedure __pool_dec_loop_$bb3();



implementation __pool_table_remove_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} __pool_table_remove_loop_$bb3();
    return;

  exit:
    return;
}



procedure __pool_table_remove_loop_$bb3();



implementation dm_pool_metadata_close_loop_$bb4(in_$i13: i64, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$p24: ref, in_$p25: ref, in_$i23: i32, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$i33: i32) returns (out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$p24: ref, out_$p25: ref, out_$i23: i32, out_$p27: ref, out_$p28: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$i33: i32)
{

  entry:
    out_$p19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$i23, out_$p27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p16, out_$i17, out_$p18, out_$i33 := in_$p19, in_$i20, in_$i21, in_$i22, in_$p24, in_$p25, in_$i23, in_$p27, in_$p28, in_$p30, in_$i31, in_$i32, in_$p16, in_$i17, in_$p18, in_$i33;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1810;

  $bb9:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$p16, out_$i17, out_$p18 := out_$p28, out_$i23, out_$p16;
    goto $bb9_dummy;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i23;
    assume true;
    goto $bb9;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, in_$i13);
    goto corral_source_split_1830;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_1829;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p16, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1828;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    goto corral_source_split_1827;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_1826;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1825;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1824;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} kfree(out_$p25);
    assume {:verifier.code 0} true;
    out_$i23 := out_$i17;
    goto $bb8;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i22;
    goto $bb8;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i17, 1);
    call {:si_unique_call 451} {:cexpr "open_devices"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_1817;

  $bb6:
    assume out_$i21 == 1;
    goto corral_source_split_1816;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i20, 0);
    goto corral_source_split_1814;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_1813;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_1812;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_1822;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} list_del(out_$p24);
    goto corral_source_split_1821;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p18, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1820;

  $bb7:
    assume !(out_$i21 == 1);
    goto corral_source_split_1819;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$i23, out_$p27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p16, out_$i17, out_$p18, out_$i33 := dm_pool_metadata_close_loop_$bb4(in_$i13, out_$p19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$i23, out_$p27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p16, out_$i17, out_$p18, out_$i33);
    return;

  exit:
    return;
}



procedure dm_pool_metadata_close_loop_$bb4(in_$i13: i64, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$p24: ref, in_$p25: ref, in_$i23: i32, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$i33: i32) returns (out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$p24: ref, out_$p25: ref, out_$i23: i32, out_$p27: ref, out_$p28: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$i33: i32);



implementation process_prepared_loop_$bb4(in_$p2: ref, in_$i17: i64, in_$p21: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p19: ref, in_$p20: ref, in_vslice_dummy_var_87: ref) returns (out_$p21: ref, out_$p24: ref, out_$p25: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p19: ref, out_$p20: ref, out_vslice_dummy_var_87: ref)
{

  entry:
    out_$p21, out_$p24, out_$p25, out_$p27, out_$i28, out_$i29, out_$p19, out_$p20, out_vslice_dummy_var_87 := in_$p21, in_$p24, in_$p25, in_$p27, in_$i28, in_$i29, in_$p19, in_$p20, in_vslice_dummy_var_87;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2061;

  $bb6:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$p19, out_$p20 := out_$p25, out_$p19;
    goto $bb6_dummy;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, in_$i17);
    goto corral_source_split_2069;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_2068;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p19, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2067;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    goto corral_source_split_2066;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_2065;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2064;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, in_$p2);
    call {:si_unique_call 496} out_vslice_dummy_var_87 := devirtbounce.4(out_$p21, out_$p20);
    goto corral_source_split_2063;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p21, out_$p24, out_$p25, out_$p27, out_$i28, out_$i29, out_$p19, out_$p20, out_vslice_dummy_var_87 := process_prepared_loop_$bb4(in_$p2, in_$i17, out_$p21, out_$p24, out_$p25, out_$p27, out_$i28, out_$i29, out_$p19, out_$p20, out_vslice_dummy_var_87);
    return;

  exit:
    return;
}



procedure process_prepared_loop_$bb4(in_$p2: ref, in_$i17: i64, in_$p21: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p19: ref, in_$p20: ref, in_vslice_dummy_var_87: ref) returns (out_$p21: ref, out_$p24: ref, out_$p25: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p19: ref, out_$p20: ref, out_vslice_dummy_var_87: ref);



implementation process_deferred_bios_loop_$bb36(in_$p1: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p40: ref) returns (out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p40: ref)
{

  entry:
    out_$p41, out_$i42, out_$i43, out_$p40 := in_$p41, in_$i42, in_$i43, in_$p40;
    goto $bb36, exit;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_2151;

  $bb38:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$p40 := out_$p41;
    goto $bb38_dummy;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_2156;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_2155;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} out_$p41 := bio_list_pop(in_$p1);
    goto corral_source_split_2154;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} generic_make_request(out_$p40);
    goto corral_source_split_2153;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p41, out_$i42, out_$i43, out_$p40 := process_deferred_bios_loop_$bb36(in_$p1, out_$p41, out_$i42, out_$i43, out_$p40);
    return;

  exit:
    return;
}



procedure process_deferred_bios_loop_$bb36(in_$p1: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p40: ref) returns (out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p40: ref);
  modifies $M.0;



implementation process_deferred_bios_loop_$bb27(in_$p1: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p31: ref) returns (out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p31: ref)
{

  entry:
    out_$p32, out_$i33, out_$i34, out_$p31 := in_$p32, in_$i33, in_$i34, in_$p31;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2133;

  $bb29:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$p31 := out_$p32;
    goto $bb29_dummy;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, 0);
    goto corral_source_split_2138;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_2137;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} out_$p32 := bio_list_pop(in_$p1);
    goto corral_source_split_2136;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} bio_endio(out_$p31, $sub.i32(0, 5));
    goto corral_source_split_2135;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p32, out_$i33, out_$i34, out_$p31 := process_deferred_bios_loop_$bb27(in_$p1, out_$p32, out_$i33, out_$i34, out_$p31);
    return;

  exit:
    return;
}



procedure process_deferred_bios_loop_$bb27(in_$p1: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p31: ref) returns (out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p31: ref);
  modifies $M.0;



implementation process_deferred_bios_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p5: ref) returns (out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p5: ref)
{

  entry:
    out_$p6, out_$i7, out_$i8, out_$p5 := in_$p6, in_$i7, in_$i8, in_$p5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2080;

  $bb6:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$p5 := out_$p6;
    goto $bb6_dummy;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_2086;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64(out_$p6);
    goto corral_source_split_2085;

  SeqInstr_93:
    goto corral_source_split_2084;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} out_$p6 := get_next_thin(in_$p0, out_$p5);
    goto SeqInstr_92;

  SeqInstr_90:
    goto corral_source_split_2083;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} process_thin_deferred_bios(out_$p5);
    goto SeqInstr_89;

  SeqInstr_87:
    goto corral_source_split_2082;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} process_thin_deferred_cells(out_$p5);
    goto SeqInstr_86;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$i7, out_$i8, out_$p5 := process_deferred_bios_loop_$bb4(in_$p0, out_$p6, out_$i7, out_$i8, out_$p5);
    return;

  exit:
    return;
}



procedure process_deferred_bios_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p5: ref) returns (out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p5: ref);
  modifies $M.0, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation process_thin_deferred_cells_loop_$bb20(in_$p1: ref, in_$p3: ref, in_$i30: i32, in_$i34: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i33: i32) returns (out_$i34: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i33: i32)
{

  entry:
    out_$i34, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i33 := in_$i34, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$i33;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_2241;

  $bb22:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := out_$i39;
    goto $bb22_dummy;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    out_$i40 := $ult.i32(out_$i39, in_$i30);
    goto corral_source_split_2249;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i33, 1);
    call {:si_unique_call 551} {:cexpr "j"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_2248;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} list_add(out_$p38, in_$p1);
    goto corral_source_split_2247;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p37, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2246;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_2245;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 66576)), $mul.ref(1040, 1)), $mul.ref(out_$i34, 8));
    goto corral_source_split_2244;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i32.i64(out_$i33);
    goto corral_source_split_2243;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i34, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i33 := process_thin_deferred_cells_loop_$bb20(in_$p1, in_$p3, in_$i30, out_$i34, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i33);
    return;

  exit:
    return;
}



procedure process_thin_deferred_cells_loop_$bb20(in_$p1: ref, in_$p3: ref, in_$i30: i32, in_$i34: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i33: i32) returns (out_$i34: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i33: i32);



implementation process_thin_deferred_cells_loop_$bb13()
{

  entry:
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb13_dummy;

  $bb13_dummy:
    call {:si_unique_call 1} process_thin_deferred_cells_loop_$bb13();
    return;

  exit:
    return;
}



procedure process_thin_deferred_cells_loop_$bb13();



implementation process_thin_deferred_cells_loop_$bb9(in_$p0: ref, in_$p3: ref, in_$i13: i32, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$i24: i32, in_$i25: i64, in_$i26: i64, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i15: i32) returns (out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$i24: i32, out_$i25: i64, out_$i26: i64, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i15: i32)
{

  entry:
    out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i15 := in_$i16, in_$p18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$p52, in_$p53, in_$p54, in_$p55, in_$i56, in_$i57, in_$i15;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2217;

  $bb29:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := out_$i56;
    goto $bb29_dummy;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    out_$i57 := $ult.i32(out_$i56, in_$i13);
    goto corral_source_split_2276;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i32(out_$i15, 1);
    call {:si_unique_call 559} {:cexpr "i"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_2275;

  SeqInstr_111:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_108:
    goto corral_source_split_2270;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    call {:si_unique_call 557} devirtbounce.5(out_$p53, in_$p0, out_$p19);
    goto SeqInstr_107;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p3, $mul.ref(0, 66576)), $mul.ref(1016, 1));
    goto corral_source_split_2269;

  $bb26:
    assume out_$i51 == 1;
    goto corral_source_split_2268;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i50, 0);
    goto corral_source_split_2266;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    out_$i50 := $and.i64(out_$i49, 128);
    goto corral_source_split_2265;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i64($M.0, out_$p48);
    goto corral_source_split_2264;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p47, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_2263;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_2262;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p19, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2261;

  $bb16:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    out_$i30, out_$i31 := in_$i13, out_$i15;
    assume true;
    goto $bb16;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_2234;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} out_$i28 := ensure_next_mapping(in_$p3);
    call {:si_unique_call 549} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_2233;

  $bb12:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i26, 0);
    goto corral_source_split_2229;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} out_$i26 := ldv__builtin_expect(out_$i25, 0);
    call {:si_unique_call 546} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_2228;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    goto corral_source_split_2227;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i32(out_$i23);
    goto corral_source_split_2226;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i64(out_$i22, 0);
    goto corral_source_split_2225;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_2224;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_2223;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2222;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_2221;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 66576)), $mul.ref(1040, 1)), $mul.ref(out_$i16, 8));
    goto corral_source_split_2220;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i32.i64(out_$i15);
    goto corral_source_split_2219;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.0, out_$p54);
    call {:si_unique_call 558} devirtbounce.5(out_$p55, in_$p0, out_$p19);
    goto SeqInstr_110;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p3, $mul.ref(0, 66576)), $mul.ref(1008, 1));
    goto corral_source_split_2273;

  $bb27:
    assume !(out_$i51 == 1);
    goto corral_source_split_2272;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i15 := process_thin_deferred_cells_loop_$bb9(in_$p0, in_$p3, in_$i13, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i15);
    return;

  exit:
    return;
}



procedure process_thin_deferred_cells_loop_$bb9(in_$p0: ref, in_$p3: ref, in_$i13: i32, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$i24: i32, in_$i25: i64, in_$i26: i64, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i15: i32) returns (out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$i24: i32, out_$i25: i64, out_$i26: i64, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i15: i32);
  modifies $M.0, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation process_thin_deferred_cells_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$i24: i32, in_$i25: i64, in_$i26: i64, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i15: i32, in_$i58: i32, in_$i59: i1) returns (out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$i24: i32, out_$i25: i64, out_$i26: i64, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i15: i32, out_$i58: i32, out_$i59: i1)
{

  entry:
    out_$p11, out_$p12, out_$i13, out_$i14, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i15, out_$i58, out_$i59 := in_$p11, in_$p12, in_$i13, in_$i14, in_$i16, in_$p18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$p52, in_$p53, in_$p54, in_$p55, in_$i56, in_$i57, in_$i15, in_$i58, in_$i59;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_2210;

  $bb32:
    assume {:verifier.code 0} true;
    assume out_$i59 == 1;
    goto $bb32_dummy;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i58, 0);
    goto corral_source_split_2281;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} out_$i58 := list_empty(in_$p1);
    call {:si_unique_call 561} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_2280;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i14 == 1);
    goto $bb8;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb30:
    assume !(out_$i57 == 1);
    goto corral_source_split_2278;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    out_$i57 := $ult.i32(out_$i56, out_$i13);
    goto corral_source_split_2276;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i32(out_$i15, 1);
    call {:si_unique_call 559} {:cexpr "i"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_2275;

  SeqInstr_111:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_108:
    goto corral_source_split_2270;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    call {:si_unique_call 557} devirtbounce.5(out_$p53, in_$p0, out_$p19);
    goto SeqInstr_107;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p3, $mul.ref(0, 66576)), $mul.ref(1016, 1));
    goto corral_source_split_2269;

  $bb26:
    assume out_$i51 == 1;
    goto corral_source_split_2268;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i50, 0);
    goto corral_source_split_2266;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    out_$i50 := $and.i64(out_$i49, 128);
    goto corral_source_split_2265;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i64($M.0, out_$p48);
    goto corral_source_split_2264;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p47, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_2263;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_2262;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p19, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2261;

  $bb16:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    out_$i30, out_$i31 := out_$i13, out_$i15;
    assume true;
    goto $bb16;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_2234;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} out_$i28 := ensure_next_mapping(in_$p3);
    call {:si_unique_call 549} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_2233;

  $bb12:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i26, 0);
    goto corral_source_split_2229;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} out_$i26 := ldv__builtin_expect(out_$i25, 0);
    call {:si_unique_call 546} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_2228;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    goto corral_source_split_2227;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i32(out_$i23);
    goto corral_source_split_2226;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i64(out_$i22, 0);
    goto corral_source_split_2225;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_2224;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_2223;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2222;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_2221;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 66576)), $mul.ref(1040, 1)), $mul.ref(out_$i16, 8));
    goto corral_source_split_2220;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i32.i64(out_$i15);
    goto corral_source_split_2219;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i15 := process_thin_deferred_cells_loop_$bb9(in_$p0, in_$p3, out_$i13, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i15);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2217;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    out_$i15 := 0;
    goto $bb9;

  $bb29:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := out_$i56;
    assume false;
    return;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_2215;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    out_$i14 := $ult.i32(0, out_$i13);
    goto corral_source_split_2213;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} out_$i13 := sort_cells(out_$p12, in_$p1);
    call {:si_unique_call 544} {:cexpr "count"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_2212;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_2211;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.0, out_$p54);
    call {:si_unique_call 558} devirtbounce.5(out_$p55, in_$p0, out_$p19);
    goto SeqInstr_110;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p3, $mul.ref(0, 66576)), $mul.ref(1008, 1));
    goto corral_source_split_2273;

  $bb27:
    assume !(out_$i51 == 1);
    goto corral_source_split_2272;

  $bb32_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$i13, out_$i14, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i15, out_$i58, out_$i59 := process_thin_deferred_cells_loop_$bb5(in_$p0, in_$p1, in_$p3, out_$p11, out_$p12, out_$i13, out_$i14, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i15, out_$i58, out_$i59);
    return;

  exit:
    return;
}



procedure process_thin_deferred_cells_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$i24: i32, in_$i25: i64, in_$i26: i64, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i15: i32, in_$i58: i32, in_$i59: i1) returns (out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$i24: i32, out_$i25: i64, out_$i26: i64, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i15: i32, out_$i58: i32, out_$i59: i1);
  modifies $M.0, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation process_thin_deferred_bios_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$p33: ref, in_$i34: i64, in_$i35: i64, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p22: ref, in_$i23: i32) returns (out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$p33: ref, out_$i34: i64, out_$i35: i64, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p22: ref, out_$i23: i32)
{

  entry:
    out_$i24, out_$i25, out_$p26, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p22, out_$i23 := in_$i24, in_$i25, in_$p26, in_$p33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$p39, in_$p40, in_$i41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$p22, in_$i23;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2320;

  $bb23:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$p22, out_$i23 := out_$p47, out_$i41;
    goto $bb23_dummy;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i64(out_$i48, 0);
    goto corral_source_split_2363;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_2362;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} out_$p47 := bio_list_pop(in_$p1);
    goto corral_source_split_2361;

  $bb21:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} dm_pool_issue_prefetches(out_$p46);
    goto corral_source_split_2359;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_2358;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p4, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_2357;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} throttle_work_update(out_$p44);
    goto corral_source_split_2356;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p4, $mul.ref(0, 66576)), $mul.ref(104, 1));
    goto corral_source_split_2355;

  $bb20:
    assume out_$i43 == 1;
    goto corral_source_split_2354;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 0);
    goto corral_source_split_2352;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i32(out_$i23, 127);
    goto corral_source_split_2351;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i23, 1);
    call {:si_unique_call 589} {:cexpr "count"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_2350;

  SeqInstr_117:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_114:
    goto corral_source_split_2345;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    call {:si_unique_call 587} devirtbounce.6(out_$p38, in_$p0, out_$p22);
    goto SeqInstr_113;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p4, $mul.ref(0, 66576)), $mul.ref(1000, 1));
    goto corral_source_split_2344;

  $bb17:
    assume out_$i36 == 1;
    goto corral_source_split_2343;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i64(out_$i35, 0);
    goto corral_source_split_2341;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    out_$i35 := $and.i64(out_$i34, 128);
    goto corral_source_split_2340;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i64($M.0, out_$p33);
    goto corral_source_split_2339;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p22, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_2338;

  $bb14:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p22;
    assume true;
    goto $bb14;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_2323;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} out_$i24 := ensure_next_mapping(in_$p4);
    call {:si_unique_call 579} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_2322;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    call {:si_unique_call 588} devirtbounce.6(out_$p40, in_$p0, out_$p22);
    goto SeqInstr_116;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p4, $mul.ref(0, 66576)), $mul.ref(992, 1));
    goto corral_source_split_2348;

  $bb18:
    assume !(out_$i36 == 1);
    goto corral_source_split_2347;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i24, out_$i25, out_$p26, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p22, out_$i23 := process_thin_deferred_bios_loop_$bb11(in_$p0, in_$p1, in_$p4, out_$i24, out_$i25, out_$p26, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p22, out_$i23);
    return;

  exit:
    return;
}



procedure process_thin_deferred_bios_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$p33: ref, in_$i34: i64, in_$i35: i64, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p22: ref, in_$i23: i32) returns (out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$p33: ref, out_$i34: i64, out_$i35: i64, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p22: ref, out_$i23: i32);
  modifies $M.0, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation dm_pool_changed_this_transaction_loop_$bb4(in_$i13: i64, in_$p17: ref, in_$i18: i8, in_$i19: i1, in_$p20: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p15: ref, in_$p16: ref) returns (out_$p17: ref, out_$i18: i8, out_$i19: i1, out_$p20: ref, out_$p27: ref, out_$p28: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p15: ref, out_$p16: ref)
{

  entry:
    out_$p17, out_$i18, out_$i19, out_$p20, out_$p27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p15, out_$p16 := in_$p17, in_$i18, in_$i19, in_$p20, in_$p27, in_$p28, in_$p30, in_$i31, in_$i32, in_$p15, in_$p16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2422;

  $bb10:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$p15, out_$p16 := out_$p28, out_$p15;
    goto $bb10_dummy;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, in_$i13);
    goto corral_source_split_2444;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_2443;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p15, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2442;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    goto corral_source_split_2441;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_2440;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2439;

  $bb7:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    out_$p20 := out_$p16;
    assume true;
    goto $bb7;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i8.i1(out_$i18);
    goto corral_source_split_2426;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i8($M.0, out_$p17);
    goto corral_source_split_2425;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_2424;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p17, out_$i18, out_$i19, out_$p20, out_$p27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p15, out_$p16 := dm_pool_changed_this_transaction_loop_$bb4(in_$i13, out_$p17, out_$i18, out_$i19, out_$p20, out_$p27, out_$p28, out_$p30, out_$i31, out_$i32, out_$p15, out_$p16);
    return;

  exit:
    return;
}



procedure dm_pool_changed_this_transaction_loop_$bb4(in_$i13: i64, in_$p17: ref, in_$i18: i8, in_$i19: i1, in_$p20: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p15: ref, in_$p16: ref) returns (out_$p17: ref, out_$i18: i8, out_$i19: i1, out_$p20: ref, out_$p27: ref, out_$p28: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p15: ref, out_$p16: ref);



implementation error_retry_list_loop_$bb4(in_$p3: ref, in_$p4: ref, in_$i18: i64, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p20: ref) returns (out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p20: ref)
{

  entry:
    out_$p21, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p20 := in_$p21, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$i30, in_$p31, in_$p32, in_$i33, in_$i34, in_$p20;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2778;

  $bb6:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$p20 := out_$p29;
    goto $bb6_dummy;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, in_$i18);
    goto corral_source_split_2795;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_2794;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_2793;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_2792;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} out_$i30 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 685} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_2791;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.24, out_$p28);
    goto corral_source_split_2790;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_2789;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} __read_once_size(out_$p25, out_$p27, 8);
    goto corral_source_split_2788;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_2787;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_2786;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_2785;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, in_$p3, out_$p24);
    goto corral_source_split_2784;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_2783;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p20, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2782;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} error_thin_bio_list(out_$p20, out_$p21, $sub.i32(0, 5));
    goto corral_source_split_2781;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 312)), $mul.ref(184, 1));
    goto corral_source_split_2780;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p21, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p20 := error_retry_list_loop_$bb4(in_$p3, in_$p4, in_$i18, out_$p21, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p20);
    return;

  exit:
    return;
}



procedure error_retry_list_loop_$bb4(in_$p3: ref, in_$p4: ref, in_$i18: i64, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p20: ref) returns (out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p20: ref);
  modifies $M.0, $CurrAddr;



implementation inc_remap_and_issue_cell_loop_$bb12(in_$i2: i64, in_$p3: ref, in_$p18: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p22: ref) returns (out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p22: ref)
{

  entry:
    out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p22 := in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$p22;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3149;

  $bb14:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$p22 := out_$p25;
    goto $bb14_dummy;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i26, 0);
    goto corral_source_split_3156;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_3155;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} out_$p25 := bio_list_pop(in_$p18);
    goto corral_source_split_3154;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} remap_and_issue(out_$p24, out_$p22, in_$i2);
    goto corral_source_split_3153;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_3152;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3151;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p22 := inc_remap_and_issue_cell_loop_$bb12(in_$i2, in_$p3, in_$p18, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p22);
    return;

  exit:
    return;
}



procedure inc_remap_and_issue_cell_loop_$bb12(in_$i2: i64, in_$p3: ref, in_$p18: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p22: ref) returns (out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p22: ref);
  modifies $M.0;



implementation inc_remap_and_issue_cell_loop_$bb4(in_$p0: ref, in_$p10: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p14: ref) returns (out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p14: ref)
{

  entry:
    out_$p15, out_$i16, out_$i17, out_$p14 := in_$p15, in_$i16, in_$i17, in_$p14;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3133;

  $bb6:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$p14 := out_$p15;
    goto $bb6_dummy;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i64(out_$i16, 0);
    goto corral_source_split_3138;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_3137;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} out_$p15 := bio_list_pop(in_$p10);
    goto corral_source_split_3136;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} thin_defer_bio(in_$p0, out_$p14);
    goto corral_source_split_3135;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p15, out_$i16, out_$i17, out_$p14 := inc_remap_and_issue_cell_loop_$bb4(in_$p0, in_$p10, out_$p15, out_$i16, out_$i17, out_$p14);
    return;

  exit:
    return;
}



procedure inc_remap_and_issue_cell_loop_$bb4(in_$p0: ref, in_$p10: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p14: ref) returns (out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p14: ref);
  modifies $M.0, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation retry_bios_on_resume_loop_$bb8(in_$p2: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$p8: ref) returns (out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$p8: ref)
{

  entry:
    out_$p9, out_$i10, out_$i11, out_$p8 := in_$p9, in_$i10, in_$i11, in_$p8;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3376;

  $bb10:
    assume out_$i11 == 1;
    assume {:verifier.code 0} true;
    out_$p8 := out_$p9;
    goto $bb10_dummy;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i64(out_$i10, 0);
    goto corral_source_split_3381;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(out_$p9);
    goto corral_source_split_3380;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} out_$p9 := bio_list_pop(in_$p2);
    goto corral_source_split_3379;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} retry_on_resume(out_$p8);
    goto corral_source_split_3378;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p9, out_$i10, out_$i11, out_$p8 := retry_bios_on_resume_loop_$bb8(in_$p2, out_$p9, out_$i10, out_$i11, out_$p8);
    return;

  exit:
    return;
}



procedure retry_bios_on_resume_loop_$bb8(in_$p2: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$p8: ref) returns (out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$p8: ref);
  modifies $M.0;



implementation get_next_mapping_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} get_next_mapping_loop_$bb3();
    return;

  exit:
    return;
}



procedure get_next_mapping_loop_$bb3();



implementation __inc_remap_and_issue_cell_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p7: ref) returns (out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p7: ref)
{

  entry:
    out_$p8, out_$i9, out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p7 := in_$p8, in_$i9, in_$i10, in_$i11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$p7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3823;

  $bb9:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$p7 := out_$p18;
    goto $bb9_dummy;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, 0);
    goto corral_source_split_3844;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_3843;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} out_$p18 := bio_list_pop(in_$p3);
    goto corral_source_split_3842;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} bio_list_add(out_$p17, out_$p7);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} bio_list_add(out_$p12, out_$p7);
    goto corral_source_split_3832;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3831;

  $bb6:
    assume out_$i11 == 1;
    goto corral_source_split_3830;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i64(out_$i10, 0);
    goto corral_source_split_3828;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    out_$i10 := $and.i64(out_$i9, 12416);
    goto corral_source_split_3827;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i64($M.0, out_$p8);
    goto corral_source_split_3826;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p7, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_3825;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3840;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} inc_all_io_entry(out_$p16, out_$p7);
    goto corral_source_split_3839;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_3838;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3837;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_3836;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3835;

  $bb7:
    assume !(out_$i11 == 1);
    goto corral_source_split_3834;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p7 := __inc_remap_and_issue_cell_loop_$bb4(in_$p2, in_$p3, out_$p8, out_$i9, out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p7);
    return;

  exit:
    return;
}



procedure __inc_remap_and_issue_cell_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p7: ref) returns (out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p7: ref);
  modifies $M.0;



implementation remap_and_issue_shared_cell_loop_$bb12(in_$p0: ref, in_$i2: i64, in_$p18: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p22: ref) returns (out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p22: ref)
{

  entry:
    out_$p23, out_$i24, out_$i25, out_$p22 := in_$p23, in_$i24, in_$i25, in_$p22;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3913;

  $bb14:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$p22 := out_$p23;
    goto $bb14_dummy;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_3918;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_3917;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} out_$p23 := bio_list_pop(in_$p18);
    goto corral_source_split_3916;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} remap_and_issue(in_$p0, out_$p22, in_$i2);
    goto corral_source_split_3915;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p23, out_$i24, out_$i25, out_$p22 := remap_and_issue_shared_cell_loop_$bb12(in_$p0, in_$i2, in_$p18, out_$p23, out_$i24, out_$i25, out_$p22);
    return;

  exit:
    return;
}



procedure remap_and_issue_shared_cell_loop_$bb12(in_$p0: ref, in_$i2: i64, in_$p18: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p22: ref) returns (out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p22: ref);
  modifies $M.0;



implementation remap_and_issue_shared_cell_loop_$bb4(in_$p0: ref, in_$p10: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p14: ref) returns (out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p14: ref)
{

  entry:
    out_$p15, out_$i16, out_$i17, out_$p14 := in_$p15, in_$i16, in_$i17, in_$p14;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3897;

  $bb6:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$p14 := out_$p15;
    goto $bb6_dummy;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i64(out_$i16, 0);
    goto corral_source_split_3902;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_3901;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} out_$p15 := bio_list_pop(in_$p10);
    goto corral_source_split_3900;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} thin_defer_bio(in_$p0, out_$p14);
    goto corral_source_split_3899;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p15, out_$i16, out_$i17, out_$p14 := remap_and_issue_shared_cell_loop_$bb4(in_$p0, in_$p10, out_$p15, out_$i16, out_$i17, out_$p14);
    return;

  exit:
    return;
}



procedure remap_and_issue_shared_cell_loop_$bb4(in_$p0: ref, in_$p10: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p14: ref) returns (out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p14: ref);
  modifies $M.0, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation __remap_and_issue_shared_cell_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p8: ref, in_$i9: i64, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$i14: i64, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p7: ref) returns (out_$p8: ref, out_$i9: i64, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$i14: i64, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p7: ref)
{

  entry:
    out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p7 := in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$p13, in_$i14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3931;

  $bb12:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$p7 := out_$p33;
    goto $bb12_dummy;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_3969;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_3968;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} out_$p33 := bio_list_pop(in_$p3);
    goto corral_source_split_3967;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} bio_list_add(out_$p32, out_$p7);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} bio_list_add(out_$p17, out_$p7);
    goto corral_source_split_3940;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3939;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i16 == 1;
    goto $bb7;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i12 == 1;
    goto $bb7;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i32(out_$i11, 0);
    goto corral_source_split_3937;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    out_$i11 := $and.i32(out_$i10, 1);
    goto corral_source_split_3936;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    out_$i10 := $trunc.i64.i32(out_$i9);
    goto corral_source_split_3935;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i64($M.0, out_$p8);
    goto corral_source_split_3934;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p7, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_3933;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_3946;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    out_$i15 := $and.i64(out_$i14, 12416);
    goto corral_source_split_3945;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i64($M.0, out_$p13);
    goto corral_source_split_3944;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p7, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_3943;

  $bb8:
    assume !(out_$i12 == 1);
    goto corral_source_split_3942;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3965;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} inc_all_io_entry(out_$p31, out_$p7);
    goto corral_source_split_3964;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_3963;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p29, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3962;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_3961;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3960;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p27, out_$p26);
    goto corral_source_split_3959;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p19, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_3958;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} out_$p26 := dm_deferred_entry_inc(out_$p25);
    goto corral_source_split_3957;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_3956;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 66576)), $mul.ref(960, 1));
    goto corral_source_split_3955;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_3954;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3953;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_3952;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3951;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_3950;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} out_$p18 := dm_per_bio_data(out_$p7, 64);
    goto corral_source_split_3949;

  $bb10:
    assume !(out_$i16 == 1);
    goto corral_source_split_3948;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p7 := __remap_and_issue_shared_cell_loop_$bb4(in_$p2, in_$p3, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p7);
    return;

  exit:
    return;
}



procedure __remap_and_issue_shared_cell_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p8: ref, in_$i9: i64, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$i14: i64, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p7: ref) returns (out_$p8: ref, out_$i9: i64, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$i14: i64, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p7: ref);
  modifies $M.0;



implementation passdown_double_checking_shared_status_loop_$bb29(in_$p1: ref, in_$p5: ref, in_$i15: i64, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i8, in_$i45: i1, in_$i46: i64, in_$i48: i64, in_$i49: i1, in_$i38: i64, in_$i50: i64) returns (out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i8, out_$i45: i1, out_$i46: i64, out_$i48: i64, out_$i49: i1, out_$i38: i64, out_$i50: i64)
{

  entry:
    out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i38, out_$i50 := in_$p39, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i48, in_$i49, in_$i38, in_$i50;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_4284;

  $bb38:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := out_$i48;
    goto $bb38_dummy;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i48;
    assume true;
    goto $bb38;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i64(out_$i48, in_$i15);
    goto corral_source_split_4305;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i64(out_$i38, 1);
    call {:si_unique_call 1082} {:cexpr "e"} boogie_si_record_i64(out_$i48);
    goto corral_source_split_4304;

  $bb35:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i38;
    assume true;
    goto $bb35;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    out_$i45 := $trunc.i8.i1(out_$i44);
    goto corral_source_split_4294;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i8($M.45, in_$p1);
    goto corral_source_split_4293;

  $bb32:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i41;
    assume true;
    goto $bb32;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_4289;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} out_$i41 := dm_pool_block_is_used(out_$p40, out_$i38, in_$p1);
    call {:si_unique_call 1079} {:cexpr "r"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_4288;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_4287;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p5, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_4286;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i38, out_$i50 := passdown_double_checking_shared_status_loop_$bb29(in_$p1, in_$p5, in_$i15, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i38, out_$i50);
    return;

  exit:
    return;
}



procedure passdown_double_checking_shared_status_loop_$bb29(in_$p1: ref, in_$p5: ref, in_$i15: i64, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i8, in_$i45: i1, in_$i46: i64, in_$i48: i64, in_$i49: i1, in_$i38: i64, in_$i50: i64) returns (out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i8, out_$i45: i1, out_$i46: i64, out_$i48: i64, out_$i49: i1, out_$i38: i64, out_$i50: i64);
  modifies $M.45, $CurrAddr;



implementation passdown_double_checking_shared_status_loop_$bb9(in_$p1: ref, in_$p5: ref, in_$i15: i64, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i27: i8, in_$i28: i1, in_$i29: i64, in_$i31: i64, in_$i32: i1, in_$i20: i64, in_$i33: i64) returns (out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i27: i8, out_$i28: i1, out_$i29: i64, out_$i31: i64, out_$i32: i1, out_$i20: i64, out_$i33: i64)
{

  entry:
    out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i27, out_$i28, out_$i29, out_$i31, out_$i32, out_$i20, out_$i33 := in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i27, in_$i28, in_$i29, in_$i31, in_$i32, in_$i20, in_$i33;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4253;

  $bb19:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := out_$i31;
    goto $bb19_dummy;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i31;
    assume true;
    goto $bb19;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    out_$i32 := $ult.i64(out_$i31, in_$i15);
    goto corral_source_split_4273;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i64(out_$i20, 1);
    call {:si_unique_call 1076} {:cexpr "b"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_4272;

  $bb15:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i20;
    assume true;
    goto $bb15;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    out_$i28 := $trunc.i8.i1(out_$i27);
    goto corral_source_split_4265;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i8($M.45, in_$p1);
    goto corral_source_split_4264;

  $bb12:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i23;
    assume true;
    goto $bb12;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_4258;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} out_$i23 := dm_pool_block_is_used(out_$p22, out_$i20, in_$p1);
    call {:si_unique_call 1075} {:cexpr "r"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_4257;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_4256;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p5, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_4255;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i27, out_$i28, out_$i29, out_$i31, out_$i32, out_$i20, out_$i33 := passdown_double_checking_shared_status_loop_$bb9(in_$p1, in_$p5, in_$i15, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i27, out_$i28, out_$i29, out_$i31, out_$i32, out_$i20, out_$i33);
    return;

  exit:
    return;
}



procedure passdown_double_checking_shared_status_loop_$bb9(in_$p1: ref, in_$p5: ref, in_$i15: i64, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i27: i8, in_$i28: i1, in_$i29: i64, in_$i31: i64, in_$i32: i1, in_$i20: i64, in_$i33: i64) returns (out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i27: i8, out_$i28: i1, out_$i29: i64, out_$i31: i64, out_$i32: i1, out_$i20: i64, out_$i33: i64);
  modifies $M.45, $CurrAddr;



implementation passdown_double_checking_shared_status_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$i15: i64, in_$i18: i1, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i27: i8, in_$i28: i1, in_$i29: i64, in_$i31: i64, in_$i32: i1, in_$i20: i64, in_$i33: i64, in_$i19: i64, in_$i30: i64, in_$i34: i1, in_$i35: i64, in_$i36: i1, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i8, in_$i45: i1, in_$i46: i64, in_$i48: i64, in_$i49: i1, in_$i38: i64, in_$i50: i64, in_$i37: i64, in_$i47: i64, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$i56: i1, in_$i17: i64) returns (out_$i18: i1, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i27: i8, out_$i28: i1, out_$i29: i64, out_$i31: i64, out_$i32: i1, out_$i20: i64, out_$i33: i64, out_$i19: i64, out_$i30: i64, out_$i34: i1, out_$i35: i64, out_$i36: i1, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i8, out_$i45: i1, out_$i46: i64, out_$i48: i64, out_$i49: i1, out_$i38: i64, out_$i50: i64, out_$i37: i64, out_$i47: i64, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$i56: i1, out_$i17: i64)
{

  entry:
    out_$i18, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i27, out_$i28, out_$i29, out_$i31, out_$i32, out_$i20, out_$i33, out_$i19, out_$i30, out_$i34, out_$i35, out_$i36, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i38, out_$i50, out_$i37, out_$i47, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i17 := in_$i18, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i27, in_$i28, in_$i29, in_$i31, in_$i32, in_$i20, in_$i33, in_$i19, in_$i30, in_$i34, in_$i35, in_$i36, in_$p39, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i48, in_$i49, in_$i38, in_$i50, in_$i37, in_$i47, in_$p51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i17;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4247;

  $bb44:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := out_$i47;
    goto $bb44_dummy;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i47, in_$i15);
    goto corral_source_split_4311;

  $bb42:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i53;
    assume true;
    goto $bb42;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i53, 0);
    goto corral_source_split_4302;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} out_$i53 := issue_discard(in_$p3, out_$i30, out_$i47, out_$p52);
    call {:si_unique_call 1081} {:cexpr "r"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_4301;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_4300;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_4299;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_4298;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i37;
    goto $bb36;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i46;
    goto $bb36;

  $bb34:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4296;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i38;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    out_$i45 := $trunc.i8.i1(out_$i44);
    goto corral_source_split_4294;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i8($M.45, in_$p1);
    goto corral_source_split_4293;

  $bb32:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i41;
    assume true;
    goto $bb32;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_4289;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} out_$i41 := dm_pool_block_is_used(out_$p40, out_$i38, in_$p1);
    call {:si_unique_call 1079} {:cexpr "r"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_4288;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_4287;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p5, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_4286;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb29:
    call out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i38, out_$i50 := passdown_double_checking_shared_status_loop_$bb29(in_$p1, in_$p5, in_$i15, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i38, out_$i50);
    goto $bb29_last;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4284;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i35;
    goto $bb29;

  $bb38:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := out_$i48;
    assume false;
    return;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i48;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i64(out_$i48, in_$i15);
    goto corral_source_split_4305;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i64(out_$i38, 1);
    call {:si_unique_call 1082} {:cexpr "e"} boogie_si_record_i64(out_$i48);
    goto corral_source_split_4304;

  $bb35:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb26:
    assume out_$i36 == 1;
    goto corral_source_split_4282;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    out_$i37 := out_$i35;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i64(out_$i35, in_$i15);
    goto corral_source_split_4280;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i64(out_$i30, 1);
    call {:si_unique_call 1077} {:cexpr "e"} boogie_si_record_i64(out_$i35);
    goto corral_source_split_4279;

  $bb23:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i64(out_$i30, in_$i15);
    goto corral_source_split_4270;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4269;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i19;
    goto $bb17;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i29;
    goto $bb17;

  $bb16:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4267;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i20;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    out_$i28 := $trunc.i8.i1(out_$i27);
    goto corral_source_split_4265;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i8($M.45, in_$p1);
    goto corral_source_split_4264;

  $bb12:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i23;
    assume true;
    goto $bb12;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_4258;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} out_$i23 := dm_pool_block_is_used(out_$p22, out_$i20, in_$p1);
    call {:si_unique_call 1075} {:cexpr "r"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_4257;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_4256;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p5, $mul.ref(0, 66576)), $mul.ref(40, 1));
    goto corral_source_split_4255;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i27, out_$i28, out_$i29, out_$i31, out_$i32, out_$i20, out_$i33 := passdown_double_checking_shared_status_loop_$bb9(in_$p1, in_$p5, in_$i15, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i27, out_$i28, out_$i29, out_$i31, out_$i32, out_$i20, out_$i33);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4253;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i17;
    goto $bb9;

  $bb19:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := out_$i31;
    assume false;
    return;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i31;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    out_$i32 := $ult.i64(out_$i31, in_$i15);
    goto corral_source_split_4273;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i64(out_$i20, 1);
    call {:si_unique_call 1076} {:cexpr "b"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_4272;

  $bb15:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb6:
    assume out_$i18 == 1;
    goto corral_source_split_4251;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i17;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i18 := $ult.i64(out_$i17, in_$i15);
    goto corral_source_split_4249;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb8;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i33;
    goto $bb8;

  $bb20:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4275;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb28;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    out_$i37 := out_$i50;
    goto $bb28;

  $bb39:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4307;

  $bb44_dummy:
    call {:si_unique_call 1} out_$i18, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i27, out_$i28, out_$i29, out_$i31, out_$i32, out_$i20, out_$i33, out_$i19, out_$i30, out_$i34, out_$i35, out_$i36, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i38, out_$i50, out_$i37, out_$i47, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i17 := passdown_double_checking_shared_status_loop_$bb4(in_$p0, in_$p1, in_$p3, in_$p5, in_$i15, out_$i18, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i27, out_$i28, out_$i29, out_$i31, out_$i32, out_$i20, out_$i33, out_$i19, out_$i30, out_$i34, out_$i35, out_$i36, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i38, out_$i50, out_$i37, out_$i47, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i17);
    return;

  exit:
    return;
}



procedure passdown_double_checking_shared_status_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$i15: i64, in_$i18: i1, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i27: i8, in_$i28: i1, in_$i29: i64, in_$i31: i64, in_$i32: i1, in_$i20: i64, in_$i33: i64, in_$i19: i64, in_$i30: i64, in_$i34: i1, in_$i35: i64, in_$i36: i1, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i8, in_$i45: i1, in_$i46: i64, in_$i48: i64, in_$i49: i1, in_$i38: i64, in_$i50: i64, in_$i37: i64, in_$i47: i64, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$i56: i1, in_$i17: i64) returns (out_$i18: i1, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i27: i8, out_$i28: i1, out_$i29: i64, out_$i31: i64, out_$i32: i1, out_$i20: i64, out_$i33: i64, out_$i19: i64, out_$i30: i64, out_$i34: i1, out_$i35: i64, out_$i36: i1, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i8, out_$i45: i1, out_$i46: i64, out_$i48: i64, out_$i49: i1, out_$i38: i64, out_$i50: i64, out_$i37: i64, out_$i47: i64, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$i56: i1, out_$i17: i64);
  modifies $M.0, $CurrAddr, $M.45;



implementation __blkdev_issue_discard_async_loop_$bb29(in_$p0: ref, in_$i3: i32, in_$p5: ref, in_$i19: i32, in_$i22: i32, in_$i29: i32, in_$i45: i32, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$i53: i64, in_$i54: i1, in_$i55: i64, in_$i56: i32, in_$i57: i64, in_$i58: i64, in_$i59: i64, in_$i60: i1, in_$i61: i64, in_$i62: i64, in_$i63: i32, in_$i64: i1, in_$i65: i64, in_$i66: i64, in_$i67: i64, in_$i68: i64, in_$i69: i64, in_$i70: i64, in_$i71: i64, in_$i72: i64, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i32, in_$i77: i64, in_$i78: i32, in_$i79: i64, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$p85: ref, in_$i86: i64, in_$i87: i64, in_$i89: i1, in_$i47: i64, in_$i48: i64, in_vslice_dummy_var_100: i32) returns (out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$i53: i64, out_$i54: i1, out_$i55: i64, out_$i56: i32, out_$i57: i64, out_$i58: i64, out_$i59: i64, out_$i60: i1, out_$i61: i64, out_$i62: i64, out_$i63: i32, out_$i64: i1, out_$i65: i64, out_$i66: i64, out_$i67: i64, out_$i68: i64, out_$i69: i64, out_$i70: i64, out_$i71: i64, out_$i72: i64, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i76: i32, out_$i77: i64, out_$i78: i32, out_$i79: i64, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$p85: ref, out_$i86: i64, out_$i87: i64, out_$i89: i1, out_$i47: i64, out_$i48: i64, out_vslice_dummy_var_100: i32)
{

  entry:
    out_$p49, out_$i50, out_$i51, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p81, out_$p82, out_$i83, out_$p85, out_$i86, out_$i87, out_$i89, out_$i47, out_$i48, out_vslice_dummy_var_100 := in_$p49, in_$i50, in_$i51, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$p81, in_$p82, in_$i83, in_$p85, in_$i86, in_$i87, in_$i89, in_$i47, in_$i48, in_vslice_dummy_var_100;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4421;

  $bb44:
    assume out_$i89 == 1;
    assume {:verifier.code 0} true;
    out_$i47, out_$i48 := out_$i79, out_$i87;
    goto $bb44_dummy;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i64(out_$i87, 0);
    goto corral_source_split_4481;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} out_vslice_dummy_var_100 := _cond_resched();
    goto corral_source_split_4480;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} ___might_sleep(.str.30, 424, 0);
    goto corral_source_split_4479;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} submit_bio(in_$i45, out_$p49);
    goto corral_source_split_4478;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    out_$i87 := $sub.i64(out_$i48, out_$i86);
    call {:si_unique_call 1127} {:cexpr "nr_sects"} boogie_si_record_i64(out_$i87);
    goto corral_source_split_4477;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i32.i64(out_$i78);
    goto corral_source_split_4476;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p85, out_$i83);
    goto corral_source_split_4475;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref($add.ref(out_$p49, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_4474;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    out_$i83 := $shl.i32(out_$i78, 9);
    goto corral_source_split_4473;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p82, in_$p0);
    goto corral_source_split_4472;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p49, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_4471;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p81, out_$i47);
    goto corral_source_split_4470;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref(out_$p49, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_4469;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} bio_chain(out_$p49, in_$p5);
    goto corral_source_split_4468;

  $bb43:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4467;

  $bb39:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    out_$i78, out_$i79 := out_$i56, out_$i58;
    goto $bb43;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    out_$i78, out_$i79 := out_$i76, out_$i77;
    goto $bb43;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4465;

  $bb41:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    out_$i76, out_$i77 := out_$i56, out_$i58;
    goto $bb42;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    out_$i76, out_$i77 := out_$i75, out_$i72;
    goto $bb42;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    out_$i75 := $sub.i32(out_$i73, out_$i74);
    call {:si_unique_call 1125} {:cexpr "req_sects"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_4463;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    out_$i74 := $trunc.i64.i32(out_$i47);
    goto corral_source_split_4462;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    out_$i73 := $trunc.i64.i32(out_$i72);
    goto corral_source_split_4461;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i64(out_$i70, out_$i71);
    call {:si_unique_call 1124} {:cexpr "end_sect"} boogie_si_record_i64(out_$i72);
    goto corral_source_split_4460;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(in_$i22);
    goto corral_source_split_4459;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    out_$i70 := $mul.i64(out_$i69, out_$i68);
    goto corral_source_split_4458;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i32.i64(in_$i19);
    goto corral_source_split_4457;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    out_$i68 := $udiv.i64(out_$i66, out_$i67);
    call {:si_unique_call 1123} {:cexpr "end_sect"} boogie_si_record_i64(out_$i68);
    goto corral_source_split_4456;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i32.i64(in_$i19);
    goto corral_source_split_4455;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    out_$i66 := $sub.i64(out_$i58, out_$i65);
    call {:si_unique_call 1122} {:cexpr "end_sect"} boogie_si_record_i64(out_$i66);
    goto corral_source_split_4454;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(in_$i22);
    goto corral_source_split_4453;

  $bb40:
    assume out_$i64 == 1;
    goto corral_source_split_4452;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i32(out_$i63, in_$i22);
    goto corral_source_split_4450;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    out_$i63 := $trunc.i64.i32(out_$i62);
    call {:si_unique_call 1121} {:cexpr "_res___0"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_4449;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    out_$i62 := $urem.i64(out_$i58, out_$i61);
    goto corral_source_split_4448;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i32.i64(in_$i19);
    goto corral_source_split_4447;

  $bb38:
    assume out_$i60 == 1;
    goto corral_source_split_4446;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    out_$i60 := $ult.i64(out_$i59, out_$i48);
    goto corral_source_split_4444;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i32.i64(out_$i56);
    goto corral_source_split_4443;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i64(out_$i57, out_$i47);
    call {:si_unique_call 1120} {:cexpr "end_sect"} boogie_si_record_i64(out_$i58);
    goto corral_source_split_4442;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i32.i64(out_$i56);
    goto corral_source_split_4441;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    out_$i56 := $trunc.i64.i32(out_$i55);
    call {:si_unique_call 1119} {:cexpr "req_sects"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_4440;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_4439;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i53;
    goto $bb37;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i48;
    goto $bb37;

  $bb35:
    assume out_$i54 == 1;
    goto corral_source_split_4435;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    out_$i54 := $ult.i64(out_$i48, out_$i53);
    goto corral_source_split_4433;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i32.i64(in_$i29);
    call {:si_unique_call 1118} {:cexpr "__min2"} boogie_si_record_i64(out_$i53);
    goto corral_source_split_4432;

  $bb32:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i64(out_$i50, 0);
    goto corral_source_split_4425;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p49);
    goto corral_source_split_4424;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} out_$p49 := bio_alloc(in_$i3, 1);
    goto corral_source_split_4423;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb36:
    assume !(out_$i54 == 1);
    goto corral_source_split_4437;

  $bb44_dummy:
    call {:si_unique_call 1} out_$p49, out_$i50, out_$i51, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p81, out_$p82, out_$i83, out_$p85, out_$i86, out_$i87, out_$i89, out_$i47, out_$i48, out_vslice_dummy_var_100 := __blkdev_issue_discard_async_loop_$bb29(in_$p0, in_$i3, in_$p5, in_$i19, in_$i22, in_$i29, in_$i45, out_$p49, out_$i50, out_$i51, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p81, out_$p82, out_$i83, out_$p85, out_$i86, out_$i87, out_$i89, out_$i47, out_$i48, out_vslice_dummy_var_100);
    return;

  exit:
    return;
}



procedure __blkdev_issue_discard_async_loop_$bb29(in_$p0: ref, in_$i3: i32, in_$p5: ref, in_$i19: i32, in_$i22: i32, in_$i29: i32, in_$i45: i32, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$i53: i64, in_$i54: i1, in_$i55: i64, in_$i56: i32, in_$i57: i64, in_$i58: i64, in_$i59: i64, in_$i60: i1, in_$i61: i64, in_$i62: i64, in_$i63: i32, in_$i64: i1, in_$i65: i64, in_$i66: i64, in_$i67: i64, in_$i68: i64, in_$i69: i64, in_$i70: i64, in_$i71: i64, in_$i72: i64, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i32, in_$i77: i64, in_$i78: i32, in_$i79: i64, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$p85: ref, in_$i86: i64, in_$i87: i64, in_$i89: i1, in_$i47: i64, in_$i48: i64, in_vslice_dummy_var_100: i32) returns (out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$i53: i64, out_$i54: i1, out_$i55: i64, out_$i56: i32, out_$i57: i64, out_$i58: i64, out_$i59: i64, out_$i60: i1, out_$i61: i64, out_$i62: i64, out_$i63: i32, out_$i64: i1, out_$i65: i64, out_$i66: i64, out_$i67: i64, out_$i68: i64, out_$i69: i64, out_$i70: i64, out_$i71: i64, out_$i72: i64, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i76: i32, out_$i77: i64, out_$i78: i32, out_$i79: i64, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$p85: ref, out_$i86: i64, out_$i87: i64, out_$i89: i1, out_$i47: i64, out_$i48: i64, out_vslice_dummy_var_100: i32);
  modifies $M.0;



implementation break_up_discard_bio_loop_$bb4(in_$p0: ref, in_$i2: i64, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p11: ref, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$i24: i64, in_$i25: i64, in_$i26: i64, in_$i27: i64, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i64, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$i37: i8, in_$i38: i1, in_$p39: ref, in_$i40: i8, in_$i41: i64, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$i45: i64, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i13: i64) returns (out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$i24: i64, out_$i25: i64, out_$i26: i64, out_$i27: i64, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i64, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$i37: i8, out_$i38: i1, out_$p39: ref, out_$i40: i8, out_$i41: i64, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$i45: i64, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i13: i64)
{

  entry:
    out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$p44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i13 := in_$i14, in_$i15, in_$p16, in_$p17, in_$i18, in_$i19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$p28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$p42, in_$i43, in_$p44, in_$i45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$i57, in_$i13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4564;

  $bb17:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := out_$i33;
    goto $bb17_dummy;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, in_$i2);
    goto corral_source_split_4596;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4595;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i57;
    goto $bb16;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i32;
    goto $bb16;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.48, in_$p8);
    call {:si_unique_call 1168} {:cexpr "begin"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_4593;

  $bb14:
    assume out_$i31 == 1;
    goto corral_source_split_4592;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_4590;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} out_$i30 := bio_detain(out_$p29, in_$p5, $0.ref, in_$p6);
    call {:si_unique_call 1167} {:cexpr "tmp"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_4589;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_4588;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_4587;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} build_key(out_$p21, 1, out_$i22, out_$i27, in_$p5);
    goto corral_source_split_4586;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i64(out_$i25, out_$i26);
    goto corral_source_split_4585;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i64($M.47, in_$p9);
    goto corral_source_split_4584;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    out_$i25 := $sub.i64(out_$i23, out_$i24);
    goto corral_source_split_4583;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.49, in_$p7);
    goto corral_source_split_4582;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i64($M.48, in_$p8);
    goto corral_source_split_4581;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i64($M.47, in_$p9);
    goto corral_source_split_4580;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_4579;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_4578;

  $bb11:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_4574;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} out_$i18 := dm_thin_find_mapped_range(out_$p17, out_$i13, in_$i2, in_$p7, in_$p8, in_$p9, in_$p4);
    call {:si_unique_call 1164} {:cexpr "r"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_4573;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_4572;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p0, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_4571;

  $bb7:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_4567;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} out_$i14 := ensure_next_mapping(in_$p11);
    call {:si_unique_call 1162} {:cexpr "r"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_4566;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i64($M.48, in_$p8);
    call {:si_unique_call 1174} {:cexpr "begin"} boogie_si_record_i64(out_$i57);
    goto corral_source_split_4633;

  $bb21:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_249:
    goto corral_source_split_4631;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    call {:si_unique_call 1173} devirtbounce.9(out_$p56, out_$p35);
    goto SeqInstr_248;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p11, $mul.ref(0, 66576)), $mul.ref(1032, 1));
    goto corral_source_split_4630;

  $bb20:
    assume out_$i54 == 1;
    goto corral_source_split_4629;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i53, 0);
    goto corral_source_split_4627;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} out_$i53 := dm_deferred_set_add_work(out_$p51, out_$p52);
    call {:si_unique_call 1172} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_4626;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p35, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_4625;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_4624;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p11, $mul.ref(0, 66576)), $mul.ref(968, 1));
    goto corral_source_split_4623;

  SeqInstr_246:
    goto corral_source_split_4622;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} __bio_inc_remaining(in_$p3);
    goto SeqInstr_245;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p49, in_$p3);
    goto corral_source_split_4621;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p35, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_4620;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p48, out_$p47);
    goto corral_source_split_4619;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p35, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_4618;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.14, in_$p6);
    goto corral_source_split_4617;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p46, out_$i45);
    goto corral_source_split_4616;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p35, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_4615;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i64($M.47, in_$p9);
    goto corral_source_split_4614;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p44, out_$i43);
    goto corral_source_split_4613;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p35, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_4612;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.48, in_$p8);
    goto corral_source_split_4611;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p42, out_$i41);
    goto corral_source_split_4610;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p35, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_4609;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i64($M.49, in_$p7);
    goto corral_source_split_4608;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p39, out_$i40);
    goto corral_source_split_4607;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i1.i8(out_$i38);
    goto corral_source_split_4606;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p35, $mul.ref(0, 88)), $mul.ref(17, 1));
    goto corral_source_split_4605;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i8.i1(out_$i37);
    goto corral_source_split_4604;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i8($M.50, in_$p4);
    goto corral_source_split_4603;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p36, in_$p0);
    goto corral_source_split_4602;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p35, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_4601;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} out_$p35 := get_next_mapping(in_$p11);
    goto corral_source_split_4600;

  $bb15:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$p44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i13 := break_up_discard_bio_loop_$bb4(in_$p0, in_$i2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p11, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$p44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i13);
    return;

  exit:
    return;
}



procedure break_up_discard_bio_loop_$bb4(in_$p0: ref, in_$i2: i64, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p11: ref, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$i24: i64, in_$i25: i64, in_$i26: i64, in_$i27: i64, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i64, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$i37: i8, in_$i38: i1, in_$p39: ref, in_$i40: i8, in_$i41: i64, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$i45: i64, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i13: i64) returns (out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$i24: i64, out_$i25: i64, out_$i26: i64, out_$i27: i64, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i64, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$i37: i8, out_$i38: i1, out_$p39: ref, out_$i40: i8, out_$i41: i64, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$i45: i64, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i13: i64);
  modifies $M.0, $M.15, $M.49, $M.47, $M.50, $M.48, $M.16, $M.17, $CurrAddr, $M.45, $M.18, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.40, $M.58, $M.59, $M.60, $M.25, $M.26, $M.29, $M.55, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32;



implementation dm_thin_find_mapped_range_loop_$bb26(in_$p0: ref, in_$i2: i64, in_$p6: ref, in_$p7: ref, in_$i36: i32, in_$i37: i1, in_$i38: i64, in_$i39: i32, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p46: ref, in_$i47: i8, in_$i48: i1, in_$i49: i32, in_$i50: i8, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$i45: i64, in_$i54: i64, in_$i55: i64, in_$i56: i1, in_$i34: i64, in_$i35: i64, in_$i57: i64) returns (out_$i36: i32, out_$i37: i1, out_$i38: i64, out_$i39: i32, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p46: ref, out_$i47: i8, out_$i48: i1, out_$i49: i32, out_$i50: i8, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$i45: i64, out_$i54: i64, out_$i55: i64, out_$i56: i1, out_$i34: i64, out_$i35: i64, out_$i57: i64)
{

  entry:
    out_$i36, out_$i37, out_$i38, out_$i39, out_$p42, out_$i43, out_$i44, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i45, out_$i54, out_$i55, out_$i56, out_$i34, out_$i35, out_$i57 := in_$i36, in_$i37, in_$i38, in_$i39, in_$p42, in_$i43, in_$i44, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i45, in_$i54, in_$i55, in_$i56, in_$i34, in_$i35, in_$i57;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4706;

  $bb40:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i34, out_$i35 := out_$i54, out_$i55;
    goto $bb40_dummy;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i55;
    assume true;
    goto $bb40;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i55, in_$i2);
    goto corral_source_split_4739;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i64(out_$i35, 1);
    call {:si_unique_call 1187} {:cexpr "begin"} boogie_si_record_i64(out_$i55);
    goto corral_source_split_4738;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i64(out_$i34, 1);
    call {:si_unique_call 1186} {:cexpr "pool_end"} boogie_si_record_i64(out_$i54);
    goto corral_source_split_4737;

  $bb38:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i35;
    assume true;
    goto $bb38;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i49, out_$i52);
    goto corral_source_split_4735;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i1.i32(out_$i51);
    goto corral_source_split_4734;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i8.i1(out_$i50);
    goto corral_source_split_4733;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i8($M.50, in_$p6);
    goto corral_source_split_4732;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i1.i32(out_$i48);
    goto corral_source_split_4731;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    out_$i48 := $trunc.i8.i1(out_$i47);
    goto corral_source_split_4730;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i8($M.0, out_$p46);
    goto corral_source_split_4729;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p7, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4728;

  $bb36:
    assume !(out_$i44 == 1);
    goto corral_source_split_4727;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i35;
    assume true;
    goto $bb36;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i43, out_$i34);
    goto corral_source_split_4723;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.0, out_$p42);
    goto corral_source_split_4722;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4721;

  $bb29:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    out_$i38, out_$i39 := out_$i35, out_$i36;
    assume true;
    goto $bb29;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_4709;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} out_$i36 := dm_thin_find_block(in_$p0, out_$i35, 1, in_$p7);
    call {:si_unique_call 1185} {:cexpr "r"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_4708;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb40_dummy:
    call {:si_unique_call 1} out_$i36, out_$i37, out_$i38, out_$i39, out_$p42, out_$i43, out_$i44, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i45, out_$i54, out_$i55, out_$i56, out_$i34, out_$i35, out_$i57 := dm_thin_find_mapped_range_loop_$bb26(in_$p0, in_$i2, in_$p6, in_$p7, out_$i36, out_$i37, out_$i38, out_$i39, out_$p42, out_$i43, out_$i44, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i45, out_$i54, out_$i55, out_$i56, out_$i34, out_$i35, out_$i57);
    return;

  exit:
    return;
}



procedure dm_thin_find_mapped_range_loop_$bb26(in_$p0: ref, in_$i2: i64, in_$p6: ref, in_$p7: ref, in_$i36: i32, in_$i37: i1, in_$i38: i64, in_$i39: i32, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p46: ref, in_$i47: i8, in_$i48: i1, in_$i49: i32, in_$i50: i8, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$i45: i64, in_$i54: i64, in_$i55: i64, in_$i56: i1, in_$i34: i64, in_$i35: i64, in_$i57: i64) returns (out_$i36: i32, out_$i37: i1, out_$i38: i64, out_$i39: i32, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p46: ref, out_$i47: i8, out_$i48: i1, out_$i49: i32, out_$i50: i8, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$i45: i64, out_$i54: i64, out_$i55: i64, out_$i56: i1, out_$i34: i64, out_$i35: i64, out_$i57: i64);
  modifies $M.15, $M.0, $M.16, $M.17, $CurrAddr;



implementation dm_thin_find_mapped_range_loop_$bb8(in_$p0: ref, in_$i2: i64, in_$p7: ref, in_$i13: i32, in_$i14: i1, in_$i16: i1, in_$i17: i32, in_$i15: i64, in_$i19: i64, in_$i20: i1, in_$i12: i64, in_$i21: i64) returns (out_$i13: i32, out_$i14: i1, out_$i16: i1, out_$i17: i32, out_$i15: i64, out_$i19: i64, out_$i20: i1, out_$i12: i64, out_$i21: i64)
{

  entry:
    out_$i13, out_$i14, out_$i16, out_$i17, out_$i15, out_$i19, out_$i20, out_$i12, out_$i21 := in_$i13, in_$i14, in_$i16, in_$i17, in_$i15, in_$i19, in_$i20, in_$i12, in_$i21;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4668;

  $bb17:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i19;
    goto $bb17_dummy;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i19;
    assume true;
    goto $bb17;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    out_$i20 := $ult.i64(out_$i19, in_$i2);
    goto corral_source_split_4681;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i64(out_$i12, 1);
    call {:si_unique_call 1181} {:cexpr "begin"} boogie_si_record_i64(out_$i19);
    goto corral_source_split_4680;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i13;
    assume true;
    goto $bb13;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i13, $sub.i32(0, 61));
    goto corral_source_split_4674;

  $bb10:
    assume out_$i14 == 1;
    goto corral_source_split_4673;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i12;
    assume true;
    goto $bb10;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_4671;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} out_$i13 := dm_thin_find_block(in_$p0, out_$i12, 1, in_$p7);
    call {:si_unique_call 1180} {:cexpr "r"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_4670;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i13, out_$i14, out_$i16, out_$i17, out_$i15, out_$i19, out_$i20, out_$i12, out_$i21 := dm_thin_find_mapped_range_loop_$bb8(in_$p0, in_$i2, in_$p7, out_$i13, out_$i14, out_$i16, out_$i17, out_$i15, out_$i19, out_$i20, out_$i12, out_$i21);
    return;

  exit:
    return;
}



procedure dm_thin_find_mapped_range_loop_$bb8(in_$p0: ref, in_$i2: i64, in_$p7: ref, in_$i13: i32, in_$i14: i1, in_$i16: i1, in_$i17: i32, in_$i15: i64, in_$i19: i64, in_$i20: i1, in_$i12: i64, in_$i21: i64) returns (out_$i13: i32, out_$i14: i1, out_$i16: i1, out_$i17: i32, out_$i15: i64, out_$i19: i64, out_$i20: i1, out_$i12: i64, out_$i21: i64);
  modifies $M.15, $M.0, $M.16, $M.17, $CurrAddr;



implementation __set_abort_with_changes_flags_loop_$bb4(in_$i8: i64, in_$p11: ref, in_$i12: i8, in_$i13: i1, in_$p14: ref, in_$i15: i8, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p10: ref) returns (out_$p11: ref, out_$i12: i8, out_$i13: i1, out_$p14: ref, out_$i15: i8, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p10: ref)
{

  entry:
    out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p10 := in_$p11, in_$i12, in_$i13, in_$p14, in_$i15, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5225;

  $bb6:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$p10 := out_$p18;
    goto $bb6_dummy;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, in_$i8);
    goto corral_source_split_5238;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_5237;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5236;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_5235;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_5234;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5233;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p14, out_$i15);
    goto corral_source_split_5232;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i1.i8(out_$i13);
    goto corral_source_split_5231;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p10, $mul.ref(0, 64)), $mul.ref(37, 1));
    goto corral_source_split_5230;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    out_$i13 := $trunc.i8.i1(out_$i12);
    goto corral_source_split_5229;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i8($M.0, out_$p11);
    goto corral_source_split_5228;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p10, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_5227;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p10 := __set_abort_with_changes_flags_loop_$bb4(in_$i8, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p10);
    return;

  exit:
    return;
}



procedure __set_abort_with_changes_flags_loop_$bb4(in_$i8: i64, in_$p11: ref, in_$i12: i8, in_$i13: i1, in_$p14: ref, in_$i15: i8, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p10: ref) returns (out_$p11: ref, out_$i12: i8, out_$i13: i1, out_$p14: ref, out_$i15: i8, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p10: ref);
  modifies $M.0;



implementation __superblock_all_zeroes_loop_$bb8(in_$i4: i32, in_$p10: ref, in_$i13: i64, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i17: i32, in_$i18: i1, in_$i12: i32) returns (out_$i13: i64, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i17: i32, out_$i18: i1, out_$i12: i32)
{

  entry:
    out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i12 := in_$i13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i12;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5346;

  $bb14:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i17;
    goto $bb14_dummy;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    out_$i18 := $ult.i32(out_$i17, in_$i4);
    goto corral_source_split_5360;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i12, 1);
    call {:si_unique_call 1378} {:cexpr "i"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_5359;

  $bb11:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_5351;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i64($M.0, out_$p14);
    goto corral_source_split_5350;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(in_$p10, $mul.ref(out_$i13, 8));
    goto corral_source_split_5349;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i32.i64(out_$i12);
    goto corral_source_split_5348;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i12 := __superblock_all_zeroes_loop_$bb8(in_$i4, in_$p10, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i12);
    return;

  exit:
    return;
}



procedure __superblock_all_zeroes_loop_$bb8(in_$i4: i32, in_$p10: ref, in_$i13: i64, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i17: i32, in_$i18: i1, in_$i12: i32) returns (out_$i13: i64, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i17: i32, out_$i18: i1, out_$i12: i32);



implementation __write_changed_details_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i14: i64, in_$p18: ref, in_$i19: i8, in_$i20: i1, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p51: ref, in_$p52: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p16: ref, in_$p17: ref) returns (out_$p18: ref, out_$i19: i8, out_$i20: i1, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p51: ref, out_$p52: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p16: ref, out_$p17: ref)
{

  entry:
    out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$p25, out_$p26, out_$i27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p16, out_$p17 := in_$p18, in_$i19, in_$i20, in_$p21, in_$i22, in_$p23, in_$i24, in_$p25, in_$p26, in_$i27, in_$p28, in_$p29, in_$i30, in_$p31, in_$p32, in_$i33, in_$p34, in_$p35, in_$p36, in_$i37, in_$p38, in_$p39, in_$i40, in_$i41, in_$i42, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$p49, in_$p51, in_$p52, in_$p54, in_$i55, in_$i56, in_$p16, in_$p17;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6063;

  $bb17:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$p16, out_$p17 := out_$p52, out_$p16;
    goto $bb17_dummy;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i55, in_$i14);
    goto corral_source_split_6076;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p54);
    goto corral_source_split_6075;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p16, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6074;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    goto corral_source_split_6073;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_6072;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6071;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} kfree(out_$p49);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p47, 0);
    goto corral_source_split_6115;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p17, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_6114;

  $bb14:
    assume out_$i46 == 1;
    goto corral_source_split_6113;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_6111;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_6110;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p17, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_6109;

  $bb11:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i40;
    assume true;
    goto $bb11;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_6103;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} out_$i40 := dm_btree_insert(out_$p35, out_$i37, in_$p2, out_$p38, out_$p39);
    call {:si_unique_call 1574} {:cexpr "r"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_6102;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p0, $mul.ref(0, 832)), $mul.ref(520, 1));
    goto corral_source_split_6101;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_6100;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i64($M.0, out_$p36);
    goto corral_source_split_6099;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p0, $mul.ref(0, 832)), $mul.ref(520, 1));
    goto corral_source_split_6098;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p0, $mul.ref(0, 832)), $mul.ref(288, 1));
    goto corral_source_split_6097;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $M.60 := $store.i32($M.60, out_$p34, out_$i33);
    goto corral_source_split_6096;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_6095;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_6094;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p17, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_6093;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $M.59 := $store.i32($M.59, out_$p31, out_$i30);
    goto corral_source_split_6092;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6091;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    goto corral_source_split_6090;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p17, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_6089;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $M.58 := $store.i64($M.58, out_$p28, out_$i27);
    goto corral_source_split_6088;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6087;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i64($M.0, out_$p26);
    goto corral_source_split_6086;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p17, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_6085;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $M.4 := $store.i64($M.4, out_$p25, out_$i24);
    goto corral_source_split_6084;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6083;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.0, out_$p23);
    goto corral_source_split_6082;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p17, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_6081;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $M.42 := $store.i64($M.42, in_$p2, out_$i22);
    goto corral_source_split_6080;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i64($M.0, out_$p21);
    goto corral_source_split_6079;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p17, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_6078;

  $bb6:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i8.i1(out_$i19);
    goto corral_source_split_6067;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i8($M.0, out_$p18);
    goto corral_source_split_6066;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_6065;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_6120;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} list_del(out_$p48);
    goto corral_source_split_6119;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p17, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6118;

  $bb15:
    assume !(out_$i46 == 1);
    goto corral_source_split_6117;

  $bb7:
    assume !(out_$i20 == 1);
    goto corral_source_split_6069;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$p25, out_$p26, out_$i27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p16, out_$p17 := __write_changed_details_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$i14, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$p25, out_$p26, out_$i27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p16, out_$p17);
    return;

  exit:
    return;
}



procedure __write_changed_details_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i14: i64, in_$p18: ref, in_$i19: i8, in_$i20: i1, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p51: ref, in_$p52: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p16: ref, in_$p17: ref) returns (out_$p18: ref, out_$i19: i8, out_$i20: i1, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p51: ref, out_$p52: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p16: ref, out_$p17: ref);
  modifies $M.0, $M.60, $M.59, $M.58, $M.4, $M.42;



implementation __sort_thin_deferred_bios_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p7: ref) returns (out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p7: ref)
{

  entry:
    out_$p8, out_$i9, out_$i10, out_$p7 := in_$p8, in_$i9, in_$i10, in_$p7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6140;

  $bb6:
    assume out_$i10 == 1;
    assume {:verifier.code 0} true;
    out_$p7 := out_$p8;
    goto $bb6_dummy;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i64(out_$i9, 0);
    goto corral_source_split_6145;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_6144;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} out_$p8 := bio_list_pop(in_$p1);
    goto corral_source_split_6143;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} __thin_bio_rb_add(in_$p0, out_$p7);
    goto corral_source_split_6142;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$i10, out_$p7 := __sort_thin_deferred_bios_loop_$bb4(in_$p0, in_$p1, out_$p8, out_$i9, out_$i10, out_$p7);
    return;

  exit:
    return;
}



procedure __sort_thin_deferred_bios_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p7: ref) returns (out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p7: ref);
  modifies $M.0;



implementation __thin_bio_rb_add_loop_$bb4(in_$i4: i64, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$p26: ref, in_$p24: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p12: ref, in_$p30: ref, in_$p31: ref) returns (out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$p25: ref, out_$p26: ref, out_$p24: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p12: ref, out_$p30: ref, out_$p31: ref)
{

  entry:
    out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p25, out_$p26, out_$p24, out_$p27, out_$i28, out_$i29, out_$p12, out_$p30, out_$p31 := in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p19, in_$i20, in_$i21, in_$p22, in_$p23, in_$p25, in_$p26, in_$p24, in_$p27, in_$i28, in_$i29, in_$p12, in_$p30, in_$p31;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6161;

  $bb9:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$p12 := out_$p24;
    goto $bb9_dummy;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    out_$p30, out_$p31 := out_$p24, out_$p13;
    assume true;
    goto $bb9;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, 0);
    goto corral_source_split_6182;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_6181;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p24);
    goto corral_source_split_6180;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6179;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p25, $mul.ref(0, 24)), $mul.ref(8, 1));
    assume {:verifier.code 0} true;
    out_$p24 := out_$p26;
    goto $bb8;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    out_$p24 := out_$p23;
    goto $bb8;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6174;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p12);
    goto corral_source_split_6173;

  $bb6:
    assume out_$i21 == 1;
    goto corral_source_split_6172;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    out_$i21 := $ugt.i64(out_$i20, in_$i4);
    goto corral_source_split_6170;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i64($M.0, out_$p19);
    goto corral_source_split_6169;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_6168;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} out_$p17 := dm_bio_from_per_bio_data(out_$p16, 64);
    goto corral_source_split_6167;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_6166;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(out_$p14, $mul.ref($sub.ref(0, 32), 64));
    goto corral_source_split_6165;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(out_$p13);
    goto corral_source_split_6164;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_6163;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p12);
    goto corral_source_split_6177;

  $bb7:
    assume !(out_$i21 == 1);
    goto corral_source_split_6176;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p25, out_$p26, out_$p24, out_$p27, out_$i28, out_$i29, out_$p12, out_$p30, out_$p31 := __thin_bio_rb_add_loop_$bb4(in_$i4, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p25, out_$p26, out_$p24, out_$p27, out_$i28, out_$i29, out_$p12, out_$p30, out_$p31);
    return;

  exit:
    return;
}



procedure __thin_bio_rb_add_loop_$bb4(in_$i4: i64, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$p26: ref, in_$p24: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p12: ref, in_$p30: ref, in_$p31: ref) returns (out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$p25: ref, out_$p26: ref, out_$p24: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p12: ref, out_$p30: ref, out_$p31: ref);



implementation __extract_sorted_bios_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$p5: ref) returns (out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$p5: ref)
{

  entry:
    out_$p6, out_$p7, out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p5 := in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$i14, in_$i15, in_$p5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6202;

  $bb6:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$p5 := out_$p13;
    goto $bb6_dummy;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i64(out_$i14, 0);
    goto corral_source_split_6215;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_6214;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} out_$p13 := rb_next(out_$p5);
    goto corral_source_split_6213;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} rb_erase(out_$p11, out_$p12);
    goto corral_source_split_6212;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p0, $mul.ref(0, 312)), $mul.ref(200, 1));
    goto corral_source_split_6211;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p6, $mul.ref($sub.ref(0, 32), 64)), $mul.ref(32, 1));
    goto corral_source_split_6210;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} bio_list_add(out_$p10, out_$p9);
    goto corral_source_split_6209;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_6208;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} out_$p9 := dm_bio_from_per_bio_data(out_$p8, 64);
    goto corral_source_split_6207;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    out_$p8 := $bitcast.ref.ref(out_$p7);
    goto corral_source_split_6206;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref(out_$p6, $mul.ref($sub.ref(0, 32), 64));
    goto corral_source_split_6205;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $bitcast.ref.ref(out_$p5);
    goto corral_source_split_6204;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p5 := __extract_sorted_bios_loop_$bb4(in_$p0, out_$p6, out_$p7, out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p5);
    return;

  exit:
    return;
}



procedure __extract_sorted_bios_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$p5: ref) returns (out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$p5: ref);
  modifies $M.0;



implementation sort_cells_loop_$bb4(in_$p0: ref, in_$i11: i64, in_$i17: i1, in_$i18: i32, in_$i20: i32, in_$i21: i64, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i32: i32) returns (out_$i17: i1, out_$i18: i32, out_$i20: i32, out_$i21: i64, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$p27: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i32: i32)
{

  entry:
    out_$i17, out_$i18, out_$i20, out_$i21, out_$p23, out_$p24, out_$p26, out_$p27, out_$p29, out_$i30, out_$i31, out_$p14, out_$p15, out_$i16, out_$i32 := in_$i17, in_$i18, in_$i20, in_$i21, in_$p23, in_$p24, in_$p26, in_$p27, in_$p29, in_$i30, in_$i31, in_$p14, in_$p15, in_$i16, in_$i32;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6279;

  $bb10:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$p14, out_$p15, out_$i16 := out_$p27, out_$p14, out_$i20;
    goto $bb10_dummy;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i20;
    assume true;
    goto $bb10;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, in_$i11);
    goto corral_source_split_6302;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_6301;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p14, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_6300;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    goto corral_source_split_6299;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_6298;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(out_$p14, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6297;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} list_del(out_$p24);
    goto corral_source_split_6296;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p15, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_6295;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p23, out_$p15);
    goto corral_source_split_6294;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 66576)), $mul.ref(1040, 1)), $mul.ref(out_$i21, 8));
    goto corral_source_split_6293;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i32.i64(out_$i16);
    goto corral_source_split_6292;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i16, 1);
    call {:si_unique_call 1605} {:cexpr "count"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_6291;

  $bb7:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i16;
    assume true;
    goto $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i17 := $ugt.i32(out_$i16, 8191);
    goto corral_source_split_6281;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i17, out_$i18, out_$i20, out_$i21, out_$p23, out_$p24, out_$p26, out_$p27, out_$p29, out_$i30, out_$i31, out_$p14, out_$p15, out_$i16, out_$i32 := sort_cells_loop_$bb4(in_$p0, in_$i11, out_$i17, out_$i18, out_$i20, out_$i21, out_$p23, out_$p24, out_$p26, out_$p27, out_$p29, out_$i30, out_$i31, out_$p14, out_$p15, out_$i16, out_$i32);
    return;

  exit:
    return;
}



procedure sort_cells_loop_$bb4(in_$p0: ref, in_$i11: i64, in_$i17: i1, in_$i18: i32, in_$i20: i32, in_$i21: i64, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i32: i32) returns (out_$i17: i1, out_$i18: i32, out_$i20: i32, out_$i21: i64, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$p27: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i32: i32);
  modifies $M.0;



implementation cmp_cells_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} cmp_cells_loop_$bb7();
    return;

  exit:
    return;
}



procedure cmp_cells_loop_$bb7();



implementation cmp_cells_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} cmp_cells_loop_$bb3();
    return;

  exit:
    return;
}



procedure cmp_cells_loop_$bb3();



implementation __pool_table_lookup_loop_$bb8(in_$p0: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p12: ref) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p12: ref)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p12 := in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p18, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p12;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6458;

  $bb14:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$p12 := out_$p22;
    goto $bb14_dummy;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, $p2i.ref.i64($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(160, 1))));
    goto corral_source_split_6475;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_6474;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 66576)), $mul.ref(0, 1));
    goto corral_source_split_6473;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_6472;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_6471;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 66576)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6470;

  $bb11:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    out_$p18 := out_$p12;
    assume true;
    goto $bb11;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i64(out_$i15, out_$i16);
    goto corral_source_split_6464;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_6463;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_6462;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_6461;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 66576)), $mul.ref(24, 1));
    goto corral_source_split_6460;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p12 := __pool_table_lookup_loop_$bb8(in_$p0, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p12);
    return;

  exit:
    return;
}



procedure __pool_table_lookup_loop_$bb8(in_$p0: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p12: ref) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p12: ref);



implementation __pool_table_lookup_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} __pool_table_lookup_loop_$bb3();
    return;

  exit:
    return;
}



procedure __pool_table_lookup_loop_$bb3();



implementation __pool_inc_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} __pool_inc_loop_$bb3();
    return;

  exit:
    return;
}



procedure __pool_inc_loop_$bb3();



implementation __open_device_loop_$bb4(in_$i1: i64, in_$i13: i64, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p19: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p15: ref) returns (out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p19: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p15: ref)
{

  entry:
    out_$p16, out_$i17, out_$i18, out_$p19, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p15 := in_$p16, in_$i17, in_$i18, in_$p19, in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$p15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6546;

  $bb13:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$p15 := out_$p28;
    goto $bb13_dummy;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, in_$i13);
    goto corral_source_split_6571;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_6570;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p29, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6569;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_6568;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_6567;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6566;

  $bb7:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    out_$p19 := out_$p15;
    assume true;
    goto $bb7;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i64(out_$i17, in_$i1);
    goto corral_source_split_6550;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i64($M.0, out_$p16);
    goto corral_source_split_6549;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_6548;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p16, out_$i17, out_$i18, out_$p19, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p15 := __open_device_loop_$bb4(in_$i1, in_$i13, out_$p16, out_$i17, out_$i18, out_$p19, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p15);
    return;

  exit:
    return;
}



procedure __open_device_loop_$bb4(in_$i1: i64, in_$i13: i64, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p19: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p15: ref) returns (out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p19: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p15: ref);



implementation pool_io_hints_loop_$bb3(in_$p1: ref, in_$p6: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i64, in_$i30: i64, in_$i31: i32, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i64, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i39: i8, in_$i40: i1, in_$i41: i32, in_$i42: i1) returns (out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i64, out_$i30: i64, out_$i31: i32, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i64, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i39: i8, out_$i40: i1, out_$i41: i32, out_$i42: i1)
{

  entry:
    out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42 := in_$p16, in_$i17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42;
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p6, $mul.ref(0, 66576)), $mul.ref(56, 1));
    goto corral_source_split_7474;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    goto corral_source_split_7504_dummy;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p32, out_$i31);
    goto corral_source_split_7504;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_7503;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    out_$i31 := $trunc.i64.i32(out_$i30);
    goto corral_source_split_7502;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} out_$i30 := __rounddown_pow_of_two(out_$i29);
    call {:si_unique_call 1892} {:cexpr "tmp"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_7501;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i32.i64(out_$i28);
    goto corral_source_split_7500;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_7499;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_7498;

  $bb6:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p26, out_$i25);
    goto corral_source_split_7496;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_7495;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    out_$i25 := $sub.i32(out_$i24, 1);
    goto corral_source_split_7494;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, out_$p23);
    goto corral_source_split_7493;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_7492;

  $bb5:
    assume out_$i22 == 1;
    goto corral_source_split_7491;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, 0);
    goto corral_source_split_7489;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    out_$i21 := $and.i32(out_$i17, out_$i20);
    goto corral_source_split_7488;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    out_$i20 := $sub.i32(out_$i19, 1);
    goto corral_source_split_7487;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    goto corral_source_split_7486;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_7485;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, out_$p16);
    goto corral_source_split_7484;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_7483;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb11:
    assume out_$i42 == 1;
    goto corral_source_split_7511;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_7509;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_7508;

  $bb9:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i41 := 1;
    goto $bb10;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    out_$i41 := 0;
    goto $bb10;

  $bb8:
    assume out_$i40 == 1;
    goto corral_source_split_7506;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    out_$i40 := $trunc.i8.i1(out_$i39);
    goto corral_source_split_7481;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i1.i8(out_$i38);
    call {:si_unique_call 1890} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i39);
    goto corral_source_split_7480;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} out_$i38 := is_factor(out_$i35, out_$i37);
    goto corral_source_split_7479;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, out_$p36);
    goto corral_source_split_7478;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_7477;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i32.i64(out_$i34);
    goto corral_source_split_7476;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_7475;

  corral_source_split_7504_dummy:
    call {:si_unique_call 1} out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42 := pool_io_hints_loop_$bb3(in_$p1, in_$p6, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42);
    return;

  exit:
    return;
}



procedure pool_io_hints_loop_$bb3(in_$p1: ref, in_$p6: ref, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i64, in_$i30: i64, in_$i31: i32, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i64, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i39: i8, in_$i40: i1, in_$i41: i32, in_$i42: i1) returns (out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i64, out_$i30: i64, out_$i31: i32, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i64, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i39: i8, out_$i40: i1, out_$i41: i32, out_$i42: i1);
  modifies $M.0;



implementation __reserve_metadata_snap_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} __reserve_metadata_snap_loop_$bb7();
    return;

  exit:
    return;
}



procedure __reserve_metadata_snap_loop_$bb7();



implementation requeue_bios_loop_$bb4(in_$p3: ref, in_$p4: ref, in_$i18: i64, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p20: ref) returns (out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p20: ref)
{

  entry:
    out_$p21, out_$p22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p20 := in_$p21, in_$p22, in_$i23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$p35, in_$i36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p20;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8508;

  $bb6:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$p20 := out_$p35;
    goto $bb6_dummy;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, in_$i18);
    goto corral_source_split_8533;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_8532;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p37, $mul.ref(0, 312)), $mul.ref(0, 1));
    goto corral_source_split_8531;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p35);
    goto corral_source_split_8530;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2190} out_$i36 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 2191} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_8529;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.77, out_$p34);
    goto corral_source_split_8528;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_8527;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} __read_once_size(out_$p31, out_$p33, 8);
    goto corral_source_split_8526;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_8525;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_8524;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_8523;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, in_$p3, out_$p30);
    goto corral_source_split_8522;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_8521;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(out_$p20, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8520;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} spin_unlock_irqrestore(out_$p27, out_$i23);
    goto corral_source_split_8519;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p20, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_8518;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2187} bio_list_init(out_$p26);
    goto corral_source_split_8517;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p20, $mul.ref(0, 312)), $mul.ref(184, 1));
    goto corral_source_split_8516;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} bio_list_merge(out_$p24, out_$p25);
    goto corral_source_split_8515;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p20, $mul.ref(0, 312)), $mul.ref(184, 1));
    goto corral_source_split_8514;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p20, $mul.ref(0, 312)), $mul.ref(168, 1));
    goto corral_source_split_8513;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} out_$i23 := _raw_spin_lock_irqsave(out_$p22);
    call {:si_unique_call 2185} {:cexpr "flags"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_8512;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} out_$p22 := spinlock_check(out_$p21);
    goto corral_source_split_8511;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_8510;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p21, out_$p22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p20 := requeue_bios_loop_$bb4(in_$p3, in_$p4, in_$i18, out_$p21, out_$p22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p20);
    return;

  exit:
    return;
}



procedure requeue_bios_loop_$bb4(in_$p3: ref, in_$p4: ref, in_$i18: i64, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p20: ref) returns (out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p20: ref);
  modifies $M.0;



implementation pool_resume_active_thins_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p4: ref) returns (out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p4: ref)
{

  entry:
    out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p4 := in_$p5, in_$p6, in_$p7, in_$i8, in_$i9, in_$p4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8546;

  $bb6:
    assume out_$i9 == 1;
    assume {:verifier.code 0} true;
    out_$p4 := out_$p7;
    goto $bb6_dummy;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i64(out_$i8, 0);
    goto corral_source_split_8553;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_8552;

  SeqInstr_429:
    goto corral_source_split_8551;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2195} out_$p7 := get_next_thin(in_$p0, out_$p4);
    goto SeqInstr_428;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} dm_internal_resume(out_$p6);
    goto corral_source_split_8550;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_8549;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(out_$p4, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_8548;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p4 := pool_resume_active_thins_loop_$bb4(in_$p0, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p4);
    return;

  exit:
    return;
}



procedure pool_resume_active_thins_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p4: ref) returns (out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p4: ref);
  modifies $M.0, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation pool_suspend_active_thins_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p4: ref) returns (out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p4: ref)
{

  entry:
    out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p4 := in_$p5, in_$p6, in_$p7, in_$i8, in_$i9, in_$p4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8910;

  $bb6:
    assume out_$i9 == 1;
    assume {:verifier.code 0} true;
    out_$p4 := out_$p7;
    goto $bb6_dummy;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i64(out_$i8, 0);
    goto corral_source_split_8917;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_8916;

  SeqInstr_447:
    goto corral_source_split_8915;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2289} out_$p7 := get_next_thin(in_$p0, out_$p4);
    goto SeqInstr_446;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2288} dm_internal_suspend_noflush(out_$p6);
    goto corral_source_split_8914;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_8913;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(out_$p4, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_8912;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p4 := pool_suspend_active_thins_loop_$bb4(in_$p0, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p4);
    return;

  exit:
    return;
}



procedure pool_suspend_active_thins_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p4: ref) returns (out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p4: ref);
  modifies $M.0, $CurrAddr, $M.15, $M.40, $M.16, $M.17, $M.25, $M.26, $M.29, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.49, $M.47, $M.50, $M.48, $M.45, $M.18, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.51, $M.52, $M.41, $M.42, $M.43, $M.4, assertsPassed, $M.58, $M.59, $M.60, $M.55;



implementation parse_pool_features_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i17: i32, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i41: i32, in_$i42: i1, in_$i43: i1) returns (out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i41: i32, out_$i42: i1, out_$i43: i1)
{

  entry:
    out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i41, out_$i42, out_$i43 := in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$p38, in_$i41, in_$i42, in_$i43;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(in_$i17, 0);
    goto corral_source_split_8987;

  $bb29:
    assume {:verifier.code 0} true;
    assume out_$i42 == 1;
    goto $bb29_dummy;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_9005;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.81, in_$p3);
    goto corral_source_split_9004;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p26, 0);
    goto corral_source_split_8998;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_8997;

  $bb13:
    assume out_$i25 == 1;
    goto corral_source_split_8996;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 0);
    goto corral_source_split_8994;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2302} out_$i24 := strcasecmp(out_$p21, .str.51);
    call {:si_unique_call 2303} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_8993;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $M.81 := $store.i32($M.81, in_$p3, out_$i23);
    goto corral_source_split_8992;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    out_$i23 := $sub.i32(out_$i22, 1);
    goto corral_source_split_8991;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.81, in_$p3);
    goto corral_source_split_8990;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2301} out_$p21 := dm_shift_arg(in_$p0);
    goto corral_source_split_8989;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb31:
    assume out_$i43 == 1;
    goto corral_source_split_9043;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p29, 0);
    goto corral_source_split_9009;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p1, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_9008;

  $bb16:
    assume out_$i28 == 1;
    goto corral_source_split_9007;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 0);
    goto corral_source_split_9002;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2304} out_$i27 := strcasecmp(out_$p21, .str.52);
    call {:si_unique_call 2305} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_9001;

  $bb14:
    assume !(out_$i25 == 1);
    goto corral_source_split_9000;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p32, 0);
    goto corral_source_split_9017;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p1, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_9016;

  $bb19:
    assume out_$i31 == 1;
    goto corral_source_split_9015;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 0);
    goto corral_source_split_9013;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2306} out_$i30 := strcasecmp(out_$p21, .str.53);
    call {:si_unique_call 2307} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_9012;

  $bb17:
    assume !(out_$i28 == 1);
    goto corral_source_split_9011;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p35, 2);
    goto corral_source_split_9025;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9024;

  $bb22:
    assume out_$i34 == 1;
    goto corral_source_split_9023;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 0);
    goto corral_source_split_9021;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} out_$i33 := strcasecmp(out_$p21, .str.54);
    call {:si_unique_call 2309} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_9020;

  $bb20:
    assume !(out_$i31 == 1);
    goto corral_source_split_9019;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p38, 1);
    goto corral_source_split_9033;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p1, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_9032;

  $bb25:
    assume out_$i37 == 1;
    goto corral_source_split_9031;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 0);
    goto corral_source_split_9029;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2310} out_$i36 := strcasecmp(out_$p21, .str.55);
    call {:si_unique_call 2311} {:cexpr "tmp"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_9028;

  $bb23:
    assume !(out_$i34 == 1);
    goto corral_source_split_9027;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i41, out_$i42, out_$i43 := parse_pool_features_loop_$bb11(in_$p0, in_$p1, in_$p3, in_$i17, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i41, out_$i42, out_$i43);
    return;

  exit:
    return;
}



procedure parse_pool_features_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i17: i32, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i41: i32, in_$i42: i1, in_$i43: i1) returns (out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i41: i32, out_$i42: i1, out_$i43: i1);
  modifies $M.0, $M.81;



implementation __pool_table_lookup_metadata_dev_loop_$bb8(in_$p0: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p12: ref) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p12: ref)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p12 := in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p18, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p12;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_9171;

  $bb14:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$p12 := out_$p22;
    goto $bb14_dummy;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, $p2i.ref.i64($add.ref($add.ref(dm_thin_pool_table, $mul.ref(0, 176)), $mul.ref(160, 1))));
    goto corral_source_split_9188;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_9187;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 66576)), $mul.ref(0, 1));
    goto corral_source_split_9186;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_9185;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_9184;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 66576)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9183;

  $bb11:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    out_$p18 := out_$p12;
    assume true;
    goto $bb11;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i64(out_$i15, out_$i16);
    goto corral_source_split_9177;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_9176;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_9175;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_9174;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 66576)), $mul.ref(32, 1));
    goto corral_source_split_9173;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p12 := __pool_table_lookup_metadata_dev_loop_$bb8(in_$p0, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p12);
    return;

  exit:
    return;
}



procedure __pool_table_lookup_metadata_dev_loop_$bb8(in_$p0: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p12: ref) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p12: ref);



implementation __pool_table_lookup_metadata_dev_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} __pool_table_lookup_metadata_dev_loop_$bb3();
    return;

  exit:
    return;
}



procedure __pool_table_lookup_metadata_dev_loop_$bb3();



implementation __pool_table_insert_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} __pool_table_insert_loop_$bb3();
    return;

  exit:
    return;
}



procedure __pool_table_insert_loop_$bb3();



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$p21: ref, in_$p23: ref, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$p36: ref, in_$p37: ref, in_$p39: ref, in_$p41: ref, in_$i70: i32, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i108: i32, in_$i109: i32, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i123: i32, in_$i124: i32, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$p128: ref, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$p133: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$p138: ref, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$p143: ref, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i153: i32, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i165: i32, in_$i166: i1, in_$p167: ref, in_$i168: i32, in_$i170: i32, in_$i171: i1, in_$p172: ref, in_$i173: i32, in_$i175: i32, in_$i176: i1, in_$p177: ref, in_$i178: i32, in_$i179: i32, in_$i180: i1, in_$i181: i32, in_$i182: i1, in_$p183: ref, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$i193: i32, in_$i194: i1, in_$p195: ref, in_$i196: i32, in_$i197: i1, in_$p198: ref, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i204: i32, in_$i205: i1, in_$p206: ref, in_$i208: i32, in_$i209: i1, in_$p210: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i215: i32, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$i220: i32, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$i225: i32, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$i230: i32, in_$i232: i32, in_$i233: i1, in_$p234: ref, in_$i235: i32, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i240: i32, in_$i241: i1, in_$p242: ref, in_$i243: i32, in_$i244: i32, in_$i245: i32, in_$i246: i32, in_$i247: i1, in_$p248: ref, in_$i249: i32, in_$i250: i32, in_$i251: i32, in_$i252: i32, in_$i253: i1, in_$p254: ref, in_$i255: i32, in_$i256: i32, in_$i257: i32, in_$i258: i32, in_$i259: i1, in_$p260: ref, in_$i261: i32, in_$i262: i32, in_$i263: i32, in_$i264: i32, in_$i265: i1, in_$p266: ref, in_$i267: i32, in_$i268: i32, in_$i269: i32, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$i273: i32, in_$i274: i1, in_$p275: ref, in_$i276: i32, in_$i277: i1, in_$p278: ref, in_$i279: i32, in_$i280: i1, in_$p281: ref, in_$i282: i32, in_$i283: i1, in_$p284: ref, in_$i285: i32, in_$i286: i1, in_$p287: ref, in_$i288: i32, in_$i289: i1, in_$p290: ref, in_$i291: i32, in_$i292: i1, in_$i293: i32, in_$i294: i1, in_$i295: i32, in_$i296: i1, in_$i297: i32, in_$i298: i1, in_$i299: i1, in_$i300: i1, in_$i301: i32, in_$i302: i1, in_$i303: i32, in_$i304: i1, in_$i305: i32, in_$i306: i1, in_$i307: i32, in_$i308: i32, in_$i309: i1, in_$i310: i32, in_$i311: i1, in_$i312: i32, in_$i313: i1, in_$i314: i32, in_$i315: i1, in_$i316: i32, in_$i317: i1, in_$i318: i32, in_$i319: i1, in_$i320: i1, in_$i321: i1, in_$i322: i1, in_$i323: i1, in_$i324: i1, in_$i325: i1, in_$i326: i1, in_$i327: i1, in_$i328: i1, in_$i329: i1, in_$i330: i1, in_$i331: i1, in_$i332: i32, in_$i333: i1, in_$p334: ref, in_$i335: i32, in_$i336: i32, in_$i337: i32, in_$i338: i1, in_$i339: i32, in_$i340: i32, in_$i341: i32, in_$i342: i1, in_$p343: ref, in_$i344: i32, in_$i346: i32, in_$i347: i1, in_$p348: ref, in_$i349: i32, in_$i351: i32, in_$i352: i1, in_$p353: ref, in_$i354: i32, in_$i356: i32, in_$i357: i1, in_$p358: ref, in_$i359: i32, in_$i361: i32, in_$i362: i1, in_$p363: ref, in_$i364: i32, in_$i366: i32, in_$i367: i1, in_$p368: ref, in_$i369: i32, in_$i370: i32, in_$i371: i32, in_$i372: i1, in_$p373: ref, in_$i374: i32, in_$i375: i32, in_$i376: i32, in_$i377: i1, in_$p378: ref, in_$i379: i32, in_$i380: i32, in_$i381: i32, in_$i382: i1, in_$p383: ref, in_$i384: i32, in_$i385: i32, in_$i386: i32, in_$i387: i1, in_$p388: ref, in_$p389: ref, in_$i391: i32, in_$i392: i1, in_$p393: ref, in_$p394: ref, in_$i396: i32, in_$i397: i1, in_$p398: ref, in_$p399: ref, in_$i401: i32, in_$i402: i1, in_$p403: ref, in_$p404: ref, in_$i406: i32, in_$i407: i1, in_$p408: ref, in_$p409: ref, in_$i411: i32, in_$i412: i1, in_$p413: ref, in_$i414: i32, in_$i416: i32, in_$i417: i1, in_$p418: ref, in_$i419: i32, in_$i421: i32, in_$i422: i1, in_$p423: ref, in_$i424: i32, in_$i426: i32, in_$i427: i1, in_$p428: ref, in_$i429: i32, in_$i431: i32, in_$i432: i1, in_$p433: ref, in_$i434: i32, in_$i436: i32, in_$i437: i1, in_$p438: ref, in_$i439: i32, in_$i440: i32, in_$i441: i1, in_$i442: i32, in_$i443: i1, in_$p444: ref, in_$i445: i32, in_$i446: i1, in_$p447: ref, in_$i448: i32, in_$i449: i1, in_$p450: ref, in_$i451: i32, in_$i452: i1, in_$p453: ref, in_$i454: i32, in_$i455: i1, in_$p456: ref, in_$i457: i32, in_$i458: i1, in_$p459: ref, in_$i461: i32, in_$i462: i1, in_$p463: ref, in_$i465: i32, in_$i466: i1, in_$p467: ref, in_$i469: i32, in_$i470: i1, in_$p471: ref, in_$i473: i32, in_$i474: i1, in_$p475: ref, in_$i476: i32, in_$i477: i1, in_$p478: ref, in_$i479: i32, in_$i480: i32, in_$i481: i32, in_$i482: i32, in_$i483: i1, in_$p484: ref, in_$i485: i32, in_$i486: i32, in_$i487: i32, in_$i488: i32, in_$i489: i1, in_$p490: ref, in_$i491: i32, in_$i492: i32, in_$i493: i32, in_$i494: i32, in_$i495: i1, in_$p496: ref, in_$i497: i32, in_$i498: i32, in_$i499: i32, in_$i500: i32, in_$i501: i1, in_$p502: ref, in_$i503: i32, in_$i504: i32, in_$i505: i32, in_$i506: i32, in_$i507: i1, in_$p508: ref, in_$i509: i32, in_$i510: i1, in_vslice_dummy_var_202: i32, in_vslice_dummy_var_203: i32, in_vslice_dummy_var_204: i32, in_vslice_dummy_var_205: i32, in_vslice_dummy_var_206: i32, in_vslice_dummy_var_207: i32, in_vslice_dummy_var_208: i32, in_vslice_dummy_var_209: i32, in_vslice_dummy_var_210: i32, in_vslice_dummy_var_211: i32, in_vslice_dummy_var_212: i32, in_vslice_dummy_var_213: i32, in_vslice_dummy_var_214: i32, in_vslice_dummy_var_215: i32, in_vslice_dummy_var_216: i32, in_vslice_dummy_var_217: i32, in_vslice_dummy_var_218: i32, in_vslice_dummy_var_219: i32, in_vslice_dummy_var_220: i32, in_vslice_dummy_var_221: i32, in_vslice_dummy_var_222: i32, in_vslice_dummy_var_223: i32, in_vslice_dummy_var_224: i32, in_vslice_dummy_var_225: i32, in_vslice_dummy_var_226: i32, in_vslice_dummy_var_227: i32, in_vslice_dummy_var_228: i32, in_vslice_dummy_var_229: i32, in_vslice_dummy_var_230: i32, in_vslice_dummy_var_231: i32, in_vslice_dummy_var_232: i32, in_vslice_dummy_var_233: i32, in_vslice_dummy_var_234: i32, in_vslice_dummy_var_235: i32, in_vslice_dummy_var_236: i32, in_vslice_dummy_var_237: i32, in_vslice_dummy_var_238: i32, in_vslice_dummy_var_239: i32, in_vslice_dummy_var_240: i32) returns (out_$i70: i32, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i108: i32, out_$i109: i32, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i123: i32, out_$i124: i32, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$p128: ref, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$p133: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$p138: ref, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$p143: ref, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i153: i32, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i165: i32, out_$i166: i1, out_$p167: ref, out_$i168: i32, out_$i170: i32, out_$i171: i1, out_$p172: ref, out_$i173: i32, out_$i175: i32, out_$i176: i1, out_$p177: ref, out_$i178: i32, out_$i179: i32, out_$i180: i1, out_$i181: i32, out_$i182: i1, out_$p183: ref, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$i193: i32, out_$i194: i1, out_$p195: ref, out_$i196: i32, out_$i197: i1, out_$p198: ref, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i204: i32, out_$i205: i1, out_$p206: ref, out_$i208: i32, out_$i209: i1, out_$p210: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i215: i32, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$i220: i32, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$i225: i32, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$i230: i32, out_$i232: i32, out_$i233: i1, out_$p234: ref, out_$i235: i32, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i240: i32, out_$i241: i1, out_$p242: ref, out_$i243: i32, out_$i244: i32, out_$i245: i32, out_$i246: i32, out_$i247: i1, out_$p248: ref, out_$i249: i32, out_$i250: i32, out_$i251: i32, out_$i252: i32, out_$i253: i1, out_$p254: ref, out_$i255: i32, out_$i256: i32, out_$i257: i32, out_$i258: i32, out_$i259: i1, out_$p260: ref, out_$i261: i32, out_$i262: i32, out_$i263: i32, out_$i264: i32, out_$i265: i1, out_$p266: ref, out_$i267: i32, out_$i268: i32, out_$i269: i32, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$i273: i32, out_$i274: i1, out_$p275: ref, out_$i276: i32, out_$i277: i1, out_$p278: ref, out_$i279: i32, out_$i280: i1, out_$p281: ref, out_$i282: i32, out_$i283: i1, out_$p284: ref, out_$i285: i32, out_$i286: i1, out_$p287: ref, out_$i288: i32, out_$i289: i1, out_$p290: ref, out_$i291: i32, out_$i292: i1, out_$i293: i32, out_$i294: i1, out_$i295: i32, out_$i296: i1, out_$i297: i32, out_$i298: i1, out_$i299: i1, out_$i300: i1, out_$i301: i32, out_$i302: i1, out_$i303: i32, out_$i304: i1, out_$i305: i32, out_$i306: i1, out_$i307: i32, out_$i308: i32, out_$i309: i1, out_$i310: i32, out_$i311: i1, out_$i312: i32, out_$i313: i1, out_$i314: i32, out_$i315: i1, out_$i316: i32, out_$i317: i1, out_$i318: i32, out_$i319: i1, out_$i320: i1, out_$i321: i1, out_$i322: i1, out_$i323: i1, out_$i324: i1, out_$i325: i1, out_$i326: i1, out_$i327: i1, out_$i328: i1, out_$i329: i1, out_$i330: i1, out_$i331: i1, out_$i332: i32, out_$i333: i1, out_$p334: ref, out_$i335: i32, out_$i336: i32, out_$i337: i32, out_$i338: i1, out_$i339: i32, out_$i340: i32, out_$i341: i32, out_$i342: i1, out_$p343: ref, out_$i344: i32, out_$i346: i32, out_$i347: i1, out_$p348: ref, out_$i349: i32, out_$i351: i32, out_$i352: i1, out_$p353: ref, out_$i354: i32, out_$i356: i32, out_$i357: i1, out_$p358: ref, out_$i359: i32, out_$i361: i32, out_$i362: i1, out_$p363: ref, out_$i364: i32, out_$i366: i32, out_$i367: i1, out_$p368: ref, out_$i369: i32, out_$i370: i32, out_$i371: i32, out_$i372: i1, out_$p373: ref, out_$i374: i32, out_$i375: i32, out_$i376: i32, out_$i377: i1, out_$p378: ref, out_$i379: i32, out_$i380: i32, out_$i381: i32, out_$i382: i1, out_$p383: ref, out_$i384: i32, out_$i385: i32, out_$i386: i32, out_$i387: i1, out_$p388: ref, out_$p389: ref, out_$i391: i32, out_$i392: i1, out_$p393: ref, out_$p394: ref, out_$i396: i32, out_$i397: i1, out_$p398: ref, out_$p399: ref, out_$i401: i32, out_$i402: i1, out_$p403: ref, out_$p404: ref, out_$i406: i32, out_$i407: i1, out_$p408: ref, out_$p409: ref, out_$i411: i32, out_$i412: i1, out_$p413: ref, out_$i414: i32, out_$i416: i32, out_$i417: i1, out_$p418: ref, out_$i419: i32, out_$i421: i32, out_$i422: i1, out_$p423: ref, out_$i424: i32, out_$i426: i32, out_$i427: i1, out_$p428: ref, out_$i429: i32, out_$i431: i32, out_$i432: i1, out_$p433: ref, out_$i434: i32, out_$i436: i32, out_$i437: i1, out_$p438: ref, out_$i439: i32, out_$i440: i32, out_$i441: i1, out_$i442: i32, out_$i443: i1, out_$p444: ref, out_$i445: i32, out_$i446: i1, out_$p447: ref, out_$i448: i32, out_$i449: i1, out_$p450: ref, out_$i451: i32, out_$i452: i1, out_$p453: ref, out_$i454: i32, out_$i455: i1, out_$p456: ref, out_$i457: i32, out_$i458: i1, out_$p459: ref, out_$i461: i32, out_$i462: i1, out_$p463: ref, out_$i465: i32, out_$i466: i1, out_$p467: ref, out_$i469: i32, out_$i470: i1, out_$p471: ref, out_$i473: i32, out_$i474: i1, out_$p475: ref, out_$i476: i32, out_$i477: i1, out_$p478: ref, out_$i479: i32, out_$i480: i32, out_$i481: i32, out_$i482: i32, out_$i483: i1, out_$p484: ref, out_$i485: i32, out_$i486: i32, out_$i487: i32, out_$i488: i32, out_$i489: i1, out_$p490: ref, out_$i491: i32, out_$i492: i32, out_$i493: i32, out_$i494: i32, out_$i495: i1, out_$p496: ref, out_$i497: i32, out_$i498: i32, out_$i499: i32, out_$i500: i32, out_$i501: i1, out_$p502: ref, out_$i503: i32, out_$i504: i32, out_$i505: i32, out_$i506: i32, out_$i507: i1, out_$p508: ref, out_$i509: i32, out_$i510: i1, out_vslice_dummy_var_202: i32, out_vslice_dummy_var_203: i32, out_vslice_dummy_var_204: i32, out_vslice_dummy_var_205: i32, out_vslice_dummy_var_206: i32, out_vslice_dummy_var_207: i32, out_vslice_dummy_var_208: i32, out_vslice_dummy_var_209: i32, out_vslice_dummy_var_210: i32, out_vslice_dummy_var_211: i32, out_vslice_dummy_var_212: i32, out_vslice_dummy_var_213: i32, out_vslice_dummy_var_214: i32, out_vslice_dummy_var_215: i32, out_vslice_dummy_var_216: i32, out_vslice_dummy_var_217: i32, out_vslice_dummy_var_218: i32, out_vslice_dummy_var_219: i32, out_vslice_dummy_var_220: i32, out_vslice_dummy_var_221: i32, out_vslice_dummy_var_222: i32, out_vslice_dummy_var_223: i32, out_vslice_dummy_var_224: i32, out_vslice_dummy_var_225: i32, out_vslice_dummy_var_226: i32, out_vslice_dummy_var_227: i32, out_vslice_dummy_var_228: i32, out_vslice_dummy_var_229: i32, out_vslice_dummy_var_230: i32, out_vslice_dummy_var_231: i32, out_vslice_dummy_var_232: i32, out_vslice_dummy_var_233: i32, out_vslice_dummy_var_234: i32, out_vslice_dummy_var_235: i32, out_vslice_dummy_var_236: i32, out_vslice_dummy_var_237: i32, out_vslice_dummy_var_238: i32, out_vslice_dummy_var_239: i32, out_vslice_dummy_var_240: i32)
{

  entry:
    out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$p127, out_$p128, out_$i130, out_$i131, out_$p132, out_$p133, out_$i135, out_$i136, out_$p137, out_$p138, out_$i140, out_$i141, out_$p142, out_$p143, out_$i145, out_$i146, out_$p147, out_$p148, out_$i150, out_$i151, out_$p152, out_$i153, out_$i155, out_$i156, out_$p157, out_$i158, out_$i160, out_$i161, out_$p162, out_$i163, out_$i165, out_$i166, out_$p167, out_$i168, out_$i170, out_$i171, out_$p172, out_$i173, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$p183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$p192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i197, out_$p198, out_$i200, out_$i201, out_$p202, out_$i204, out_$i205, out_$p206, out_$i208, out_$i209, out_$p210, out_$i212, out_$i213, out_$p214, out_$i215, out_$i217, out_$i218, out_$p219, out_$i220, out_$i222, out_$i223, out_$p224, out_$i225, out_$i227, out_$i228, out_$p229, out_$i230, out_$i232, out_$i233, out_$p234, out_$i235, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$p242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$p254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$p260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$p266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$i273, out_$i274, out_$p275, out_$i276, out_$i277, out_$p278, out_$i279, out_$i280, out_$p281, out_$i282, out_$i283, out_$p284, out_$i285, out_$i286, out_$p287, out_$i288, out_$i289, out_$p290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$p334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$p343, out_$i344, out_$i346, out_$i347, out_$p348, out_$i349, out_$i351, out_$i352, out_$p353, out_$i354, out_$i356, out_$i357, out_$p358, out_$i359, out_$i361, out_$i362, out_$p363, out_$i364, out_$i366, out_$i367, out_$p368, out_$i369, out_$i370, out_$i371, out_$i372, out_$p373, out_$i374, out_$i375, out_$i376, out_$i377, out_$p378, out_$i379, out_$i380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i386, out_$i387, out_$p388, out_$p389, out_$i391, out_$i392, out_$p393, out_$p394, out_$i396, out_$i397, out_$p398, out_$p399, out_$i401, out_$i402, out_$p403, out_$p404, out_$i406, out_$i407, out_$p408, out_$p409, out_$i411, out_$i412, out_$p413, out_$i414, out_$i416, out_$i417, out_$p418, out_$i419, out_$i421, out_$i422, out_$p423, out_$i424, out_$i426, out_$i427, out_$p428, out_$i429, out_$i431, out_$i432, out_$p433, out_$i434, out_$i436, out_$i437, out_$p438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$p444, out_$i445, out_$i446, out_$p447, out_$i448, out_$i449, out_$p450, out_$i451, out_$i452, out_$p453, out_$i454, out_$i455, out_$p456, out_$i457, out_$i458, out_$p459, out_$i461, out_$i462, out_$p463, out_$i465, out_$i466, out_$p467, out_$i469, out_$i470, out_$p471, out_$i473, out_$i474, out_$p475, out_$i476, out_$i477, out_$p478, out_$i479, out_$i480, out_$i481, out_$i482, out_$i483, out_$p484, out_$i485, out_$i486, out_$i487, out_$i488, out_$i489, out_$p490, out_$i491, out_$i492, out_$i493, out_$i494, out_$i495, out_$p496, out_$i497, out_$i498, out_$i499, out_$i500, out_$i501, out_$p502, out_$i503, out_$i504, out_$i505, out_$i506, out_$i507, out_$p508, out_$i509, out_$i510, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_209, out_vslice_dummy_var_210, out_vslice_dummy_var_211, out_vslice_dummy_var_212, out_vslice_dummy_var_213, out_vslice_dummy_var_214, out_vslice_dummy_var_215, out_vslice_dummy_var_216, out_vslice_dummy_var_217, out_vslice_dummy_var_218, out_vslice_dummy_var_219, out_vslice_dummy_var_220, out_vslice_dummy_var_221, out_vslice_dummy_var_222, out_vslice_dummy_var_223, out_vslice_dummy_var_224, out_vslice_dummy_var_225, out_vslice_dummy_var_226, out_vslice_dummy_var_227, out_vslice_dummy_var_228, out_vslice_dummy_var_229, out_vslice_dummy_var_230, out_vslice_dummy_var_231, out_vslice_dummy_var_232, out_vslice_dummy_var_233, out_vslice_dummy_var_234, out_vslice_dummy_var_235, out_vslice_dummy_var_236, out_vslice_dummy_var_237, out_vslice_dummy_var_238, out_vslice_dummy_var_239, out_vslice_dummy_var_240 := in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$p98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$p107, in_$i108, in_$i109, in_$i110, in_$i111, in_$p112, in_$i113, in_$i114, in_$i115, in_$i116, in_$p117, in_$i118, in_$i119, in_$i120, in_$i121, in_$p122, in_$i123, in_$i124, in_$i125, in_$i126, in_$p127, in_$p128, in_$i130, in_$i131, in_$p132, in_$p133, in_$i135, in_$i136, in_$p137, in_$p138, in_$i140, in_$i141, in_$p142, in_$p143, in_$i145, in_$i146, in_$p147, in_$p148, in_$i150, in_$i151, in_$p152, in_$i153, in_$i155, in_$i156, in_$p157, in_$i158, in_$i160, in_$i161, in_$p162, in_$i163, in_$i165, in_$i166, in_$p167, in_$i168, in_$i170, in_$i171, in_$p172, in_$i173, in_$i175, in_$i176, in_$p177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$p183, in_$i184, in_$i185, in_$p186, in_$i187, in_$i188, in_$p189, in_$i190, in_$i191, in_$p192, in_$i193, in_$i194, in_$p195, in_$i196, in_$i197, in_$p198, in_$i200, in_$i201, in_$p202, in_$i204, in_$i205, in_$p206, in_$i208, in_$i209, in_$p210, in_$i212, in_$i213, in_$p214, in_$i215, in_$i217, in_$i218, in_$p219, in_$i220, in_$i222, in_$i223, in_$p224, in_$i225, in_$i227, in_$i228, in_$p229, in_$i230, in_$i232, in_$i233, in_$p234, in_$i235, in_$i237, in_$i238, in_$p239, in_$i240, in_$i241, in_$p242, in_$i243, in_$i244, in_$i245, in_$i246, in_$i247, in_$p248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i253, in_$p254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$p260, in_$i261, in_$i262, in_$i263, in_$i264, in_$i265, in_$p266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$p272, in_$i273, in_$i274, in_$p275, in_$i276, in_$i277, in_$p278, in_$i279, in_$i280, in_$p281, in_$i282, in_$i283, in_$p284, in_$i285, in_$i286, in_$p287, in_$i288, in_$i289, in_$p290, in_$i291, in_$i292, in_$i293, in_$i294, in_$i295, in_$i296, in_$i297, in_$i298, in_$i299, in_$i300, in_$i301, in_$i302, in_$i303, in_$i304, in_$i305, in_$i306, in_$i307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i312, in_$i313, in_$i314, in_$i315, in_$i316, in_$i317, in_$i318, in_$i319, in_$i320, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$i326, in_$i327, in_$i328, in_$i329, in_$i330, in_$i331, in_$i332, in_$i333, in_$p334, in_$i335, in_$i336, in_$i337, in_$i338, in_$i339, in_$i340, in_$i341, in_$i342, in_$p343, in_$i344, in_$i346, in_$i347, in_$p348, in_$i349, in_$i351, in_$i352, in_$p353, in_$i354, in_$i356, in_$i357, in_$p358, in_$i359, in_$i361, in_$i362, in_$p363, in_$i364, in_$i366, in_$i367, in_$p368, in_$i369, in_$i370, in_$i371, in_$i372, in_$p373, in_$i374, in_$i375, in_$i376, in_$i377, in_$p378, in_$i379, in_$i380, in_$i381, in_$i382, in_$p383, in_$i384, in_$i385, in_$i386, in_$i387, in_$p388, in_$p389, in_$i391, in_$i392, in_$p393, in_$p394, in_$i396, in_$i397, in_$p398, in_$p399, in_$i401, in_$i402, in_$p403, in_$p404, in_$i406, in_$i407, in_$p408, in_$p409, in_$i411, in_$i412, in_$p413, in_$i414, in_$i416, in_$i417, in_$p418, in_$i419, in_$i421, in_$i422, in_$p423, in_$i424, in_$i426, in_$i427, in_$p428, in_$i429, in_$i431, in_$i432, in_$p433, in_$i434, in_$i436, in_$i437, in_$p438, in_$i439, in_$i440, in_$i441, in_$i442, in_$i443, in_$p444, in_$i445, in_$i446, in_$p447, in_$i448, in_$i449, in_$p450, in_$i451, in_$i452, in_$p453, in_$i454, in_$i455, in_$p456, in_$i457, in_$i458, in_$p459, in_$i461, in_$i462, in_$p463, in_$i465, in_$i466, in_$p467, in_$i469, in_$i470, in_$p471, in_$i473, in_$i474, in_$p475, in_$i476, in_$i477, in_$p478, in_$i479, in_$i480, in_$i481, in_$i482, in_$i483, in_$p484, in_$i485, in_$i486, in_$i487, in_$i488, in_$i489, in_$p490, in_$i491, in_$i492, in_$i493, in_$i494, in_$i495, in_$p496, in_$i497, in_$i498, in_$i499, in_$i500, in_$i501, in_$p502, in_$i503, in_$i504, in_$i505, in_$i506, in_$i507, in_$p508, in_$i509, in_$i510, in_vslice_dummy_var_202, in_vslice_dummy_var_203, in_vslice_dummy_var_204, in_vslice_dummy_var_205, in_vslice_dummy_var_206, in_vslice_dummy_var_207, in_vslice_dummy_var_208, in_vslice_dummy_var_209, in_vslice_dummy_var_210, in_vslice_dummy_var_211, in_vslice_dummy_var_212, in_vslice_dummy_var_213, in_vslice_dummy_var_214, in_vslice_dummy_var_215, in_vslice_dummy_var_216, in_vslice_dummy_var_217, in_vslice_dummy_var_218, in_vslice_dummy_var_219, in_vslice_dummy_var_220, in_vslice_dummy_var_221, in_vslice_dummy_var_222, in_vslice_dummy_var_223, in_vslice_dummy_var_224, in_vslice_dummy_var_225, in_vslice_dummy_var_226, in_vslice_dummy_var_227, in_vslice_dummy_var_228, in_vslice_dummy_var_229, in_vslice_dummy_var_230, in_vslice_dummy_var_231, in_vslice_dummy_var_232, in_vslice_dummy_var_233, in_vslice_dummy_var_234, in_vslice_dummy_var_235, in_vslice_dummy_var_236, in_vslice_dummy_var_237, in_vslice_dummy_var_238, in_vslice_dummy_var_239, in_vslice_dummy_var_240;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2613} out_$i70 := __VERIFIER_nondet_int();
    call {:si_unique_call 2614} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i70);
    call {:si_unique_call 2615} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i70);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb191_dummy;

  $bb389:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb21:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb55:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    $M.98 := out_$i104;
    call {:si_unique_call 2622} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_10009;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    out_$i104 := $add.i32(out_$i103, 1);
    goto corral_source_split_10008;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    out_$i103 := $M.98;
    goto corral_source_split_10007;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 2621} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_10006;

  $bb54:
    assume out_$i102 == 1;
    goto corral_source_split_10005;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i101, 0);
    goto corral_source_split_10003;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    out_$i101 := $M.103;
    goto corral_source_split_10002;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    $M.103 := out_$i100;
    call {:si_unique_call 2620} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_10001;

  SeqInstr_513:
    goto corral_source_split_10000;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} out_$i100 := pool_ctr(out_$p98, out_$i99, in_$p23);
    goto SeqInstr_512;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    out_$i99 := $load.i32($M.0, in_$p5);
    goto corral_source_split_9999;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    out_$p98 := $M.93;
    goto corral_source_split_9998;

  $bb52:
    assume out_$i97 == 1;
    goto corral_source_split_9997;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i96, 1);
    goto corral_source_split_9995;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    out_$i96 := $M.95;
    goto corral_source_split_9994;

  $bb50:
    assume out_$i95 == 1;
    goto corral_source_split_9993;

  $bb46:
    assume out_$i93 == 1;
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i81, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb40:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$i93 := $slt.i32(out_$i81, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb23:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$i90 := $slt.i32(out_$i81, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(out_$i81, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_9943:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2616} out_$i81 := __VERIFIER_nondet_int();
    call {:si_unique_call 2617} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i81);
    call {:si_unique_call 2618} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i81);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i80 == 1;
    goto corral_source_split_9943;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, 0);
    goto corral_source_split_9941;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    out_$i79 := $M.95;
    goto corral_source_split_9940;

  $bb18:
    assume out_$i78 == 1;
    goto corral_source_split_9939;

  $bb14:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i70, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i76 := $slt.i32(out_$i70, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i70, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb69:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    $M.98 := out_$i124;
    call {:si_unique_call 2634} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i124);
    goto corral_source_split_10050;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    out_$i124 := $sub.i32(out_$i123, 1);
    goto corral_source_split_10049;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    out_$i123 := $M.98;
    goto corral_source_split_10048;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2633} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10047;

  SeqInstr_525:
    goto corral_source_split_10046;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} pool_dtr(out_$p122);
    goto SeqInstr_524;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    out_$p122 := $M.93;
    goto corral_source_split_10045;

  $bb68:
    assume out_$i121 == 1;
    goto corral_source_split_10044;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i120, 5);
    goto corral_source_split_10042;

  $bb67:
    assume {:verifier.code 0} true;
    out_$i120 := $M.95;
    goto corral_source_split_10041;

  $bb66:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $M.98 := out_$i119;
    call {:si_unique_call 2631} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_10039;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    out_$i119 := $sub.i32(out_$i118, 1);
    goto corral_source_split_10038;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    out_$i118 := $M.98;
    goto corral_source_split_10037;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2630} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10036;

  SeqInstr_522:
    goto corral_source_split_10035;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2629} pool_dtr(out_$p117);
    goto SeqInstr_521;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    out_$p117 := $M.93;
    goto corral_source_split_10034;

  $bb65:
    assume out_$i116 == 1;
    goto corral_source_split_10033;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    out_$i116 := $eq.i32(out_$i115, 2);
    goto corral_source_split_10031;

  $bb64:
    assume {:verifier.code 0} true;
    out_$i115 := $M.95;
    goto corral_source_split_10030;

  $bb63:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    $M.98 := out_$i114;
    call {:si_unique_call 2628} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_10028;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    out_$i114 := $sub.i32(out_$i113, 1);
    goto corral_source_split_10027;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    out_$i113 := $M.98;
    goto corral_source_split_10026;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2627} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10025;

  SeqInstr_519:
    goto corral_source_split_10024;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2626} pool_dtr(out_$p112);
    goto SeqInstr_518;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    out_$p112 := $M.93;
    goto corral_source_split_10023;

  $bb62:
    assume out_$i111 == 1;
    goto corral_source_split_10022;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 3);
    goto corral_source_split_10020;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i110 := $M.95;
    goto corral_source_split_10019;

  $bb60:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    $M.98 := out_$i109;
    call {:si_unique_call 2625} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_10017;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    out_$i109 := $sub.i32(out_$i108, 1);
    goto corral_source_split_10016;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    out_$i108 := $M.98;
    goto corral_source_split_10015;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2624} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10014;

  SeqInstr_516:
    goto corral_source_split_10013;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2623} pool_dtr(out_$p107);
    goto SeqInstr_515;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    out_$p107 := $M.93;
    goto corral_source_split_10012;

  $bb59:
    assume out_$i106 == 1;
    goto corral_source_split_10011;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    out_$i106 := $eq.i32(out_$i105, 4);
    goto corral_source_split_9987;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    out_$i105 := $M.95;
    goto corral_source_split_9986;

  $bb48:
    assume out_$i94 == 1;
    goto corral_source_split_9985;

  $bb47:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    out_$i94 := $slt.i32(out_$i81, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb84:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    $M.95 := 5;
    call {:si_unique_call 2644} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_10092;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} out_vslice_dummy_var_206 := pool_iterate_devices(out_$p147, out_$p148, in_$p14);
    goto corral_source_split_10091;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    out_$p148 := $load.ref($M.0, in_$p1);
    goto corral_source_split_10090;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    out_$p147 := $M.93;
    goto corral_source_split_10089;

  $bb83:
    assume out_$i146 == 1;
    goto corral_source_split_10088;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(out_$i145, 5);
    goto corral_source_split_10086;

  $bb82:
    assume {:verifier.code 0} true;
    out_$i145 := $M.95;
    goto corral_source_split_10085;

  $bb81:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 2642} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_10083;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2641} out_vslice_dummy_var_205 := pool_iterate_devices(out_$p142, out_$p143, in_$p14);
    goto corral_source_split_10082;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    out_$p143 := $load.ref($M.0, in_$p1);
    goto corral_source_split_10081;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    out_$p142 := $M.93;
    goto corral_source_split_10080;

  $bb80:
    assume out_$i141 == 1;
    goto corral_source_split_10079;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    out_$i141 := $eq.i32(out_$i140, 2);
    goto corral_source_split_10077;

  $bb79:
    assume {:verifier.code 0} true;
    out_$i140 := $M.95;
    goto corral_source_split_10076;

  $bb78:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 2640} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_10074;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2639} out_vslice_dummy_var_204 := pool_iterate_devices(out_$p137, out_$p138, in_$p14);
    goto corral_source_split_10073;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    out_$p138 := $load.ref($M.0, in_$p1);
    goto corral_source_split_10072;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    out_$p137 := $M.93;
    goto corral_source_split_10071;

  $bb77:
    assume out_$i136 == 1;
    goto corral_source_split_10070;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    out_$i136 := $eq.i32(out_$i135, 3);
    goto corral_source_split_10068;

  $bb76:
    assume {:verifier.code 0} true;
    out_$i135 := $M.95;
    goto corral_source_split_10067;

  $bb75:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2638} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10065;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2637} out_vslice_dummy_var_203 := pool_iterate_devices(out_$p132, out_$p133, in_$p14);
    goto corral_source_split_10064;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    out_$p133 := $load.ref($M.0, in_$p1);
    goto corral_source_split_10063;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    out_$p132 := $M.93;
    goto corral_source_split_10062;

  $bb74:
    assume out_$i131 == 1;
    goto corral_source_split_10061;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i130, 1);
    goto corral_source_split_10059;

  $bb73:
    assume {:verifier.code 0} true;
    out_$i130 := $M.95;
    goto corral_source_split_10058;

  $bb72:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    $M.95 := 4;
    call {:si_unique_call 2636} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_10056;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2635} out_vslice_dummy_var_202 := pool_iterate_devices(out_$p127, out_$p128, in_$p14);
    goto corral_source_split_10055;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    out_$p128 := $load.ref($M.0, in_$p1);
    goto corral_source_split_10054;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    out_$p127 := $M.93;
    goto corral_source_split_10053;

  $bb71:
    assume out_$i126 == 1;
    goto corral_source_split_10052;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i125, 4);
    goto corral_source_split_9991;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    out_$i125 := $M.95;
    goto corral_source_split_9990;

  $bb49:
    assume !(out_$i94 == 1);
    goto corral_source_split_9989;

  $bb99:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    $M.95 := 5;
    call {:si_unique_call 2654} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_10134;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2653} out_vslice_dummy_var_211 := pool_merge(out_$p172, in_$p25, in_$p27, out_$i173);
    goto corral_source_split_10133;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    out_$i173 := $load.i32($M.0, in_$p3);
    goto corral_source_split_10132;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    out_$p172 := $M.93;
    goto corral_source_split_10131;

  $bb98:
    assume out_$i171 == 1;
    goto corral_source_split_10130;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i170, 5);
    goto corral_source_split_10128;

  $bb97:
    assume {:verifier.code 0} true;
    out_$i170 := $M.95;
    goto corral_source_split_10127;

  $bb96:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 2652} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_10125;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2651} out_vslice_dummy_var_210 := pool_merge(out_$p167, in_$p25, in_$p27, out_$i168);
    goto corral_source_split_10124;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    out_$i168 := $load.i32($M.0, in_$p3);
    goto corral_source_split_10123;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    out_$p167 := $M.93;
    goto corral_source_split_10122;

  $bb95:
    assume out_$i166 == 1;
    goto corral_source_split_10121;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i165, 2);
    goto corral_source_split_10119;

  $bb94:
    assume {:verifier.code 0} true;
    out_$i165 := $M.95;
    goto corral_source_split_10118;

  $bb93:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 2650} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_10116;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2649} out_vslice_dummy_var_209 := pool_merge(out_$p162, in_$p25, in_$p27, out_$i163);
    goto corral_source_split_10115;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i32($M.0, in_$p3);
    goto corral_source_split_10114;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    out_$p162 := $M.93;
    goto corral_source_split_10113;

  $bb92:
    assume out_$i161 == 1;
    goto corral_source_split_10112;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i160, 3);
    goto corral_source_split_10110;

  $bb91:
    assume {:verifier.code 0} true;
    out_$i160 := $M.95;
    goto corral_source_split_10109;

  $bb90:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2648} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10107;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2647} out_vslice_dummy_var_208 := pool_merge(out_$p157, in_$p25, in_$p27, out_$i158);
    goto corral_source_split_10106;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i32($M.0, in_$p3);
    goto corral_source_split_10105;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    out_$p157 := $M.93;
    goto corral_source_split_10104;

  $bb89:
    assume out_$i156 == 1;
    goto corral_source_split_10103;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    out_$i156 := $eq.i32(out_$i155, 1);
    goto corral_source_split_10101;

  $bb88:
    assume {:verifier.code 0} true;
    out_$i155 := $M.95;
    goto corral_source_split_10100;

  $bb87:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    $M.95 := 4;
    call {:si_unique_call 2646} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_10098;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2645} out_vslice_dummy_var_207 := pool_merge(out_$p152, in_$p25, in_$p27, out_$i153);
    goto corral_source_split_10097;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    out_$i153 := $load.i32($M.0, in_$p3);
    goto corral_source_split_10096;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    out_$p152 := $M.93;
    goto corral_source_split_10095;

  $bb86:
    assume out_$i151 == 1;
    goto corral_source_split_10094;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i150, 4);
    goto corral_source_split_9975;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    out_$i150 := $M.95;
    goto corral_source_split_9974;

  $bb42:
    assume out_$i91 == 1;
    goto corral_source_split_9973;

  $bb41:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    out_$i91 := $slt.i32(out_$i81, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb102:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb104:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    $M.95 := 5;
    call {:si_unique_call 2657} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_10144;

  $bb103:
    assume out_$i180 == 1;
    goto corral_source_split_10143;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    out_$i180 := $eq.i32(out_$i179, 0);
    goto corral_source_split_10141;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    out_$i179 := $M.104;
    goto corral_source_split_10140;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    $M.104 := out_$i178;
    call {:si_unique_call 2656} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i178);
    goto corral_source_split_10139;

  SeqInstr_528:
    goto corral_source_split_10138;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2655} out_$i178 := pool_preresume(out_$p177);
    goto SeqInstr_527;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    out_$p177 := $M.93;
    goto corral_source_split_10137;

  $bb101:
    assume out_$i176 == 1;
    goto corral_source_split_10136;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    out_$i176 := $eq.i32(out_$i175, 4);
    goto corral_source_split_9979;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    out_$i175 := $M.95;
    goto corral_source_split_9978;

  $bb44:
    assume out_$i92 == 1;
    goto corral_source_split_9977;

  $bb43:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    out_$i92 := $slt.i32(out_$i81, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb120:
    assume !(out_$i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    $M.95 := 5;
    call {:si_unique_call 2667} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_10181;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2666} pool_io_hints(out_$p195, in_$p16);
    goto corral_source_split_10180;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    out_$p195 := $M.93;
    goto corral_source_split_10179;

  $bb119:
    assume out_$i194 == 1;
    goto corral_source_split_10178;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    out_$i194 := $eq.i32(out_$i193, 5);
    goto corral_source_split_10176;

  $bb118:
    assume {:verifier.code 0} true;
    out_$i193 := $M.95;
    goto corral_source_split_10175;

  $bb117:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 2665} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_10173;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2664} pool_io_hints(out_$p192, in_$p16);
    goto corral_source_split_10172;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    out_$p192 := $M.93;
    goto corral_source_split_10171;

  $bb116:
    assume out_$i191 == 1;
    goto corral_source_split_10170;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    out_$i191 := $eq.i32(out_$i190, 2);
    goto corral_source_split_10168;

  $bb115:
    assume {:verifier.code 0} true;
    out_$i190 := $M.95;
    goto corral_source_split_10167;

  $bb114:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 2663} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_10165;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} pool_io_hints(out_$p189, in_$p16);
    goto corral_source_split_10164;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    out_$p189 := $M.93;
    goto corral_source_split_10163;

  $bb113:
    assume out_$i188 == 1;
    goto corral_source_split_10162;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i187, 3);
    goto corral_source_split_10160;

  $bb112:
    assume {:verifier.code 0} true;
    out_$i187 := $M.95;
    goto corral_source_split_10159;

  $bb111:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2661} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10157;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2660} pool_io_hints(out_$p186, in_$p16);
    goto corral_source_split_10156;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    out_$p186 := $M.93;
    goto corral_source_split_10155;

  $bb110:
    assume out_$i185 == 1;
    goto corral_source_split_10154;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    out_$i185 := $eq.i32(out_$i184, 1);
    goto corral_source_split_10152;

  $bb109:
    assume {:verifier.code 0} true;
    out_$i184 := $M.95;
    goto corral_source_split_10151;

  $bb108:
    assume !(out_$i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $M.95 := 4;
    call {:si_unique_call 2659} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_10149;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2658} pool_io_hints(out_$p183, in_$p16);
    goto corral_source_split_10148;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    out_$p183 := $M.93;
    goto corral_source_split_10147;

  $bb107:
    assume out_$i182 == 1;
    goto corral_source_split_10146;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    out_$i182 := $eq.i32(out_$i181, 4);
    goto corral_source_split_9983;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    out_$i181 := $M.95;
    goto corral_source_split_9982;

  $bb45:
    assume !(out_$i92 == 1);
    goto corral_source_split_9981;

  $bb132:
    assume !(out_$i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    $M.95 := 5;
    call {:si_unique_call 2675} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_10210;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2674} out_vslice_dummy_var_215 := pool_map(out_$p210, in_$p19);
    goto corral_source_split_10209;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    out_$p210 := $M.93;
    goto corral_source_split_10208;

  $bb131:
    assume out_$i209 == 1;
    goto corral_source_split_10207;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    out_$i209 := $eq.i32(out_$i208, 5);
    goto corral_source_split_10205;

  $bb130:
    assume {:verifier.code 0} true;
    out_$i208 := $M.95;
    goto corral_source_split_10204;

  $bb129:
    assume !(out_$i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 2673} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_10202;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} out_vslice_dummy_var_214 := pool_map(out_$p206, in_$p19);
    goto corral_source_split_10201;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    out_$p206 := $M.93;
    goto corral_source_split_10200;

  $bb128:
    assume out_$i205 == 1;
    goto corral_source_split_10199;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    out_$i205 := $eq.i32(out_$i204, 2);
    goto corral_source_split_10197;

  $bb127:
    assume {:verifier.code 0} true;
    out_$i204 := $M.95;
    goto corral_source_split_10196;

  $bb126:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 2671} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_10194;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2670} out_vslice_dummy_var_213 := pool_map(out_$p202, in_$p19);
    goto corral_source_split_10193;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    out_$p202 := $M.93;
    goto corral_source_split_10192;

  $bb125:
    assume out_$i201 == 1;
    goto corral_source_split_10191;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    out_$i201 := $eq.i32(out_$i200, 3);
    goto corral_source_split_10189;

  $bb124:
    assume {:verifier.code 0} true;
    out_$i200 := $M.95;
    goto corral_source_split_10188;

  $bb123:
    assume !(out_$i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    $M.95 := 4;
    call {:si_unique_call 2669} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_10186;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} out_vslice_dummy_var_212 := pool_map(out_$p198, in_$p19);
    goto corral_source_split_10185;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    out_$p198 := $M.93;
    goto corral_source_split_10184;

  $bb122:
    assume out_$i197 == 1;
    goto corral_source_split_10183;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    out_$i197 := $eq.i32(out_$i196, 4);
    goto corral_source_split_9963;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    out_$i196 := $M.95;
    goto corral_source_split_9962;

  $bb36:
    assume out_$i88 == 1;
    goto corral_source_split_9961;

  $bb25:
    assume out_$i83 == 1;
    assume {:verifier.code 0} true;
    out_$i88 := $slt.i32(out_$i81, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb24:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    out_$i83 := $slt.i32(out_$i81, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb147:
    assume !(out_$i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $M.95 := 5;
    call {:si_unique_call 2685} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_10252;

  SeqInstr_543:
    goto corral_source_split_10251;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2684} out_vslice_dummy_var_220 := pool_message(out_$p234, out_$i235, in_$p21);
    goto SeqInstr_542;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    out_$i235 := $load.i32($M.0, in_$p2);
    goto corral_source_split_10250;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    out_$p234 := $M.93;
    goto corral_source_split_10249;

  $bb146:
    assume out_$i233 == 1;
    goto corral_source_split_10248;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    out_$i233 := $eq.i32(out_$i232, 5);
    goto corral_source_split_10246;

  $bb145:
    assume {:verifier.code 0} true;
    out_$i232 := $M.95;
    goto corral_source_split_10245;

  $bb144:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 2683} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_10243;

  SeqInstr_540:
    goto corral_source_split_10242;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2682} out_vslice_dummy_var_219 := pool_message(out_$p229, out_$i230, in_$p21);
    goto SeqInstr_539;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    out_$i230 := $load.i32($M.0, in_$p2);
    goto corral_source_split_10241;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    out_$p229 := $M.93;
    goto corral_source_split_10240;

  $bb143:
    assume out_$i228 == 1;
    goto corral_source_split_10239;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    out_$i228 := $eq.i32(out_$i227, 2);
    goto corral_source_split_10237;

  $bb142:
    assume {:verifier.code 0} true;
    out_$i227 := $M.95;
    goto corral_source_split_10236;

  $bb141:
    assume !(out_$i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 2681} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_10234;

  SeqInstr_537:
    goto corral_source_split_10233;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2680} out_vslice_dummy_var_218 := pool_message(out_$p224, out_$i225, in_$p21);
    goto SeqInstr_536;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    out_$i225 := $load.i32($M.0, in_$p2);
    goto corral_source_split_10232;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    out_$p224 := $M.93;
    goto corral_source_split_10231;

  $bb140:
    assume out_$i223 == 1;
    goto corral_source_split_10230;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    out_$i223 := $eq.i32(out_$i222, 3);
    goto corral_source_split_10228;

  $bb139:
    assume {:verifier.code 0} true;
    out_$i222 := $M.95;
    goto corral_source_split_10227;

  $bb138:
    assume !(out_$i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2679} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10225;

  SeqInstr_534:
    goto corral_source_split_10224;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2678} out_vslice_dummy_var_217 := pool_message(out_$p219, out_$i220, in_$p21);
    goto SeqInstr_533;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    out_$i220 := $load.i32($M.0, in_$p2);
    goto corral_source_split_10223;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    out_$p219 := $M.93;
    goto corral_source_split_10222;

  $bb137:
    assume out_$i218 == 1;
    goto corral_source_split_10221;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    out_$i218 := $eq.i32(out_$i217, 1);
    goto corral_source_split_10219;

  $bb136:
    assume {:verifier.code 0} true;
    out_$i217 := $M.95;
    goto corral_source_split_10218;

  $bb135:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    $M.95 := 4;
    call {:si_unique_call 2677} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_10216;

  SeqInstr_531:
    goto corral_source_split_10215;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2676} out_vslice_dummy_var_216 := pool_message(out_$p214, out_$i215, in_$p21);
    goto SeqInstr_530;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    out_$i215 := $load.i32($M.0, in_$p2);
    goto corral_source_split_10214;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    out_$p214 := $M.93;
    goto corral_source_split_10213;

  $bb134:
    assume out_$i213 == 1;
    goto corral_source_split_10212;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 4);
    goto corral_source_split_9967;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    out_$i212 := $M.95;
    goto corral_source_split_9966;

  $bb38:
    assume out_$i89 == 1;
    goto corral_source_split_9965;

  $bb37:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    out_$i89 := $slt.i32(out_$i81, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb150:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $M.95 := 4;
    call {:si_unique_call 2687} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_10257;

  SeqInstr_546:
    goto corral_source_split_10256;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2686} pool_postsuspend(out_$p239);
    goto SeqInstr_545;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    out_$p239 := $M.93;
    goto corral_source_split_10255;

  $bb149:
    assume out_$i238 == 1;
    goto corral_source_split_10254;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    out_$i238 := $eq.i32(out_$i237, 3);
    goto corral_source_split_9971;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    out_$i237 := $M.95;
    goto corral_source_split_9970;

  $bb39:
    assume !(out_$i89 == 1);
    goto corral_source_split_9969;

  $bb165:
    assume !(out_$i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    $M.95 := 5;
    call {:si_unique_call 2697} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_10309;

  SeqInstr_561:
    goto corral_source_split_10308;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2696} pool_status(out_$p266, out_$i267, out_$i268, in_$p17, out_$i269);
    goto SeqInstr_560;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    out_$i269 := $load.i32($M.0, in_$p0);
    goto corral_source_split_10307;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    out_$i268 := $load.i32($M.0, in_$p4);
    goto corral_source_split_10306;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    out_$i267 := $load.i32($M.0, in_$p6);
    goto corral_source_split_10305;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    out_$p266 := $M.93;
    goto corral_source_split_10304;

  $bb164:
    assume out_$i265 == 1;
    goto corral_source_split_10303;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    out_$i265 := $eq.i32(out_$i264, 5);
    goto corral_source_split_10301;

  $bb163:
    assume {:verifier.code 0} true;
    out_$i264 := $M.95;
    goto corral_source_split_10300;

  $bb162:
    assume !(out_$i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 2695} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_10298;

  SeqInstr_558:
    goto corral_source_split_10297;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2694} pool_status(out_$p260, out_$i261, out_$i262, in_$p17, out_$i263);
    goto SeqInstr_557;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    out_$i263 := $load.i32($M.0, in_$p0);
    goto corral_source_split_10296;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    out_$i262 := $load.i32($M.0, in_$p4);
    goto corral_source_split_10295;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    out_$i261 := $load.i32($M.0, in_$p6);
    goto corral_source_split_10294;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    out_$p260 := $M.93;
    goto corral_source_split_10293;

  $bb161:
    assume out_$i259 == 1;
    goto corral_source_split_10292;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    out_$i259 := $eq.i32(out_$i258, 2);
    goto corral_source_split_10290;

  $bb160:
    assume {:verifier.code 0} true;
    out_$i258 := $M.95;
    goto corral_source_split_10289;

  $bb159:
    assume !(out_$i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 2693} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_10287;

  SeqInstr_555:
    goto corral_source_split_10286;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} pool_status(out_$p254, out_$i255, out_$i256, in_$p17, out_$i257);
    goto SeqInstr_554;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    out_$i257 := $load.i32($M.0, in_$p0);
    goto corral_source_split_10285;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    out_$i256 := $load.i32($M.0, in_$p4);
    goto corral_source_split_10284;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    out_$i255 := $load.i32($M.0, in_$p6);
    goto corral_source_split_10283;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    out_$p254 := $M.93;
    goto corral_source_split_10282;

  $bb158:
    assume out_$i253 == 1;
    goto corral_source_split_10281;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i252, 3);
    goto corral_source_split_10279;

  $bb157:
    assume {:verifier.code 0} true;
    out_$i252 := $M.95;
    goto corral_source_split_10278;

  $bb156:
    assume !(out_$i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2691} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10276;

  SeqInstr_552:
    goto corral_source_split_10275;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} pool_status(out_$p248, out_$i249, out_$i250, in_$p17, out_$i251);
    goto SeqInstr_551;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    out_$i251 := $load.i32($M.0, in_$p0);
    goto corral_source_split_10274;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    out_$i250 := $load.i32($M.0, in_$p4);
    goto corral_source_split_10273;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    out_$i249 := $load.i32($M.0, in_$p6);
    goto corral_source_split_10272;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    out_$p248 := $M.93;
    goto corral_source_split_10271;

  $bb155:
    assume out_$i247 == 1;
    goto corral_source_split_10270;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    out_$i247 := $eq.i32(out_$i246, 1);
    goto corral_source_split_10268;

  $bb154:
    assume {:verifier.code 0} true;
    out_$i246 := $M.95;
    goto corral_source_split_10267;

  $bb153:
    assume !(out_$i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $M.95 := 4;
    call {:si_unique_call 2689} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_10265;

  SeqInstr_549:
    goto corral_source_split_10264;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2688} pool_status(out_$p242, out_$i243, out_$i244, in_$p17, out_$i245);
    goto SeqInstr_548;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    out_$i245 := $load.i32($M.0, in_$p0);
    goto corral_source_split_10263;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    out_$i244 := $load.i32($M.0, in_$p4);
    goto corral_source_split_10262;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    out_$i243 := $load.i32($M.0, in_$p6);
    goto corral_source_split_10261;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    out_$p242 := $M.93;
    goto corral_source_split_10260;

  $bb152:
    assume out_$i241 == 1;
    goto corral_source_split_10259;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    out_$i241 := $eq.i32(out_$i240, 4);
    goto corral_source_split_9955;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    out_$i240 := $M.95;
    goto corral_source_split_9954;

  $bb34:
    assume out_$i87 == 1;
    goto corral_source_split_9953;

  $bb27:
    assume out_$i84 == 1;
    assume {:verifier.code 0} true;
    out_$i87 := $slt.i32(out_$i81, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb26:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    out_$i84 := $slt.i32(out_$i81, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb168:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 2699} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_10314;

  SeqInstr_564:
    goto corral_source_split_10313;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2698} pool_presuspend(out_$p272);
    goto SeqInstr_563;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    out_$p272 := $M.93;
    goto corral_source_split_10312;

  $bb167:
    assume out_$i271 == 1;
    goto corral_source_split_10311;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    out_$i271 := $eq.i32(out_$i270, 2);
    goto corral_source_split_9959;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    out_$i270 := $M.95;
    goto corral_source_split_9958;

  $bb35:
    assume !(out_$i87 == 1);
    goto corral_source_split_9957;

  $bb171:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 2701} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_10319;

  SeqInstr_567:
    goto corral_source_split_10318;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2700} pool_resume(out_$p275);
    goto SeqInstr_566;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    out_$p275 := $M.93;
    goto corral_source_split_10317;

  $bb170:
    assume out_$i274 == 1;
    goto corral_source_split_10316;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    out_$i274 := $eq.i32(out_$i273, 5);
    goto corral_source_split_9947;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    out_$i273 := $M.95;
    goto corral_source_split_9946;

  $bb29:
    assume out_$i85 == 1;
    goto corral_source_split_9945;

  $bb28:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    out_$i85 := $slt.i32(out_$i81, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb186:
    assume !(out_$i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    $M.95 := 5;
    call {:si_unique_call 2711} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_10356;

  SeqInstr_582:
    goto corral_source_split_10355;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2710} pool_presuspend_undo(out_$p290);
    goto SeqInstr_581;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    out_$p290 := $M.93;
    goto corral_source_split_10354;

  $bb185:
    assume out_$i289 == 1;
    goto corral_source_split_10353;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    out_$i289 := $eq.i32(out_$i288, 5);
    goto corral_source_split_10351;

  $bb184:
    assume {:verifier.code 0} true;
    out_$i288 := $M.95;
    goto corral_source_split_10350;

  $bb183:
    assume !(out_$i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 2709} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_10348;

  SeqInstr_579:
    goto corral_source_split_10347;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2708} pool_presuspend_undo(out_$p287);
    goto SeqInstr_578;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    out_$p287 := $M.93;
    goto corral_source_split_10346;

  $bb182:
    assume out_$i286 == 1;
    goto corral_source_split_10345;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    out_$i286 := $eq.i32(out_$i285, 2);
    goto corral_source_split_10343;

  $bb181:
    assume {:verifier.code 0} true;
    out_$i285 := $M.95;
    goto corral_source_split_10342;

  $bb180:
    assume !(out_$i283 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 2707} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_10340;

  SeqInstr_576:
    goto corral_source_split_10339;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2706} pool_presuspend_undo(out_$p284);
    goto SeqInstr_575;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    out_$p284 := $M.93;
    goto corral_source_split_10338;

  $bb179:
    assume out_$i283 == 1;
    goto corral_source_split_10337;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    out_$i283 := $eq.i32(out_$i282, 3);
    goto corral_source_split_10335;

  $bb178:
    assume {:verifier.code 0} true;
    out_$i282 := $M.95;
    goto corral_source_split_10334;

  $bb177:
    assume !(out_$i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    goto $bb178;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2705} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10332;

  SeqInstr_573:
    goto corral_source_split_10331;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2704} pool_presuspend_undo(out_$p281);
    goto SeqInstr_572;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    out_$p281 := $M.93;
    goto corral_source_split_10330;

  $bb176:
    assume out_$i280 == 1;
    goto corral_source_split_10329;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    out_$i280 := $eq.i32(out_$i279, 1);
    goto corral_source_split_10327;

  $bb175:
    assume {:verifier.code 0} true;
    out_$i279 := $M.95;
    goto corral_source_split_10326;

  $bb174:
    assume !(out_$i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    $M.95 := 4;
    call {:si_unique_call 2703} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_10324;

  SeqInstr_570:
    goto corral_source_split_10323;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2702} pool_presuspend_undo(out_$p278);
    goto SeqInstr_569;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    out_$p278 := $M.93;
    goto corral_source_split_10322;

  $bb173:
    assume out_$i277 == 1;
    goto corral_source_split_10321;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    out_$i277 := $eq.i32(out_$i276, 4);
    goto corral_source_split_9951;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    out_$i276 := $M.95;
    goto corral_source_split_9950;

  $bb31:
    assume out_$i86 == 1;
    goto corral_source_split_9949;

  $bb30:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i81, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2712} ldv_stop();
    goto corral_source_split_10358;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i86 == 1);
    goto $bb33;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i95 == 1);
    goto $bb33;

  $bb193:
    assume !(out_$i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2713} ldv_main_exported_4();
    goto corral_source_split_10361;

  $bb192:
    assume out_$i292 == 1;
    goto corral_source_split_10360;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    out_$i292 := $ne.i32(out_$i291, 0);
    goto corral_source_split_9933;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    out_$i291 := $M.96;
    goto corral_source_split_9932;

  $bb16:
    assume out_$i77 == 1;
    goto corral_source_split_9931;

  $bb15:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i32(out_$i70, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb196:
    assume !(out_$i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    goto $bb197;

  SeqInstr_585:
    goto corral_source_split_10364;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2714} invoke_work_1();
    goto SeqInstr_584;

  $bb195:
    assume out_$i294 == 1;
    goto corral_source_split_10363;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    out_$i294 := $ne.i32(out_$i293, 0);
    goto corral_source_split_9937;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    out_$i293 := $M.97;
    goto corral_source_split_9936;

  $bb17:
    assume !(out_$i77 == 1);
    goto corral_source_split_9935;

  $bb199:
    assume !(out_$i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb209:
    assume {:verifier.code 0} true;
    assume !(out_$i302 == 1);
    goto $bb210;

  $bb212:
    assume {:verifier.code 0} true;
    assume !(out_$i304 == 1);
    goto $bb210;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    out_$i304 := $eq.i32(out_$i303, 0);
    goto corral_source_split_10378;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    out_$i303 := $M.98;
    goto corral_source_split_10377;

  $bb208:
    assume out_$i302 == 1;
    goto corral_source_split_10376;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    out_$i302 := $eq.i32(out_$i301, 2);
    goto corral_source_split_10374;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    out_$i301 := $M.99;
    goto corral_source_split_10373;

  $bb206:
    assume out_$i300 == 1;
    goto corral_source_split_10372;

  $bb201:
    assume out_$i298 == 1;
    assume {:verifier.code 0} true;
    out_$i300 := $eq.i32(out_$i297, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb200:
    assume {:verifier.code 0} true;
    out_$i298 := $slt.i32(out_$i297, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  corral_source_split_10366:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2715} out_$i297 := __VERIFIER_nondet_int();
    call {:si_unique_call 2716} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i297);
    call {:si_unique_call 2717} {:cexpr "tmp___17"} boogie_si_record_i32(out_$i297);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb198:
    assume out_$i296 == 1;
    goto corral_source_split_10366;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    out_$i296 := $ne.i32(out_$i295, 0);
    goto corral_source_split_9925;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    out_$i295 := $M.99;
    goto corral_source_split_9924;

  $bb12:
    assume out_$i75 == 1;
    goto corral_source_split_9923;

  $bb5:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(out_$i70, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i70, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb217:
    assume !(out_$i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb222:
    assume !(out_$i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2730} ldv_target_type_6();
    goto corral_source_split_10405;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2729} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10404;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2728} ldv_initialize_dm_block_validator_4();
    goto corral_source_split_10403;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 2727} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10402;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2726} ldv_target_type_5();
    goto corral_source_split_10401;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 2725} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10400;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    $M.99 := 2;
    call {:si_unique_call 2724} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_10399;

  $bb221:
    assume out_$i311 == 1;
    goto corral_source_split_10398;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    out_$i311 := $eq.i32(out_$i310, 0);
    goto corral_source_split_10396;

  $bb220:
    assume {:verifier.code 0} true;
    out_$i310 := $M.105;
    goto corral_source_split_10395;

  $bb219:
    assume !(out_$i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    out_$i309 := $ne.i32(out_$i308, 0);
    goto corral_source_split_10390;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    out_$i308 := $M.105;
    goto corral_source_split_10389;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    $M.105 := out_$i307;
    call {:si_unique_call 2722} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i307);
    goto corral_source_split_10388;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2721} out_$i307 := dm_thin_init();
    goto corral_source_split_10387;

  $bb216:
    assume out_$i306 == 1;
    goto corral_source_split_10386;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    out_$i306 := $eq.i32(out_$i305, 1);
    goto corral_source_split_10370;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    out_$i305 := $M.99;
    goto corral_source_split_10369;

  $bb203:
    assume out_$i299 == 1;
    goto corral_source_split_10368;

  $bb202:
    assume !(out_$i298 == 1);
    assume {:verifier.code 0} true;
    out_$i299 := $eq.i32(out_$i297, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2731} ldv_stop();
    goto corral_source_split_10407;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb204:
    assume {:verifier.code 0} true;
    assume !(out_$i299 == 1);
    goto $bb205;

  $bb207:
    assume {:verifier.code 0} true;
    assume !(out_$i300 == 1);
    goto $bb205;

  $bb229:
    assume !(out_$i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    goto $bb230;

  SeqInstr_591:
    goto corral_source_split_10410;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2732} invoke_work_3();
    goto SeqInstr_590;

  $bb228:
    assume out_$i313 == 1;
    goto corral_source_split_10409;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    out_$i313 := $ne.i32(out_$i312, 0);
    goto corral_source_split_9929;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    out_$i312 := $M.100;
    goto corral_source_split_9928;

  $bb13:
    assume !(out_$i75 == 1);
    goto corral_source_split_9927;

  $bb232:
    assume !(out_$i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2733} invoke_work_2();
    goto corral_source_split_10413;

  $bb231:
    assume out_$i315 == 1;
    goto corral_source_split_10412;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    out_$i315 := $ne.i32(out_$i314, 0);
    goto corral_source_split_9917;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    out_$i314 := $M.101;
    goto corral_source_split_9916;

  $bb7:
    assume out_$i73 == 1;
    goto corral_source_split_9915;

  $bb6:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i70, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb235:
    assume !(out_$i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb363:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb360:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb265:
    assume !(out_$i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb267:
    assume !(out_$i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    $M.98 := out_$i340;
    call {:si_unique_call 2740} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i340);
    goto corral_source_split_10477;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    out_$i340 := $add.i32(out_$i339, 1);
    goto corral_source_split_10476;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    out_$i339 := $M.98;
    goto corral_source_split_10475;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    $M.102 := 2;
    call {:si_unique_call 2739} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10474;

  $bb266:
    assume out_$i338 == 1;
    goto corral_source_split_10473;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    out_$i338 := $eq.i32(out_$i337, 0);
    goto corral_source_split_10471;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    out_$i337 := $M.106;
    goto corral_source_split_10470;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $M.106 := out_$i336;
    call {:si_unique_call 2738} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i336);
    goto corral_source_split_10469;

  SeqInstr_594:
    goto corral_source_split_10468;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2737} out_$i336 := thin_ctr(out_$p334, out_$i335, in_$p32);
    goto SeqInstr_593;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    out_$i335 := $load.i32($M.0, in_$p9);
    goto corral_source_split_10467;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    out_$p334 := $M.92;
    goto corral_source_split_10466;

  $bb264:
    assume out_$i333 == 1;
    goto corral_source_split_10465;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    out_$i333 := $eq.i32(out_$i332, 1);
    goto corral_source_split_10463;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    out_$i332 := $M.102;
    goto corral_source_split_10462;

  $bb262:
    assume out_$i331 == 1;
    goto corral_source_split_10461;

  $bb258:
    assume out_$i329 == 1;
    assume {:verifier.code 0} true;
    out_$i331 := $eq.i32(out_$i318, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  $bb252:
    assume out_$i326 == 1;
    assume {:verifier.code 0} true;
    out_$i329 := $slt.i32(out_$i318, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  $bb237:
    assume out_$i319 == 1;
    assume {:verifier.code 0} true;
    out_$i326 := $slt.i32(out_$i318, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb236:
    assume {:verifier.code 0} true;
    out_$i319 := $slt.i32(out_$i318, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  corral_source_split_10415:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2734} out_$i318 := __VERIFIER_nondet_int();
    call {:si_unique_call 2735} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i318);
    call {:si_unique_call 2736} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i318);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb234:
    assume out_$i317 == 1;
    goto corral_source_split_10415;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    out_$i317 := $ne.i32(out_$i316, 0);
    goto corral_source_split_9921;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    out_$i316 := $M.102;
    goto corral_source_split_9920;

  $bb9:
    assume out_$i74 == 1;
    goto corral_source_split_9919;

  $bb8:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i70, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb284:
    assume !(out_$i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    goto $bb285;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    $M.102 := 5;
    call {:si_unique_call 2750} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_10519;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2749} out_vslice_dummy_var_225 := thin_endio(out_$p363, in_$p39, out_$i364);
    goto corral_source_split_10518;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    out_$i364 := $load.i32($M.0, in_$p13);
    goto corral_source_split_10517;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    out_$p363 := $M.92;
    goto corral_source_split_10516;

  $bb283:
    assume out_$i362 == 1;
    goto corral_source_split_10515;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    out_$i362 := $eq.i32(out_$i361, 5);
    goto corral_source_split_10513;

  $bb282:
    assume {:verifier.code 0} true;
    out_$i361 := $M.102;
    goto corral_source_split_10512;

  $bb281:
    assume !(out_$i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    goto $bb282;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    $M.102 := 2;
    call {:si_unique_call 2748} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10510;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2747} out_vslice_dummy_var_224 := thin_endio(out_$p358, in_$p39, out_$i359);
    goto corral_source_split_10509;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    out_$i359 := $load.i32($M.0, in_$p13);
    goto corral_source_split_10508;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    out_$p358 := $M.92;
    goto corral_source_split_10507;

  $bb280:
    assume out_$i357 == 1;
    goto corral_source_split_10506;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    out_$i357 := $eq.i32(out_$i356, 2);
    goto corral_source_split_10504;

  $bb279:
    assume {:verifier.code 0} true;
    out_$i356 := $M.102;
    goto corral_source_split_10503;

  $bb278:
    assume !(out_$i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    goto $bb279;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    $M.102 := 3;
    call {:si_unique_call 2746} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10501;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2745} out_vslice_dummy_var_223 := thin_endio(out_$p353, in_$p39, out_$i354);
    goto corral_source_split_10500;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    out_$i354 := $load.i32($M.0, in_$p13);
    goto corral_source_split_10499;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    out_$p353 := $M.92;
    goto corral_source_split_10498;

  $bb277:
    assume out_$i352 == 1;
    goto corral_source_split_10497;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    out_$i352 := $eq.i32(out_$i351, 3);
    goto corral_source_split_10495;

  $bb276:
    assume {:verifier.code 0} true;
    out_$i351 := $M.102;
    goto corral_source_split_10494;

  $bb275:
    assume !(out_$i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    goto $bb276;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 2744} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10492;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2743} out_vslice_dummy_var_222 := thin_endio(out_$p348, in_$p39, out_$i349);
    goto corral_source_split_10491;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    out_$i349 := $load.i32($M.0, in_$p13);
    goto corral_source_split_10490;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    out_$p348 := $M.92;
    goto corral_source_split_10489;

  $bb274:
    assume out_$i347 == 1;
    goto corral_source_split_10488;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    out_$i347 := $eq.i32(out_$i346, 1);
    goto corral_source_split_10486;

  $bb273:
    assume {:verifier.code 0} true;
    out_$i346 := $M.102;
    goto corral_source_split_10485;

  $bb272:
    assume !(out_$i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    goto $bb273;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    $M.102 := 4;
    call {:si_unique_call 2742} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_10483;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2741} out_vslice_dummy_var_221 := thin_endio(out_$p343, in_$p39, out_$i344);
    goto corral_source_split_10482;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    out_$i344 := $load.i32($M.0, in_$p13);
    goto corral_source_split_10481;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    out_$p343 := $M.92;
    goto corral_source_split_10480;

  $bb271:
    assume out_$i342 == 1;
    goto corral_source_split_10479;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    out_$i342 := $eq.i32(out_$i341, 4);
    goto corral_source_split_10455;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    out_$i341 := $M.102;
    goto corral_source_split_10454;

  $bb260:
    assume out_$i330 == 1;
    goto corral_source_split_10453;

  $bb259:
    assume !(out_$i329 == 1);
    assume {:verifier.code 0} true;
    out_$i330 := $slt.i32(out_$i318, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb296:
    assume !(out_$i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    goto $bb297;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    $M.98 := out_$i385;
    call {:si_unique_call 2762} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i385);
    goto corral_source_split_10560;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    out_$i385 := $sub.i32(out_$i384, 1);
    goto corral_source_split_10559;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    out_$i384 := $M.98;
    goto corral_source_split_10558;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 2761} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10557;

  SeqInstr_606:
    goto corral_source_split_10556;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2760} thin_dtr(out_$p383);
    goto SeqInstr_605;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    out_$p383 := $M.92;
    goto corral_source_split_10555;

  $bb295:
    assume out_$i382 == 1;
    goto corral_source_split_10554;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    out_$i382 := $eq.i32(out_$i381, 5);
    goto corral_source_split_10552;

  $bb294:
    assume {:verifier.code 0} true;
    out_$i381 := $M.102;
    goto corral_source_split_10551;

  $bb293:
    assume !(out_$i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    goto $bb294;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    $M.98 := out_$i380;
    call {:si_unique_call 2759} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i380);
    goto corral_source_split_10549;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    out_$i380 := $sub.i32(out_$i379, 1);
    goto corral_source_split_10548;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    out_$i379 := $M.98;
    goto corral_source_split_10547;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 2758} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10546;

  SeqInstr_603:
    goto corral_source_split_10545;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2757} thin_dtr(out_$p378);
    goto SeqInstr_602;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    out_$p378 := $M.92;
    goto corral_source_split_10544;

  $bb292:
    assume out_$i377 == 1;
    goto corral_source_split_10543;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    out_$i377 := $eq.i32(out_$i376, 2);
    goto corral_source_split_10541;

  $bb291:
    assume {:verifier.code 0} true;
    out_$i376 := $M.102;
    goto corral_source_split_10540;

  $bb290:
    assume !(out_$i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    goto $bb291;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    $M.98 := out_$i375;
    call {:si_unique_call 2756} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i375);
    goto corral_source_split_10538;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    out_$i375 := $sub.i32(out_$i374, 1);
    goto corral_source_split_10537;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    out_$i374 := $M.98;
    goto corral_source_split_10536;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 2755} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10535;

  SeqInstr_600:
    goto corral_source_split_10534;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} thin_dtr(out_$p373);
    goto SeqInstr_599;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    out_$p373 := $M.92;
    goto corral_source_split_10533;

  $bb289:
    assume out_$i372 == 1;
    goto corral_source_split_10532;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    out_$i372 := $eq.i32(out_$i371, 3);
    goto corral_source_split_10530;

  $bb288:
    assume {:verifier.code 0} true;
    out_$i371 := $M.102;
    goto corral_source_split_10529;

  $bb287:
    assume !(out_$i367 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    goto $bb288;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    $M.98 := out_$i370;
    call {:si_unique_call 2753} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i370);
    goto corral_source_split_10527;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    out_$i370 := $sub.i32(out_$i369, 1);
    goto corral_source_split_10526;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    out_$i369 := $M.98;
    goto corral_source_split_10525;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 2752} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10524;

  SeqInstr_597:
    goto corral_source_split_10523;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2751} thin_dtr(out_$p368);
    goto SeqInstr_596;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    out_$p368 := $M.92;
    goto corral_source_split_10522;

  $bb286:
    assume out_$i367 == 1;
    goto corral_source_split_10521;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    out_$i367 := $eq.i32(out_$i366, 4);
    goto corral_source_split_10459;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    out_$i366 := $M.102;
    goto corral_source_split_10458;

  $bb261:
    assume !(out_$i330 == 1);
    goto corral_source_split_10457;

  $bb311:
    assume !(out_$i407 == 1);
    assume {:verifier.code 0} true;
    goto $bb312;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    goto $bb312;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $M.102 := 5;
    call {:si_unique_call 2772} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_10602;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2771} out_vslice_dummy_var_230 := thin_iterate_devices(out_$p408, out_$p409, in_$p30);
    goto corral_source_split_10601;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    out_$p409 := $load.ref($M.0, in_$p8);
    goto corral_source_split_10600;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    out_$p408 := $M.92;
    goto corral_source_split_10599;

  $bb310:
    assume out_$i407 == 1;
    goto corral_source_split_10598;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    out_$i407 := $eq.i32(out_$i406, 5);
    goto corral_source_split_10596;

  $bb309:
    assume {:verifier.code 0} true;
    out_$i406 := $M.102;
    goto corral_source_split_10595;

  $bb308:
    assume !(out_$i402 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    goto $bb309;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $M.102 := 2;
    call {:si_unique_call 2770} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10593;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2769} out_vslice_dummy_var_229 := thin_iterate_devices(out_$p403, out_$p404, in_$p30);
    goto corral_source_split_10592;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    out_$p404 := $load.ref($M.0, in_$p8);
    goto corral_source_split_10591;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    out_$p403 := $M.92;
    goto corral_source_split_10590;

  $bb307:
    assume out_$i402 == 1;
    goto corral_source_split_10589;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    out_$i402 := $eq.i32(out_$i401, 2);
    goto corral_source_split_10587;

  $bb306:
    assume {:verifier.code 0} true;
    out_$i401 := $M.102;
    goto corral_source_split_10586;

  $bb305:
    assume !(out_$i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    goto $bb306;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $M.102 := 3;
    call {:si_unique_call 2768} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10584;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2767} out_vslice_dummy_var_228 := thin_iterate_devices(out_$p398, out_$p399, in_$p30);
    goto corral_source_split_10583;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    out_$p399 := $load.ref($M.0, in_$p8);
    goto corral_source_split_10582;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    out_$p398 := $M.92;
    goto corral_source_split_10581;

  $bb304:
    assume out_$i397 == 1;
    goto corral_source_split_10580;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    out_$i397 := $eq.i32(out_$i396, 3);
    goto corral_source_split_10578;

  $bb303:
    assume {:verifier.code 0} true;
    out_$i396 := $M.102;
    goto corral_source_split_10577;

  $bb302:
    assume !(out_$i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    goto $bb303;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 2766} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10575;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2765} out_vslice_dummy_var_227 := thin_iterate_devices(out_$p393, out_$p394, in_$p30);
    goto corral_source_split_10574;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    out_$p394 := $load.ref($M.0, in_$p8);
    goto corral_source_split_10573;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    out_$p393 := $M.92;
    goto corral_source_split_10572;

  $bb301:
    assume out_$i392 == 1;
    goto corral_source_split_10571;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    out_$i392 := $eq.i32(out_$i391, 1);
    goto corral_source_split_10569;

  $bb300:
    assume {:verifier.code 0} true;
    out_$i391 := $M.102;
    goto corral_source_split_10568;

  $bb299:
    assume !(out_$i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    goto $bb300;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    $M.102 := 4;
    call {:si_unique_call 2764} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_10566;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2763} out_vslice_dummy_var_226 := thin_iterate_devices(out_$p388, out_$p389, in_$p30);
    goto corral_source_split_10565;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    out_$p389 := $load.ref($M.0, in_$p8);
    goto corral_source_split_10564;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    out_$p388 := $M.92;
    goto corral_source_split_10563;

  $bb298:
    assume out_$i387 == 1;
    goto corral_source_split_10562;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    out_$i387 := $eq.i32(out_$i386, 4);
    goto corral_source_split_10443;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    out_$i386 := $M.102;
    goto corral_source_split_10442;

  $bb254:
    assume out_$i327 == 1;
    goto corral_source_split_10441;

  $bb253:
    assume !(out_$i326 == 1);
    assume {:verifier.code 0} true;
    out_$i327 := $slt.i32(out_$i318, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb326:
    assume !(out_$i432 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    goto $bb327;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    $M.102 := 5;
    call {:si_unique_call 2782} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_10644;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2781} out_vslice_dummy_var_235 := thin_merge(out_$p433, in_$p36, in_$p29, out_$i434);
    goto corral_source_split_10643;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    out_$i434 := $load.i32($M.0, in_$p11);
    goto corral_source_split_10642;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    out_$p433 := $M.92;
    goto corral_source_split_10641;

  $bb325:
    assume out_$i432 == 1;
    goto corral_source_split_10640;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    out_$i432 := $eq.i32(out_$i431, 5);
    goto corral_source_split_10638;

  $bb324:
    assume {:verifier.code 0} true;
    out_$i431 := $M.102;
    goto corral_source_split_10637;

  $bb323:
    assume !(out_$i427 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    goto $bb324;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    $M.102 := 2;
    call {:si_unique_call 2780} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10635;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2779} out_vslice_dummy_var_234 := thin_merge(out_$p428, in_$p36, in_$p29, out_$i429);
    goto corral_source_split_10634;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    out_$i429 := $load.i32($M.0, in_$p11);
    goto corral_source_split_10633;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    out_$p428 := $M.92;
    goto corral_source_split_10632;

  $bb322:
    assume out_$i427 == 1;
    goto corral_source_split_10631;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    out_$i427 := $eq.i32(out_$i426, 2);
    goto corral_source_split_10629;

  $bb321:
    assume {:verifier.code 0} true;
    out_$i426 := $M.102;
    goto corral_source_split_10628;

  $bb320:
    assume !(out_$i422 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    goto $bb321;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    $M.102 := 3;
    call {:si_unique_call 2778} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10626;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2777} out_vslice_dummy_var_233 := thin_merge(out_$p423, in_$p36, in_$p29, out_$i424);
    goto corral_source_split_10625;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    out_$i424 := $load.i32($M.0, in_$p11);
    goto corral_source_split_10624;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    out_$p423 := $M.92;
    goto corral_source_split_10623;

  $bb319:
    assume out_$i422 == 1;
    goto corral_source_split_10622;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    out_$i422 := $eq.i32(out_$i421, 3);
    goto corral_source_split_10620;

  $bb318:
    assume {:verifier.code 0} true;
    out_$i421 := $M.102;
    goto corral_source_split_10619;

  $bb317:
    assume !(out_$i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb318;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    goto $bb318;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 2776} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10617;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2775} out_vslice_dummy_var_232 := thin_merge(out_$p418, in_$p36, in_$p29, out_$i419);
    goto corral_source_split_10616;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    out_$i419 := $load.i32($M.0, in_$p11);
    goto corral_source_split_10615;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    out_$p418 := $M.92;
    goto corral_source_split_10614;

  $bb316:
    assume out_$i417 == 1;
    goto corral_source_split_10613;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    out_$i417 := $eq.i32(out_$i416, 1);
    goto corral_source_split_10611;

  $bb315:
    assume {:verifier.code 0} true;
    out_$i416 := $M.102;
    goto corral_source_split_10610;

  $bb314:
    assume !(out_$i412 == 1);
    assume {:verifier.code 0} true;
    goto $bb315;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    goto $bb315;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    $M.102 := 4;
    call {:si_unique_call 2774} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_10608;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2773} out_vslice_dummy_var_231 := thin_merge(out_$p413, in_$p36, in_$p29, out_$i414);
    goto corral_source_split_10607;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    out_$i414 := $load.i32($M.0, in_$p11);
    goto corral_source_split_10606;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    out_$p413 := $M.92;
    goto corral_source_split_10605;

  $bb313:
    assume out_$i412 == 1;
    goto corral_source_split_10604;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    out_$i412 := $eq.i32(out_$i411, 4);
    goto corral_source_split_10447;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    out_$i411 := $M.102;
    goto corral_source_split_10446;

  $bb256:
    assume out_$i328 == 1;
    goto corral_source_split_10445;

  $bb255:
    assume !(out_$i327 == 1);
    assume {:verifier.code 0} true;
    out_$i328 := $slt.i32(out_$i318, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  $bb329:
    assume !(out_$i437 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb332:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb331:
    assume !(out_$i441 == 1);
    assume {:verifier.code 0} true;
    goto $bb332;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    goto $bb332;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $M.102 := 5;
    call {:si_unique_call 2785} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_10654;

  $bb330:
    assume out_$i441 == 1;
    goto corral_source_split_10653;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    out_$i441 := $eq.i32(out_$i440, 0);
    goto corral_source_split_10651;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    out_$i440 := $M.107;
    goto corral_source_split_10650;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    $M.107 := out_$i439;
    call {:si_unique_call 2784} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i439);
    goto corral_source_split_10649;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2783} out_$i439 := thin_preresume(out_$p438);
    goto corral_source_split_10648;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    out_$p438 := $M.92;
    goto corral_source_split_10647;

  $bb328:
    assume out_$i437 == 1;
    goto corral_source_split_10646;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    out_$i437 := $eq.i32(out_$i436, 4);
    goto corral_source_split_10451;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    out_$i436 := $M.102;
    goto corral_source_split_10450;

  $bb257:
    assume !(out_$i328 == 1);
    goto corral_source_split_10449;

  $bb347:
    assume !(out_$i455 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    goto $bb348;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $M.102 := 5;
    call {:si_unique_call 2795} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_10691;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2794} thin_io_hints(out_$p456, in_$p41);
    goto corral_source_split_10690;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    out_$p456 := $M.92;
    goto corral_source_split_10689;

  $bb346:
    assume out_$i455 == 1;
    goto corral_source_split_10688;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    out_$i455 := $eq.i32(out_$i454, 5);
    goto corral_source_split_10686;

  $bb345:
    assume {:verifier.code 0} true;
    out_$i454 := $M.102;
    goto corral_source_split_10685;

  $bb344:
    assume !(out_$i452 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    goto $bb345;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    $M.102 := 2;
    call {:si_unique_call 2793} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10683;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2792} thin_io_hints(out_$p453, in_$p41);
    goto corral_source_split_10682;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    out_$p453 := $M.92;
    goto corral_source_split_10681;

  $bb343:
    assume out_$i452 == 1;
    goto corral_source_split_10680;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb343, $bb344;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    out_$i452 := $eq.i32(out_$i451, 2);
    goto corral_source_split_10678;

  $bb342:
    assume {:verifier.code 0} true;
    out_$i451 := $M.102;
    goto corral_source_split_10677;

  $bb341:
    assume !(out_$i449 == 1);
    assume {:verifier.code 0} true;
    goto $bb342;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    goto $bb342;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    $M.102 := 3;
    call {:si_unique_call 2791} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10675;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2790} thin_io_hints(out_$p450, in_$p41);
    goto corral_source_split_10674;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    out_$p450 := $M.92;
    goto corral_source_split_10673;

  $bb340:
    assume out_$i449 == 1;
    goto corral_source_split_10672;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    out_$i449 := $eq.i32(out_$i448, 3);
    goto corral_source_split_10670;

  $bb339:
    assume {:verifier.code 0} true;
    out_$i448 := $M.102;
    goto corral_source_split_10669;

  $bb338:
    assume !(out_$i446 == 1);
    assume {:verifier.code 0} true;
    goto $bb339;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    goto $bb339;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 2789} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10667;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2788} thin_io_hints(out_$p447, in_$p41);
    goto corral_source_split_10666;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    out_$p447 := $M.92;
    goto corral_source_split_10665;

  $bb337:
    assume out_$i446 == 1;
    goto corral_source_split_10664;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    out_$i446 := $eq.i32(out_$i445, 1);
    goto corral_source_split_10662;

  $bb336:
    assume {:verifier.code 0} true;
    out_$i445 := $M.102;
    goto corral_source_split_10661;

  $bb335:
    assume !(out_$i443 == 1);
    assume {:verifier.code 0} true;
    goto $bb336;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    goto $bb336;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $M.102 := 4;
    call {:si_unique_call 2787} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_10659;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2786} thin_io_hints(out_$p444, in_$p41);
    goto corral_source_split_10658;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    out_$p444 := $M.92;
    goto corral_source_split_10657;

  $bb334:
    assume out_$i443 == 1;
    goto corral_source_split_10656;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    out_$i443 := $eq.i32(out_$i442, 4);
    goto corral_source_split_10431;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    out_$i442 := $M.102;
    goto corral_source_split_10430;

  $bb248:
    assume out_$i324 == 1;
    goto corral_source_split_10429;

  $bb239:
    assume out_$i320 == 1;
    assume {:verifier.code 0} true;
    out_$i324 := $slt.i32(out_$i318, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb238:
    assume !(out_$i319 == 1);
    assume {:verifier.code 0} true;
    out_$i320 := $slt.i32(out_$i318, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb359:
    assume !(out_$i470 == 1);
    assume {:verifier.code 0} true;
    goto $bb360;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    goto $bb360;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    $M.102 := 5;
    call {:si_unique_call 2803} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_10720;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2802} out_vslice_dummy_var_239 := thin_map(out_$p471, in_$p34);
    goto corral_source_split_10719;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    out_$p471 := $M.92;
    goto corral_source_split_10718;

  $bb358:
    assume out_$i470 == 1;
    goto corral_source_split_10717;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    out_$i470 := $eq.i32(out_$i469, 5);
    goto corral_source_split_10715;

  $bb357:
    assume {:verifier.code 0} true;
    out_$i469 := $M.102;
    goto corral_source_split_10714;

  $bb356:
    assume !(out_$i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    goto $bb357;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    $M.102 := 2;
    call {:si_unique_call 2801} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10712;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2800} out_vslice_dummy_var_238 := thin_map(out_$p467, in_$p34);
    goto corral_source_split_10711;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    out_$p467 := $M.92;
    goto corral_source_split_10710;

  $bb355:
    assume out_$i466 == 1;
    goto corral_source_split_10709;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb355, $bb356;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    out_$i466 := $eq.i32(out_$i465, 2);
    goto corral_source_split_10707;

  $bb354:
    assume {:verifier.code 0} true;
    out_$i465 := $M.102;
    goto corral_source_split_10706;

  $bb353:
    assume !(out_$i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb354;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    goto $bb354;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    $M.102 := 3;
    call {:si_unique_call 2799} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10704;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2798} out_vslice_dummy_var_237 := thin_map(out_$p463, in_$p34);
    goto corral_source_split_10703;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    out_$p463 := $M.92;
    goto corral_source_split_10702;

  $bb352:
    assume out_$i462 == 1;
    goto corral_source_split_10701;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    out_$i462 := $eq.i32(out_$i461, 3);
    goto corral_source_split_10699;

  $bb351:
    assume {:verifier.code 0} true;
    out_$i461 := $M.102;
    goto corral_source_split_10698;

  $bb350:
    assume !(out_$i458 == 1);
    assume {:verifier.code 0} true;
    goto $bb351;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    goto $bb351;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    $M.102 := 4;
    call {:si_unique_call 2797} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_10696;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2796} out_vslice_dummy_var_236 := thin_map(out_$p459, in_$p34);
    goto corral_source_split_10695;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    out_$p459 := $M.92;
    goto corral_source_split_10694;

  $bb349:
    assume out_$i458 == 1;
    goto corral_source_split_10693;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb349, $bb350;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    out_$i458 := $eq.i32(out_$i457, 4);
    goto corral_source_split_10435;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    out_$i457 := $M.102;
    goto corral_source_split_10434;

  $bb250:
    assume out_$i325 == 1;
    goto corral_source_split_10433;

  $bb249:
    assume !(out_$i324 == 1);
    assume {:verifier.code 0} true;
    out_$i325 := $slt.i32(out_$i318, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb362:
    assume !(out_$i474 == 1);
    assume {:verifier.code 0} true;
    goto $bb363;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    goto $bb363;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    $M.102 := 4;
    call {:si_unique_call 2805} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_10725;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2804} thin_postsuspend(out_$p475);
    goto corral_source_split_10724;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    out_$p475 := $M.92;
    goto corral_source_split_10723;

  $bb361:
    assume out_$i474 == 1;
    goto corral_source_split_10722;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    out_$i474 := $eq.i32(out_$i473, 3);
    goto corral_source_split_10439;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    out_$i473 := $M.102;
    goto corral_source_split_10438;

  $bb251:
    assume !(out_$i325 == 1);
    goto corral_source_split_10437;

  $bb377:
    assume !(out_$i501 == 1);
    assume {:verifier.code 0} true;
    goto $bb378;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    goto $bb378;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    $M.102 := 5;
    call {:si_unique_call 2815} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(5);
    goto corral_source_split_10777;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2814} thin_status(out_$p502, out_$i503, out_$i504, in_$p37, out_$i505);
    goto corral_source_split_10776;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    out_$i505 := $load.i32($M.0, in_$p10);
    goto corral_source_split_10775;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    out_$i504 := $load.i32($M.0, in_$p7);
    goto corral_source_split_10774;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    out_$i503 := $load.i32($M.0, in_$p12);
    goto corral_source_split_10773;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    out_$p502 := $M.92;
    goto corral_source_split_10772;

  $bb376:
    assume out_$i501 == 1;
    goto corral_source_split_10771;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    out_$i501 := $eq.i32(out_$i500, 5);
    goto corral_source_split_10769;

  $bb375:
    assume {:verifier.code 0} true;
    out_$i500 := $M.102;
    goto corral_source_split_10768;

  $bb374:
    assume !(out_$i495 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    goto $bb375;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    $M.102 := 2;
    call {:si_unique_call 2813} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10766;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2812} thin_status(out_$p496, out_$i497, out_$i498, in_$p37, out_$i499);
    goto corral_source_split_10765;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    out_$i499 := $load.i32($M.0, in_$p10);
    goto corral_source_split_10764;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    out_$i498 := $load.i32($M.0, in_$p7);
    goto corral_source_split_10763;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    out_$i497 := $load.i32($M.0, in_$p12);
    goto corral_source_split_10762;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    out_$p496 := $M.92;
    goto corral_source_split_10761;

  $bb373:
    assume out_$i495 == 1;
    goto corral_source_split_10760;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    out_$i495 := $eq.i32(out_$i494, 2);
    goto corral_source_split_10758;

  $bb372:
    assume {:verifier.code 0} true;
    out_$i494 := $M.102;
    goto corral_source_split_10757;

  $bb371:
    assume !(out_$i489 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    goto $bb372;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    $M.102 := 3;
    call {:si_unique_call 2811} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10755;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2810} thin_status(out_$p490, out_$i491, out_$i492, in_$p37, out_$i493);
    goto corral_source_split_10754;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    out_$i493 := $load.i32($M.0, in_$p10);
    goto corral_source_split_10753;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    out_$i492 := $load.i32($M.0, in_$p7);
    goto corral_source_split_10752;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    out_$i491 := $load.i32($M.0, in_$p12);
    goto corral_source_split_10751;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    out_$p490 := $M.92;
    goto corral_source_split_10750;

  $bb370:
    assume out_$i489 == 1;
    goto corral_source_split_10749;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    out_$i489 := $eq.i32(out_$i488, 3);
    goto corral_source_split_10747;

  $bb369:
    assume {:verifier.code 0} true;
    out_$i488 := $M.102;
    goto corral_source_split_10746;

  $bb368:
    assume !(out_$i483 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    goto $bb369;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 2809} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10744;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2808} thin_status(out_$p484, out_$i485, out_$i486, in_$p37, out_$i487);
    goto corral_source_split_10743;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    out_$i487 := $load.i32($M.0, in_$p10);
    goto corral_source_split_10742;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    out_$i486 := $load.i32($M.0, in_$p7);
    goto corral_source_split_10741;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    out_$i485 := $load.i32($M.0, in_$p12);
    goto corral_source_split_10740;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    out_$p484 := $M.92;
    goto corral_source_split_10739;

  $bb367:
    assume out_$i483 == 1;
    goto corral_source_split_10738;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    out_$i483 := $eq.i32(out_$i482, 1);
    goto corral_source_split_10736;

  $bb366:
    assume {:verifier.code 0} true;
    out_$i482 := $M.102;
    goto corral_source_split_10735;

  $bb365:
    assume !(out_$i477 == 1);
    assume {:verifier.code 0} true;
    goto $bb366;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    goto $bb366;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    $M.102 := 4;
    call {:si_unique_call 2807} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_10733;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2806} thin_status(out_$p478, out_$i479, out_$i480, in_$p37, out_$i481);
    goto corral_source_split_10732;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    out_$i481 := $load.i32($M.0, in_$p10);
    goto corral_source_split_10731;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    out_$i480 := $load.i32($M.0, in_$p7);
    goto corral_source_split_10730;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    out_$i479 := $load.i32($M.0, in_$p12);
    goto corral_source_split_10729;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    out_$p478 := $M.92;
    goto corral_source_split_10728;

  $bb364:
    assume out_$i477 == 1;
    goto corral_source_split_10727;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    out_$i477 := $eq.i32(out_$i476, 4);
    goto corral_source_split_10419;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    out_$i476 := $M.102;
    goto corral_source_split_10418;

  $bb241:
    assume out_$i321 == 1;
    goto corral_source_split_10417;

  $bb240:
    assume !(out_$i320 == 1);
    assume {:verifier.code 0} true;
    out_$i321 := $slt.i32(out_$i318, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb380:
    assume !(out_$i507 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    goto $bb381;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    $M.102 := 3;
    call {:si_unique_call 2817} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10782;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2816} thin_presuspend(out_$p508);
    goto corral_source_split_10781;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    out_$p508 := $M.92;
    goto corral_source_split_10780;

  $bb379:
    assume out_$i507 == 1;
    goto corral_source_split_10779;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    out_$i507 := $eq.i32(out_$i506, 2);
    goto corral_source_split_10423;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    out_$i506 := $M.102;
    goto corral_source_split_10422;

  $bb243:
    assume out_$i322 == 1;
    goto corral_source_split_10421;

  $bb242:
    assume !(out_$i321 == 1);
    assume {:verifier.code 0} true;
    out_$i322 := $slt.i32(out_$i318, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb383:
    assume !(out_$i510 == 1);
    assume {:verifier.code 0} true;
    goto $bb384;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    goto $bb384;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $M.102 := 2;
    call {:si_unique_call 2819} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10786;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2818} out_vslice_dummy_var_240 := ldv_resume_5();
    goto corral_source_split_10785;

  $bb382:
    assume out_$i510 == 1;
    goto corral_source_split_10784;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    out_$i510 := $eq.i32(out_$i509, 5);
    goto corral_source_split_10427;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    out_$i509 := $M.102;
    goto corral_source_split_10426;

  $bb245:
    assume out_$i323 == 1;
    goto corral_source_split_10425;

  $bb244:
    assume !(out_$i322 == 1);
    assume {:verifier.code 0} true;
    out_$i323 := $eq.i32(out_$i318, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2820} ldv_stop();
    goto corral_source_split_10788;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb246:
    assume {:verifier.code 0} true;
    assume !(out_$i323 == 1);
    goto $bb247;

  $bb263:
    assume {:verifier.code 0} true;
    assume !(out_$i331 == 1);
    goto $bb247;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2821} ldv_stop();
    goto corral_source_split_10790;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i74 == 1);
    goto $bb11;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i78 == 1);
    goto $bb11;

  $bb191_dummy:
    call {:si_unique_call 1} out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$p127, out_$p128, out_$i130, out_$i131, out_$p132, out_$p133, out_$i135, out_$i136, out_$p137, out_$p138, out_$i140, out_$i141, out_$p142, out_$p143, out_$i145, out_$i146, out_$p147, out_$p148, out_$i150, out_$i151, out_$p152, out_$i153, out_$i155, out_$i156, out_$p157, out_$i158, out_$i160, out_$i161, out_$p162, out_$i163, out_$i165, out_$i166, out_$p167, out_$i168, out_$i170, out_$i171, out_$p172, out_$i173, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$p183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$p192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i197, out_$p198, out_$i200, out_$i201, out_$p202, out_$i204, out_$i205, out_$p206, out_$i208, out_$i209, out_$p210, out_$i212, out_$i213, out_$p214, out_$i215, out_$i217, out_$i218, out_$p219, out_$i220, out_$i222, out_$i223, out_$p224, out_$i225, out_$i227, out_$i228, out_$p229, out_$i230, out_$i232, out_$i233, out_$p234, out_$i235, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$p242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$p254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$p260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$p266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$i273, out_$i274, out_$p275, out_$i276, out_$i277, out_$p278, out_$i279, out_$i280, out_$p281, out_$i282, out_$i283, out_$p284, out_$i285, out_$i286, out_$p287, out_$i288, out_$i289, out_$p290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$p334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$p343, out_$i344, out_$i346, out_$i347, out_$p348, out_$i349, out_$i351, out_$i352, out_$p353, out_$i354, out_$i356, out_$i357, out_$p358, out_$i359, out_$i361, out_$i362, out_$p363, out_$i364, out_$i366, out_$i367, out_$p368, out_$i369, out_$i370, out_$i371, out_$i372, out_$p373, out_$i374, out_$i375, out_$i376, out_$i377, out_$p378, out_$i379, out_$i380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i386, out_$i387, out_$p388, out_$p389, out_$i391, out_$i392, out_$p393, out_$p394, out_$i396, out_$i397, out_$p398, out_$p399, out_$i401, out_$i402, out_$p403, out_$p404, out_$i406, out_$i407, out_$p408, out_$p409, out_$i411, out_$i412, out_$p413, out_$i414, out_$i416, out_$i417, out_$p418, out_$i419, out_$i421, out_$i422, out_$p423, out_$i424, out_$i426, out_$i427, out_$p428, out_$i429, out_$i431, out_$i432, out_$p433, out_$i434, out_$i436, out_$i437, out_$p438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$p444, out_$i445, out_$i446, out_$p447, out_$i448, out_$i449, out_$p450, out_$i451, out_$i452, out_$p453, out_$i454, out_$i455, out_$p456, out_$i457, out_$i458, out_$p459, out_$i461, out_$i462, out_$p463, out_$i465, out_$i466, out_$p467, out_$i469, out_$i470, out_$p471, out_$i473, out_$i474, out_$p475, out_$i476, out_$i477, out_$p478, out_$i479, out_$i480, out_$i481, out_$i482, out_$i483, out_$p484, out_$i485, out_$i486, out_$i487, out_$i488, out_$i489, out_$p490, out_$i491, out_$i492, out_$i493, out_$i494, out_$i495, out_$p496, out_$i497, out_$i498, out_$i499, out_$i500, out_$i501, out_$p502, out_$i503, out_$i504, out_$i505, out_$i506, out_$i507, out_$p508, out_$i509, out_$i510, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_209, out_vslice_dummy_var_210, out_vslice_dummy_var_211, out_vslice_dummy_var_212, out_vslice_dummy_var_213, out_vslice_dummy_var_214, out_vslice_dummy_var_215, out_vslice_dummy_var_216, out_vslice_dummy_var_217, out_vslice_dummy_var_218, out_vslice_dummy_var_219, out_vslice_dummy_var_220, out_vslice_dummy_var_221, out_vslice_dummy_var_222, out_vslice_dummy_var_223, out_vslice_dummy_var_224, out_vslice_dummy_var_225, out_vslice_dummy_var_226, out_vslice_dummy_var_227, out_vslice_dummy_var_228, out_vslice_dummy_var_229, out_vslice_dummy_var_230, out_vslice_dummy_var_231, out_vslice_dummy_var_232, out_vslice_dummy_var_233, out_vslice_dummy_var_234, out_vslice_dummy_var_235, out_vslice_dummy_var_236, out_vslice_dummy_var_237, out_vslice_dummy_var_238, out_vslice_dummy_var_239, out_vslice_dummy_var_240 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p16, in_$p17, in_$p19, in_$p21, in_$p23, in_$p25, in_$p27, in_$p29, in_$p30, in_$p32, in_$p34, in_$p36, in_$p37, in_$p39, in_$p41, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$p127, out_$p128, out_$i130, out_$i131, out_$p132, out_$p133, out_$i135, out_$i136, out_$p137, out_$p138, out_$i140, out_$i141, out_$p142, out_$p143, out_$i145, out_$i146, out_$p147, out_$p148, out_$i150, out_$i151, out_$p152, out_$i153, out_$i155, out_$i156, out_$p157, out_$i158, out_$i160, out_$i161, out_$p162, out_$i163, out_$i165, out_$i166, out_$p167, out_$i168, out_$i170, out_$i171, out_$p172, out_$i173, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$p183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$p192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i197, out_$p198, out_$i200, out_$i201, out_$p202, out_$i204, out_$i205, out_$p206, out_$i208, out_$i209, out_$p210, out_$i212, out_$i213, out_$p214, out_$i215, out_$i217, out_$i218, out_$p219, out_$i220, out_$i222, out_$i223, out_$p224, out_$i225, out_$i227, out_$i228, out_$p229, out_$i230, out_$i232, out_$i233, out_$p234, out_$i235, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$p242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$p254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$p260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$p266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$i273, out_$i274, out_$p275, out_$i276, out_$i277, out_$p278, out_$i279, out_$i280, out_$p281, out_$i282, out_$i283, out_$p284, out_$i285, out_$i286, out_$p287, out_$i288, out_$i289, out_$p290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$p334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$p343, out_$i344, out_$i346, out_$i347, out_$p348, out_$i349, out_$i351, out_$i352, out_$p353, out_$i354, out_$i356, out_$i357, out_$p358, out_$i359, out_$i361, out_$i362, out_$p363, out_$i364, out_$i366, out_$i367, out_$p368, out_$i369, out_$i370, out_$i371, out_$i372, out_$p373, out_$i374, out_$i375, out_$i376, out_$i377, out_$p378, out_$i379, out_$i380, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i386, out_$i387, out_$p388, out_$p389, out_$i391, out_$i392, out_$p393, out_$p394, out_$i396, out_$i397, out_$p398, out_$p399, out_$i401, out_$i402, out_$p403, out_$p404, out_$i406, out_$i407, out_$p408, out_$p409, out_$i411, out_$i412, out_$p413, out_$i414, out_$i416, out_$i417, out_$p418, out_$i419, out_$i421, out_$i422, out_$p423, out_$i424, out_$i426, out_$i427, out_$p428, out_$i429, out_$i431, out_$i432, out_$p433, out_$i434, out_$i436, out_$i437, out_$p438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$p444, out_$i445, out_$i446, out_$p447, out_$i448, out_$i449, out_$p450, out_$i451, out_$i452, out_$p453, out_$i454, out_$i455, out_$p456, out_$i457, out_$i458, out_$p459, out_$i461, out_$i462, out_$p463, out_$i465, out_$i466, out_$p467, out_$i469, out_$i470, out_$p471, out_$i473, out_$i474, out_$p475, out_$i476, out_$i477, out_$p478, out_$i479, out_$i480, out_$i481, out_$i482, out_$i483, out_$p484, out_$i485, out_$i486, out_$i487, out_$i488, out_$i489, out_$p490, out_$i491, out_$i492, out_$i493, out_$i494, out_$i495, out_$p496, out_$i497, out_$i498, out_$i499, out_$i500, out_$i501, out_$p502, out_$i503, out_$i504, out_$i505, out_$i506, out_$i507, out_$p508, out_$i509, out_$i510, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_209, out_vslice_dummy_var_210, out_vslice_dummy_var_211, out_vslice_dummy_var_212, out_vslice_dummy_var_213, out_vslice_dummy_var_214, out_vslice_dummy_var_215, out_vslice_dummy_var_216, out_vslice_dummy_var_217, out_vslice_dummy_var_218, out_vslice_dummy_var_219, out_vslice_dummy_var_220, out_vslice_dummy_var_221, out_vslice_dummy_var_222, out_vslice_dummy_var_223, out_vslice_dummy_var_224, out_vslice_dummy_var_225, out_vslice_dummy_var_226, out_vslice_dummy_var_227, out_vslice_dummy_var_228, out_vslice_dummy_var_229, out_vslice_dummy_var_230, out_vslice_dummy_var_231, out_vslice_dummy_var_232, out_vslice_dummy_var_233, out_vslice_dummy_var_234, out_vslice_dummy_var_235, out_vslice_dummy_var_236, out_vslice_dummy_var_237, out_vslice_dummy_var_238, out_vslice_dummy_var_239, out_vslice_dummy_var_240);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$p21: ref, in_$p23: ref, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$p36: ref, in_$p37: ref, in_$p39: ref, in_$p41: ref, in_$i70: i32, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i108: i32, in_$i109: i32, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i123: i32, in_$i124: i32, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$p128: ref, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$p133: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$p138: ref, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$p143: ref, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i153: i32, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i165: i32, in_$i166: i1, in_$p167: ref, in_$i168: i32, in_$i170: i32, in_$i171: i1, in_$p172: ref, in_$i173: i32, in_$i175: i32, in_$i176: i1, in_$p177: ref, in_$i178: i32, in_$i179: i32, in_$i180: i1, in_$i181: i32, in_$i182: i1, in_$p183: ref, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$i193: i32, in_$i194: i1, in_$p195: ref, in_$i196: i32, in_$i197: i1, in_$p198: ref, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i204: i32, in_$i205: i1, in_$p206: ref, in_$i208: i32, in_$i209: i1, in_$p210: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i215: i32, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$i220: i32, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$i225: i32, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$i230: i32, in_$i232: i32, in_$i233: i1, in_$p234: ref, in_$i235: i32, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i240: i32, in_$i241: i1, in_$p242: ref, in_$i243: i32, in_$i244: i32, in_$i245: i32, in_$i246: i32, in_$i247: i1, in_$p248: ref, in_$i249: i32, in_$i250: i32, in_$i251: i32, in_$i252: i32, in_$i253: i1, in_$p254: ref, in_$i255: i32, in_$i256: i32, in_$i257: i32, in_$i258: i32, in_$i259: i1, in_$p260: ref, in_$i261: i32, in_$i262: i32, in_$i263: i32, in_$i264: i32, in_$i265: i1, in_$p266: ref, in_$i267: i32, in_$i268: i32, in_$i269: i32, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$i273: i32, in_$i274: i1, in_$p275: ref, in_$i276: i32, in_$i277: i1, in_$p278: ref, in_$i279: i32, in_$i280: i1, in_$p281: ref, in_$i282: i32, in_$i283: i1, in_$p284: ref, in_$i285: i32, in_$i286: i1, in_$p287: ref, in_$i288: i32, in_$i289: i1, in_$p290: ref, in_$i291: i32, in_$i292: i1, in_$i293: i32, in_$i294: i1, in_$i295: i32, in_$i296: i1, in_$i297: i32, in_$i298: i1, in_$i299: i1, in_$i300: i1, in_$i301: i32, in_$i302: i1, in_$i303: i32, in_$i304: i1, in_$i305: i32, in_$i306: i1, in_$i307: i32, in_$i308: i32, in_$i309: i1, in_$i310: i32, in_$i311: i1, in_$i312: i32, in_$i313: i1, in_$i314: i32, in_$i315: i1, in_$i316: i32, in_$i317: i1, in_$i318: i32, in_$i319: i1, in_$i320: i1, in_$i321: i1, in_$i322: i1, in_$i323: i1, in_$i324: i1, in_$i325: i1, in_$i326: i1, in_$i327: i1, in_$i328: i1, in_$i329: i1, in_$i330: i1, in_$i331: i1, in_$i332: i32, in_$i333: i1, in_$p334: ref, in_$i335: i32, in_$i336: i32, in_$i337: i32, in_$i338: i1, in_$i339: i32, in_$i340: i32, in_$i341: i32, in_$i342: i1, in_$p343: ref, in_$i344: i32, in_$i346: i32, in_$i347: i1, in_$p348: ref, in_$i349: i32, in_$i351: i32, in_$i352: i1, in_$p353: ref, in_$i354: i32, in_$i356: i32, in_$i357: i1, in_$p358: ref, in_$i359: i32, in_$i361: i32, in_$i362: i1, in_$p363: ref, in_$i364: i32, in_$i366: i32, in_$i367: i1, in_$p368: ref, in_$i369: i32, in_$i370: i32, in_$i371: i32, in_$i372: i1, in_$p373: ref, in_$i374: i32, in_$i375: i32, in_$i376: i32, in_$i377: i1, in_$p378: ref, in_$i379: i32, in_$i380: i32, in_$i381: i32, in_$i382: i1, in_$p383: ref, in_$i384: i32, in_$i385: i32, in_$i386: i32, in_$i387: i1, in_$p388: ref, in_$p389: ref, in_$i391: i32, in_$i392: i1, in_$p393: ref, in_$p394: ref, in_$i396: i32, in_$i397: i1, in_$p398: ref, in_$p399: ref, in_$i401: i32, in_$i402: i1, in_$p403: ref, in_$p404: ref, in_$i406: i32, in_$i407: i1, in_$p408: ref, in_$p409: ref, in_$i411: i32, in_$i412: i1, in_$p413: ref, in_$i414: i32, in_$i416: i32, in_$i417: i1, in_$p418: ref, in_$i419: i32, in_$i421: i32, in_$i422: i1, in_$p423: ref, in_$i424: i32, in_$i426: i32, in_$i427: i1, in_$p428: ref, in_$i429: i32, in_$i431: i32, in_$i432: i1, in_$p433: ref, in_$i434: i32, in_$i436: i32, in_$i437: i1, in_$p438: ref, in_$i439: i32, in_$i440: i32, in_$i441: i1, in_$i442: i32, in_$i443: i1, in_$p444: ref, in_$i445: i32, in_$i446: i1, in_$p447: ref, in_$i448: i32, in_$i449: i1, in_$p450: ref, in_$i451: i32, in_$i452: i1, in_$p453: ref, in_$i454: i32, in_$i455: i1, in_$p456: ref, in_$i457: i32, in_$i458: i1, in_$p459: ref, in_$i461: i32, in_$i462: i1, in_$p463: ref, in_$i465: i32, in_$i466: i1, in_$p467: ref, in_$i469: i32, in_$i470: i1, in_$p471: ref, in_$i473: i32, in_$i474: i1, in_$p475: ref, in_$i476: i32, in_$i477: i1, in_$p478: ref, in_$i479: i32, in_$i480: i32, in_$i481: i32, in_$i482: i32, in_$i483: i1, in_$p484: ref, in_$i485: i32, in_$i486: i32, in_$i487: i32, in_$i488: i32, in_$i489: i1, in_$p490: ref, in_$i491: i32, in_$i492: i32, in_$i493: i32, in_$i494: i32, in_$i495: i1, in_$p496: ref, in_$i497: i32, in_$i498: i32, in_$i499: i32, in_$i500: i32, in_$i501: i1, in_$p502: ref, in_$i503: i32, in_$i504: i32, in_$i505: i32, in_$i506: i32, in_$i507: i1, in_$p508: ref, in_$i509: i32, in_$i510: i1, in_vslice_dummy_var_202: i32, in_vslice_dummy_var_203: i32, in_vslice_dummy_var_204: i32, in_vslice_dummy_var_205: i32, in_vslice_dummy_var_206: i32, in_vslice_dummy_var_207: i32, in_vslice_dummy_var_208: i32, in_vslice_dummy_var_209: i32, in_vslice_dummy_var_210: i32, in_vslice_dummy_var_211: i32, in_vslice_dummy_var_212: i32, in_vslice_dummy_var_213: i32, in_vslice_dummy_var_214: i32, in_vslice_dummy_var_215: i32, in_vslice_dummy_var_216: i32, in_vslice_dummy_var_217: i32, in_vslice_dummy_var_218: i32, in_vslice_dummy_var_219: i32, in_vslice_dummy_var_220: i32, in_vslice_dummy_var_221: i32, in_vslice_dummy_var_222: i32, in_vslice_dummy_var_223: i32, in_vslice_dummy_var_224: i32, in_vslice_dummy_var_225: i32, in_vslice_dummy_var_226: i32, in_vslice_dummy_var_227: i32, in_vslice_dummy_var_228: i32, in_vslice_dummy_var_229: i32, in_vslice_dummy_var_230: i32, in_vslice_dummy_var_231: i32, in_vslice_dummy_var_232: i32, in_vslice_dummy_var_233: i32, in_vslice_dummy_var_234: i32, in_vslice_dummy_var_235: i32, in_vslice_dummy_var_236: i32, in_vslice_dummy_var_237: i32, in_vslice_dummy_var_238: i32, in_vslice_dummy_var_239: i32, in_vslice_dummy_var_240: i32) returns (out_$i70: i32, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i108: i32, out_$i109: i32, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i123: i32, out_$i124: i32, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$p128: ref, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$p133: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$p138: ref, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$p143: ref, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i153: i32, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i165: i32, out_$i166: i1, out_$p167: ref, out_$i168: i32, out_$i170: i32, out_$i171: i1, out_$p172: ref, out_$i173: i32, out_$i175: i32, out_$i176: i1, out_$p177: ref, out_$i178: i32, out_$i179: i32, out_$i180: i1, out_$i181: i32, out_$i182: i1, out_$p183: ref, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$i193: i32, out_$i194: i1, out_$p195: ref, out_$i196: i32, out_$i197: i1, out_$p198: ref, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i204: i32, out_$i205: i1, out_$p206: ref, out_$i208: i32, out_$i209: i1, out_$p210: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i215: i32, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$i220: i32, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$i225: i32, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$i230: i32, out_$i232: i32, out_$i233: i1, out_$p234: ref, out_$i235: i32, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i240: i32, out_$i241: i1, out_$p242: ref, out_$i243: i32, out_$i244: i32, out_$i245: i32, out_$i246: i32, out_$i247: i1, out_$p248: ref, out_$i249: i32, out_$i250: i32, out_$i251: i32, out_$i252: i32, out_$i253: i1, out_$p254: ref, out_$i255: i32, out_$i256: i32, out_$i257: i32, out_$i258: i32, out_$i259: i1, out_$p260: ref, out_$i261: i32, out_$i262: i32, out_$i263: i32, out_$i264: i32, out_$i265: i1, out_$p266: ref, out_$i267: i32, out_$i268: i32, out_$i269: i32, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$i273: i32, out_$i274: i1, out_$p275: ref, out_$i276: i32, out_$i277: i1, out_$p278: ref, out_$i279: i32, out_$i280: i1, out_$p281: ref, out_$i282: i32, out_$i283: i1, out_$p284: ref, out_$i285: i32, out_$i286: i1, out_$p287: ref, out_$i288: i32, out_$i289: i1, out_$p290: ref, out_$i291: i32, out_$i292: i1, out_$i293: i32, out_$i294: i1, out_$i295: i32, out_$i296: i1, out_$i297: i32, out_$i298: i1, out_$i299: i1, out_$i300: i1, out_$i301: i32, out_$i302: i1, out_$i303: i32, out_$i304: i1, out_$i305: i32, out_$i306: i1, out_$i307: i32, out_$i308: i32, out_$i309: i1, out_$i310: i32, out_$i311: i1, out_$i312: i32, out_$i313: i1, out_$i314: i32, out_$i315: i1, out_$i316: i32, out_$i317: i1, out_$i318: i32, out_$i319: i1, out_$i320: i1, out_$i321: i1, out_$i322: i1, out_$i323: i1, out_$i324: i1, out_$i325: i1, out_$i326: i1, out_$i327: i1, out_$i328: i1, out_$i329: i1, out_$i330: i1, out_$i331: i1, out_$i332: i32, out_$i333: i1, out_$p334: ref, out_$i335: i32, out_$i336: i32, out_$i337: i32, out_$i338: i1, out_$i339: i32, out_$i340: i32, out_$i341: i32, out_$i342: i1, out_$p343: ref, out_$i344: i32, out_$i346: i32, out_$i347: i1, out_$p348: ref, out_$i349: i32, out_$i351: i32, out_$i352: i1, out_$p353: ref, out_$i354: i32, out_$i356: i32, out_$i357: i1, out_$p358: ref, out_$i359: i32, out_$i361: i32, out_$i362: i1, out_$p363: ref, out_$i364: i32, out_$i366: i32, out_$i367: i1, out_$p368: ref, out_$i369: i32, out_$i370: i32, out_$i371: i32, out_$i372: i1, out_$p373: ref, out_$i374: i32, out_$i375: i32, out_$i376: i32, out_$i377: i1, out_$p378: ref, out_$i379: i32, out_$i380: i32, out_$i381: i32, out_$i382: i1, out_$p383: ref, out_$i384: i32, out_$i385: i32, out_$i386: i32, out_$i387: i1, out_$p388: ref, out_$p389: ref, out_$i391: i32, out_$i392: i1, out_$p393: ref, out_$p394: ref, out_$i396: i32, out_$i397: i1, out_$p398: ref, out_$p399: ref, out_$i401: i32, out_$i402: i1, out_$p403: ref, out_$p404: ref, out_$i406: i32, out_$i407: i1, out_$p408: ref, out_$p409: ref, out_$i411: i32, out_$i412: i1, out_$p413: ref, out_$i414: i32, out_$i416: i32, out_$i417: i1, out_$p418: ref, out_$i419: i32, out_$i421: i32, out_$i422: i1, out_$p423: ref, out_$i424: i32, out_$i426: i32, out_$i427: i1, out_$p428: ref, out_$i429: i32, out_$i431: i32, out_$i432: i1, out_$p433: ref, out_$i434: i32, out_$i436: i32, out_$i437: i1, out_$p438: ref, out_$i439: i32, out_$i440: i32, out_$i441: i1, out_$i442: i32, out_$i443: i1, out_$p444: ref, out_$i445: i32, out_$i446: i1, out_$p447: ref, out_$i448: i32, out_$i449: i1, out_$p450: ref, out_$i451: i32, out_$i452: i1, out_$p453: ref, out_$i454: i32, out_$i455: i1, out_$p456: ref, out_$i457: i32, out_$i458: i1, out_$p459: ref, out_$i461: i32, out_$i462: i1, out_$p463: ref, out_$i465: i32, out_$i466: i1, out_$p467: ref, out_$i469: i32, out_$i470: i1, out_$p471: ref, out_$i473: i32, out_$i474: i1, out_$p475: ref, out_$i476: i32, out_$i477: i1, out_$p478: ref, out_$i479: i32, out_$i480: i32, out_$i481: i32, out_$i482: i32, out_$i483: i1, out_$p484: ref, out_$i485: i32, out_$i486: i32, out_$i487: i32, out_$i488: i32, out_$i489: i1, out_$p490: ref, out_$i491: i32, out_$i492: i32, out_$i493: i32, out_$i494: i32, out_$i495: i1, out_$p496: ref, out_$i497: i32, out_$i498: i32, out_$i499: i32, out_$i500: i32, out_$i501: i1, out_$p502: ref, out_$i503: i32, out_$i504: i32, out_$i505: i32, out_$i506: i32, out_$i507: i1, out_$p508: ref, out_$i509: i32, out_$i510: i1, out_vslice_dummy_var_202: i32, out_vslice_dummy_var_203: i32, out_vslice_dummy_var_204: i32, out_vslice_dummy_var_205: i32, out_vslice_dummy_var_206: i32, out_vslice_dummy_var_207: i32, out_vslice_dummy_var_208: i32, out_vslice_dummy_var_209: i32, out_vslice_dummy_var_210: i32, out_vslice_dummy_var_211: i32, out_vslice_dummy_var_212: i32, out_vslice_dummy_var_213: i32, out_vslice_dummy_var_214: i32, out_vslice_dummy_var_215: i32, out_vslice_dummy_var_216: i32, out_vslice_dummy_var_217: i32, out_vslice_dummy_var_218: i32, out_vslice_dummy_var_219: i32, out_vslice_dummy_var_220: i32, out_vslice_dummy_var_221: i32, out_vslice_dummy_var_222: i32, out_vslice_dummy_var_223: i32, out_vslice_dummy_var_224: i32, out_vslice_dummy_var_225: i32, out_vslice_dummy_var_226: i32, out_vslice_dummy_var_227: i32, out_vslice_dummy_var_228: i32, out_vslice_dummy_var_229: i32, out_vslice_dummy_var_230: i32, out_vslice_dummy_var_231: i32, out_vslice_dummy_var_232: i32, out_vslice_dummy_var_233: i32, out_vslice_dummy_var_234: i32, out_vslice_dummy_var_235: i32, out_vslice_dummy_var_236: i32, out_vslice_dummy_var_237: i32, out_vslice_dummy_var_238: i32, out_vslice_dummy_var_239: i32, out_vslice_dummy_var_240: i32);
  modifies $M.98, $M.95, $M.103, $M.62, $M.0, $M.63, $M.64, $M.18, $M.78, $M.79, $M.80, $M.81, $CurrAddr, assertsPassed, $M.42, $M.4, $M.58, $M.59, $M.60, $M.5, $M.7, $M.9, $M.11, $M.55, $M.15, $M.45, $M.6, $M.8, $M.10, $M.12, $M.16, $M.17, $M.51, $M.52, $M.41, $M.43, $M.40, $M.25, $M.26, $M.29, $M.49, $M.47, $M.50, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.30, $M.31, $M.32, $M.104, $M.61, $M.71, $M.65, $M.66, $M.96, $M.93, $M.109, $M.108, $M.92, $M.102, $M.99, $M.105, $M.82, $M.83, $M.84, $M.85, $M.86, $M.88, $M.89, $M.90, $M.91, $M.106, $M.107, $M.2;


