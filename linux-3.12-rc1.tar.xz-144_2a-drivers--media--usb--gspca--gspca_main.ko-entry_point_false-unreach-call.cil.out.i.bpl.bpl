var $M.0: [ref]i8;

var $M.1: i32;

var $M.2: [ref]i8;

var $M.3: [ref]i8;

var $M.4: ref;

var $M.5: i32;

var $M.6: ref;

var $M.7: i32;

var $M.8: ref;

var $M.9: [ref]i32;

var $M.10: [ref]i32;

var $M.11: [ref]i32;

var $M.12: [ref]ref;

var $M.13: [ref]ref;

var $M.14: [ref]ref;

var $M.15: [ref]ref;

var $M.16: [ref]i32;

var $M.17: ref;

var $M.18: ref;

var $M.19: ref;

var $M.20: ref;

var $M.21: ref;

var $M.22: ref;

var $M.23: ref;

var $M.24: ref;

var $M.25: [ref]i8;

var $M.26: [ref]i8;

var $M.27: i32;

var $M.28: i32;

var $M.29: i32;

var $M.30: i32;

var $M.31: i32;

var $M.32: i32;

var $M.33: i32;

var $M.34: i32;

var $M.35: ref;

var $M.36: i32;

var $M.37: i32;

var $M.38: i32;

var $M.41: [ref]i8;

var $M.42: [ref]i8;

var $M.43: [ref]i8;

var $M.44: [ref]i8;

var $M.45: [ref]i8;

var $M.46: [ref]i8;

var $M.47: [ref]i8;

var $M.48: [ref]i8;

var $M.49: [ref]i8;

var $M.50: [ref]i8;

var $M.51: [ref]i8;

var $M.52: [ref]ref;

var $M.53: [ref]ref;

var $M.54: [ref]ref;

var $M.55: [ref]ref;

var $M.56: [ref]ref;

var $M.57: [ref]ref;

var $M.58: [ref]ref;

var $M.59: [ref]ref;

var $M.60: [ref]ref;

var $M.61: [ref]ref;

var $M.62: [ref]ref;

var $M.63: [ref]ref;

var $M.64: [ref]ref;

var $M.65: [ref]ref;

var $M.66: [ref]ref;

var $M.67: [ref]ref;

var $M.68: [ref]ref;

var $M.69: [ref]ref;

var $M.70: [ref]ref;

var $M.71: [ref]ref;

var $M.72: [ref]ref;

var $M.73: [ref]ref;

var $M.74: [ref]ref;

var $M.75: [ref]ref;

var $M.76: [ref]ref;

var $M.77: [ref]ref;

var $M.78: [ref]ref;

var $M.79: [ref]ref;

var $M.80: [ref]ref;

var $M.81: [ref]ref;

var $M.82: [ref]ref;

var $M.83: [ref]ref;

var $M.84: [ref]ref;

var $M.85: [ref]ref;

var $M.86: [ref]ref;

var $M.87: [ref]ref;

var $M.88: [ref]ref;

var $M.89: [ref]ref;

var $M.90: [ref]ref;

var $M.91: [ref]ref;

var $M.92: [ref]ref;

var $M.93: [ref]ref;

var $M.94: [ref]ref;

var $M.95: [ref]ref;

var $M.96: [ref]ref;

var $M.97: [ref]ref;

var $M.98: [ref]ref;

var $M.99: [ref]ref;

var $M.100: [ref]ref;

var $M.101: [ref]ref;

var $M.102: [ref]ref;

var $M.103: [ref]ref;

var $M.104: [ref]ref;

var $M.105: [ref]ref;

var $M.106: [ref]ref;

var $M.107: [ref]ref;

var $M.108: [ref]ref;

var $M.109: [ref]ref;

var $M.110: [ref]ref;

var $M.111: [ref]ref;

var $M.112: [ref]ref;

var $M.113: [ref]ref;

var $M.114: [ref]ref;

var $M.115: [ref]ref;

var $M.116: [ref]ref;

var $M.117: [ref]ref;

var $M.118: [ref]ref;

var $M.119: [ref]ref;

var $M.120: [ref]ref;

var $M.121: [ref]ref;

var $M.122: [ref]ref;

var $M.123: [ref]ref;

var $M.124: [ref]ref;

var $M.125: [ref]ref;

var $M.126: [ref]ref;

var $M.127: [ref]ref;

var $M.128: [ref]ref;

var $M.129: [ref]ref;

var $M.130: [ref]ref;

var $M.131: [ref]ref;

var $M.132: [ref]ref;

var $M.133: [ref]ref;

var $M.134: [ref]ref;

var $M.135: [ref]ref;

var $M.136: [ref]ref;

var $M.137: [ref]ref;

var $M.138: [ref]ref;

var $M.139: [ref]ref;

var $M.140: [ref]ref;

var $M.141: [ref]ref;

var $M.142: [ref]ref;

var $M.143: [ref]ref;

var $M.144: [ref]ref;

var $M.145: [ref]ref;

var $M.146: [ref]ref;

var $M.147: [ref]ref;

var $M.148: [ref]ref;

var $M.149: [ref]ref;

var $M.150: [ref]i8;

var $M.151: [ref]i8;

var $M.152: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 333516);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const gspca_debug: ref;

axiom gspca_debug == $sub.ref(0, 2056);

const dev_fops_group0: ref;

axiom dev_fops_group0 == $sub.ref(0, 3088);

const gspca_vm_ops_group0: ref;

axiom gspca_vm_ops_group0 == $sub.ref(0, 4120);

const dev_ioctl_ops_group3: ref;

axiom dev_ioctl_ops_group3 == $sub.ref(0, 5152);

const dev_ioctl_ops_group0: ref;

axiom dev_ioctl_ops_group0 == $sub.ref(0, 6184);

const dev_ioctl_ops_group1: ref;

axiom dev_ioctl_ops_group1 == $sub.ref(0, 7216);

const dev_ioctl_ops_group5: ref;

axiom dev_ioctl_ops_group5 == $sub.ref(0, 8248);

const dev_ioctl_ops_group4: ref;

axiom dev_ioctl_ops_group4 == $sub.ref(0, 9280);

const dev_ioctl_ops_group2: ref;

axiom dev_ioctl_ops_group2 == $sub.ref(0, 10312);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 11340);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 12368);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 13396);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 14424);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 15452);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 16480);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 17508);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 18536);

const INTERF_STATE: ref;

axiom INTERF_STATE == $sub.ref(0, 19564);

const SERIAL_STATE: ref;

axiom SERIAL_STATE == $sub.ref(0, 20592);

const usb_intfdata: ref;

axiom usb_intfdata == $sub.ref(0, 21624);

const usb_urb: ref;

axiom usb_urb == $sub.ref(0, 22656);

const usb_dev: ref;

axiom usb_dev == $sub.ref(0, 23688);

const dev_counter: ref;

axiom dev_counter == $sub.ref(0, 24716);

const completeFnIntCounter: ref;

axiom completeFnIntCounter == $sub.ref(0, 25744);

const completeFnBulkCounter: ref;

axiom completeFnBulkCounter == $sub.ref(0, 26772);

const completeFnInt: ref;

axiom completeFnInt == $sub.ref(0, 27804);

const completeFnBulk: ref;

axiom completeFnBulk == $sub.ref(0, 28836);

const gspca_vm_ops: ref;

axiom gspca_vm_ops == $sub.ref(0, 29932);

const dev_ioctl_ops: ref;

axiom dev_ioctl_ops == $sub.ref(0, 31828);

const dev_fops: ref;

axiom dev_fops == $sub.ref(0, 32940);

const gspca_template: ref;

axiom gspca_template == $sub.ref(0, 35772);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 16} .str.53: ref;

axiom .str.53 == $sub.ref(0, 36812);

const {:count 16} .str.54: ref;

axiom .str.54 == $sub.ref(0, 37852);

const {:count 16} .str.55: ref;

axiom .str.55 == $sub.ref(0, 38892);

const {:count 19} .str.47: ref;

axiom .str.47 == $sub.ref(0, 39935);

const {:count 61} .str.19: ref;

axiom .str.19 == $sub.ref(0, 41020);

const {:count 41} .str.20: ref;

axiom .str.20 == $sub.ref(0, 42085);

const {:count 29} .str.21: ref;

axiom .str.21 == $sub.ref(0, 43138);

const {:count 32} .str.22: ref;

axiom .str.22 == $sub.ref(0, 44194);

const {:count 48} .str.23: ref;

axiom .str.23 == $sub.ref(0, 45266);

const {:count 31} .str.25: ref;

axiom .str.25 == $sub.ref(0, 46321);

const {:count 19} .str.24: ref;

axiom .str.24 == $sub.ref(0, 47364);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 15} .str.65: ref;

axiom .str.65 == $sub.ref(0, 48403);

const {:count 29} .str.49: ref;

axiom .str.49 == $sub.ref(0, 49456);

const {:count 26} .str.50: ref;

axiom .str.50 == $sub.ref(0, 50506);

const {:count 32} .str.51: ref;

axiom .str.51 == $sub.ref(0, 51562);

const {:count 19} .str.52: ref;

axiom .str.52 == $sub.ref(0, 52605);

const {:count 10} .str.64: ref;

axiom .str.64 == $sub.ref(0, 53639);

const {:count 16} .str.60: ref;

axiom .str.60 == $sub.ref(0, 54679);

const {:count 24} .str.61: ref;

axiom .str.61 == $sub.ref(0, 55727);

const {:count 23} .str.62: ref;

axiom .str.62 == $sub.ref(0, 56774);

const {:count 26} .str.63: ref;

axiom .str.63 == $sub.ref(0, 57824);

const {:count 13} .str.80: ref;

axiom .str.80 == $sub.ref(0, 58861);

const {:count 23} .str.70: ref;

axiom .str.70 == $sub.ref(0, 59908);

const {:count 21} .str.71: ref;

axiom .str.71 == $sub.ref(0, 60953);

const {:count 32} .str.26: ref;

axiom .str.26 == $sub.ref(0, 62009);

const {:count 41} .str.27: ref;

axiom .str.27 == $sub.ref(0, 63074);

const {:count 32} .str.28: ref;

axiom .str.28 == $sub.ref(0, 64130);

const {:count 26} .str.29: ref;

axiom .str.29 == $sub.ref(0, 65180);

const {:count 43} .str.30: ref;

axiom .str.30 == $sub.ref(0, 66247);

const {:count 54} .str.31: ref;

axiom .str.31 == $sub.ref(0, 67325);

const {:count 37} .str.36: ref;

axiom .str.36 == $sub.ref(0, 68386);

const {:count 19} .str.37: ref;

axiom .str.37 == $sub.ref(0, 69429);

const {:count 35} .str.38: ref;

axiom .str.38 == $sub.ref(0, 70488);

const {:count 40} .str.39: ref;

axiom .str.39 == $sub.ref(0, 71552);

const {:count 14} .str.45: ref;

axiom .str.45 == $sub.ref(0, 72590);

const {:count 20} .str.41: ref;

axiom .str.41 == $sub.ref(0, 73634);

const {:count 17} .str.46: ref;

axiom .str.46 == $sub.ref(0, 74675);

const {:count 38} .str.44: ref;

axiom .str.44 == $sub.ref(0, 75737);

const {:count 14} .str.40: ref;

axiom .str.40 == $sub.ref(0, 76775);

const {:count 54} .str.42: ref;

axiom .str.42 == $sub.ref(0, 77853);

const {:count 27} .str.43: ref;

axiom .str.43 == $sub.ref(0, 78904);

const {:count 46} .str.32: ref;

axiom .str.32 == $sub.ref(0, 79974);

const {:count 25} .str.33: ref;

axiom .str.33 == $sub.ref(0, 81023);

const {:count 45} .str.34: ref;

axiom .str.34 == $sub.ref(0, 82092);

const {:count 23} .str.35: ref;

axiom .str.35 == $sub.ref(0, 83139);

const {:count 13} .str.75: ref;

axiom .str.75 == $sub.ref(0, 84176);

const {:count 23} .str.76: ref;

axiom .str.76 == $sub.ref(0, 85223);

const {:count 26} .str.77: ref;

axiom .str.77 == $sub.ref(0, 86273);

const {:count 20} .str.78: ref;

axiom .str.78 == $sub.ref(0, 87317);

const {:count 24} .str.66: ref;

axiom .str.66 == $sub.ref(0, 88365);

const {:count 26} .str.67: ref;

axiom .str.67 == $sub.ref(0, 89415);

const {:count 33} .str.68: ref;

axiom .str.68 == $sub.ref(0, 90472);

const {:count 16} .str.56: ref;

axiom .str.56 == $sub.ref(0, 91512);

const {:count 23} .str.57: ref;

axiom .str.57 == $sub.ref(0, 92559);

const {:count 22} .str.58: ref;

axiom .str.58 == $sub.ref(0, 93605);

const {:count 35} .str.59: ref;

axiom .str.59 == $sub.ref(0, 94664);

const {:count 11} .str.72: ref;

axiom .str.72 == $sub.ref(0, 95699);

const {:count 14} .str.73: ref;

axiom .str.73 == $sub.ref(0, 96737);

const {:count 29} .str.74: ref;

axiom .str.74 == $sub.ref(0, 97790);

const {:count 12} .str.69: ref;

axiom .str.69 == $sub.ref(0, 98826);

const {:count 23} .str.79: ref;

axiom .str.79 == $sub.ref(0, 99873);

const {:count 10} .str.18: ref;

axiom .str.18 == $sub.ref(0, 100907);

const .str: ref;

axiom .str == $sub.ref(0, 101950);

const {:count 28} .str.1: ref;

axiom .str.1 == $sub.ref(0, 103002);

const {:count 27} .str.2: ref;

axiom .str.2 == $sub.ref(0, 104053);

const {:count 42} .str.3: ref;

axiom .str.3 == $sub.ref(0, 105119);

const {:count 44} .str.4: ref;

axiom .str.4 == $sub.ref(0, 106187);

const {:count 28} .str.5: ref;

axiom .str.5 == $sub.ref(0, 107239);

const {:count 21} .str.6: ref;

axiom .str.6 == $sub.ref(0, 108284);

const {:count 23} .str.7: ref;

axiom .str.7 == $sub.ref(0, 109331);

const {:count 15} .str.8: ref;

axiom .str.8 == $sub.ref(0, 110370);

const {:count 43} .str.9: ref;

axiom .str.9 == $sub.ref(0, 111437);

const {:count 16} .str.10: ref;

axiom .str.10 == $sub.ref(0, 112477);

const {:count 8} .str.16: ref;

axiom .str.16 == $sub.ref(0, 113509);

const {:count 61} .str.17: ref;

axiom .str.17 == $sub.ref(0, 114594);

const {:count 40} .str.11: ref;

axiom .str.11 == $sub.ref(0, 115658);

const {:count 19} .str.12: ref;

axiom .str.12 == $sub.ref(0, 116701);

const {:count 33} .str.48: ref;

axiom .str.48 == $sub.ref(0, 117758);

const {:count 47} .str.13: ref;

axiom .str.13 == $sub.ref(0, 118829);

const {:count 42} .str.14: ref;

axiom .str.14 == $sub.ref(0, 119895);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 120927);

const {:count 3} .str.1.109: ref;

axiom .str.1.109 == $sub.ref(0, 121954);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 122992);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 124020);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 125052);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 126084);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const video_device_release_empty: ref;

axiom video_device_release_empty == $sub.ref(0, 127116);

procedure video_device_release_empty($p0: ref);
  free requires assertsPassed;



implementation video_device_release_empty($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    return;
}



const dev_read: ref;

axiom dev_read == $sub.ref(0, 128148);

procedure dev_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr, $M.9, $M.5, $M.7, $M.4, $M.10, $M.6;



implementation dev_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i64;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i51: i32;
  var $i49: i32;
  var $i52: i32;
  var $i53: i1;
  var $p55: ref;
  var $p56: ref;
  var $i58: i64;
  var $i50: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p71: ref;
  var $i72: i64;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $p84: ref;
  var $p85: ref;
  var $i87: i64;
  var $i88: i32;
  var $i89: i1;
  var $p68: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i64;
  var $i94: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i64;
  var $i99: i64;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $p106: ref;
  var $p107: ref;
  var $i110: i32;
  var $i109: i32;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $i114: i64;
  var $i115: i64;
  var $i24: i64;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p4 := $alloc($mul.ref(88, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $p8 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 6} {:cexpr "dev_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p9 := video_drvdata($p0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i11 := $M.1;
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 3);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p10, $mul.ref(0, 4808)), $mul.ref(4801, 1));
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i19 := $sext.i8.i32($i18);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i25 := ktime_get();
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p26, $i25);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p6);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p7);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.2;
    cmdloc_dummy_var_1 := $M.2;
    call {:si_unique_call 12} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p27, $p28, 8, $zext.i32.i64(8), 0 == 1);
    $M.2 := cmdloc_dummy_var_2;
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p6);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.2, $p29);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p31 := ns_to_timeval($i30);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p8);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i34 := $extractvalue($p31, 0);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $M.3 := $store.i64($M.3, $p33, $i34);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p32, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i36 := $extractvalue($p31, 1);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $M.3 := $store.i64($M.3, $p35, $i36);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p5);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p8);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.3;
    cmdloc_dummy_var_4 := $M.3;
    call {:si_unique_call 14} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p37, $p38, 16, $zext.i32.i64(8), 0 == 1);
    $M.3 := cmdloc_dummy_var_5;
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.3, $p39);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i41 := $sub.i64($i40, 1);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $M.3 := $store.i64($M.3, $p42, $i41);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p4);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 15} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p43, 0, 88, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, 1);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 7);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p10);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i47 := vidioc_dqbuf($p0, $p46, $p4);
    call {:si_unique_call 17} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i49 := $i47;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i48 == 1);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i50 := 2;
    goto $bb14;

  $bb14:
    call $i51, $i50, $p59, $p60, $p61, $i62, $i63, $p64, $i65, $i66, $p67, $p71, $i72, $p73, $i74, $i75, $p76, $p77, $i78, $i79, $i80, $i88, $i89, cmdloc_dummy_var_8, cmdloc_dummy_var_9 := dev_read_loop_$bb14($p0, $p4, $p5, $p10, $p43, $p44, $p45, $p46, $i51, $i50, $p59, $p60, $p61, $i62, $i63, $p64, $i65, $i66, $p67, $p71, $i72, $p73, $i74, $i75, $p76, $p77, $i78, $i79, $i80, $i88, $i89, cmdloc_dummy_var_8, cmdloc_dummy_var_9);
    goto $bb14_last;

  $bb19:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p10, $mul.ref(0, 4808)), $mul.ref(2640, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i63 := $zext.i32.i64($i62);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p60, $mul.ref($i63, 104));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32($i50, 1);
    call {:si_unique_call 19} {:cexpr "n"} boogie_si_record_i32($i65);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i65, 0);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p67 := $p64;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p60, $mul.ref($i63, 104)), $mul.ref(16, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.0, $p71);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.3, $p73);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i75 := $sge.i64($i72, $i74);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p76 := $p64;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p10);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $i78 := vidioc_qbuf($p0, $p77, $p4);
    call {:si_unique_call 21} {:cexpr "ret"} boogie_si_record_i32($i78);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i80 := $i78;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 23} cmdloc_dummy_var_9 := $memset.i8(cmdloc_dummy_var_8, $p43, 0, 88, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_9;
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, 1);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 7);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i88 := vidioc_dqbuf($p0, $p46, $p4);
    call {:si_unique_call 25} {:cexpr "ret"} boogie_si_record_i32($i88);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i51 := $i88;
    assume true;
    goto $bb15, $bb33;

  $bb33:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $i50 := $i65;
    goto $bb33_dummy;

  $bb15:
    assume $i89 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i49 := $i51;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i52 := $M.1;
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i53 := $sgt.i32($i52, 2);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i49);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i24 := $i58;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb16:
    assume $i53 == 1;
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} vslice_dummy_var_45 := printk.ref.ref.i32(.str.57, $p56, $i49);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb27:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i81 := $M.1;
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i82 := $sgt.i32($i81, 2);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i80);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i24 := $i87;
    goto $bb8;

  $bb29:
    assume $i82 == 1;
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} vslice_dummy_var_46 := printk.ref.ref.i32(.str.58, $p85, $i80);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb24:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p68 := $p76;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p68, $mul.ref(0, 104)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i93 := $zext.i32.i64($i92);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i94 := $ult.i64($i93, $i2);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i99 := $i2;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p68, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i64.i32($i99);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i103 := copy_to_user($p1, $p101, $i102);
    call {:si_unique_call 28} {:cexpr "ret"} boogie_si_record_i32($i103);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i64.i32($i99);
    call {:si_unique_call 32} {:cexpr "ret"} boogie_si_record_i32($i110);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i109 := $i110;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p10);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i112 := vidioc_qbuf($p0, $p111, $p4);
    call {:si_unique_call 31} {:cexpr "ret2"} boogie_si_record_i32($i112);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i115 := $sext.i32.i64($i109);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i24 := $i115;
    goto $bb8;

  $bb41:
    assume $i113 == 1;
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i114 := $sext.i32.i64($i112);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i24 := $i114;
    goto $bb8;

  $bb37:
    assume $i104 == 1;
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} vslice_dummy_var_47 := printk.ref.ref.i32.i64(.str.59, $p107, $i103, $i99);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i109 := $sub.i32(0, 14);
    goto $bb39;

  $bb34:
    assume $i94 == 1;
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p68, $mul.ref(0, 104)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i98 := $zext.i32.i64($i97);
    call {:si_unique_call 26} {:cexpr "count"} boogie_si_record_i64($i98);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i99 := $i98;
    goto $bb36;

  $bb20:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p68 := $p67;
    goto $bb22;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb12;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i21 := read_alloc($p10, $p0);
    call {:si_unique_call 10} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i21);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb8;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} vslice_dummy_var_44 := printk.ref.ref.i64(.str.56, $p15, $i2);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb33_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;
}



const dev_poll: ref;

axiom dev_poll == $sub.ref(0, 129180);

procedure dev_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9, $M.5, $M.7, $M.4, $M.10, $M.6;



implementation dev_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i25: i32;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var vslice_dummy_var_48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $p2 := video_drvdata($p0);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $i4 := poll_requested_events($p1);
    call {:si_unique_call 35} {:cexpr "tmp___0"} boogie_si_record_i64($i4);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i5 := $M.1;
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 3);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $and.i64($i4, 2);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i4, 65);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i40 := $i15;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i25 := $i40;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(4799, 1));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i43 := $sext.i8.i32($i42);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i46 := $i25;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $r := $i46;
    return;

  $bb23:
    assume $i44 == 1;
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i25, 16);
    call {:si_unique_call 51} {:cexpr "ret"} boogie_si_record_i32($i45);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb25;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(4801, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i20 := $sext.i8.i32($i19);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(4368, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} poll_wait($p0, $p26, $p1);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $i28 := mutex_lock_interruptible_nested($p27, 0);
    call {:si_unique_call 45} {:cexpr "tmp___3"} boogie_si_record_i32($i28);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(4324, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i32 := atomic_read($p31);
    call {:si_unique_call 48} {:cexpr "tmp___4"} boogie_si_record_i32($i32);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(4345, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, $i32);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i38 := $i15;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} mutex_unlock($p39);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i40 := $i38;
    goto $bb22;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i15, 65);
    call {:si_unique_call 49} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb21;

  $bb16:
    assume $i29 == 1;
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i15, 8);
    call {:si_unique_call 46} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i25 := $i30;
    goto $bb13;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $i22 := read_alloc($p3, $p0);
    call {:si_unique_call 41} {:cexpr "tmp___2"} boogie_si_record_i32($i22);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i15, 8);
    call {:si_unique_call 42} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb13;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $i13 := v4l2_ctrl_poll($p0, $p1);
    call {:si_unique_call 38} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i13, 0);
    call {:si_unique_call 39} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} vslice_dummy_var_48 := printk.ref.ref(.str.64, $p9);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const video_ioctl2: ref;

axiom video_ioctl2 == $sub.ref(0, 130212);

procedure video_ioctl2($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation video_ioctl2($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 52} {:cexpr "video_ioctl2:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 53} {:cexpr "video_ioctl2:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 1} true;
    call {:si_unique_call 54} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 55} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dev_mmap: ref;

axiom dev_mmap == $sub.ref(0, 131244);

procedure dev_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i34: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $i48: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i64;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $i33: i32;
  var $p47: ref;
  var $i69: i64;
  var $i70: i1;
  var $i71: i32;
  var $i72: i1;
  var $p74: ref;
  var $p75: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i64;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $p85: ref;
  var $p86: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i64;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $i95: i1;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i64;
  var $i105: i64;
  var $i106: i64;
  var $i107: i1;
  var $i96: i64;
  var $i97: i64;
  var $i98: i64;
  var $p108: ref;
  var $p110: ref;
  var $i28: i32;
  var $p111: ref;
  var $i22: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p2 := video_drvdata($p0);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    call {:si_unique_call 57} {:cexpr "start"} boogie_si_record_i64($i5);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64($i7, $i9);
    call {:si_unique_call 58} {:cexpr "size"} boogie_si_record_i64($i10);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i11 := $M.1;
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 2);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $i20 := mutex_lock_interruptible_nested($p19, 0);
    call {:si_unique_call 61} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(2184, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p0);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i25, $i26);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(4344, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i31 := $sext.i8.i32($i30);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i31, 0);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p47 := $0.ref;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p47);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i69, 0);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p47, $mul.ref(0, 104)), $mul.ref(16, 1)), $mul.ref(72, 1));
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i80 := $zext.i32.i64($i79);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, $i10);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.0, $p88);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i90 := $or.i64($i89, 16384);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p91, $i90);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p47, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p93);
    call {:si_unique_call 67} {:cexpr "addr"} boogie_si_record_i64($i94);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i10, 0);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p108, gspca_vm_ops);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p110, $p47);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} gspca_vm_open($p1);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} mutex_unlock($p111);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i22 := $i28;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb42:
    assume $i95 == 1;
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i96, $i97, $i98 := $i10, $i5, $i94;
    goto $bb45;

  $bb45:
    call $p99, $p100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i96, $i97, $i98 := dev_mmap_loop_$bb45($p1, $p99, $p100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i96, $i97, $i98);
    goto $bb45_last;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p99 := $i2p.i64.ref($i98);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $p100 := vmalloc_to_page($p99);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $i101 := vm_insert_page($p1, $i97, $p100);
    call {:si_unique_call 70} {:cexpr "ret"} boogie_si_record_i32($i101);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i101, 0);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i103 := $i101;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i104 := $add.i64($i97, 4096);
    call {:si_unique_call 71} {:cexpr "start"} boogie_si_record_i64($i104);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i105 := $add.i64($i98, 4096);
    call {:si_unique_call 72} {:cexpr "addr"} boogie_si_record_i64($i105);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i106 := $sub.i64($i96, 4096);
    call {:si_unique_call 73} {:cexpr "size"} boogie_si_record_i64($i106);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i107 := $ne.i64($i106, 0);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i107 == 1);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb50:
    assume $i107 == 1;
    assume {:verifier.code 0} true;
    $i96, $i97, $i98 := $i106, $i104, $i105;
    goto $bb50_dummy;

  $bb47:
    assume $i102 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i28 := $i103;
    goto $bb10;

  $bb36:
    assume $i81 == 1;
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i82 := $M.1;
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i83 := $sgt.i32($i82, 2);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 22);
    goto $bb10;

  $bb38:
    assume $i83 == 1;
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} vslice_dummy_var_52 := printk.ref.ref(.str.52, $p86);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb30:
    assume $i70 == 1;
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i71 := $M.1;
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i72 := $sgt.i32($i71, 2);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 22);
    goto $bb10;

  $bb32:
    assume $i72 == 1;
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} vslice_dummy_var_51 := printk.ref.ref(.str.51, $p75);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb15;

  $bb15:
    call $i34, $p38, $i39, $i40, $i48, $p52, $p53, $i54, $i55, $i56, $p57, $i58, $i59, $i60, $i65, $i66, $i67, $i68, $i33 := dev_mmap_loop_$bb15($p1, $p3, $p29, $i34, $p38, $i39, $i40, $i48, $p52, $p53, $i54, $i55, $i56, $p57, $i58, $i59, $i60, $i65, $i66, $i67, $i68, $i33);
    goto $bb15_last;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(2640, 1)), $mul.ref($i34, 104)), $mul.ref(16, 1)), $mul.ref(60, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 1);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i33);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(2640, 1)), $mul.ref($i48, 104)), $mul.ref(16, 1)), $mul.ref(64, 1));
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i55 := $lshr.i32($i54, 12);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i56 := $zext.i32.i64($i55);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.0, $p57);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i56, $i58);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i60 := $i33;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i33, 1);
    call {:si_unique_call 64} {:cexpr "i"} boogie_si_record_i32($i65);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p29);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i67 := $sext.i8.i32($i66);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i68 := $sgt.i32($i67, $i65);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i68 == 1);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb27:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i33 := $i65;
    goto $bb27_dummy;

  $bb24:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(2640, 1));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i60);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p62, $mul.ref($i63, 104));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p47 := $p64;
    goto $bb22;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i41 := $M.1;
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i41, 2);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p47 := $0.ref;
    goto $bb22;

  $bb19:
    assume $i42 == 1;
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} vslice_dummy_var_50 := printk.ref.ref(.str.50, $p45);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 22);
    goto $bb10;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 512);
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i5);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i10);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} vslice_dummy_var_49 := printk.ref.ref.i32.i32(.str.49, $p15, $i16, $i17);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb50_dummy:
    assume false;
    return;

  $bb45_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_352;

  $bb27_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_274;
}



const dev_open: ref;

axiom dev_open == $sub.ref(0, 132276);

procedure dev_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i19: i32;
  var vslice_dummy_var_53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $p1 := video_drvdata($p0);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 2);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 4808)), $mul.ref(1808, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $i14 := try_module_get($p13);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 79} {:cexpr "tmp___1"} boogie_si_record_i8($i15);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i20 := v4l2_fh_open($p0);
    call {:si_unique_call 81} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i19 := $i20;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 4808)), $mul.ref(1808, 1));
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} module_put($p23);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 19);
    goto $bb9;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $p5 := get_current();
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 9640)), $mul.ref(1656, 1));
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} vslice_dummy_var_53 := printk.ref.ref.ref(.str.65, $p8, $p10);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_close: ref;

axiom dev_close == $sub.ref(0, 133308);

procedure dev_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.7, $M.4, $M.9, $M.10, $M.6, $CurrAddr;



implementation dev_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $i39: i32;
  var $i15: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $p1 := video_drvdata($p0);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 2);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 4808)), $mul.ref(4456, 1));
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $i13 := mutex_lock_interruptible_nested($p12, 0);
    call {:si_unique_call 87} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $i17 := mutex_lock_interruptible_nested($p16, 0);
    call {:si_unique_call 89} {:cexpr "tmp___2"} boogie_si_record_i32($i17);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 4808)), $mul.ref(2184, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 4808)), $mul.ref(1808, 1));
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} module_put($p30);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} mutex_unlock($p31);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 4808)), $mul.ref(4456, 1));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} mutex_unlock($p32);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i33 := $M.1;
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i34 := $sgt.i32($i33, 2);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $i39 := v4l2_fh_release($p0);
    call {:si_unique_call 98} {:cexpr "tmp___3"} boogie_si_record_i32($i39);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i15 := $i39;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} vslice_dummy_var_55 := printk.ref.ref(.str.54, $p37);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 4808)), $mul.ref(4348, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} frame_free($p2);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} gspca_stream_off($p2);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 4808)), $mul.ref(4456, 1));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} mutex_unlock($p19);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 512);
    goto $bb6;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 512);
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $p5 := get_current();
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 9640)), $mul.ref(1656, 1));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} vslice_dummy_var_54 := printk.ref.ref.ref(.str.53, $p8, $p10);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const video_drvdata: ref;

axiom video_drvdata == $sub.ref(0, 134340);

procedure video_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $p1 := video_devdata($p0);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $p2 := video_get_drvdata($p1);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 135372);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $p0 := devirtbounce(0, current_task);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 136404);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 1} true;
    call {:si_unique_call 102} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 103} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 1} true;
    call {:si_unique_call 104} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 105} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 1} true;
    call {:si_unique_call 106} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 107} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: i32, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i64($p0: ref, p.1: ref, p.2: i32, p.3: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 1} true;
    call {:si_unique_call 108} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 109} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64($p0: ref, p.1: ref, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64($p0: ref, p.1: ref, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 1} true;
    call {:si_unique_call 110} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 111} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 1} true;
    call {:si_unique_call 112} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 113} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 1} true;
    call {:si_unique_call 114} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 115} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 1} true;
    call {:si_unique_call 116} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 117} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 1} true;
    call {:si_unique_call 118} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 119} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 1} true;
    call {:si_unique_call 120} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 121} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 1} true;
    call {:si_unique_call 122} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 123} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb11:
    assume {:verifier.code 1} true;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 1} true;
    call {:si_unique_call 124} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 125} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb12:
    assume {:verifier.code 1} true;
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 1} true;
    call {:si_unique_call 126} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 127} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mutex_lock_interruptible_nested: ref;

axiom mutex_lock_interruptible_nested == $sub.ref(0, 137436);

procedure mutex_lock_interruptible_nested($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_lock_interruptible_nested($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 128} {:cexpr "mutex_lock_interruptible_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 1} true;
    call {:si_unique_call 129} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 130} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 138468);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    return;
}



const gspca_stream_off: ref;

axiom gspca_stream_off == $sub.ref(0, 139500);

procedure gspca_stream_off($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.7, $M.4, $M.9, $M.10, $M.6, $CurrAddr;



implementation gspca_stream_off($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4348, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 0);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4792, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 160)), $mul.ref(64, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} destroy_urbs($p0);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} gspca_input_destroy_urb($p0);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} vslice_dummy_var_56 := gspca_set_alt0($p0);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} gspca_input_create_urb($p0);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i24 := $M.1;
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, 2);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} vslice_dummy_var_57 := printk.ref.ref(.str.47, $p28);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    call {:si_unique_call 136} devirtbounce.1($p23, $p0);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 160)), $mul.ref(64, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    call {:si_unique_call 131} devirtbounce.1($p12, $p0);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const frame_free: ref;

axiom frame_free == $sub.ref(0, 140532);

procedure frame_free($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation frame_free($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $i19: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i18: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var vslice_dummy_var_58: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 2);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2632, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4344, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 0);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4312, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 0);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2184, 1));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $0.ref);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4801, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 0);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2632, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} vfree($p12);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2632, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $0.ref);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4344, 1));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i16 := $sext.i8.i32($i15);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, 0);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb9;

  $bb9:
    call $i19, $p22, $i23, $i24, $i25, $i26, $i18 := frame_free_loop_$bb9($p0, $p14, $i19, $p22, $i23, $i24, $i25, $i26, $i18);
    goto $bb9_last;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2640, 1)), $mul.ref($i19, 104)), $mul.ref(0, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $0.ref);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i18, 1);
    call {:si_unique_call 140} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p14);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i25 := $sext.i8.i32($i24);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i25, $i23);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb11:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i18 := $i23;
    goto $bb11_dummy;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} vslice_dummy_var_58 := printk.ref.ref(.str.55, $p5);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_596;
}



const module_put: ref;

axiom module_put == $sub.ref(0, 141564);

procedure module_put($p0: ref);
  free requires assertsPassed;



implementation module_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_fh_release: ref;

axiom v4l2_fh_release == $sub.ref(0, 142596);

procedure v4l2_fh_release($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_fh_release($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 1} true;
    call {:si_unique_call 141} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 142} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vfree: ref;

axiom vfree == $sub.ref(0, 143628);

procedure vfree($p0: ref);
  free requires assertsPassed;



implementation vfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    return;
}



const destroy_urbs: ref;

axiom destroy_urbs == $sub.ref(0, 144660);

procedure destroy_urbs($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4;



implementation destroy_urbs($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i32;
  var $i27: i1;
  var $i7: i32;
  var vslice_dummy_var_59: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 2);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $i8, $p10, $p11, $i12, $i13, $i14, $p16, $p17, $p18, $p19, $i20, $i21, $p22, $p23, $p24, $i25, $i26, $i27, $i7 := destroy_urbs_loop_$bb4($p0, $i8, $p10, $p11, $i12, $i13, $i14, $p16, $p17, $p18, $p19, $i20, $i21, $p22, $p23, $p24, $i25, $i26, $i27, $i7);
    goto $bb4_last;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2592, 1)), $mul.ref($i8, 8));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i7);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2592, 1)), $mul.ref($i14, 8));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $0.ref);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} usb_kill_urb($p11);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} usb_free_coherent($p18, $i21, $p23, $i25);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} ldv_usb_free_urb_10($p11);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i7, 1);
    call {:si_unique_call 147} {:cexpr "i"} boogie_si_record_i32($i26);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i27 := $ule.i32($i26, 3);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i26;
    goto $bb10_dummy;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} vslice_dummy_var_59 := printk.ref.ref(.str.24, $p5);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_633;
}



const gspca_input_destroy_urb: ref;

axiom gspca_input_destroy_urb == $sub.ref(0, 145692);

procedure gspca_input_destroy_urb($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4;



implementation gspca_input_destroy_urb($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2624, 1));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2624, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} usb_kill_urb($p2);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} usb_free_coherent($p7, $i10, $p12, $i14);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} ldv_usb_free_urb_7($p2);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gspca_set_alt0: ref;

axiom gspca_set_alt0 == $sub.ref(0, 146724);

procedure gspca_set_alt0($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gspca_set_alt0($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i5: i32;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4803, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4802, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $i11 := usb_set_interface($p7, $i10, 0);
    call {:si_unique_call 152} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} vslice_dummy_var_60 := printk.ref.i32(.str.25, $i11);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const gspca_input_create_urb: ref;

axiom gspca_input_create_urb == $sub.ref(0, 147756);

procedure gspca_input_create_urb($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.6, $M.5, $M.7, $M.9, $M.10, $CurrAddr;



implementation gspca_input_create_urb($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i32: i32;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $i20: i32;
  var vslice_dummy_var_61: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(144, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4802, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $p12 := usb_ifnum_to_if($p8, $i11);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, 0);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb6;

  $bb6:
    call $p21, $p22, $i23, $p25, $i26, $i27, $i28, $i29, $p30, $i32, $i33, $i34, $i35, $i20 := gspca_input_create_urb_loop_$bb6($p14, $p16, $p21, $p22, $i23, $p25, $i26, $i27, $i28, $i29, $p30, $i32, $i33, $i34, $i35, $i20);
    goto $bb6_last;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i20);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p22, $mul.ref($i23, 64)), $mul.ref(0, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $i26 := usb_endpoint_dir_in($p25);
    call {:si_unique_call 156} {:cexpr "tmp"} boogie_si_record_i32($i26);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i20, 1);
    call {:si_unique_call 160} {:cexpr "i"} boogie_si_record_i32($i32);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p16);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i35 := $sgt.i32($i34, $i32);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i35 == 1);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i20 := $i32;
    goto $bb15_dummy;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $i28 := usb_endpoint_xfer_int($p25);
    call {:si_unique_call 158} {:cexpr "tmp___0"} boogie_si_record_i32($i28);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p30 := $p25;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb10:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} vslice_dummy_var_61 := alloc_and_submit_int_urb($p0, $p30);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_728;
}



const usb_ifnum_to_if: ref;

axiom usb_ifnum_to_if == $sub.ref(0, 148788);

procedure usb_ifnum_to_if($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_ifnum_to_if($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} {:cexpr "usb_ifnum_to_if:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $p2 := external_alloc();
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const usb_endpoint_dir_in: ref;

axiom usb_endpoint_dir_in == $sub.ref(0, 149820);

procedure usb_endpoint_dir_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const usb_endpoint_xfer_int: ref;

axiom usb_endpoint_xfer_int == $sub.ref(0, 150852);

procedure usb_endpoint_xfer_int($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_int($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 3);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const alloc_and_submit_int_urb: ref;

axiom alloc_and_submit_int_urb == $sub.ref(0, 151884);

procedure alloc_and_submit_int_urb($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.6, $M.5, $M.7, $M.9, $M.10, $CurrAddr;



implementation alloc_and_submit_int_urb($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i28: i32;
  var $i22: i32;
  var $i46: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    call {:si_unique_call 163} {:cexpr "buffer_len"} boogie_si_record_i32($i4);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 164} {:cexpr "interval"} boogie_si_record_i32($i7);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i8 := $M.1;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 1);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $p19 := ldv_usb_alloc_urb_3(0, 208);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i4);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p19, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $p25 := usb_alloc_coherent($p18, $i23, 208, $p24);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i32 := __create_pipe($p18, $i31);
    call {:si_unique_call 170} {:cexpr "tmp"} boogie_si_record_i32($i32);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i32, 1073741952);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p0);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} ldv_usb_fill_int_urb_4($p19, $p18, $i33, $p25, $i4, int_irq, $p34, $i7);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p19, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i36, 4);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p19, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i39 := ldv_usb_submit_urb_5($p19, 208);
    call {:si_unique_call 173} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 0);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2624, 1));
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p19);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i46 := $i39;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $r := $i46;
    return;

  $bb12:
    assume $i40 == 1;
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} vslice_dummy_var_63 := printk.ref.ref.i32(.str.20, $p43, $i39);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p19, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i48);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p19, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p19, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} usb_free_coherent($p18, $i49, $p51, $i53);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i28 := $i39;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} ldv_usb_free_urb_6($p19);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i22 := $i28;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i46 := $i22;
    goto $bb16;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 12);
    goto $bb10;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} vslice_dummy_var_62 := printk.ref.ref.i32.i32.i32(.str.19, $p12, $i15, $i4, $i7);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_alloc_urb_3: ref;

axiom ldv_usb_alloc_urb_3 == $sub.ref(0, 152916);

procedure ldv_usb_alloc_urb_3($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.4;



implementation ldv_usb_alloc_urb_3($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} {:cexpr "ldv_usb_alloc_urb_3:arg:iso_packets"} boogie_si_record_i32($i0);
    call {:si_unique_call 177} {:cexpr "ldv_usb_alloc_urb_3:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p2 := ldv_alloc_urb();
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_alloc_coherent: ref;

axiom usb_alloc_coherent == $sub.ref(0, 153948);

procedure usb_alloc_coherent($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_coherent($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} {:cexpr "usb_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 180} {:cexpr "usb_alloc_coherent:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $p4 := external_alloc();
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 154980);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(0, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const int_irq: ref;

axiom int_irq == $sub.ref(0, 156012);

procedure int_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.7, $M.9, $M.10, $M.4, $CurrAddr, $M.6;



implementation int_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p36: ref;
  var $i29: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 183} {:cexpr "ret"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} vslice_dummy_var_65 := printk.ref.ref.i32(.str.22, $p32, $i34);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 0);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i29, 0);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    return;

  $bb30:
    assume $i37 == 1;
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i38 := ldv_usb_submit_urb_2($p0, 32);
    call {:si_unique_call 189} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i38, 0);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i39 == 1;
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} vslice_dummy_var_66 := printk.ref.i32(.str.23, $i38);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 160)), $mul.ref(144, 1));
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    call {:si_unique_call 184} $i23 := devirtbounce.2($p18, $p3, $p20, $i22);
    call {:si_unique_call 185} {:cexpr "tmp"} boogie_si_record_i32($i23);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i29 := $i5;
    goto $bb27;

  $bb24:
    assume $i24 == 1;
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} vslice_dummy_var_64 := printk.ref.ref(.str.21, $p27);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i5, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i29 := $i5;
    goto $bb27;

  $bb4:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i5, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb14;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i5, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i5, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb19;

  $bb16:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i5, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb22;
}



const ldv_usb_fill_int_urb_4: ref;

axiom ldv_usb_fill_int_urb_4 == $sub.ref(0, 157044);

procedure ldv_usb_fill_int_urb_4($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32);
  free requires assertsPassed;
  modifies $M.6, $M.5;



implementation ldv_usb_fill_int_urb_4($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} {:cexpr "ldv_usb_fill_int_urb_4:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 192} {:cexpr "ldv_usb_fill_int_urb_4:arg:buffer_length"} boogie_si_record_i32($i4);
    call {:si_unique_call 193} {:cexpr "ldv_usb_fill_int_urb_4:arg:interval"} boogie_si_record_i32($i7);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} ldv_fill_int_urb($p0, $p5);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_5: ref;

axiom ldv_usb_submit_urb_5 == $sub.ref(0, 158076);

procedure ldv_usb_submit_urb_5($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.0, $M.9, $M.10, $M.4, $CurrAddr, $M.6;



implementation ldv_usb_submit_urb_5($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} {:cexpr "ldv_usb_submit_urb_5:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 197} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_free_coherent: ref;

axiom usb_free_coherent == $sub.ref(0, 159108);

procedure usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} {:cexpr "usb_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 199} {:cexpr "usb_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_free_urb_6: ref;

axiom ldv_usb_free_urb_6 == $sub.ref(0, 160140);

procedure ldv_usb_free_urb_6($p0: ref);
  free requires assertsPassed;
  modifies $M.4;



implementation ldv_usb_free_urb_6($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} ldv_free_urb($p0);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_urb: ref;

axiom ldv_free_urb == $sub.ref(0, 161172);

procedure ldv_free_urb($p0: ref);
  free requires assertsPassed;
  modifies $M.4;



implementation ldv_free_urb($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p1 := $M.4;
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p5 := $M.4;
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $M.4 := $0.ref;
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_submit_urb: ref;

axiom ldv_submit_urb == $sub.ref(0, 162204);

procedure ldv_submit_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.0, $M.9, $M.10, $M.4, $CurrAddr, $M.6;



implementation ldv_submit_urb($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $i1 := ldv_undef_int();
    call {:si_unique_call 202} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i1, 0);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} ldv_stop___0();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p4 := $M.4;
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i5, $i6);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i8 := $M.5;
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i12 := $M.7;
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p14 := $M.8;
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p15 := $M.4;
    call {:si_unique_call 206} devirtbounce.4($p14, $p15);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 207} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32(0);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p10 := $M.6;
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p11 := $M.4;
    call {:si_unique_call 204} devirtbounce.3($p10, $p11);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $M.5 := 0;
    call {:si_unique_call 205} {:cexpr "completeFnIntCounter"} boogie_si_record_i32(0);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 163236);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 1} true;
    call {:si_unique_call 208} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 209} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 210} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_stop___0: ref;

axiom ldv_stop___0 == $sub.ref(0, 164268);

procedure ldv_stop___0();
  free requires assertsPassed;



implementation ldv_stop___0()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop___0_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_fill_int_urb: ref;

axiom ldv_fill_int_urb == $sub.ref(0, 165300);

procedure ldv_fill_int_urb($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.5;



implementation ldv_fill_int_urb($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p2 := $M.4;
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $M.6 := $p1;
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i6 := $M.5;
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $M.5 := $i7;
    call {:si_unique_call 211} {:cexpr "completeFnIntCounter"} boogie_si_record_i32($i7);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_submit_urb_2: ref;

axiom ldv_usb_submit_urb_2 == $sub.ref(0, 166332);

procedure ldv_usb_submit_urb_2($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.0, $M.9, $M.10, $M.4, $CurrAddr, $M.6;



implementation ldv_usb_submit_urb_2($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} {:cexpr "ldv_usb_submit_urb_2:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 214} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 167364);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 1} true;
    call {:si_unique_call 215} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 216} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_alloc_urb: ref;

axiom ldv_alloc_urb == $sub.ref(0, 168396);

procedure ldv_alloc_urb() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.4;



implementation ldv_alloc_urb() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $p0 := ldv_undef_ptr();
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i2 := ldv_undef_int();
    call {:si_unique_call 219} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p6 := $M.4;
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $M.4 := $p0;
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 169428);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 1} true;
    call {:si_unique_call 220} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 221} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const usb_set_interface: ref;

axiom usb_set_interface == $sub.ref(0, 170460);

procedure usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 222} {:cexpr "usb_set_interface:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 223} {:cexpr "usb_set_interface:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 1} true;
    call {:si_unique_call 224} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 225} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 171492);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_free_urb_7: ref;

axiom ldv_usb_free_urb_7 == $sub.ref(0, 172524);

procedure ldv_usb_free_urb_7($p0: ref);
  free requires assertsPassed;
  modifies $M.4;



implementation ldv_usb_free_urb_7($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} ldv_free_urb($p0);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_free_urb_10: ref;

axiom ldv_usb_free_urb_10 == $sub.ref(0, 173556);

procedure ldv_usb_free_urb_10($p0: ref);
  free requires assertsPassed;
  modifies $M.4;



implementation ldv_usb_free_urb_10($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} ldv_free_urb($p0);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    return;
}



const video_devdata: ref;

axiom video_devdata == $sub.ref(0, 174588);

procedure video_devdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_devdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $p1 := external_alloc();
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const video_get_drvdata: ref;

axiom video_get_drvdata == $sub.ref(0, 175620);

procedure video_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1808)), $mul.ref(136, 1));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 176652);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $p1 := external_alloc();
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const try_module_get: ref;

axiom try_module_get == $sub.ref(0, 177684);

procedure try_module_get($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation try_module_get($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 1} true;
    call {:si_unique_call 231} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 232} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const v4l2_fh_open: ref;

axiom v4l2_fh_open == $sub.ref(0, 178716);

procedure v4l2_fh_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_fh_open($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 1} true;
    call {:si_unique_call 233} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 234} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vmalloc_to_page: ref;

axiom vmalloc_to_page == $sub.ref(0, 179748);

procedure vmalloc_to_page($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vmalloc_to_page($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $p1 := external_alloc();
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const vm_insert_page: ref;

axiom vm_insert_page == $sub.ref(0, 180780);

procedure vm_insert_page($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vm_insert_page($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 236} {:cexpr "vm_insert_page:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 1} true;
    call {:si_unique_call 237} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 238} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const gspca_vm_open: ref;

axiom gspca_vm_open == $sub.ref(0, 181812);

procedure gspca_vm_open($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation gspca_vm_open($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 1);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i11);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    return;
}



const poll_requested_events: ref;

axiom poll_requested_events == $sub.ref(0, 182844);

procedure poll_requested_events($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation poll_requested_events($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const v4l2_ctrl_poll: ref;

axiom v4l2_ctrl_poll == $sub.ref(0, 183876);

procedure v4l2_ctrl_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 1} true;
    call {:si_unique_call 239} $i2 := __VERIFIER_nondet_uint();
    call {:si_unique_call 240} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i2);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const read_alloc: ref;

axiom read_alloc == $sub.ref(0, 184908);

procedure read_alloc($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9, $M.5, $M.7, $M.4, $M.10, $M.6;



implementation read_alloc($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p51: ref;
  var $p52: ref;
  var $i54: i32;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $i42: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $p64: ref;
  var $p65: ref;
  var $i34: i32;
  var $p67: ref;
  var $i13: i32;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $p2 := $alloc($mul.ref(88, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $p3 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i4 := $M.1;
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 2);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4456, 1));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $i11 := mutex_lock_interruptible_nested($p10, 0);
    call {:si_unique_call 245} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4344, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i16 := $sext.i8.i32($i15);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p0);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $i59 := vidioc_streamon($p1, $p58, 1);
    call {:si_unique_call 257} {:cexpr "ret"} boogie_si_record_i32($i59);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i34 := $i59;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4456, 1));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} mutex_unlock($p67);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i13 := $i34;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb32:
    assume $i60 == 1;
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i61 := $M.1;
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i62 := $sgt.i32($i61, 2);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i62 == 1;
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} vslice_dummy_var_70 := printk.ref.ref.i32(.str.63, $p65, $i59);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p3);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 246} cmdloc_dummy_var_11 := $memset.i8(cmdloc_dummy_var_10, $p18, 0, 20, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4800, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i21 := $sext.i8.i32($i20);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 1);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 7);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p0);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $i26 := vidioc_reqbufs($p1, $p25, $p3);
    call {:si_unique_call 248} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p2);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 251} cmdloc_dummy_var_13 := $memset.i8(cmdloc_dummy_var_12, $p35, 0, 88, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 1);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 7);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4800, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i40 := $sext.i8.i32($i39);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i41 := $sgt.i32($i40, 0);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb17:
    assume $i41 == 1;
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb20;

  $bb20:
    call $p43, $p44, $i45, $i46, $i47, $i54, $i55, $i56, $i57, $i42 := read_alloc_loop_$bb20($p0, $p1, $p2, $p38, $p43, $p44, $i45, $i46, $i47, $i54, $i55, $i56, $i57, $i42);
    goto $bb20_last;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i42);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p0);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $i45 := vidioc_qbuf($p1, $p44, $p2);
    call {:si_unique_call 253} {:cexpr "ret"} boogie_si_record_i32($i45);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i47 := $i45;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i42, 1);
    call {:si_unique_call 255} {:cexpr "i"} boogie_si_record_i32($i54);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p38);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i56 := $sext.i8.i32($i55);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i57 := $sgt.i32($i56, $i54);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i57 == 1);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb28:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i42 := $i54;
    goto $bb28_dummy;

  $bb22:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i48 := $M.1;
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i49 := $sgt.i32($i48, 2);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i34 := $i47;
    goto $bb15;

  $bb24:
    assume $i49 == 1;
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} vslice_dummy_var_69 := printk.ref.ref.i32(.str.62, $p52, $i47);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i28 := $M.1;
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i29 := $sgt.i32($i28, 2);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i34 := $i26;
    goto $bb15;

  $bb12:
    assume $i29 == 1;
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} vslice_dummy_var_68 := printk.ref.ref.i32(.str.61, $p32, $i26);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 512);
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} vslice_dummy_var_67 := printk.ref.ref(.str.60, $p8);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb28_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1127;
}



const poll_wait: ref;

axiom poll_wait == $sub.ref(0, 185940);

procedure poll_wait($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation poll_wait($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    call {:si_unique_call 259} devirtbounce.5($p12, $p0, $p1, $p2);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 186972);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 188004);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const vidioc_reqbufs: ref;

axiom vidioc_reqbufs == $sub.ref(0, 189036);

procedure vidioc_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.5, $M.7, $M.4, $M.10, $CurrAddr, $M.6;



implementation vidioc_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $i45: i64;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $i44: i32;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $p81: ref;
  var $i82: i1;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i30: i32;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i12: i32;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $p3 := video_drvdata($p0);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 261} {:cexpr "i"} boogie_si_record_i32($i6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $i14 := mutex_lock_interruptible_nested($p13, 0);
    call {:si_unique_call 263} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4801, 1));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i18 := $sext.i8.i32($i17);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2184, 1));
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4344, 1));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i42 := $sext.i8.i32($i41);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i43 := $sgt.i32($i42, 0);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4348, 1));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    call {:si_unique_call 266} {:cexpr "streaming"} boogie_si_record_i32($i57);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i64 := $i57;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4344, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i67 := $sext.i8.i32($i66);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $i76 := frame_alloc($p4, $p0, $i73, $i75);
    call {:si_unique_call 270} {:cexpr "ret"} boogie_si_record_i32($i76);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 0);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i85 := $i76;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i30 := $i85;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} mutex_unlock($p86);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i87 := $M.1;
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i88 := $sgt.i32($i87, 2);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i12 := $i30;
    goto $bb17;

  $bb65:
    assume $i88 == 1;
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} vslice_dummy_var_71 := printk.ref.ref.i32.i32(.str.66, $p91, $i30, $i93);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb59:
    assume $i77 == 1;
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4344, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i80 := $sext.i8.i32($i79);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $i80);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i64, 0);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i84 := $i76;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i85 := $i84;
    goto $bb64;

  $bb61:
    assume $i82 == 1;
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $i83 := gspca_init_transfer($p4);
    call {:si_unique_call 272} {:cexpr "ret"} boogie_si_record_i32($i83);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i84 := $i83;
    goto $bb63;

  $bb56:
    assume $i71 == 1;
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb28;

  $bb53:
    assume $i68 == 1;
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} frame_free($p4);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb47:
    assume $i58 == 1;
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} gspca_stream_off($p4);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4801, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i61 := $sext.i8.i32($i60);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 7);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $i57;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i64 := $i63;
    goto $bb52;

  $bb49:
    assume $i62 == 1;
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i63 := 0;
    goto $bb51;

  $bb36:
    assume $i43 == 1;
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb39;

  $bb39:
    call $i45, $p48, $i49, $i50, $i51, $i52, $i53, $i54, $i44 := vidioc_reqbufs_loop_$bb39($p4, $p40, $i45, $p48, $i49, $i50, $i51, $i52, $i53, $i54, $i44);
    goto $bb39_last;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2640, 1)), $mul.ref($i45, 104)), $mul.ref(8, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i44, 1);
    call {:si_unique_call 265} {:cexpr "i"} boogie_si_record_i32($i51);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p40);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i53 := $sext.i8.i32($i52);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i54 := $sgt.i32($i53, $i51);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i54 == 1);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb44:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i44 := $i51;
    goto $bb44_dummy;

  $bb41:
    assume $i50 == 1;
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 16);
    goto $bb28;

  $bb30:
    assume $i34 == 1;
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2184, 1));
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p0);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i37, $i38);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb32;

  $bb33:
    assume $i39 == 1;
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 16);
    goto $bb28;

  $bb21:
    assume $i19 == 1;
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4801, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i22 := $sext.i8.i32($i21);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 7);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb23;

  $bb24:
    assume $i23 == 1;
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4801, 1));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i26 := $sext.i8.i32($i25);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i26, $i28);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb23;

  $bb26:
    assume $i29 == 1;
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 16);
    goto $bb28;

  $bb18:
    assume $i15 == 1;
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 512);
    goto $bb17;

  $bb4:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i6, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb10;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb13;

  $bb44_dummy:
    assume false;
    return;

  $bb39_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1249;
}



const vidioc_qbuf: ref;

axiom vidioc_qbuf == $sub.ref(0, 190068);

procedure vidioc_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $p57: ref;
  var $p58: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p65: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i8;
  var $i83: i64;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $p96: ref;
  var $i32: i32;
  var $p97: ref;
  var $i16: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $p3 := video_drvdata($p0);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i5 := $M.1;
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 3);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i14 := mutex_lock_interruptible_nested($p13, 0);
    call {:si_unique_call 277} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    call {:si_unique_call 278} {:cexpr "index"} boogie_si_record_i32($i18);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4344, 1));
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i21 := $sext.i8.i32($i20);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i22 := $uge.i32($i18, $i21);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4801, 1));
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i37 := $sext.i8.i32($i36);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i34, $i37);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2640, 1));
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i18);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p46, $mul.ref($i47, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 6);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p46, $mul.ref($i47, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i62, 2);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p46, $mul.ref($i47, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i63);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p46, $mul.ref($i47, 104)), $mul.ref(16, 1)), $mul.ref(60, 1));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 2);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4320, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $i81 := atomic_read($p80);
    call {:si_unique_call 284} {:cexpr "i"} boogie_si_record_i32($i81);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i8($i18);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i81);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4328, 1)), $mul.ref($i83, 1));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, $i82);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4320, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i87 := $add.i32($i81, 1);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i88 := $srem.i32($i87, 16);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} atomic_set($p86, $i88);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i91 := $or.i32($i90, 2);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, $i91);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i94, $sub.i32(0, 5));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, $i95);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} mutex_unlock($p97);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i16 := $i32;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb27:
    assume $i69 == 1;
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.0, $p71);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p46, $mul.ref($i47, 104)), $mul.ref(16, 1)), $mul.ref(64, 1));
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p75, $i72);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p46, $mul.ref($i47, 104)), $mul.ref(16, 1)), $mul.ref(72, 1));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, $i77);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb21:
    assume $i53 == 1;
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i54 := $M.1;
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i55 := $sgt.i32($i54, 3);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 22);
    goto $bb13;

  $bb23:
    assume $i55 == 1;
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} vslice_dummy_var_75 := printk.ref.ref(.str.78, $p58);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb15:
    assume $i38 == 1;
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i39 := $M.1;
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i40 := $sgt.i32($i39, 3);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 22);
    goto $bb13;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} vslice_dummy_var_74 := printk.ref.ref(.str.77, $p43);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i23 := $M.1;
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i23, 3);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 22);
    goto $bb13;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4344, 1));
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i30 := $sext.i8.i32($i29);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} vslice_dummy_var_73 := printk.ref.ref.i32.i32(.str.76, $p27, $i18, $i30);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 512);
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} vslice_dummy_var_72 := printk.ref.ref.i32(.str.75, $p9, $i11);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vidioc_streamon: ref;

axiom vidioc_streamon == $sub.ref(0, 191100);

procedure vidioc_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.4, $M.5, $M.7, $CurrAddr, $M.6;



implementation vidioc_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $i15: i32;
  var $p41: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} {:cexpr "vidioc_streamon:arg:buf_type"} boogie_si_record_i32($i2);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $p3 := video_drvdata($p0);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 1);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i8 := mutex_lock_interruptible_nested($p7, 0);
    call {:si_unique_call 289} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2184, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i12, $i13);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4344, 1));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i18 := $sext.i8.i32($i17);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i19 == 1);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2640, 1)), $mul.ref(0, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 2);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4348, 1));
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4352, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4356, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.0, $p35);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4358, 1));
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.0, $p38);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} PDEBUG_MODE($p4, 3, .str.80, $i34, $i37, $i40);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} mutex_unlock($p41);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i6 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb18:
    assume $i30 == 1;
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $i31 := gspca_init_transfer($p4);
    call {:si_unique_call 292} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i32 == 1;
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i15 := $i31;
    goto $bb10;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb10;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb13;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 16);
    goto $bb10;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 512);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const gspca_init_transfer: ref;

axiom gspca_init_transfer == $sub.ref(0, 192132);

procedure gspca_init_transfer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.4, $M.5, $M.7, $CurrAddr, $M.6;



implementation gspca_init_transfer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $p12: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i8;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i64;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $p71: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $i72: i32;
  var $i77: i32;
  var $i78: i64;
  var $p80: ref;
  var $i81: i32;
  var $i82: i8;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i8;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i103: i1;
  var $i104: i32;
  var $i105: i32;
  var $i109: i32;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $i114: i1;
  var $i115: i32;
  var $i116: i1;
  var $p118: ref;
  var $p119: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i64;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $p130: ref;
  var $i131: i8;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i1;
  var $i148: i32;
  var $p149: ref;
  var $p151: ref;
  var $p152: ref;
  var $p155: ref;
  var $i156: i8;
  var $i157: i32;
  var $i158: i1;
  var $p160: ref;
  var $i161: i8;
  var $i162: i32;
  var $i163: i1;
  var $i164: i32;
  var $i168: i64;
  var $p170: ref;
  var $p171: ref;
  var $i172: i64;
  var $i173: i1;
  var $i174: i32;
  var $i176: i32;
  var $i177: i1;
  var $i178: i32;
  var $i179: i32;
  var $i180: i1;
  var $i166: i32;
  var $i167: i32;
  var $i181: i32;
  var $i175: i32;
  var $i182: i1;
  var $i183: i32;
  var $i184: i1;
  var $i185: i32;
  var $p186: ref;
  var $i187: i8;
  var $i188: i32;
  var $i106: i32;
  var $p191: ref;
  var $p192: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $i198: i64;
  var $i199: i1;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $i204: i32;
  var $i205: i1;
  var $i206: i32;
  var $i208: i1;
  var $i210: i32;
  var $i211: i64;
  var $p213: ref;
  var $i214: i32;
  var $i215: i8;
  var $p216: ref;
  var $i207: i32;
  var $i165: i32;
  var $i108: i32;
  var $i37: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $p1 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4304, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $0.ref);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4316, 1));
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4346, 1));
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 0);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4360, 1));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4792, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4802, 1));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $p12 := usb_ifnum_to_if($p8, $i11);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(27, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4803, 1));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i23);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(27, 1));
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i43 := (if $i42 == 1 then 2 else 1);
    call {:si_unique_call 298} {:cexpr "xfer"} boogie_si_record_i32($i43);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4803, 1));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i47 == 1);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p1);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i74 := build_isoc_ep_tb($p0, $p12, $p73);
    call {:si_unique_call 301} {:cexpr "alt_idx"} boogie_si_record_i32($i74);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i75 := $sle.i32($i74, 0);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i72 := $i74;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} gspca_input_destroy_urb($p0);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i77 := $sub.i32($i72, 1);
    call {:si_unique_call 304} {:cexpr "alt_idx"} boogie_si_record_i32($i77);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i77);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref($i78, 8)), $mul.ref(0, 1));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.9, $p80);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i8($i81);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4803, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p83, $i82);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i84, $i85 := $sub.i32(0, 1), $i77;
    goto $bb20;

  $bb20:
    call $i84, $i85, $p86, $i87, $i88, $i89, $p90, $i91, $i92, $p93, $i94, $i95, $p96, $p97, $p98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i109, $p111, $i112, $i113, $i114, $i115, $i116, $p118, $p119, $p121, $p122, $i123, $p124, $p125, $i126, $i127, $i128, $p130, $i131, $i132, $i133, $p134, $p135, $p137, $p138, $p139, $i140, $p142, $p143, $p144, $p145, $i146, $i147, $i148, $p149, $p151, $p152, $p155, $i156, $i157, $i158, $p160, $i161, $i162, $i163, $i164, $i168, $p170, $p171, $i172, $i173, $i174, $i176, $i177, $i178, $i179, $i180, $i166, $i167, $i181, $i175, $i182, $i183, $i184, $i185, $i106, $p191, $p192, $p194, $p195, $p196, $p197, $i198, $i199, $p200, $p201, $p202, $p203, $i204, $i205, $i206, $i208, $i210, $i211, $p213, $i214, $i215, $p216, $i207, vslice_dummy_var_78, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82 := gspca_init_transfer_loop_$bb20($p0, $p1, $p12, $i43, $i84, $i85, $p86, $i87, $i88, $i89, $p90, $i91, $i92, $p93, $i94, $i95, $p96, $p97, $p98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i109, $p111, $i112, $i113, $i114, $i115, $i116, $p118, $p119, $p121, $p122, $i123, $p124, $p125, $i126, $i127, $i128, $p130, $i131, $i132, $i133, $p134, $p135, $p137, $p138, $p139, $i140, $p142, $p143, $p144, $p145, $i146, $i147, $i148, $p149, $p151, $p152, $p155, $i156, $i157, $i158, $p160, $i161, $i162, $i163, $i164, $i168, $p170, $p171, $i172, $i173, $i174, $i176, $i177, $i178, $i179, $i180, $i166, $i167, $i181, $i175, $i182, $i183, $i184, $i185, $i106, $p191, $p192, $p194, $p195, $p196, $p197, $i198, $i199, $p200, $p201, $p202, $p203, $i204, $i205, $i206, $i208, $i210, $i211, $p213, $i214, $i215, $p216, $i207, vslice_dummy_var_78, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82);
    goto $bb20_last;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4803, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.0, $p86);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, $i84);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $i109 := $i84;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(25, 1));
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.0, $p111);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 0);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(27, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.0, $p130);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p143, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    call {:si_unique_call 319} $i146 := devirtbounce.6($p145, $p0);
    call {:si_unique_call 320} {:cexpr "ret"} boogie_si_record_i32($i146);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i147 := $slt.i32($i146, 0);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i148 := $i146;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4348, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p149, 1);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(0, 1)), $mul.ref(1544, 1));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} vslice_dummy_var_82 := v4l2_ctrl_handler_setup($p152);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(27, 1));
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.0, $p155);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i156);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i158 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i166, $i167 := $i146, 0;
    goto $bb57;

  $bb57:
    call $i168, $p170, $p171, $i172, $i173, $i174, $i176, $i177, $i178, $i179, $i180, $i166, $i167, $i181 := gspca_init_transfer_loop_$bb57($p0, $i168, $p170, $p171, $i172, $i173, $i174, $i176, $i177, $i178, $i179, $i180, $i166, $i167, $i181);
    goto $bb57_last;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i168 := $sext.i32.i64($i167);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2592, 1)), $mul.ref($i168, 8));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, $p170);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i172 := $p2i.ref.i64($p171);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i173 := $eq.i64($i172, 0);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i174 := $i166;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $i176 := ldv_usb_submit_urb_12($p171, 208);
    call {:si_unique_call 324} {:cexpr "ret"} boogie_si_record_i32($i176);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i177 := $slt.i32($i176, 0);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i178 := $i176;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i179 := $add.i32($i167, 1);
    call {:si_unique_call 325} {:cexpr "n"} boogie_si_record_i32($i179);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i180 := $sle.i32($i179, 3);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i181 := $i176;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i175 := $i181;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i182 := $sge.i32($i175, 0);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i183 := $i175;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} gspca_stream_off($p0);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i184 := $ne.i32($i175, $sub.i32(0, 28));
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i185 := $i175;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i106 := $i109;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p192 := $bitcast.ref.ref($p191);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} vslice_dummy_var_78 := printk.ref.ref.i32(.str.31, $p192, $i106);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} msleep(20);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.0, $p194);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p195, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p197 := $load.ref($M.0, $p196);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i198 := $p2i.ref.i64($p197);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i199 := $ne.i64($i198, 0);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i199 == 1);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i208 := $sle.i32($i85, 0);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i210 := $sub.i32($i85, 1);
    call {:si_unique_call 331} {:cexpr "alt_idx"} boogie_si_record_i32($i210);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i211 := $sext.i32.i64($i210);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref($i211, 8)), $mul.ref(0, 1));
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.9, $p213);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i215 := $trunc.i32.i8($i214);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4803, 1));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p216, $i215);
    assume {:verifier.code 0} true;
    $i207 := $i210;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i84, $i85 := $i106, $i207;
    goto corral_source_split_1772_dummy;

  $bb81:
    assume $i208 == 1;
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} vslice_dummy_var_84 := printk.ref(.str.27);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i108 := $sub.i32(0, 5);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} gspca_input_create_urb($p0);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i37 := $i108;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb75:
    assume $i199 == 1;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p201 := $load.ref($M.0, $p200);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p201, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.0, $p202);
    call {:si_unique_call 328} $i204 := devirtbounce.6($p203, $p0);
    call {:si_unique_call 329} {:cexpr "ret"} boogie_si_record_i32($i204);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i205 := $slt.i32($i204, 0);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i206 := $i204;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i207 := $i85;
    goto $bb80;

  $bb77:
    assume $i205 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i108 := $i206;
    goto $bb31;

  $bb72:
    assume $i184 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4803, 1));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i187 := $load.i8($M.0, $p186);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i188 := $zext.i8.i32($i187);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} vslice_dummy_var_83 := printk.ref.i32.i32(.str.30, $i188, $i185);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i108 := $i185;
    goto $bb31;

  $bb69:
    assume $i182 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i165 := $i183;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i108 := $i165;
    goto $bb31;

  $bb66:
    assume $i180 == 1;
    assume {:verifier.code 0} true;
    $i166, $i167 := $i176, $i179;
    goto $bb66_dummy;

  $bb63:
    assume $i177 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i175 := $i178;
    goto $bb61;

  $bb59:
    assume $i173 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i175 := $i174;
    goto $bb61;

  $bb50:
    assume $i158 == 1;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(26, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i161 := $load.i8($M.0, $p160);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i162 := $zext.i8.i32($i161);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 0);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i164 := $i146;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i163 == 1);
    goto $bb52;

  $bb53:
    assume $i163 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i165 := $i164;
    goto $bb55;

  $bb47:
    assume $i147 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} destroy_urbs($p0);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i108 := $i148;
    goto $bb31;

  $bb44:
    assume $i133 == 1;
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2592, 1)), $mul.ref(0, 8));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p138, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.0, $p139);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} vslice_dummy_var_81 := usb_clear_halt($p135, $i140);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb35:
    assume $i114 == 1;
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i115 := $M.1;
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i116 := $sgt.i32($i115, 2);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p12, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i123 := $sext.i32.i64($i109);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($p122, $mul.ref($i123, 40));
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $p125 := alt_xfer($p124, $i43);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $i126 := create_urbs($p0, $p125);
    call {:si_unique_call 316} {:cexpr "ret"} boogie_si_record_i32($i126);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i126, 0);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i128 := $i126;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i127 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} destroy_urbs($p0);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i108 := $i128;
    goto $bb31;

  $bb37:
    assume $i116 == 1;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} vslice_dummy_var_80 := printk.ref.ref.i32(.str.29, $p119, $i109);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb21:
    assume $i89 == 1;
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4803, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    call {:si_unique_call 306} {:cexpr "alt"} boogie_si_record_i32($i92);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p12, $mul.ref(0, 1528)), $mul.ref(16, 1));
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i95 := $ugt.i32($i94, 1);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i109 := $i92;
    goto $bb34;

  $bb23:
    assume $i95 == 1;
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4802, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.0, $p98);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $i101 := usb_set_interface($p97, $i100, $i92);
    call {:si_unique_call 308} {:cexpr "ret"} boogie_si_record_i32($i101);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i101, 0);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume $i102 == 1;
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i101, $sub.i32(0, 28));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i104, $i105 := $i92, $i101;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} vslice_dummy_var_79 := printk.ref.i32.i32(.str.28, $i104, $i105);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i108 := $i105;
    goto $bb31;

  $bb27:
    assume $i103 == 1;
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i106 := $i92;
    goto $bb29;

  $bb17:
    assume $i75 == 1;
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} vslice_dummy_var_77 := printk.ref(.str.27);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32(0, 5);
    goto $bb8;

  $bb11:
    assume $i47 == 1;
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4803, 1));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32($i50, 1);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4803, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, $i52);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p12, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4803, 1));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i64($i57);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p55, $mul.ref($i58, 40));
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $p60 := alt_xfer($p59, $i43);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i62 := $eq.i64($i61, 0);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4803, 1));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p71, $i69);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i72 := 1;
    goto $bb16;

  $bb13:
    assume $i62 == 1;
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4803, 1));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} vslice_dummy_var_76 := printk.ref.i32(.str.26, $i65);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32(0, 5);
    goto $bb8;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    call {:si_unique_call 296} $i35 := devirtbounce.6($p34, $p0);
    call {:si_unique_call 297} {:cexpr "ret"} boogie_si_record_i32($i35);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 0);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i36 == 1;
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i37 := $i35;
    goto $bb8;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref(0, 1528)), $mul.ref(16, 1));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb3;

  $bb66_dummy:
    assume false;
    return;

  $bb57_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1728;

  corral_source_split_1772_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1614;
}



const PDEBUG_MODE: ref;

axiom PDEBUG_MODE == $sub.ref(0, 193164);

procedure PDEBUG_MODE($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32, $i5: i32);
  free requires assertsPassed;



implementation PDEBUG_MODE($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32, $i5: i32)
{
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} {:cexpr "PDEBUG_MODE:arg:debug"} boogie_si_record_i32($i1);
    call {:si_unique_call 333} {:cexpr "PDEBUG_MODE:arg:pixfmt"} boogie_si_record_i32($i3);
    call {:si_unique_call 334} {:cexpr "PDEBUG_MODE:arg:w"} boogie_si_record_i32($i4);
    call {:si_unique_call 335} {:cexpr "PDEBUG_MODE:arg:h"} boogie_si_record_i32($i5);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i32($i3, 24);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i6, 47);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i22 := $M.1;
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i23 := $sge.i32($i22, $i1);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} vslice_dummy_var_86 := printk.ref.ref.ref.i32.i32.i32(.str.71, $p26, $p2, $i3, $i4, $i5);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i32($i3, 24);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i9 := $ule.i32($i8, 122);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i10 := $M.1;
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i11 := $sge.i32($i10, $i1);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i3, 255);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i16 := $lshr.i32($i3, 8);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 255);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i18 := $lshr.i32($i3, 16);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 255);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i20 := $lshr.i32($i3, 24);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} vslice_dummy_var_85 := printk.ref.ref.ref.i32.i32.i32.i32.i32.i32(.str.70, $p14, $p2, $i15, $i17, $i19, $i20, $i4, $i5);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const alt_xfer: ref;

axiom alt_xfer == $sub.ref(0, 194196);

procedure alt_xfer($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alt_xfer($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i28: i32;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $i7: i32;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} {:cexpr "alt_xfer:arg:xfer"} boogie_si_record_i32($i1);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p27 := $0.ref;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $r := $p27;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $p8, $p9, $i10, $p11, $p13, $i14, $i15, $i16, $i17, $p19, $i20, $i21, $i22, $p23, $i24, $i25, $p26, $i28, $i29, $i30, $i31, $i7 := alt_xfer_loop_$bb4($p0, $i1, $p3, $p8, $p9, $i10, $p11, $p13, $i14, $i15, $i16, $i17, $p19, $i20, $i21, $i22, $p23, $i24, $i25, $p26, $i28, $i29, $i30, $i31, $i7);
    goto $bb4_last;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i7);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p9, $mul.ref($i10, 64));
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p9, $mul.ref($i10, 64)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 3);
    call {:si_unique_call 339} {:cexpr "attr"} boogie_si_record_i32($i16);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, $i1);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i7, 1);
    call {:si_unique_call 342} {:cexpr "i"} boogie_si_record_i32($i28);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p3);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i30, $i28);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i31 == 1);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i28;
    goto $bb16_dummy;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p9, $mul.ref($i10, 64)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb8;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p9, $mul.ref($i10, 64)), $mul.ref(0, 1));
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $i24 := usb_endpoint_dir_in($p23);
    call {:si_unique_call 341} {:cexpr "tmp"} boogie_si_record_i32($i24);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p26 := $p11;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb11:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p27 := $p26;
    goto $bb13;

  $bb16_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1823;
}



const build_isoc_ep_tb: ref;

axiom build_isoc_ep_tb == $sub.ref(0, 195228);

procedure build_isoc_ep_tb($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.9, $CurrAddr;



implementation build_isoc_ep_tb($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i32;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i22: i32;
  var $i23: i32;
  var $i65: i32;
  var $i66: i1;
  var $i13: i32;
  var $i14: i32;
  var $i67: i32;
  var $i12: i32;
  var $i68: i1;
  var $i69: i32;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $i80: i32;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $p100: ref;
  var $p101: ref;
  var $i103: i32;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $i107: i32;
  var $p108: ref;
  var $i109: i1;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i119: i32;
  var $i120: i1;
  var $p111: ref;
  var $i112: i32;
  var $i121: i32;
  var $i110: i32;
  var $i118: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 1528)), $mul.ref(16, 1));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 343} {:cexpr "nbalt"} boogie_si_record_i32($i4);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 16);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i7, $p8, $i9 := 0, $p2, 0;
    goto $bb4;

  $bb4:
    call $i7, $p8, $i9, $p10, $i11, $p15, $p16, $i17, $p18, $p19, $i20, $i21, $p25, $i26, $i27, $i28, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $p40, $p41, $p42, $i43, $i44, $p45, $p46, $p47, $i48, $i49, $i50, $i51, $p53, $i54, $i55, $i56, $i57, $i58, $p59, $i60, $i61, $p62, $p63, $i64, $i22, $i23, $i65, $i66, $i13, $i14, $i67, $i12, $i68, $i69, $p70, $i71, $i72, $i73, $p75, $p76, $p77, $i78, $p79, $i80, $p82, $i83, $i84, $p85, vslice_dummy_var_87, vslice_dummy_var_88 := build_isoc_ep_tb_loop_$bb4($p0, $p1, $i6, $i7, $p8, $i9, $p10, $i11, $p15, $p16, $i17, $p18, $p19, $i20, $i21, $p25, $i26, $i27, $i28, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $p40, $p41, $p42, $i43, $i44, $p45, $p46, $p47, $i48, $i49, $i50, $i51, $p53, $i54, $i55, $i56, $i57, $i58, $p59, $i60, $i61, $p62, $p63, $i64, $i22, $i23, $i65, $i66, $i13, $i14, $i67, $i12, $i68, $i69, $p70, $i71, $i72, $i73, $p75, $p76, $p77, $i78, $p79, $i80, $p82, $i83, $i84, $p85, vslice_dummy_var_87, vslice_dummy_var_88);
    goto $bb4_last;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p10, 480000000);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32(0, $i6);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i12 := 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i12, 0);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i69, $p70, $i71 := $i7, $p8, $i9;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i72 := $M.1;
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i73 := $sgt.i32($i72, 2);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.10, $p82);
    call {:si_unique_call 353} {:cexpr "last_bw"} boogie_si_record_i32($i83);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i7, 1);
    call {:si_unique_call 354} {:cexpr "i"} boogie_si_record_i32($i84);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p8, $mul.ref(1, 8));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i7, $p8, $i9 := $i84, $p85, $i83;
    goto corral_source_split_1969_dummy;

  $bb36:
    assume $i73 == 1;
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p8, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.9, $p77);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.10, $p79);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} vslice_dummy_var_88 := printk.ref.ref.i32.i32(.str.33, $p76, $i78, $i80);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb32:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4804, 1));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.0, $p86);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i105, $p106 := $i69, $p70;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $i107 := which_bandwidth($p0);
    call {:si_unique_call 358} {:cexpr "bandwidth"} boogie_si_record_i32($i107);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p106, $mul.ref($sub.ref(0, 1), 8));
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i109 := $sgt.i32($i105, 1);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i110 := $i105;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i118 := $i110;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $r := $i118;
    return;

  $bb52:
    assume $i109 == 1;
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p111, $i112 := $p108, $i105;
    goto $bb55;

  $bb55:
    call $p113, $p114, $i115, $i116, $i117, $i119, $i120, $p111, $i112, $i121 := build_isoc_ep_tb_loop_$bb55($i107, $p113, $p114, $i115, $i116, $i117, $i119, $i120, $p111, $i112, $i121);
    goto $bb55_last;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p111, $mul.ref($sub.ref(0, 1), 8));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p111, $mul.ref($sub.ref(0, 1), 8)), $mul.ref(4, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.10, $p114);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i116 := $ult.i32($i115, $i107);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i117 := $i112;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i119 := $sub.i32($i112, 1);
    call {:si_unique_call 359} {:cexpr "i"} boogie_si_record_i32($i119);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i120 := $sgt.i32($i119, 1);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i121 := $i119;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i110 := $i121;
    goto $bb54;

  $bb61:
    assume $i120 == 1;
    assume {:verifier.code 0} true;
    $p111, $i112 := $p113, $i119;
    goto $bb61_dummy;

  $bb57:
    assume $i116 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i118 := $i117;
    goto $bb59;

  $bb39:
    assume $i89 == 1;
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 1992)), $mul.ref(28, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 2);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb41;

  $bb42:
    assume $i94 == 1;
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i95 := $ugt.i32($i71, 999999);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb41;

  $bb44:
    assume $i95 == 1;
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i96 := $sgt.i32($i69, 1);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i96 == 1);
    goto $bb41;

  $bb46:
    assume $i96 == 1;
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i97 := $M.1;
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i98 := $sgt.i32($i97, 2);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i103 := $sub.i32($i69, 1);
    call {:si_unique_call 356} {:cexpr "i"} boogie_si_record_i32($i103);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p70, $mul.ref($sub.ref(0, 1), 8));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i105, $p106 := $i103, $p104;
    goto $bb51;

  $bb48:
    assume $i98 == 1;
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} vslice_dummy_var_89 := printk.ref.ref(.str.34, $p101);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i13, $i14 := 0, 0;
    goto $bb8;

  $bb8:
    call $p15, $p16, $i17, $p18, $p19, $i20, $i21, $p25, $i26, $i27, $i28, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $p40, $p41, $p42, $i43, $i44, $p45, $p46, $p47, $i48, $i49, $i50, $i51, $p53, $i54, $i55, $i56, $i57, $i58, $p59, $i60, $i61, $p62, $p63, $i64, $i22, $i23, $i65, $i66, $i13, $i14, $i67, vslice_dummy_var_87 := build_isoc_ep_tb_loop_$bb8($p0, $p1, $i6, $p8, $i9, $p15, $p16, $i17, $p18, $p19, $i20, $i21, $p25, $i26, $i27, $i28, $p31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $p40, $p41, $p42, $i43, $i44, $p45, $p46, $p47, $i48, $i49, $i50, $i51, $p53, $i54, $i55, $i56, $i57, $i58, $p59, $i60, $i61, $p62, $p63, $i64, $i22, $i23, $i65, $i66, $i13, $i14, $i67, vslice_dummy_var_87);
    goto $bb8_last;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i14);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p16, $mul.ref($i17, 40));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $p19 := alt_xfer($p18, 1);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.0, $p31);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    call {:si_unique_call 347} {:cexpr "psize"} boogie_si_record_i32($i33);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 2047);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i35 := $ashr.i32($i33, 11);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 3);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 1);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i38 := $mul.i32($i34, $i37);
    call {:si_unique_call 348} {:cexpr "psize"} boogie_si_record_i32($i38);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i39 := $mul.i32($i38, 1000);
    call {:si_unique_call 349} {:cexpr "bandwidth"} boogie_si_record_i32($i39);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 1992)), $mul.ref(28, 1));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 3);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i44 == 1);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 1992)), $mul.ref(28, 1));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 5);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i51 := $i39;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i55, $sub.i32(0, 1));
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i57 := $lshr.i32($i51, $i56);
    call {:si_unique_call 351} {:cexpr "bandwidth"} boogie_si_record_i32($i57);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i58 := $ule.i32($i57, $i9);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.10, $p59);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i61 := $ugt.i32($i60, $i57);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i64 := $i13;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i22, $i23 := $i14, $i64;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i22, 1);
    call {:si_unique_call 345} {:cexpr "j"} boogie_si_record_i32($i65);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i65, $i6);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i67 := $i23;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i12 := $i67;
    goto $bb7;

  $bb29:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $i13, $i14 := $i23, $i65;
    goto $bb29_dummy;

  $bb26:
    assume $i61 == 1;
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p62, $i57);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p8, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p63, $i14);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i64 := 1;
    goto $bb28;

  $bb23:
    assume $i58 == 1;
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i22, $i23 := $i14, $i13;
    goto $bb12;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i50 := $mul.i32($i39, 8);
    call {:si_unique_call 350} {:cexpr "bandwidth"} boogie_si_record_i32($i50);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i51 := $i50;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb18;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} vslice_dummy_var_87 := printk.ref.i32(.str.32, $i14);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i22, $i23 := $i14, $i13;
    goto $bb12;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i22, $i23 := $i14, $i13;
    goto $bb12;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i6 := 16;
    goto $bb3;

  $bb61_dummy:
    assume false;
    return;

  $bb55_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2003;

  $bb29_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1873;

  corral_source_split_1969_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1866;
}



const create_urbs: ref;

axiom create_urbs == $sub.ref(0, 196260);

procedure create_urbs($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4;



implementation create_urbs($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i20: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p49: ref;
  var $p50: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i62: i1;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $i69: i64;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $p98: ref;
  var $p99: ref;
  var $p101: ref;
  var $i102: i8;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i1;
  var $i111: i64;
  var $p114: ref;
  var $i115: i32;
  var $i116: i64;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $i110: i32;
  var $p122: ref;
  var $p123: ref;
  var $p125: ref;
  var $i126: i8;
  var $i127: i32;
  var $i128: i32;
  var $i129: i32;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i32;
  var $i134: i1;
  var $i63: i32;
  var $i68: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    call {:si_unique_call 360} {:cexpr "psize"} boogie_si_record_i32($i5);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(27, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(16, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    call {:si_unique_call 361} {:cexpr "bsize"} boogie_si_record_i32($i43);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $i43;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i46 := $M.1;
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i47 := $sgt.i32($i46, 2);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(26, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i61 := 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i37, $i38, $i39, $i40 := $i61, $i5, 0, $i45;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32(0, $i37);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i68 := 0;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $r := $i68;
    return;

  $bb22:
    assume $i62 == 1;
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i63 := 0;
    goto $bb25;

  $bb25:
    call $p64, $i65, $i66, $i69, $p71, $p72, $p73, $i74, $p75, $p76, $p77, $p78, $p79, $i80, $i81, $p83, $p84, $p85, $p87, $p88, $i89, $p90, $p91, $p93, $i94, $i95, $i96, $i97, $p98, $p99, $p101, $i102, $i103, $i104, $i105, $p106, $p107, $p108, $i109, $i111, $p114, $i115, $i116, $p119, $i120, $i121, $i110, $p122, $p123, $p125, $i126, $i127, $i128, $i129, $p130, $p131, $p132, $i133, $i134, $i63 := create_urbs_loop_$bb25($p0, $p1, $i37, $i38, $i39, $i40, $p64, $i65, $i66, $i69, $p71, $p72, $p73, $i74, $p75, $p76, $p77, $p78, $p79, $i80, $i81, $p83, $p84, $p85, $p87, $p88, $i89, $p90, $p91, $p93, $i94, $i95, $i96, $i97, $p98, $p99, $p101, $i102, $i103, $i104, $i105, $p106, $p107, $p108, $i109, $i111, $p114, $i115, $i116, $p119, $i120, $i121, $i110, $p122, $p123, $p125, $i126, $i127, $i128, $i129, $p130, $p131, $p132, $i133, $i134, $i63);
    goto $bb25_last;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $p64 := ldv_usb_alloc_urb_11($i39, 208);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i66 := $eq.i64($i65, 0);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i63);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2592, 1)), $mul.ref($i69, 8));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p71, $p64);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i40);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $p76 := usb_alloc_coherent($p73, $i74, 208, $p75);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p77, $p76);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i81 := $eq.i64($i80, 0);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p85, $p84);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p87, $p0);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, $i40);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i39, 0);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i89 == 1);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.0, $p125);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i126);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $i128 := __create_pipe($p123, $i127);
    call {:si_unique_call 376} {:cexpr "tmp___0"} boogie_si_record_i32($i128);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i129 := $or.i32($i128, $sub.i32(0, 1073741696));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p130, $i129);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p131, 4);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p132, bulk_irq);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i133 := $add.i32($i63, 1);
    call {:si_unique_call 378} {:cexpr "n"} boogie_si_record_i32($i133);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i134 := $slt.i32($i133, $i37);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i134 == 1);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb45:
    assume $i134 == 1;
    assume {:verifier.code 0} true;
    $i63 := $i133;
    goto $bb45_dummy;

  $bb34:
    assume $i89 == 1;
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p93);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $i96 := __create_pipe($p91, $i95);
    call {:si_unique_call 374} {:cexpr "tmp"} boogie_si_record_i32($i96);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i97 := $or.i32($i96, 128);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p98, $i97);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, 6);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.0, $p101);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i103, $sub.i32(0, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i105 := $shl.i32(1, $i104);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, $i105);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p107, isoc_irq);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p108, $i39);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i109 := $slt.i32(0, $i39);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb36:
    assume $i109 == 1;
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i110 := 0;
    goto $bb39;

  $bb39:
    call $i111, $p114, $i115, $i116, $p119, $i120, $i121, $i110 := create_urbs_loop_$bb39($i38, $i39, $p64, $i111, $p114, $i115, $i116, $p119, $i120, $i121, $i110);
    goto $bb39_last;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i111 := $sext.i32.i64($i110);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i111, 16)), $mul.ref(4, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p114, $i38);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i115 := $mul.i32($i38, $i110);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i116 := $sext.i32.i64($i110);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i116, 16)), $mul.ref(0, 1));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p119, $i115);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i120 := $add.i32($i110, 1);
    call {:si_unique_call 377} {:cexpr "i"} boogie_si_record_i32($i120);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i121 := $slt.i32($i120, $i39);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i121 == 1);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb41:
    assume $i121 == 1;
    assume {:verifier.code 0} true;
    $i110 := $i120;
    goto $bb41_dummy;

  $bb31:
    assume $i81 == 1;
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} vslice_dummy_var_93 := printk.ref(.str.39);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32(0, 12);
    goto $bb29;

  $bb27:
    assume $i66 == 1;
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} vslice_dummy_var_92 := printk.ref(.str.38);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32(0, 12);
    goto $bb29;

  $bb19:
    assume $i56 == 1;
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(26, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    call {:si_unique_call 368} {:cexpr "nurbs"} boogie_si_record_i32($i60);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i61 := $i60;
    goto $bb21;

  $bb16:
    assume $i47 == 1;
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} vslice_dummy_var_91 := printk.ref.ref.i32(.str.37, $p50, $i45);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i44 == 1;
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i45 := $i5;
    goto $bb15;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4796, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4796, 1));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    call {:si_unique_call 363} {:cexpr "psize"} boogie_si_record_i32($i23);
    assume {:verifier.code 0} true;
    $i20 := $i23;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(28, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    call {:si_unique_call 364} {:cexpr "npkt"} boogie_si_record_i32($i27);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i30 := $mul.i32($i20, $i29);
    call {:si_unique_call 365} {:cexpr "bsize"} boogie_si_record_i32($i30);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i31 := $M.1;
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i31, 2);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39, $i40 := 3, $i20, $i29, $i30;
    goto $bb12;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} vslice_dummy_var_90 := printk.ref.ref.i32.i32.i32(.str.36, $p35, $i29, $i20, $i30);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i28 == 1;
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i29 := 32;
    goto $bb8;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i5, 2047);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i16 := $ashr.i32($i5, 11);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 3);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 1);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i19 := $mul.i32($i15, $i18);
    call {:si_unique_call 362} {:cexpr "psize"} boogie_si_record_i32($i19);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb5;

  $bb41_dummy:
    assume false;
    return;

  $bb39_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2175;

  $bb45_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2094;
}



const usb_clear_halt: ref;

axiom usb_clear_halt == $sub.ref(0, 197292);

procedure usb_clear_halt($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_clear_halt($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 379} {:cexpr "usb_clear_halt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 1} true;
    call {:si_unique_call 380} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 381} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const v4l2_ctrl_handler_setup: ref;

axiom v4l2_ctrl_handler_setup == $sub.ref(0, 198324);

procedure v4l2_ctrl_handler_setup($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_handler_setup($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 1} true;
    call {:si_unique_call 382} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 383} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_usb_submit_urb_12: ref;

axiom ldv_usb_submit_urb_12 == $sub.ref(0, 199356);

procedure ldv_usb_submit_urb_12($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.0, $M.9, $M.10, $M.4, $CurrAddr, $M.6;



implementation ldv_usb_submit_urb_12($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} {:cexpr "ldv_usb_submit_urb_12:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 386} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 200388);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_alloc_urb_11: ref;

axiom ldv_usb_alloc_urb_11 == $sub.ref(0, 201420);

procedure ldv_usb_alloc_urb_11($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.4;



implementation ldv_usb_alloc_urb_11($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} {:cexpr "ldv_usb_alloc_urb_11:arg:iso_packets"} boogie_si_record_i32($i0);
    call {:si_unique_call 389} {:cexpr "ldv_usb_alloc_urb_11:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $p2 := ldv_alloc_urb();
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const isoc_irq: ref;

axiom isoc_irq == $sub.ref(0, 202452);

procedure isoc_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.7, $M.9, $M.10, $M.4, $CurrAddr, $M.6;



implementation isoc_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var vslice_dummy_var_94: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i4 := $M.1;
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 4);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(4348, 1));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} fill_frame($p3, $p0);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} vslice_dummy_var_94 := printk.ref.ref(.str.40, $p8);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bulk_irq: ref;

axiom bulk_irq == $sub.ref(0, 203484);

procedure bulk_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.7, $M.9, $M.10, $M.4, $CurrAddr, $M.6;



implementation bulk_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i4 := $M.1;
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 4);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(4348, 1));
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i15, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(4798, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i21 := $sext.i8.i32($i20);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} vslice_dummy_var_96 := printk.ref.ref.i32(.str.41, $p25, $i27);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 0);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(26, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb25:
    assume $i50 == 1;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $i51 := ldv_usb_submit_urb_9($p0, 32);
    call {:si_unique_call 398} {:cexpr "st"} boogie_si_record_i32($i51);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i51, 0);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i52 == 1;
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} vslice_dummy_var_98 := printk.ref.i32(.str.44, $i51);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb18:
    assume $i22 == 1;
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i30 := $M.1;
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i30, 4);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    call {:si_unique_call 396} devirtbounce.7($p41, $p3, $p43, $i45);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22:
    assume $i31 == 1;
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} vslice_dummy_var_97 := printk.ref.ref.i32(.str.46, $p34, $i36);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i15, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb13;

  $bb14:
    assume $i18 == 1;
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} vslice_dummy_var_95 := printk.ref.ref(.str.45, $p8);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_submit_urb_9: ref;

axiom ldv_usb_submit_urb_9 == $sub.ref(0, 204516);

procedure ldv_usb_submit_urb_9($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.0, $M.9, $M.10, $M.4, $CurrAddr, $M.6;



implementation ldv_usb_submit_urb_9($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} {:cexpr "ldv_usb_submit_urb_9:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 402} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fill_frame: ref;

axiom fill_frame == $sub.ref(0, 205548);

procedure fill_frame($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.7, $M.9, $M.10, $M.4, $CurrAddr, $M.6;



implementation fill_frame($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i27: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $i41: i1;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $p55: ref;
  var $i56: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p63: ref;
  var $i64: i32;
  var $i65: i64;
  var $p66: ref;
  var $i40: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i26: i32;
  var $i70: i32;
  var $i71: i1;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, 0);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i70 := ldv_usb_submit_urb_8($p1, 32);
    call {:si_unique_call 405} {:cexpr "st"} boogie_si_record_i32($i70);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i70, 0);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  $bb33:
    assume $i71 == 1;
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} vslice_dummy_var_102 := printk.ref.i32(.str.44, $i70);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb15;

  $bb15:
    call $i27, $p30, $i31, $i32, $p35, $i36, $i37, $p39, $i41, $p42, $i43, $i44, $i45, $p46, $i47, $i48, $p50, $p51, $i52, $p55, $i56, $p58, $p59, $i60, $p63, $i64, $i65, $p66, $i40, $i67, $i68, $i69, $i26, vslice_dummy_var_100, vslice_dummy_var_101 := fill_frame_loop_$bb15($p0, $p1, $p22, $p23, $i27, $p30, $i31, $i32, $p35, $i36, $i37, $p39, $i41, $p42, $i43, $i44, $i45, $p46, $i47, $i48, $p50, $p51, $i52, $p55, $i56, $p58, $p59, $i60, $p63, $i64, $i65, $p66, $i40, $i67, $i68, $i69, $i26, vslice_dummy_var_100, vslice_dummy_var_101);
    goto $bb15_last;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i27, 16)), $mul.ref(8, 1));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    call {:si_unique_call 406} {:cexpr "len"} boogie_si_record_i32($i31);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i26);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i32, 16)), $mul.ref(12, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    call {:si_unique_call 407} {:cexpr "st"} boogie_si_record_i32($i36);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i31, 0);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i47 := $M.1;
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i48 := $sgt.i32($i47, 4);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i26);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i60, 16)), $mul.ref(0, 1));
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i65 := $zext.i32.i64($i64);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p59, $mul.ref($i65, 1));
    call {:si_unique_call 411} devirtbounce.7($p22, $p0, $p66, $i31);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i40 := $i26;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i40, 1);
    call {:si_unique_call 409} {:cexpr "i"} boogie_si_record_i32($i67);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p23);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i69 := $sgt.i32($i68, $i67);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i69 == 1);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb30:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i26 := $i67;
    goto $bb30_dummy;

  $bb27:
    assume $i48 == 1;
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i26);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i52, 16)), $mul.ref(0, 1));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} vslice_dummy_var_101 := printk.ref.ref.i32.i32.i32(.str.43, $p51, $i26, $i56, $i31);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb21:
    assume $i41 == 1;
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4347, 1));
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i44 := $sext.i8.i32($i43);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i40 := $i26;
    goto $bb19;

  $bb23:
    assume $i45 == 1;
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4347, 1));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, 1);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} vslice_dummy_var_100 := printk.ref.i32.i32.i32(.str.42, $i26, $i31, $i36);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4346, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 0);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i40 := $i26;
    goto $bb19;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, $sub.i32(0, 108));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4798, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} vslice_dummy_var_99 := printk.ref.ref.i32(.str.41, $p14, $i16);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 0);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb30_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2343;
}



const ldv_usb_submit_urb_8: ref;

axiom ldv_usb_submit_urb_8 == $sub.ref(0, 206580);

procedure ldv_usb_submit_urb_8($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.0, $M.9, $M.10, $M.4, $CurrAddr, $M.6;



implementation ldv_usb_submit_urb_8($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} {:cexpr "ldv_usb_submit_urb_8:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 415} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const which_bandwidth: ref;

axiom which_bandwidth == $sub.ref(0, 207612);

procedure which_bandwidth($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation which_bandwidth($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p10: ref;
  var $i11: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p22: ref;
  var $i23: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i70: i32;
  var $i69: i32;
  var $i58: i32;
  var $i71: i32;
  var $i72: i1;
  var $p74: ref;
  var $p75: ref;
  var vslice_dummy_var_103: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $p1 := $alloc($mul.ref(204, $zext.i32.i64(1)));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4349, 1));
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    call {:si_unique_call 417} {:cexpr "i"} boogie_si_record_i32($i4);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i4);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref($i8, 32)), $mul.ref(20, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    call {:si_unique_call 418} {:cexpr "bandwidth"} boogie_si_record_i32($i11);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(29, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i35 := $i11;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 160)), $mul.ref(104, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i41 == 1);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4356, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.0, $p59);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i62 := $ugt.i32($i61, 639);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i70 := $mul.i32($i35, 30);
    call {:si_unique_call 423} {:cexpr "bandwidth"} boogie_si_record_i32($i70);
    assume {:verifier.code 0} true;
    $i69 := $i70;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i58 := $i69;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i71 := $M.1;
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i72 := $sgt.i32($i71, 2);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $r := $i58;
    return;

  $bb16:
    assume $i72 == 1;
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} vslice_dummy_var_103 := printk.ref.ref.i32(.str.35, $p75, $i58);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i62 == 1;
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 1992)), $mul.ref(28, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 2);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb12;

  $bb13:
    assume $i67 == 1;
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i68 := $mul.i32($i35, 15);
    call {:si_unique_call 424} {:cexpr "bandwidth"} boogie_si_record_i32($i68);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i69 := $i68;
    goto $bb15;

  $bb7:
    assume $i41 == 1;
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 160)), $mul.ref(104, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    call {:si_unique_call 420} devirtbounce.8($p45, $p0, $p1);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p47, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i51 := $mul.i32($i50, $i35);
    call {:si_unique_call 421} {:cexpr "bandwidth"} boogie_si_record_i32($i51);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i57 := $udiv.i32($i51, $i56);
    call {:si_unique_call 422} {:cexpr "bandwidth"} boogie_si_record_i32($i57);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb9;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i4);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref($i20, 32)), $mul.ref(0, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i4);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p26, $mul.ref($i27, 32)), $mul.ref(4, 1));
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i31 := $mul.i32($i23, $i30);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i32 := $ugt.i32($i31, $i11);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb3;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i33 := $mul.i32($i11, 3);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i34 := $udiv.i32($i33, 8);
    call {:si_unique_call 419} {:cexpr "bandwidth"} boogie_si_record_i32($i34);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb6;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 208644);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    return;
}



const frame_alloc: ref;

axiom frame_alloc == $sub.ref(0, 209676);

procedure frame_alloc($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation frame_alloc($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p34: ref;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $p39: ref;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i64;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $i41: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i33: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} {:cexpr "frame_alloc:arg:memory"} boogie_si_record_i32($i2);
    call {:si_unique_call 428} {:cexpr "frame_alloc:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4349, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    call {:si_unique_call 429} {:cexpr "i"} boogie_si_record_i32($i6);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i6);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref($i10, 32)), $mul.ref(20, 1));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    call {:si_unique_call 430} {:cexpr "frsz"} boogie_si_record_i32($i13);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i14 := $M.1;
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, 2);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i13, 4095);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, $sub.i32(0, 4096));
    call {:si_unique_call 432} {:cexpr "frsz"} boogie_si_record_i32($i21);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i32($i3, 15);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i3;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i24 := $mul.i32($i21, $i23);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $p26 := vmalloc_32($i25);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2632, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p26);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2632, 1));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2184, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p1);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i2);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4801, 1));
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i35);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4312, 1));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i21);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i23);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4344, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, $i38);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i40 := $ult.i32(0, $i23);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4320, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} atomic_set($p72, 0);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4324, 1));
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} atomic_set($p73, 0);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4345, 1));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, 0);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb11:
    assume $i40 == 1;
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb14;

  $bb14:
    call $p42, $p43, $i44, $p47, $p49, $p51, $p53, $p55, $p57, $p59, $p60, $p61, $i62, $i63, $p64, $p65, $i66, $p68, $p69, $i70, $i71, $i41 := frame_alloc_loop_$bb14($p0, $i2, $i21, $i23, $p42, $p43, $i44, $p47, $p49, $p51, $p53, $p55, $p57, $p59, $p60, $p61, $i62, $i63, $p64, $p65, $i66, $p68, $p69, $i70, $i71, $i41);
    goto $bb14_last;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2640, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i41);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p43, $mul.ref($i44, 104)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i41);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p43, $mul.ref($i44, 104)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 1);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p43, $mul.ref($i44, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, 0);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p43, $mul.ref($i44, 104)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 1);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p43, $mul.ref($i44, 104)), $mul.ref(16, 1)), $mul.ref(72, 1));
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i21);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p43, $mul.ref($i44, 104)), $mul.ref(16, 1)), $mul.ref(60, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i2);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p43, $mul.ref($i44, 104)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, 0);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2632, 1));
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i62 := $mul.i32($i41, $i21);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i63 := $zext.i32.i64($i62);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p61, $mul.ref($i63, 1));
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p43, $mul.ref($i44, 104)), $mul.ref(0, 1));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p65, $p64);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i66 := $mul.i32($i41, $i21);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p43, $mul.ref($i44, 104)), $mul.ref(16, 1)), $mul.ref(64, 1));
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i66);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i41, 1);
    call {:si_unique_call 435} {:cexpr "i"} boogie_si_record_i32($i70);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i71 := $ult.i32($i70, $i23);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i71 == 1);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i41 := $i70;
    goto $bb16_dummy;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} vslice_dummy_var_105 := printk.ref(.str.68);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 12);
    goto $bb9;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i23 := 15;
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} vslice_dummy_var_104 := printk.ref.ref.i32(.str.67, $p18, $i13);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2544;
}



const vmalloc_32: ref;

axiom vmalloc_32 == $sub.ref(0, 210708);

procedure vmalloc_32($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation vmalloc_32($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} {:cexpr "vmalloc_32:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $p1 := external_alloc();
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ktime_get: ref;

axiom ktime_get == $sub.ref(0, 211740);

procedure ktime_get() returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ktime_get() returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $p1 := external_alloc();
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 1} true;
    $i3 := $ne.ref($p2, $0.ref);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 1} true;
    call {:si_unique_call 442} __VERIFIER_assume($i4);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 443} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p5, $p6, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_16;
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 212772);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const ns_to_timeval: ref;

axiom ns_to_timeval == $sub.ref(0, 213804);

procedure ns_to_timeval($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ns_to_timeval($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 445} {:cexpr "ns_to_timeval:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $p2 := external_alloc();
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 1} true;
    $i4 := $ne.ref($p3, $0.ref);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 1} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 1} true;
    call {:si_unique_call 447} __VERIFIER_assume($i5);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.0;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 448} cmdloc_dummy_var_19 := $memcpy.i8(cmdloc_dummy_var_17, cmdloc_dummy_var_18, $p6, $p7, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_2611;

  corral_source_split_2611:
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2612;

  corral_source_split_2612:
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume $extractvalue($p11, 1) == $extractvalue($u0, 1);
    assume $extractvalue($p11, 0) == $i10;
    goto corral_source_split_2614;

  corral_source_split_2614:
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2615;

  corral_source_split_2615:
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume $extractvalue($p14, 0) == $extractvalue($p11, 0);
    assume $extractvalue($p14, 1) == $i13;
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;
}



const vidioc_dqbuf: ref;

axiom vidioc_dqbuf == $sub.ref(0, 214836);

procedure vidioc_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr, $M.5, $M.7, $M.9, $M.10, $M.4, $M.6;



implementation vidioc_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i22: i32;
  var $i20: i32;
  var $i21: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i53: i64;
  var $i51: i64;
  var $i52: i64;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i58: i64;
  var $i59: i1;
  var $i60: i64;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i54: i64;
  var $i64: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i84: i8;
  var $i85: i32;
  var $i86: i64;
  var $p88: ref;
  var $i89: i8;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $i95: i32;
  var $i96: i32;
  var $i97: i8;
  var $p98: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $p104: ref;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $p115: ref;
  var $p116: ref;
  var $p118: ref;
  var $i119: i8;
  var $i120: i32;
  var $i121: i1;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p130: ref;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $p135: ref;
  var $p136: ref;
  var $i138: i32;
  var $i139: i32;
  var $i23: i32;
  var $p140: ref;
  var $i141: i1;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i8;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i15: i32;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $p4 := video_drvdata($p0);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i6 := $M.1;
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 3);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $i13 := mutex_lock_interruptible_nested($p12, 0);
    call {:si_unique_call 453} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $i18 := frame_ready_nolock($p5, $p0, $i17);
    call {:si_unique_call 455} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    assume {:branchcond $i19} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i19 == 1);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i21 := $i18;
    goto $bb11;

  $bb11:
    call $i22, $i21, $i24, $p25, $p26, $i27, $i28, $i29, $i30, $p31, $i32, $i33, $i34, $p35, $p36, $p38, $p39, $p40, $p42, $p43, $p45, $p46, $p47, $i48, $i49, $i50, $i53, $i51, $i52, $p55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i54, $i64, $p65, $i66, $i67, $i68, $i69, $i70, $p71, $i72, $i73, $i74, $i75, $i76, $p77, $i78, $i79, $i80, $i81, $i82 := vidioc_dqbuf_loop_$bb11($p0, $p2, $p3, $p5, $p16, $i22, $i21, $i24, $p25, $p26, $i27, $i28, $i29, $i30, $p31, $i32, $i33, $i34, $p35, $p36, $p38, $p39, $p40, $p42, $p43, $p45, $p46, $p47, $i48, $i49, $i50, $i53, $i51, $i52, $p55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i54, $i64, $p65, $i66, $i67, $i68, $i69, $i70, $p71, $i72, $i73, $i74, $i75, $i76, $p77, $i78, $i79, $i80, $i81, $i82);
    goto $bb11_last;

  $bb14:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i21, 0);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} mutex_unlock($p25);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(136, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 2048);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $i30 := msecs_to_jiffies(3000);
    call {:si_unique_call 461} {:cexpr "tmp___1"} boogie_si_record_i64($i30);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $i33 := frame_ready($p5, $p0, $i32);
    call {:si_unique_call 463} {:cexpr "tmp___7"} boogie_si_record_i32($i33);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i72 := $i30;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i64.i32($i72);
    call {:si_unique_call 479} {:cexpr "ret"} boogie_si_record_i32($i73);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i73, 0);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i75 := $i73;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i73, 0);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i78 := mutex_lock_interruptible_nested($p77, 0);
    call {:si_unique_call 481} {:cexpr "tmp___8"} boogie_si_record_i32($i78);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p16);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $i81 := frame_ready_nolock($p5, $p0, $i80);
    call {:si_unique_call 483} {:cexpr "ret"} boogie_si_record_i32($i81);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i81, 0);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i22 := $i81;
    assume true;
    goto $bb12, $bb55;

  $bb55:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i21 := $i81;
    goto $bb55_dummy;

  $bb12:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i20 := $i22;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i23 := $i20;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} mutex_unlock($p140);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i23, 0);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i141 == 1);
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i15 := $i23;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb68:
    assume $i141 == 1;
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p143, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i146 := $p2i.ref.i64($p145);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i147 := $ne.i64($i146, 0);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i147 == 1);
    goto $bb70;

  $bb71:
    assume $i147 == 1;
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(4456, 1));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} mutex_lock_nested($p148, 0);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(4792, 1));
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p149, 0);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(4799, 1));
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.0, $p150);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i152 := $sext.i8.i32($i151);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i153 := $ne.i32($i152, 0);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(4456, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} mutex_unlock($p158);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb73:
    assume $i153 == 1;
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p155, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    call {:si_unique_call 491} devirtbounce.1($p157, $p5);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb52:
    assume $i79 == 1;
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 512);
    goto $bb6;

  $bb49:
    assume $i76 == 1;
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 5);
    goto $bb6;

  $bb46:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i15 := $i75;
    goto $bb6;

  $bb22:
    assume $i34 == 1;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $p35 := get_current();
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p36, 0);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p38, $p35);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p39, autoremove_wake_function);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p42, $p40);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p45, $p43);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(4368, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} prepare_to_wait($p46, $p3, 1);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $i49 := frame_ready($p5, $p0, $i48);
    call {:si_unique_call 467} {:cexpr "tmp___3"} boogie_si_record_i32($i49);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i51 := $i30;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume !($i50 == 1);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i52 := $i30;
    goto $bb27;

  $bb27:
    call $i53, $i52, $p55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63 := vidioc_dqbuf_loop_$bb27($p0, $p3, $p5, $p46, $p47, $i53, $i52, $p55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63);
    goto $bb27_last;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $p55 := get_current();
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $i56 := signal_pending($p55);
    call {:si_unique_call 470} {:cexpr "tmp___5"} boogie_si_record_i32($i56);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i54 := $sub.i64(0, 512);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i54, 0);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i70 := $i54;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(4368, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} finish_wait($p71, $p3);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i72 := $i70;
    goto $bb45;

  $bb39:
    assume $i64 == 1;
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $i67 := frame_ready($p5, $p0, $i66);
    call {:si_unique_call 477} {:cexpr "tmp___6"} boogie_si_record_i32($i67);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $i54;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i70 := $i69;
    goto $bb44;

  $bb41:
    assume $i68 == 1;
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i69 := 1;
    goto $bb43;

  $bb31:
    assume $i57 == 1;
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $i58 := schedule_timeout($i52);
    call {:si_unique_call 472} {:cexpr "__ret"} boogie_si_record_i64($i58);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i58, 0);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i60 := $i58;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} prepare_to_wait($p46, $p3, 1);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p47);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $i62 := frame_ready($p5, $p0, $i61);
    call {:si_unique_call 475} {:cexpr "tmp___3"} boogie_si_record_i32($i62);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i53 := $i58;
    assume true;
    goto $bb28, $bb38;

  $bb38:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i52 := $i58;
    goto $bb38_dummy;

  $bb28:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i51 := $i53;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i54 := $i51;
    goto $bb29;

  $bb33:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i54 := $i60;
    goto $bb29;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb25;

  $bb19:
    assume $i29 == 1;
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 11);
    goto $bb6;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(4345, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.0, $p83);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    call {:si_unique_call 457} {:cexpr "i"} boogie_si_record_i32($i85);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i85);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(4328, 1)), $mul.ref($i86, 1));
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.0, $p88);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i90 := $sext.i8.i32($i89);
    call {:si_unique_call 458} {:cexpr "j"} boogie_si_record_i32($i90);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(2640, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i90);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i85, 1);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i96 := $srem.i32($i95, 16);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(4345, 1));
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p98, $i97);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p92, $mul.ref($i93, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, $sub.i32(0, 5));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p92, $mul.ref($i93, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p104, $i102);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i105 := $ugt.i64(88, 63);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i105 == 1);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p2);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p92, $mul.ref($i93, 104)), $mul.ref(16, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.0;
    cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 485} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p109, $p111, 88, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_25;
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i112 := $M.1;
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i113 := $sgt.i32($i112, 3);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(4801, 1));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.0, $p118);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i120 := $sext.i8.i32($i119);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 2);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    $i139 := 0;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i23 := $i139;
    goto $bb13;

  $bb62:
    assume $i121 == 1;
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p92, $mul.ref($i93, 104)), $mul.ref(16, 1)), $mul.ref(64, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i125 := $load.i64($M.0, $p124);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p126 := $i2p.i64.ref($i125);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p92, $mul.ref($i93, 104)), $mul.ref(0, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p92, $mul.ref($i93, 104)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $i132 := copy_to_user($p126, $p128, $i131);
    call {:si_unique_call 488} {:cexpr "tmp___9"} boogie_si_record_i32($i132);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    $i138 := 0;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i139 := $i138;
    goto $bb67;

  $bb64:
    assume $i133 == 1;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p135);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} vslice_dummy_var_108 := printk.ref.ref(.str.74, $p136);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i138 := $sub.i32(0, 14);
    goto $bb66;

  $bb59:
    assume $i113 == 1;
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} vslice_dummy_var_107 := printk.ref.ref.i32(.str.73, $p116, $i90);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb56:
    assume $i105 == 1;
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p2);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p92, $mul.ref($i93, 104)), $mul.ref(16, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 484} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p106, $p108, 88, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb9;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 512);
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} vslice_dummy_var_106 := printk.ref.ref(.str.72, $p10);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb38_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb55_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 215868);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} {:cexpr "copy_to_user:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} might_fault();
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $i3 := _copy_to_user($p0, $p1, $i2);
    call {:si_unique_call 496} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const might_fault: ref;

axiom might_fault == $sub.ref(0, 216900);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 217932);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 497} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 1} true;
    call {:si_unique_call 498} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 499} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const frame_ready_nolock: ref;

axiom frame_ready_nolock == $sub.ref(0, 218964);

procedure frame_ready_nolock($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation frame_ready_nolock($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} {:cexpr "frame_ready_nolock:arg:memory"} boogie_si_record_i32($i2);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4799, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i5 := $sext.i8.i32($i4);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2184, 1));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p1);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i10, $i11);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4801, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i15 := $sext.i8.i32($i14);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, $i2);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4348, 1));
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4324, 1));
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i22 := atomic_read($p21);
    call {:si_unique_call 502} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4345, 1));
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, $i22);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i7 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 219996);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 503} {:cexpr "msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 1} true;
    call {:si_unique_call 504} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 505} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const frame_ready: ref;

axiom frame_ready == $sub.ref(0, 221028);

procedure frame_ready($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation frame_ready($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $p8: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} {:cexpr "frame_ready:arg:memory"} boogie_si_record_i32($i2);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i4 := mutex_lock_interruptible_nested($p3, 0);
    call {:si_unique_call 508} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $i7 := frame_ready_nolock($p0, $p1, $i2);
    call {:si_unique_call 510} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} mutex_unlock($p8);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 512);
    goto $bb3;
}



const autoremove_wake_function: ref;

axiom autoremove_wake_function == $sub.ref(0, 222060);

procedure autoremove_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const prepare_to_wait: ref;

axiom prepare_to_wait == $sub.ref(0, 223092);

procedure prepare_to_wait($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation prepare_to_wait($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} {:cexpr "prepare_to_wait:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 224124);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $i1 := test_tsk_thread_flag($p0, 2);
    call {:si_unique_call 514} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 516} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 225156);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 517} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 1} true;
    call {:si_unique_call 518} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 519} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 226188);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 227220);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 228252);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(8, 1));
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i5 := test_ti_thread_flag($p4, $i1);
    call {:si_unique_call 523} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 229284);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 525} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 230316);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $i5 := variable_test_bit($i2, $p4);
    call {:si_unique_call 528} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 231348);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 530} $i2 := devirtbounce.9(0, $p1, $i0);
    call {:si_unique_call 531} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vidioc_querycap: ref;

axiom vidioc_querycap == $sub.ref(0, 232380);

procedure vidioc_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var vslice_dummy_var_109: i64;
  var vslice_dummy_var_110: i64;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $p3 := video_drvdata($p0);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} vslice_dummy_var_109 := strlcpy($p6, $p10, 16);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1992)), $mul.ref(1848, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 1992)), $mul.ref(1520, 1)), $mul.ref(8, 1));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.0, $p30);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 1992)), $mul.ref(1520, 1)), $mul.ref(10, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} vslice_dummy_var_111 := snprintf.ref.i64.ref.i32.i32($p26, 32, .str.79, $i32, $i38);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} vslice_dummy_var_112 := usb_make_path($p41, $p43, 32);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 83886081);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i47, $sub.i32(0, 2147483648));
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(84, 1));
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i48);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 1992)), $mul.ref(1848, 1));
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} vslice_dummy_var_110 := strlcpy($p19, $p23, 32);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vidioc_enum_fmt_vid_cap: ref;

axiom vidioc_enum_fmt_vid_cap == $sub.ref(0, 233412);

procedure vidioc_enum_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.0, $CurrAddr;



implementation vidioc_enum_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i33: i32;
  var $i31: i32;
  var $i32: i32;
  var $i34: i32;
  var $i35: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i48: i32;
  var $i49: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i14: i32;
  var $i15: i32;
  var $i54: i32;
  var $i55: i32;
  var $i12: i32;
  var $i13: i32;
  var $i46: i32;
  var $i47: i32;
  var $i56: i1;
  var $i57: i64;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $p66: ref;
  var $i67: i32;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p73: ref;
  var $i74: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i8;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i93: i8;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i8;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i32;
  var $i105: i8;
  var $p107: ref;
  var $p109: ref;
  var $i50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $p4 := video_drvdata($p0);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(24, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    call {:si_unique_call 539} {:cexpr "i"} boogie_si_record_i32($i9);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i9, 1);
    call {:si_unique_call 540} {:cexpr "i"} boogie_si_record_i32($i10);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i11 := $sge.i32($i10, 0);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i12, $i13 := 0, $i10;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i46, $i47 := $i12, $i13;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i47, 0);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i46);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i57, 4));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.16, $p58);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i47);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p63, $mul.ref($i64, 32)), $mul.ref(20, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i47);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p70, $mul.ref($i71, 32)), $mul.ref(0, 1));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i47);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p77, $mul.ref($i78, 32)), $mul.ref(4, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i82 := $mul.i32($i74, $i81);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i83 := $ult.i32($i67, $i82);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i8($i86);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p89, $i87);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i92 := $lshr.i32($i91, 8);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i8($i92);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(1, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p95, $i93);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i98 := $lshr.i32($i97, 16);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i8($i98);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(2, 1));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p101, $i99);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i104 := $lshr.i32($i103, 24);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i32.i8($i104);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(3, 1));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p107, $i105);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(4, 1));
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p109, 0);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $r := $i50;
    return;

  $bb31:
    assume $i83 == 1;
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, 1);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i56 == 1;
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 22);
    goto $bb22;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i14, $i15 := $i10, 0;
    goto $bb4;

  $bb4:
    call $p17, $p18, $i19, $p21, $i22, $i23, $p24, $p25, $i26, $i27, $p28, $i29, $i30, $i33, $i31, $i32, $i34, $i35, $p36, $i37, $i38, $i39, $i40, $p41, $i42, $i43, $i44, $i45, $i48, $i49, $i51, $i52, $i53, $i14, $i15, $i54, $i55 := vidioc_enum_fmt_vid_cap_loop_$bb4($p2, $p3, $p5, $p17, $p18, $i19, $p21, $i22, $i23, $p24, $p25, $i26, $i27, $p28, $i29, $i30, $i33, $i31, $i32, $i34, $i35, $p36, $i37, $i38, $i39, $i40, $p41, $i42, $i43, $i44, $i45, $i48, $i49, $i51, $i52, $i53, $i14, $i15, $i54, $i55);
    goto $bb4_last;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i14);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref($i19, 32)), $mul.ref(8, 1));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i15);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i23, 4));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p24, $i22);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 4));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.16, $p25);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i15);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i27, 4));
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.16, $p28);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i26, $i29);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i31 := 0;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i30 == 1);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb9;

  $bb9:
    call $i33, $i32, $i34, $i35, $p36, $i37, $i38, $i39 := vidioc_enum_fmt_vid_cap_loop_$bb9($p3, $p28, $i33, $i32, $i34, $i35, $p36, $i37, $i38, $i39);
    goto $bb9_last;

  $bb12:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i32, 1);
    call {:si_unique_call 541} {:cexpr "j"} boogie_si_record_i32($i34);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i35, 4));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.16, $p36);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.16, $p28);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i37, $i38);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i33 := $i34;
    assume true;
    goto $bb10, $bb13;

  $bb13:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i34;
    goto $bb13_dummy;

  $bb10:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i31 := $i33;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i31, $i15);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i51 := $i15;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i14, 1);
    call {:si_unique_call 543} {:cexpr "i"} boogie_si_record_i32($i52);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i53 := $sge.i32($i52, 0);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i54, $i55 := $i51, $i52;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i12, $i13 := $i54, $i55;
    goto $bb3;

  $bb25:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i14, $i15 := $i52, $i51;
    goto $bb25_dummy;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, $i15);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i44, $i45 := $i15, $i14;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i15, 1);
    call {:si_unique_call 542} {:cexpr "index"} boogie_si_record_i32($i48);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i49 := $ugt.i32($i48, 7);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i51 := $i48;
    goto $bb24;

  $bb20:
    assume $i49 == 1;
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 22);
    goto $bb22;

  $bb16:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i46, $i47 := $i44, $i45;
    goto $bb18;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb7;

  $bb13_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb25_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3007;
}



const vidioc_g_fmt_vid_cap: ref;

axiom vidioc_g_fmt_vid_cap == $sub.ref(0, 234444);

procedure vidioc_g_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $p3 := video_drvdata($p0);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4349, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 545} {:cexpr "mode"} boogie_si_record_i32($i7);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i7);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p12, $mul.ref($i13, 32));
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p9);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p14);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.0;
    cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 546} cmdloc_dummy_var_28 := $memcpy.i8(cmdloc_dummy_var_26, cmdloc_dummy_var_27, $p15, $p16, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_28;
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 0);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_s_fmt_vid_cap: ref;

axiom vidioc_s_fmt_vid_cap == $sub.ref(0, 235476);

procedure vidioc_s_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_s_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i16;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i16;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $i48: i8;
  var $p49: ref;
  var $i11: i32;
  var $p50: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} $p3 := video_drvdata($p0);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $i6 := mutex_lock_interruptible_nested($p5, 0);
    call {:si_unique_call 549} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i9 := try_fmt_vid_cap($p4, $p2);
    call {:si_unique_call 551} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4344, 1));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i13);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4349, 1));
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, $i9);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4348, 1));
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4356, 1));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p36, $i35);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4358, 1));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p42, $i41);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4352, 1));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i46);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i9);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4349, 1));
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, $i48);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} mutex_unlock($p50);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i8 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb18:
    assume $i30 == 1;
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 16);
    goto $bb7;

  $bb15:
    assume $i26 == 1;
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb7;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4312, 1));
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i32($i19, $i21);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb11;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb7;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 512);
    goto $bb3;
}



const vidioc_try_fmt_vid_cap: ref;

axiom vidioc_try_fmt_vid_cap == $sub.ref(0, 236508);

procedure vidioc_try_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_try_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $p3 := video_drvdata($p0);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $i5 := try_fmt_vid_cap($p4, $p2);
    call {:si_unique_call 555} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;
}



const vidioc_querybuf: ref;

axiom vidioc_querybuf == $sub.ref(0, 237540);

procedure vidioc_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i11: i32;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $p3 := video_drvdata($p0);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4344, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i9 := $sext.i8.i32($i8);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i10 := $uge.i32($i6, $i9);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2640, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i64(88, 63);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p2);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p13, $mul.ref($i16, 104)), $mul.ref(16, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.0;
    cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 558} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p22, $p24, 88, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_34;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p2);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p13, $mul.ref($i16, 104)), $mul.ref(16, 1));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.0;
    cmdloc_dummy_var_30 := $M.0;
    call {:si_unique_call 557} cmdloc_dummy_var_31 := $memcpy.i8(cmdloc_dummy_var_29, cmdloc_dummy_var_30, $p19, $p21, 88, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_31;
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_streamoff: ref;

axiom vidioc_streamoff == $sub.ref(0, 238572);

procedure vidioc_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.7, $M.4, $M.9, $M.10, $M.6, $CurrAddr;



implementation vidioc_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i26: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $i25: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i14: i32;
  var $p45: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} {:cexpr "vidioc_streamoff:arg:buf_type"} boogie_si_record_i32($i2);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $p3 := video_drvdata($p0);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 1);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $i8 := mutex_lock_interruptible_nested($p7, 0);
    call {:si_unique_call 562} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4348, 1));
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2184, 1));
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p0);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i17, $i18);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} gspca_stream_off($p4);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4368, 1));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} __wake_up($p20, 1, 1, $0.ref);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4344, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i23 := $sext.i8.i32($i22);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i23, 0);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4320, 1));
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} atomic_set($p42, 0);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4324, 1));
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} atomic_set($p43, 0);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4345, 1));
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, 0);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} mutex_unlock($p45);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i6 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb18;

  $bb18:
    call $i26, $p30, $i31, $i32, $i33, $p37, $i38, $i39, $i40, $i41, $i25 := vidioc_streamoff_loop_$bb18($p4, $p21, $i26, $p30, $i31, $i32, $i33, $p37, $i38, $i39, $i40, $i41, $i25);
    goto $bb18_last;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2640, 1)), $mul.ref($i26, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, $sub.i32(0, 7));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i25);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2640, 1)), $mul.ref($i33, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i32);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i25, 1);
    call {:si_unique_call 566} {:cexpr "i"} boogie_si_record_i32($i38);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p21);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i40 := $sext.i8.i32($i39);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i41 := $sgt.i32($i40, $i38);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i41 == 1);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb20:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i25 := $i38;
    goto $bb20_dummy;

  $bb12:
    assume $i19 == 1;
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 16);
    goto $bb10;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb10;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 512);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3302;
}



const vidioc_enum_input: ref;

axiom vidioc_enum_input == $sub.ref(0, 239604);

procedure vidioc_enum_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_enum_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i8: i32;
  var vslice_dummy_var_113: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $p3 := video_drvdata($p0);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 2);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(20, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} vslice_dummy_var_113 := strlcpy($p15, $p19, 32);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_input: ref;

axiom vidioc_g_input == $sub.ref(0, 240636);

procedure vidioc_g_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vidioc_s_input: ref;

axiom vidioc_s_input == $sub.ref(0, 241668);

procedure vidioc_s_input($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vidioc_s_input($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} {:cexpr "vidioc_s_input:arg:i"} boogie_si_record_i32($i2);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const vidioc_g_jpegcomp: ref;

axiom vidioc_g_jpegcomp == $sub.ref(0, 242700);

procedure vidioc_g_jpegcomp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9, $M.5, $M.7, $M.4, $M.10, $M.6;



implementation vidioc_g_jpegcomp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $p3 := video_drvdata($p0);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4792, 1));
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    call {:si_unique_call 573} $i10 := devirtbounce.10($p9, $p4, $p2);
    call {:si_unique_call 574} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const vidioc_s_jpegcomp: ref;

axiom vidioc_s_jpegcomp == $sub.ref(0, 243732);

procedure vidioc_s_jpegcomp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9, $M.5, $M.7, $M.4, $M.10, $M.6;



implementation vidioc_s_jpegcomp($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $p3 := video_drvdata($p0);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4792, 1));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 160)), $mul.ref(96, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    call {:si_unique_call 576} $i10 := devirtbounce.10($p9, $p4, $p2);
    call {:si_unique_call 577} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const vidioc_g_parm: ref;

axiom vidioc_g_parm == $sub.ref(0, 244764);

procedure vidioc_g_parm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_g_parm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $p3 := video_drvdata($p0);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4800, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i7 := $sext.i8.i32($i6);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i7);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 160)), $mul.ref(104, 1));
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4792, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 160)), $mul.ref(104, 1));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    call {:si_unique_call 579} devirtbounce.8($p21, $p4, $p2);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4792, 1));
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb3;
}



const vidioc_s_parm: ref;

axiom vidioc_s_parm == $sub.ref(0, 245796);

procedure vidioc_s_parm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_s_parm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $p3 := video_drvdata($p0);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 581} {:cexpr "n"} boogie_si_record_i32($i8);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i8, 15);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i8);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4800, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i17);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4792, 1));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 0);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    call {:si_unique_call 582} devirtbounce.8($p29, $p4, $p2);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4792, 1));
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4800, 1));
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i13 := $sext.i8.i32($i12);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i13);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;
}



const vidioc_g_register: ref;

axiom vidioc_g_register == $sub.ref(0, 246828);

procedure vidioc_g_register($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9, $M.5, $M.7, $M.4, $M.10, $M.6;



implementation vidioc_g_register($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $p3 := video_drvdata($p0);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4792, 1));
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    call {:si_unique_call 584} $i10 := devirtbounce.11($p9, $p4, $p2);
    call {:si_unique_call 585} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const vidioc_s_register: ref;

axiom vidioc_s_register == $sub.ref(0, 247860);

procedure vidioc_s_register($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9, $M.5, $M.7, $M.4, $M.10, $M.6;



implementation vidioc_s_register($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $p3 := video_drvdata($p0);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4792, 1));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    call {:si_unique_call 587} $i10 := devirtbounce.11($p9, $p4, $p2);
    call {:si_unique_call 588} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const vidioc_g_chip_info: ref;

axiom vidioc_g_chip_info == $sub.ref(0, 248892);

procedure vidioc_g_chip_info($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9, $M.5, $M.7, $M.4, $M.10, $M.6;



implementation vidioc_g_chip_info($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $p3 := video_drvdata($p0);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(4792, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i23 := (if $i22 == 1 then $sub.i32(0, 22) else 0);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i17 := $i23;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 590} $i16 := devirtbounce.12($p15, $p4, $p2);
    call {:si_unique_call 591} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;
}



const vidioc_enum_framesizes: ref;

axiom vidioc_enum_framesizes == $sub.ref(0, 249924);

procedure vidioc_enum_framesizes($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_enum_framesizes($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i49: i32;
  var $i22: i32;
  var $i50: i32;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $i10: i32;
  var $i11: i32;
  var $i48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $p3 := video_drvdata($p0);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(24, 1));
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32(0, 22);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $r := $i48;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i10, $i11 := 0, 0;
    goto $bb4;

  $bb4:
    call $p12, $i13, $p15, $p16, $i17, $p19, $i20, $i21, $p23, $i24, $i25, $i26, $i49, $i22, $i50, $i51, $i52, $i53, $i10, $i11 := vidioc_enum_framesizes_loop_$bb4($p2, $p4, $p6, $p12, $i13, $p15, $p16, $i17, $p19, $i20, $i21, $p23, $i24, $i25, $i26, $i49, $i22, $i50, $i51, $i52, $i53, $i10, $i11);
    goto $bb4_last;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i11);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref($i17, 32)), $mul.ref(8, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i13, $i20);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, $i10);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i26 := $i11;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i10, 1);
    call {:si_unique_call 594} {:cexpr "index"} boogie_si_record_i32($i49);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i22 := $i49;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i11, 1);
    call {:si_unique_call 593} {:cexpr "i"} boogie_si_record_i32($i50);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p6);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i53 := $sgt.i32($i52, $i50);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i53 == 1);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i10, $i11 := $i22, $i50;
    goto $bb14_dummy;

  $bb10:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 1);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i26);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p30, $mul.ref($i31, 32)), $mul.ref(0, 1));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i34);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i26);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p40, $mul.ref($i41, 32)), $mul.ref(4, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i44);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb12;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i22 := $i10;
    goto $bb8;

  $bb14_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3508;
}



const vidioc_enum_frameintervals: ref;

axiom vidioc_enum_frameintervals == $sub.ref(0, 250956);

procedure vidioc_enum_frameintervals($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vidioc_enum_frameintervals($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $i42: i32;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $p3 := video_drvdata($p0);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(8, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(12, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $i9 := wxh_to_mode($p4, $i6, $i8);
    call {:si_unique_call 597} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(8, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i14 == 1);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(8, 1));
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i9);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p17, $mul.ref($i18, 16)), $mul.ref(8, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(4, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i9);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p28, $mul.ref($i29, 32)), $mul.ref(8, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i25, $i32);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(8, 1));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i9);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p36, $mul.ref($i37, 16)), $mul.ref(8, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i41 := $ugt.i32($i40, 0);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb14;

  $bb14:
    call $p43, $i44, $i45, $i46, $i65, $p66, $p68, $i69, $i70, $i42 := vidioc_enum_frameintervals_loop_$bb14($p2, $p35, $i37, $p43, $i44, $i45, $i46, $i65, $p66, $p68, $i69, $i70, $i42);
    goto $bb14_last;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, $i42);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i46 := $i42;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i42, 1);
    call {:si_unique_call 598} {:cexpr "i"} boogie_si_record_i32($i65);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p35);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p66, $mul.ref($i37, 16)), $mul.ref(8, 1));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i70 := $ugt.i32($i69, $i65);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i70 == 1);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb19:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i42 := $i65;
    goto $bb19_dummy;

  $bb16:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(16, 1));
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, 1);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(20, 1));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 1);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(8, 1));
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i9);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p53, $mul.ref($i54, 16)), $mul.ref(0, 1));
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i46);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p57, $mul.ref($i58, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 52)), $mul.ref(20, 1));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i61);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb6;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 22);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb19_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3608;
}



const v4l2_ctrl_subscribe_event: ref;

axiom v4l2_ctrl_subscribe_event == $sub.ref(0, 251988);

procedure v4l2_ctrl_subscribe_event($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_subscribe_event($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 1} true;
    call {:si_unique_call 599} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 600} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const v4l2_event_unsubscribe: ref;

axiom v4l2_event_unsubscribe == $sub.ref(0, 253020);

procedure v4l2_event_unsubscribe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_event_unsubscribe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 1} true;
    call {:si_unique_call 601} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 602} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const wxh_to_mode: ref;

axiom wxh_to_mode == $sub.ref(0, 254052);

procedure wxh_to_mode($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation wxh_to_mode($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i29: i32;
  var $i30: i1;
  var $i10: i32;
  var $i31: i32;
  var $i9: i32;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} {:cexpr "wxh_to_mode:arg:width"} boogie_si_record_i32($i1);
    call {:si_unique_call 604} {:cexpr "wxh_to_mode:arg:height"} boogie_si_record_i32($i2);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(24, 1));
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    call {:si_unique_call 605} {:cexpr "i"} boogie_si_record_i32($i6);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i6, 1);
    call {:si_unique_call 606} {:cexpr "i"} boogie_si_record_i32($i7);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i28 := $i9;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i10 := $i7;
    goto $bb4;

  $bb4:
    call $p12, $p13, $i14, $p16, $i17, $i18, $p20, $p21, $i22, $p24, $i25, $i26, $i27, $i29, $i30, $i10, $i31 := wxh_to_mode_loop_$bb4($p0, $i1, $i2, $p12, $p13, $i14, $p16, $i17, $i18, $p20, $p21, $i22, $p24, $i25, $i26, $i27, $i29, $i30, $i10, $i31);
    goto $bb4_last;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i10);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref($i14, 32)), $mul.ref(0, 1));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i18 := $uge.i32($i1, $i17);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i10, 1);
    call {:si_unique_call 607} {:cexpr "i"} boogie_si_record_i32($i29);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i30 := $sgt.i32($i29, 0);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i9 := $i31;
    goto $bb3;

  $bb13:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i29;
    goto $bb13_dummy;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i10);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p21, $mul.ref($i22, 32)), $mul.ref(4, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i26 := $uge.i32($i2, $i25);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i27 := $i10;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb8;

  $bb9:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb11;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3660;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 255084);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 608} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 1} true;
    call {:si_unique_call 609} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 610} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 256116);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 612} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    return;
}



const try_fmt_vid_cap: ref;

axiom try_fmt_vid_cap == $sub.ref(0, 257148);

procedure try_fmt_vid_cap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation try_fmt_vid_cap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 613} {:cexpr "w"} boogie_si_record_i32($i5);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 614} {:cexpr "h"} boogie_si_record_i32($i9);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} PDEBUG_MODE($p0, 2, .str.69, $i13, $i5, $i9);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $i14 := wxh_to_mode($p0, $i5, $i9);
    call {:si_unique_call 617} {:cexpr "mode"} boogie_si_record_i32($i14);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i14);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p17, $mul.ref($i18, 32)), $mul.ref(8, 1));
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i21, $i25);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i14;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i34);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p39, $mul.ref($i40, 32));
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p36);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p41);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.0;
    cmdloc_dummy_var_36 := $M.0;
    call {:si_unique_call 620} cmdloc_dummy_var_37 := $memcpy.i8(cmdloc_dummy_var_35, cmdloc_dummy_var_36, $p42, $p43, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_37;
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 0);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $i31 := gspca_get_mode($p0, $i14, $i30);
    call {:si_unique_call 619} {:cexpr "mode2"} boogie_si_record_i32($i31);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i32 := $sge.i32($i31, 0);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $i14;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb6;

  $bb3:
    assume $i32 == 1;
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    goto $bb5;
}



const gspca_get_mode: ref;

axiom gspca_get_mode == $sub.ref(0, 258180);

procedure gspca_get_mode($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gspca_get_mode($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i17: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i3: i32;
  var $i4: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} {:cexpr "gspca_get_mode:arg:mode"} boogie_si_record_i32($i1);
    call {:si_unique_call 622} {:cexpr "gspca_get_mode:arg:pixfmt"} boogie_si_record_i32($i2);
    call {:si_unique_call 623} {:cexpr "gspca_get_mode:arg:modeD"} boogie_si_record_i32($i1);
    call {:si_unique_call 624} {:cexpr "gspca_get_mode:arg:modeU"} boogie_si_record_i32($i1);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i3, $i4 := $i1, $i1;
    goto $bb1;

  $bb1:
    call $i5, $i6, $p8, $p9, $i10, $p12, $i13, $i14, $i15, $i17, $p19, $i20, $i21, $i22, $p24, $p25, $i26, $p28, $i29, $i30, $i31, $i3, $i4, $p33, $i34, $i35, $i36, $i37 := gspca_get_mode_loop_$bb1($p0, $i2, $i5, $i6, $p8, $p9, $i10, $p12, $i13, $i14, $i15, $i17, $p19, $i20, $i21, $i22, $p24, $p25, $i26, $p28, $i29, $i30, $i31, $i3, $i4, $p33, $i34, $i35, $i36, $i37);
    goto $bb1_last;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(24, 1));
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i35, $i3);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i36 == 1);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i37 := $sge.i32($i4, 0);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i4, 1);
    call {:si_unique_call 625} {:cexpr "modeD"} boogie_si_record_i32($i5);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i6 := $sge.i32($i5, 0);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i3, 1);
    call {:si_unique_call 626} {:cexpr "modeU"} boogie_si_record_i32($i17);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(24, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i17, $i21);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i3, $i4 := $i17, $i5;
    goto $bb15_dummy;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i17);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p25, $mul.ref($i26, 32)), $mul.ref(8, 1));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, $i2);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i31 := $i17;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i16 := $i31;
    goto $bb7;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i5);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref($i10, 32)), $mul.ref(8, 1));
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, $i2);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i15 := $i5;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb5:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb7;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb17;

  $bb15_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3749;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 259212);

procedure snprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);



procedure snprintf.ref.i64.ref.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);



const usb_make_path: ref;

axiom usb_make_path == $sub.ref(0, 260244);

procedure usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} {:cexpr "usb_make_path:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(64, 1));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(4, 1));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $i9 := snprintf.ref.i64.ref.ref.ref($p1, $i2, .str.18, $p6, $p8);
    call {:si_unique_call 629} {:cexpr "actual"} boogie_si_record_i32($i9);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i2);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, $i9);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb3;
}



const gspca_vm_close: ref;

axiom gspca_vm_close == $sub.ref(0, 261276);

procedure gspca_vm_close($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation gspca_vm_close($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i10 := $sle.i32($i9, 0);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, $sub.i32(0, 2));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i14);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 262308);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 630} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 1} true;
    call {:si_unique_call 631} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 632} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 633} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $p4 := calloc(1, $i0);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 1} true;
    call {:si_unique_call 635} __VERIFIER_assume($i7);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 263340);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 636} __VERIFIER_error();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const ldv_initialize_v4l2_file_operations_3: ref;

axiom ldv_initialize_v4l2_file_operations_3 == $sub.ref(0, 264372);

procedure ldv_initialize_v4l2_file_operations_3();
  free requires assertsPassed;
  modifies $M.17, $M.0, $CurrAddr;



implementation ldv_initialize_v4l2_file_operations_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $p0 := ldv_zalloc(360);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $M.17 := $p0;
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_vm_operations_struct_4: ref;

axiom ldv_initialize_vm_operations_struct_4 == $sub.ref(0, 265404);

procedure ldv_initialize_vm_operations_struct_4();
  free requires assertsPassed;
  modifies $M.18, $M.0, $CurrAddr;



implementation ldv_initialize_vm_operations_struct_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $p0 := ldv_zalloc(184);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $M.18 := $p0;
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_v4l2_ioctl_ops_2: ref;

axiom ldv_initialize_v4l2_ioctl_ops_2 == $sub.ref(0, 266436);

procedure ldv_initialize_v4l2_ioctl_ops_2();
  free requires assertsPassed;
  modifies $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.0, $CurrAddr;



implementation ldv_initialize_v4l2_ioctl_ops_2()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $p0 := ldv_zalloc(360);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $M.19 := $p0;
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $p2 := ldv_zalloc(208);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $M.20 := $p2;
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $p4 := ldv_zalloc(32);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $M.21 := $p4;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $p6 := ldv_zalloc(168);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $M.22 := $p6;
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $p8 := ldv_zalloc(88);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $M.23 := $p8;
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $p10 := ldv_zalloc(204);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $M.24 := $p10;
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 267468);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.0, $M.33, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.17, $M.18, $M.2, $M.3, $M.34, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.1, $M.37, $M.38, $M.4, $M.35, $M.36, $M.5, $M.7, $M.6, $M.8, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $CurrAddr, $M.9, assertsPassed, $M.10;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i1;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $i113: i32;
  var $i114: i1;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $i139: i32;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $i156: i32;
  var $i157: i32;
  var $i158: i1;
  var $i159: i32;
  var $i160: i32;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $i165: i32;
  var $i166: i1;
  var $p167: ref;
  var $i169: i32;
  var $i170: i1;
  var $i171: i32;
  var $i172: i1;
  var $i173: i1;
  var $i174: i1;
  var $i175: i1;
  var $i176: i1;
  var $i177: i1;
  var $i178: i1;
  var $i179: i1;
  var $i180: i1;
  var $i181: i1;
  var $i182: i1;
  var $i183: i1;
  var $i184: i1;
  var $i185: i1;
  var $i186: i1;
  var $i187: i1;
  var $i188: i1;
  var $i189: i1;
  var $i190: i1;
  var $i191: i1;
  var $i192: i1;
  var $i193: i1;
  var $i194: i1;
  var $i195: i1;
  var $i196: i1;
  var $i197: i1;
  var $i198: i32;
  var $i199: i1;
  var $p200: ref;
  var $i202: i32;
  var $i203: i1;
  var $p204: ref;
  var $p205: ref;
  var $i207: i32;
  var $i208: i1;
  var $p209: ref;
  var $p210: ref;
  var $i212: i32;
  var $i213: i1;
  var $p214: ref;
  var $p215: ref;
  var $i217: i32;
  var $i218: i1;
  var $p219: ref;
  var $p220: ref;
  var $i222: i32;
  var $i223: i1;
  var $p224: ref;
  var $i225: i32;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $i231: i32;
  var $i232: i1;
  var $p233: ref;
  var $p234: ref;
  var $i236: i32;
  var $i237: i1;
  var $p238: ref;
  var $i240: i32;
  var $i241: i1;
  var $p242: ref;
  var $p243: ref;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $i249: i32;
  var $i250: i1;
  var $p251: ref;
  var $p252: ref;
  var $i254: i32;
  var $i255: i1;
  var $p256: ref;
  var $i258: i32;
  var $i259: i1;
  var $p260: ref;
  var $i262: i32;
  var $i263: i1;
  var $p264: ref;
  var $i266: i32;
  var $i267: i1;
  var $p268: ref;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $i274: i32;
  var $i275: i1;
  var $p276: ref;
  var $i278: i32;
  var $i279: i1;
  var $p280: ref;
  var $p281: ref;
  var $i283: i32;
  var $i284: i1;
  var $p285: ref;
  var $i287: i32;
  var $i288: i1;
  var $p289: ref;
  var $p290: ref;
  var $i292: i32;
  var $i293: i1;
  var $p294: ref;
  var $p295: ref;
  var $i297: i32;
  var $i298: i1;
  var $p299: ref;
  var $i301: i32;
  var $i302: i1;
  var $p303: ref;
  var $i305: i32;
  var $i306: i1;
  var $p307: ref;
  var $i308: i32;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i64;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i64;
  var vslice_dummy_var_122: i64;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;

  $bb0:
    call {:si_unique_call 645} $initialize();
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} $p2 := ldv_zalloc(1800);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 1} true;
    call {:si_unique_call 650} $i4 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 651} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i4);
    call {:si_unique_call 652} {:cexpr "tmp___0"} boogie_si_record_i64($i4);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $p5 := ldv_zalloc(184);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $p7 := ldv_zalloc(8);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $p9 := ldv_zalloc(16);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 1} true;
    call {:si_unique_call 656} $i11 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 657} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i11);
    call {:si_unique_call 658} {:cexpr "tmp___4"} boogie_si_record_i64($i11);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 1} true;
    call {:si_unique_call 659} $i12 := __VERIFIER_nondet_uint();
    call {:si_unique_call 660} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i12);
    call {:si_unique_call 661} {:cexpr "tmp___5"} boogie_si_record_i32($i12);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $p13 := ldv_zalloc(1);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $p14 := ldv_zalloc(140);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $p16 := ldv_zalloc(1);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $p17 := ldv_zalloc(1);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $p18 := ldv_zalloc(1);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $p19 := ldv_zalloc(1);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $p20 := ldv_zalloc(1);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 1} true;
    call {:si_unique_call 669} $i21 := __VERIFIER_nondet_uint();
    call {:si_unique_call 670} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i21);
    call {:si_unique_call 671} {:cexpr "tmp___13"} boogie_si_record_i32($i21);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $p22 := ldv_zalloc(64);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $p24 := ldv_zalloc(1);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $p25 := ldv_zalloc(20);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $p27 := ldv_zalloc(52);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $p29 := ldv_zalloc(1);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $p30 := ldv_zalloc(1);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $p31 := ldv_zalloc(1);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $p32 := ldv_zalloc(1);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $p33 := ldv_zalloc(1);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $p34 := ldv_zalloc(200);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $p36 := ldv_zalloc(44);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $p38 := ldv_zalloc(140);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $p40 := ldv_zalloc(4);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $p42 := ldv_zalloc(1);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $p43 := ldv_zalloc(1);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p44 := ldv_zalloc(56);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $p46 := ldv_zalloc(1);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $p47 := ldv_zalloc(1);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $p48 := ldv_zalloc(1);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $p49 := ldv_zalloc(1);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $p50 := ldv_zalloc(104);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $p52 := ldv_zalloc(1);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $p53 := ldv_zalloc(80);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $p55 := ldv_zalloc(1);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $p56 := ldv_zalloc(1);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $p57 := ldv_zalloc(1);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $p58 := ldv_zalloc(1);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $p59 := ldv_zalloc(56);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $p61 := ldv_zalloc(1);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} ldv_initialize();
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p0);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.25;
    call {:si_unique_call 702} cmdloc_dummy_var_39 := $memset.i8(cmdloc_dummy_var_38, $p62, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.25 := cmdloc_dummy_var_39;
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p1);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_40 := $M.26;
    call {:si_unique_call 703} cmdloc_dummy_var_41 := $memset.i8(cmdloc_dummy_var_40, $p63, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.26 := cmdloc_dummy_var_41;
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $M.27 := 0;
    call {:si_unique_call 704} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $M.28 := 0;
    call {:si_unique_call 705} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 706} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 707} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $M.31 := 0;
    call {:si_unique_call 708} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $M.32 := 0;
    call {:si_unique_call 709} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $p79, $i80, $i81, $p82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $p129, $i131, $i132, $p133, $i135, $i136, $p137, $i139, $i140, $i141, $i142, $p143, $i145, $i146, $p147, $i149, $i150, $p151, $i153, $i154, $p155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $p163, $i165, $i166, $p167, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $p200, $i202, $i203, $p204, $p205, $i207, $i208, $p209, $p210, $i212, $i213, $p214, $p215, $i217, $i218, $p219, $p220, $i222, $i223, $p224, $i225, $i227, $i228, $p229, $i231, $i232, $p233, $p234, $i236, $i237, $p238, $i240, $i241, $p242, $p243, $i245, $i246, $p247, $i249, $i250, $p251, $p252, $i254, $i255, $p256, $i258, $i259, $p260, $i262, $i263, $p264, $i266, $i267, $p268, $i270, $i271, $p272, $i274, $i275, $p276, $i278, $i279, $p280, $p281, $i283, $i284, $p285, $i287, $i288, $p289, $p290, $i292, $i293, $p294, $p295, $i297, $i298, $p299, $i301, $i302, $p303, $i305, $i306, $p307, $i308, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147 := main_loop_$bb1($p0, $p1, $p3, $i4, $p6, $p8, $p10, $i11, $i12, $p13, $p15, $p16, $p17, $p18, $p19, $p20, $i21, $p23, $p24, $p26, $p28, $p29, $p30, $p31, $p32, $p33, $p35, $p37, $p39, $p41, $p42, $p43, $p45, $p46, $p47, $p48, $p49, $p51, $p52, $p54, $p55, $p56, $p57, $p58, $p60, $p61, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $p79, $i80, $i81, $p82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $p129, $i131, $i132, $p133, $i135, $i136, $p137, $i139, $i140, $i141, $i142, $p143, $i145, $i146, $p147, $i149, $i150, $p151, $i153, $i154, $p155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $p163, $i165, $i166, $p167, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $p200, $i202, $i203, $p204, $p205, $i207, $i208, $p209, $p210, $i212, $i213, $p214, $p215, $i217, $i218, $p219, $p220, $i222, $i223, $p224, $i225, $i227, $i228, $p229, $i231, $i232, $p233, $p234, $i236, $i237, $p238, $i240, $i241, $p242, $p243, $i245, $i246, $p247, $i249, $i250, $p251, $p252, $i254, $i255, $p256, $i258, $i259, $p260, $i262, $i263, $p264, $i266, $i267, $p268, $i270, $i271, $p272, $i274, $i275, $p276, $i278, $i279, $p280, $p281, $i283, $i284, $p285, $i287, $i288, $p289, $p290, $i292, $i293, $p294, $p295, $i297, $i298, $p299, $i301, $i302, $p303, $i305, $i306, $p307, $i308, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i64, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i64, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i64, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i64, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} ldv_stop();
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb36_dummy;

  $bb9:
    assume $i68 == 1;
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i169 := $M.32;
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i170 := $ne.i32($i169, 0);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb139:
    assume $i170 == 1;
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 1} true;
    call {:si_unique_call 775} $i171 := __VERIFIER_nondet_int();
    call {:si_unique_call 776} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i171);
    call {:si_unique_call 777} {:cexpr "tmp___48"} boogie_si_record_i32($i171);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i172 := $slt.i32($i171, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    $i173 := $slt.i32($i171, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    $i174 := $slt.i32($i171, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    $i175 := $slt.i32($i171, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    $i176 := $slt.i32($i171, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i171, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    assume !($i177 == 1);
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} ldv_stop();
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb152:
    assume $i177 == 1;
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i305 := $M.32;
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i305, 1);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb268:
    assume $i306 == 1;
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p307 := $M.19;
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i308 := $load.i32($M.26, $p1);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} vslice_dummy_var_147 := vidioc_streamon($p307, $p48, $i308);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 827} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb150:
    assume $i176 == 1;
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i301 := $M.32;
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i301, 1);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  $bb266:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb265:
    assume $i302 == 1;
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $p303 := $M.19;
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} vslice_dummy_var_146 := vidioc_s_register($p303, $p16, $p45);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 825} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb148:
    assume $i175 == 1;
    assume {:verifier.code 0} true;
    $i178 := $slt.i32($i171, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i178 == 1);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i297 := $M.32;
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i298 := $eq.i32($i297, 1);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb262:
    assume $i298 == 1;
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $p299 := $M.19;
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} vslice_dummy_var_145 := vidioc_s_input($p299, $p43, $i21);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 823} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb155:
    assume $i178 == 1;
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i292 := $M.32;
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i293 := $eq.i32($i292, 1);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb259:
    assume $i293 == 1;
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p294 := $M.19;
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p295 := $M.24;
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} vslice_dummy_var_144 := vidioc_s_parm($p294, $p33, $p295);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 821} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb146:
    assume $i174 == 1;
    assume {:verifier.code 0} true;
    $i179 := $slt.i32($i171, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    $i180 := $slt.i32($i171, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i180 == 1);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i287 := $M.32;
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i288 := $eq.i32($i287, 1);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb256:
    assume $i288 == 1;
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $p289 := $M.22;
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p290 := $M.21;
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} vslice_dummy_var_143 := v4l2_ctrl_subscribe_event($p289, $p290);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 819} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb159:
    assume $i180 == 1;
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i283 := $M.32;
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i284 := $eq.i32($i283, 1);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb253:
    assume $i284 == 1;
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $p285 := $M.19;
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} vslice_dummy_var_142 := vidioc_enum_input($p285, $p32, $p54);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 817} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb157:
    assume $i179 == 1;
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i278 := $M.32;
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i279 := $eq.i32($i278, 1);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb250:
    assume $i279 == 1;
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p280 := $M.19;
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $p281 := $M.24;
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} vslice_dummy_var_141 := vidioc_g_parm($p280, $p57, $p281);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 815} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb144:
    assume $i173 == 1;
    assume {:verifier.code 0} true;
    $i181 := $slt.i32($i171, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    $i182 := $slt.i32($i171, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    $i183 := $slt.i32($i171, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i183 == 1);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i274 := $M.32;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i275 := $eq.i32($i274, 1);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb247:
    assume $i275 == 1;
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $p276 := $M.19;
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} vslice_dummy_var_140 := vidioc_g_jpegcomp($p276, $p61, $p15);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 813} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb165:
    assume $i183 == 1;
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i270 := $M.32;
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, 1);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb244:
    assume $i271 == 1;
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p272 := $M.19;
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} vslice_dummy_var_139 := vidioc_s_jpegcomp($p272, $p56, $p39);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 811} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb163:
    assume $i182 == 1;
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i266 := $M.32;
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i266, 1);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb241:
    assume $i267 == 1;
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $p268 := $M.19;
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} vslice_dummy_var_138 := vidioc_g_register($p268, $p18, $p60);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 809} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb161:
    assume $i181 == 1;
    assume {:verifier.code 0} true;
    $i184 := $slt.i32($i171, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    $i185 := $slt.i32($i171, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i185 == 1);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i262 := $M.32;
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i262, 1);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb238:
    assume $i263 == 1;
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $p264 := $M.19;
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} vslice_dummy_var_137 := vidioc_enum_frameintervals($p264, $p58, $p28);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 807} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb169:
    assume $i185 == 1;
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i258 := $M.32;
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i258, 1);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb235:
    assume $i259 == 1;
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p260 := $M.19;
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} vslice_dummy_var_136 := vidioc_querycap($p260, $p52, $p51);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 805} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb167:
    assume $i184 == 1;
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i254 := $M.32;
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i254, 1);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb232:
    assume $i255 == 1;
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $p256 := $M.19;
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} vslice_dummy_var_135 := vidioc_enum_framesizes($p256, $p24, $p37);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 803} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb142:
    assume $i172 == 1;
    assume {:verifier.code 0} true;
    $i186 := $slt.i32($i171, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    $i187 := $slt.i32($i171, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    $i188 := $slt.i32($i171, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    $i189 := $slt.i32($i171, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i189 == 1);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i249 := $M.32;
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i249, 1);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb229:
    assume $i250 == 1;
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p251 := $M.19;
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p252 := $M.23;
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} vslice_dummy_var_134 := vidioc_qbuf($p251, $p55, $p252);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 801} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb177:
    assume $i189 == 1;
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i245 := $M.32;
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i245, 1);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb226:
    assume $i246 == 1;
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p247 := $M.19;
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} vslice_dummy_var_133 := vidioc_g_input($p247, $p17, $p41);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 799} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb175:
    assume $i188 == 1;
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i240 := $M.32;
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i240, 1);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb223:
    assume $i241 == 1;
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p242 := $M.19;
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p243 := $M.20;
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} vslice_dummy_var_132 := vidioc_g_fmt_vid_cap($p242, $p31, $p243);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 797} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb173:
    assume $i187 == 1;
    assume {:verifier.code 0} true;
    $i190 := $slt.i32($i171, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    $i191 := $slt.i32($i171, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i191 == 1);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i236 := $M.32;
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i236, 1);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb220:
    assume $i237 == 1;
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p238 := $M.19;
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} vslice_dummy_var_131 := vidioc_g_chip_info($p238, $p29, $p35);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 795} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb181:
    assume $i191 == 1;
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i231 := $M.32;
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i232 := $eq.i32($i231, 1);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb217:
    assume $i232 == 1;
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p233 := $M.19;
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $p234 := $M.20;
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} vslice_dummy_var_130 := vidioc_s_fmt_vid_cap($p233, $p46, $p234);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 793} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb179:
    assume $i190 == 1;
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i227 := $M.32;
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 1);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb214:
    assume $i228 == 1;
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p229 := $M.19;
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} vslice_dummy_var_129 := vidioc_enum_fmt_vid_cap($p229, $p30, $p23);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 791} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb171:
    assume $i186 == 1;
    assume {:verifier.code 0} true;
    $i192 := $slt.i32($i171, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    $i193 := $slt.i32($i171, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    $i194 := $slt.i32($i171, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i194 == 1);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i222 := $M.32;
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 1);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb211:
    assume $i223 == 1;
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p224 := $M.19;
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i225 := $load.i32($M.25, $p0);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} vslice_dummy_var_128 := vidioc_streamoff($p224, $p47, $i225);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 789} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb187:
    assume $i194 == 1;
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i217 := $M.32;
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 1);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb208:
    assume $i218 == 1;
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p219 := $M.19;
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p220 := $M.23;
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} vslice_dummy_var_127 := vidioc_dqbuf($p219, $p42, $p220);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 787} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb185:
    assume $i193 == 1;
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i212 := $M.32;
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 1);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb205:
    assume $i213 == 1;
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p214 := $M.19;
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p215 := $M.23;
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} vslice_dummy_var_126 := vidioc_querybuf($p214, $p20, $p215);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 785} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb183:
    assume $i192 == 1;
    assume {:verifier.code 0} true;
    $i195 := $slt.i32($i171, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    $i196 := $slt.i32($i171, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i196 == 1);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i207 := $M.32;
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i207, 1);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb202:
    assume $i208 == 1;
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $p209 := $M.19;
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p210 := $M.20;
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} vslice_dummy_var_125 := vidioc_try_fmt_vid_cap($p209, $p19, $p210);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 783} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb191:
    assume $i196 == 1;
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i202 := $M.32;
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i202, 1);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb199:
    assume $i203 == 1;
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p204 := $M.22;
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p205 := $M.21;
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} vslice_dummy_var_124 := v4l2_event_unsubscribe($p204, $p205);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 781} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb189:
    assume $i195 == 1;
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i171, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    assume !($i197 == 1);
    goto $bb154;

  $bb193:
    assume $i197 == 1;
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i198 := $M.32;
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i198, 1);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb195:
    assume $i199 == 1;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p200 := $M.19;
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} vslice_dummy_var_123 := vidioc_reqbufs($p200, $p49, $p26);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 779} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb7:
    assume $i67 == 1;
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i117 := $M.31;
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb87:
    assume $i118 == 1;
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 1} true;
    call {:si_unique_call 750} $i119 := __VERIFIER_nondet_int();
    call {:si_unique_call 751} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i119);
    call {:si_unique_call 752} {:cexpr "tmp___47"} boogie_si_record_i32($i119);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i120 := $slt.i32($i119, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    $i121 := $slt.i32($i119, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    $i122 := $slt.i32($i119, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i119, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} ldv_stop();
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb96:
    assume $i123 == 1;
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i161 := $M.31;
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 1);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i165 := $M.31;
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 2);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb133:
    assume $i166 == 1;
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p167 := $M.17;
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} vslice_dummy_var_122 := video_ioctl2($p167, $i12, $i4);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $M.31 := 2;
    call {:si_unique_call 773} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb130:
    assume $i162 == 1;
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p163 := $M.17;
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} vslice_dummy_var_121 := video_ioctl2($p163, $i12, $i4);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 771} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb94:
    assume $i122 == 1;
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i153 := $M.31;
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 1);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb124:
    assume $i154 == 1;
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p155 := $M.17;
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i156 := dev_open($p155);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $M.34 := $i156;
    call {:si_unique_call 767} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i156);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i157 := $M.34;
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 0);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb126:
    assume $i158 == 1;
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $M.31 := 2;
    call {:si_unique_call 768} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i159 := $M.29;
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i160 := $add.i32($i159, 1);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $M.29 := $i160;
    call {:si_unique_call 769} {:cexpr "ref_cnt"} boogie_si_record_i32($i160);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb92:
    assume $i121 == 1;
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i145 := $M.31;
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 1);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i149 := $M.31;
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 2);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb121:
    assume $i150 == 1;
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p151 := $M.17;
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} vslice_dummy_var_120 := dev_poll($p151, $p10);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $M.31 := 2;
    call {:si_unique_call 765} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb118:
    assume $i146 == 1;
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $p147 := $M.17;
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} vslice_dummy_var_119 := dev_poll($p147, $p10);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 763} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb90:
    assume $i120 == 1;
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i119, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    $i125 := $slt.i32($i119, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i125 == 1);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i141 := $M.31;
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 2);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb115:
    assume $i142 == 1;
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p143 := $M.17;
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} vslice_dummy_var_118 := dev_read($p143, $p13, $i11, $p8);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $M.31 := 2;
    call {:si_unique_call 761} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb101:
    assume $i125 == 1;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i135 := $M.31;
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 2);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb112:
    assume $i136 == 1;
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p137 := $M.17;
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} vslice_dummy_var_117 := dev_close($p137);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 758} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i139 := $M.29;
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i140 := $sub.i32($i139, 1);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $M.29 := $i140;
    call {:si_unique_call 759} {:cexpr "ref_cnt"} boogie_si_record_i32($i140);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb99:
    assume $i124 == 1;
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i119, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb98;

  $bb103:
    assume $i126 == 1;
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i127 := $M.31;
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 1);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i131 := $M.31;
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 2);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb108:
    assume $i132 == 1;
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $p133 := $M.17;
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} vslice_dummy_var_116 := dev_mmap($p133, $p6);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $M.31 := 2;
    call {:si_unique_call 756} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb105:
    assume $i128 == 1;
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $p129 := $M.17;
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} vslice_dummy_var_115 := dev_mmap($p129, $p6);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 754} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb5:
    assume $i66 == 1;
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i100 := $M.30;
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb57:
    assume $i101 == 1;
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 1} true;
    call {:si_unique_call 732} $i102 := __VERIFIER_nondet_int();
    call {:si_unique_call 733} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i102);
    call {:si_unique_call 734} {:cexpr "tmp___46"} boogie_si_record_i32($i102);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i102, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i102, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} ldv_stop();
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb62:
    assume $i104 == 1;
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i110 := $M.30;
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 1);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb75:
    assume $i111 == 1;
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $i112 := gspca_init();
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $M.33 := $i112;
    call {:si_unique_call 739} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i112);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i113 := $M.33;
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 0);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i115 := $M.33;
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb80:
    assume $i116 == 1;
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 748} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} ldv_check_final_state();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb77:
    assume $i114 == 1;
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 740} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 741} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} ldv_initialize_v4l2_ioctl_ops_2();
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 743} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} ldv_initialize_v4l2_file_operations_3();
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 745} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 746} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} ldv_initialize_vm_operations_struct_4();
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb60:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i102, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb64;

  $bb65:
    assume $i105 == 1;
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i106 := $M.30;
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 3);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb67:
    assume $i107 == 1;
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i108 := $M.29;
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 0);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb69;

  $bb70:
    assume $i109 == 1;
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} gspca_exit();
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 736} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb3:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i64, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i69 == 1);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i85 := $M.28;
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb37:
    assume $i86 == 1;
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 1} true;
    call {:si_unique_call 722} $i87 := __VERIFIER_nondet_int();
    call {:si_unique_call 723} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i87);
    call {:si_unique_call 724} {:cexpr "tmp___45"} boogie_si_record_i32($i87);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i87, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i87, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} ldv_stop();
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb42:
    assume $i89 == 1;
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i95 := $M.28;
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 1);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb51:
    assume $i96 == 1;
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} vslice_dummy_var_114 := ldv_probe_1();
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 729} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i98 := $M.29;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i98, 1);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $M.29 := $i99;
    call {:si_unique_call 730} {:cexpr "ref_cnt"} boogie_si_record_i32($i99);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb40:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i87, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb44;

  $bb45:
    assume $i90 == 1;
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i91 := $M.28;
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 2);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb47:
    assume $i92 == 1;
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} video_device_release_empty($p3);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 726} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i93 := $M.29;
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i94 := $sub.i32($i93, 1);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $M.29 := $i94;
    call {:si_unique_call 727} {:cexpr "ref_cnt"} boogie_si_record_i32($i94);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb12:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i64, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb11;

  $bb14:
    assume $i70 == 1;
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i71 := $M.27;
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb16:
    assume $i72 == 1;
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 1} true;
    call {:si_unique_call 713} $i73 := __VERIFIER_nondet_int();
    call {:si_unique_call 714} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i73);
    call {:si_unique_call 715} {:cexpr "tmp___44"} boogie_si_record_i32($i73);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i73, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i73, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} ldv_stop();
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb21:
    assume $i75 == 1;
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i80 := $M.27;
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 1);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb30:
    assume $i81 == 1;
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $p82 := $M.18;
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} gspca_vm_open($p82);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 719} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i83 := $M.29;
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i83, 1);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $M.29 := $i84;
    call {:si_unique_call 720} {:cexpr "ref_cnt"} boogie_si_record_i32($i84);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb19:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i73, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb23;

  $bb24:
    assume $i76 == 1;
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i77 := $M.27;
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 2);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i78 == 1;
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p79 := $M.18;
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} gspca_vm_close($p79);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 717} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb36_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 710} $i64 := __VERIFIER_nondet_int();
    call {:si_unique_call 711} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i64);
    call {:si_unique_call 712} {:cexpr "tmp___43"} boogie_si_record_i32($i64);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const __VERIFIER_nondet_size_t: ref;

axiom __VERIFIER_nondet_size_t == $sub.ref(0, 268500);

procedure __VERIFIER_nondet_size_t() returns ($r: i64);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 269532);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 270564);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_probe_1: ref;

axiom ldv_probe_1 == $sub.ref(0, 271596);

procedure ldv_probe_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 1} true;
    call {:si_unique_call 830} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 831} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const gspca_exit: ref;

axiom gspca_exit == $sub.ref(0, 272628);

procedure gspca_exit();
  free requires assertsPassed;



implementation gspca_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    return;
}



const gspca_init: ref;

axiom gspca_init == $sub.ref(0, 273660);

procedure gspca_init() returns ($r: i32);
  free requires assertsPassed;



implementation gspca_init() returns ($r: i32)
{
  var vslice_dummy_var_148: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} vslice_dummy_var_148 := printk.ref(.str.48);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 274692);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $p0 := $M.4;
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $M.35;
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} ldv_error();
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i6 := $M.36;
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i7 == 1);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} ldv_error();
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := $M.37;
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} ldv_error();
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i10 := $M.38;
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} ldv_error();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i9 == 1;
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 275724);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 838} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 1} true;
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 276756);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 277788);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 278820);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 279852);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 280884);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 281916);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 282948);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 283980);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 285012);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 286044);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 287076);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 288108);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 289140);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 1} true;
    call {:si_unique_call 839} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 840} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 841} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 1} true;
    call {:si_unique_call 842} __VERIFIER_assume($i4);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 290172);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 291204);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 292236);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 293268);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 1} true;
    call {:si_unique_call 843} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 844} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 845} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 1} true;
    call {:si_unique_call 846} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 847} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 848} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 1} true;
    call {:si_unique_call 849} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 850} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 851} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 1} true;
    call {:si_unique_call 852} __VERIFIER_assume($i7);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 1} true;
    call {:si_unique_call 853} __VERIFIER_assume($i11);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 294300);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 295332);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 1} true;
    call {:si_unique_call 854} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 855} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 856} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 1} true;
    call {:si_unique_call 857} __VERIFIER_assume($i4);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 296364);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 297396);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 298428);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 299460);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 300492);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 1} true;
    call {:si_unique_call 858} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 859} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 860} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 1} true;
    call {:si_unique_call 861} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 862} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 863} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 1} true;
    call {:si_unique_call 864} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 865} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 866} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 1} true;
    call {:si_unique_call 867} __VERIFIER_assume($i7);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 1} true;
    call {:si_unique_call 868} __VERIFIER_assume($i11);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 301524);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 302556);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 303588);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 304620);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 305652);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 306684);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 307716);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 308748);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 309780);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 1} true;
    call {:si_unique_call 869} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 870} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 871} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 1} true;
    call {:si_unique_call 872} __VERIFIER_assume($i10);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 310812);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 1} true;
    call {:si_unique_call 873} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 874} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 875} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 311844);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 1} true;
    call {:si_unique_call 876} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 877} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 878} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 312876);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 1} true;
    call {:si_unique_call 879} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 880} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 313908);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 314940);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 881} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 882} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 315972);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 317004);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 318036);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 883} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 884} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 1} true;
    call {:si_unique_call 885} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 886} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $p6 := malloc($i5);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.0;
    call {:si_unique_call 888} cmdloc_dummy_var_43 := $memset.i8(cmdloc_dummy_var_42, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_43;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 319068);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 320100);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.1, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.37, $M.38, $M.4, $M.35, $M.36, $M.5, $M.7, $M.6, $M.8, $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 889} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.1 := 0;
    call {:si_unique_call 890} {:cexpr "gspca_debug"} boogie_si_record_i32(0);
    $M.17 := $0.ref;
    $M.18 := $0.ref;
    $M.19 := $0.ref;
    $M.20 := $0.ref;
    $M.21 := $0.ref;
    $M.22 := $0.ref;
    $M.23 := $0.ref;
    $M.24 := $0.ref;
    $M.27 := 0;
    call {:si_unique_call 891} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.28 := 0;
    call {:si_unique_call 892} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.29 := 0;
    call {:si_unique_call 893} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.30 := 0;
    call {:si_unique_call 894} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 895} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.32 := 0;
    call {:si_unique_call 896} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 897} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 898} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.37 := 0;
    call {:si_unique_call 899} {:cexpr "INTERF_STATE"} boogie_si_record_i32(0);
    $M.38 := 0;
    call {:si_unique_call 900} {:cexpr "SERIAL_STATE"} boogie_si_record_i32(0);
    $M.4 := $0.ref;
    $M.35 := $0.ref;
    $M.36 := 0;
    call {:si_unique_call 901} {:cexpr "dev_counter"} boogie_si_record_i32(0);
    $M.5 := 0;
    call {:si_unique_call 902} {:cexpr "completeFnIntCounter"} boogie_si_record_i32(0);
    $M.7 := 0;
    call {:si_unique_call 903} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32(0);
    $M.6 := $0.ref;
    $M.8 := $0.ref;
    $M.0 := $store.ref($M.0, gspca_vm_ops, gspca_vm_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gspca_vm_ops, $mul.ref(0, 72)), $mul.ref(8, 1)), gspca_vm_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gspca_vm_ops, $mul.ref(0, 72)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gspca_vm_ops, $mul.ref(0, 72)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gspca_vm_ops, $mul.ref(0, 72)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gspca_vm_ops, $mul.ref(0, 72)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gspca_vm_ops, $mul.ref(0, 72)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gspca_vm_ops, $mul.ref(0, 72)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gspca_vm_ops, $mul.ref(0, 72)), $mul.ref(64, 1)), $0.ref);
    $M.41 := $store.ref($M.41, dev_ioctl_ops, vidioc_querycap);
    $M.42 := $store.ref($M.42, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(8, 1)), $0.ref);
    $M.43 := $store.ref($M.43, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(16, 1)), $0.ref);
    $M.44 := $store.ref($M.44, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(24, 1)), vidioc_enum_fmt_vid_cap);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(32, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(40, 1)), $0.ref);
    $M.47 := $store.ref($M.47, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(48, 1)), $0.ref);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(56, 1)), $0.ref);
    $M.49 := $store.ref($M.49, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(64, 1)), vidioc_g_fmt_vid_cap);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(72, 1)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(80, 1)), $0.ref);
    $M.52 := $store.ref($M.52, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(88, 1)), $0.ref);
    $M.53 := $store.ref($M.53, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(96, 1)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(104, 1)), $0.ref);
    $M.55 := $store.ref($M.55, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(112, 1)), $0.ref);
    $M.56 := $store.ref($M.56, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(120, 1)), $0.ref);
    $M.57 := $store.ref($M.57, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(128, 1)), $0.ref);
    $M.58 := $store.ref($M.58, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(136, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(144, 1)), vidioc_s_fmt_vid_cap);
    $M.60 := $store.ref($M.60, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(152, 1)), $0.ref);
    $M.61 := $store.ref($M.61, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(160, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(168, 1)), $0.ref);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(176, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(184, 1)), $0.ref);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(192, 1)), $0.ref);
    $M.66 := $store.ref($M.66, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(200, 1)), $0.ref);
    $M.67 := $store.ref($M.67, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(208, 1)), $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(216, 1)), $0.ref);
    $M.69 := $store.ref($M.69, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(224, 1)), vidioc_try_fmt_vid_cap);
    $M.70 := $store.ref($M.70, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(232, 1)), $0.ref);
    $M.71 := $store.ref($M.71, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(240, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(248, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(256, 1)), $0.ref);
    $M.74 := $store.ref($M.74, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(264, 1)), $0.ref);
    $M.75 := $store.ref($M.75, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(272, 1)), $0.ref);
    $M.76 := $store.ref($M.76, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(280, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(288, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(296, 1)), $0.ref);
    $M.79 := $store.ref($M.79, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(304, 1)), vidioc_reqbufs);
    $M.80 := $store.ref($M.80, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(312, 1)), vidioc_querybuf);
    $M.81 := $store.ref($M.81, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(320, 1)), vidioc_qbuf);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(328, 1)), $0.ref);
    $M.83 := $store.ref($M.83, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(336, 1)), vidioc_dqbuf);
    $M.84 := $store.ref($M.84, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(344, 1)), $0.ref);
    $M.85 := $store.ref($M.85, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(352, 1)), $0.ref);
    $M.86 := $store.ref($M.86, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(360, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(368, 1)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(376, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(384, 1)), vidioc_streamon);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(392, 1)), vidioc_streamoff);
    $M.91 := $store.ref($M.91, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(400, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(408, 1)), $0.ref);
    $M.93 := $store.ref($M.93, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(416, 1)), $0.ref);
    $M.94 := $store.ref($M.94, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(424, 1)), vidioc_enum_input);
    $M.95 := $store.ref($M.95, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(432, 1)), vidioc_g_input);
    $M.96 := $store.ref($M.96, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(440, 1)), vidioc_s_input);
    $M.97 := $store.ref($M.97, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(448, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(456, 1)), $0.ref);
    $M.99 := $store.ref($M.99, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(464, 1)), $0.ref);
    $M.100 := $store.ref($M.100, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(472, 1)), $0.ref);
    $M.101 := $store.ref($M.101, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(480, 1)), $0.ref);
    $M.102 := $store.ref($M.102, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(488, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(496, 1)), $0.ref);
    $M.104 := $store.ref($M.104, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(504, 1)), $0.ref);
    $M.105 := $store.ref($M.105, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(512, 1)), $0.ref);
    $M.106 := $store.ref($M.106, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(520, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(528, 1)), $0.ref);
    $M.108 := $store.ref($M.108, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(536, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(544, 1)), $0.ref);
    $M.110 := $store.ref($M.110, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(552, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(560, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(568, 1)), $0.ref);
    $M.113 := $store.ref($M.113, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(576, 1)), $0.ref);
    $M.114 := $store.ref($M.114, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(584, 1)), $0.ref);
    $M.115 := $store.ref($M.115, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(592, 1)), $0.ref);
    $M.116 := $store.ref($M.116, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(600, 1)), $0.ref);
    $M.117 := $store.ref($M.117, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(608, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(616, 1)), $0.ref);
    $M.119 := $store.ref($M.119, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(624, 1)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(632, 1)), vidioc_g_jpegcomp);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(640, 1)), vidioc_s_jpegcomp);
    $M.122 := $store.ref($M.122, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(648, 1)), $0.ref);
    $M.123 := $store.ref($M.123, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(656, 1)), $0.ref);
    $M.124 := $store.ref($M.124, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(664, 1)), $0.ref);
    $M.125 := $store.ref($M.125, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(672, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(680, 1)), $0.ref);
    $M.127 := $store.ref($M.127, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(688, 1)), vidioc_g_parm);
    $M.128 := $store.ref($M.128, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(696, 1)), vidioc_s_parm);
    $M.129 := $store.ref($M.129, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(704, 1)), $0.ref);
    $M.130 := $store.ref($M.130, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(712, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(720, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(728, 1)), $0.ref);
    $M.133 := $store.ref($M.133, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(736, 1)), $0.ref);
    $M.134 := $store.ref($M.134, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(744, 1)), $0.ref);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(752, 1)), $0.ref);
    $M.136 := $store.ref($M.136, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(760, 1)), $0.ref);
    $M.137 := $store.ref($M.137, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(768, 1)), vidioc_g_register);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(776, 1)), vidioc_s_register);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(784, 1)), vidioc_g_chip_info);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(792, 1)), vidioc_enum_framesizes);
    $M.141 := $store.ref($M.141, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(800, 1)), vidioc_enum_frameintervals);
    $M.142 := $store.ref($M.142, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(808, 1)), $0.ref);
    $M.143 := $store.ref($M.143, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(816, 1)), $0.ref);
    $M.144 := $store.ref($M.144, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(824, 1)), $0.ref);
    $M.145 := $store.ref($M.145, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(832, 1)), $0.ref);
    $M.146 := $store.ref($M.146, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(840, 1)), $0.ref);
    $M.147 := $store.ref($M.147, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(848, 1)), v4l2_ctrl_subscribe_event);
    $M.148 := $store.ref($M.148, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(856, 1)), v4l2_event_unsubscribe);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(dev_ioctl_ops, $mul.ref(0, 872)), $mul.ref(864, 1)), $0.ref);
    $M.41 := $store.ref($M.41, dev_fops, __this_module);
    $M.42 := $store.ref($M.42, $add.ref($add.ref(dev_fops, $mul.ref(0, 88)), $mul.ref(8, 1)), dev_read);
    $M.43 := $store.ref($M.43, $add.ref($add.ref(dev_fops, $mul.ref(0, 88)), $mul.ref(16, 1)), $0.ref);
    $M.44 := $store.ref($M.44, $add.ref($add.ref(dev_fops, $mul.ref(0, 88)), $mul.ref(24, 1)), dev_poll);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(dev_fops, $mul.ref(0, 88)), $mul.ref(32, 1)), $0.ref);
    $M.46 := $store.ref($M.46, $add.ref($add.ref(dev_fops, $mul.ref(0, 88)), $mul.ref(40, 1)), video_ioctl2);
    $M.47 := $store.ref($M.47, $add.ref($add.ref(dev_fops, $mul.ref(0, 88)), $mul.ref(48, 1)), $0.ref);
    $M.48 := $store.ref($M.48, $add.ref($add.ref(dev_fops, $mul.ref(0, 88)), $mul.ref(56, 1)), $0.ref);
    $M.49 := $store.ref($M.49, $add.ref($add.ref(dev_fops, $mul.ref(0, 88)), $mul.ref(64, 1)), dev_mmap);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(dev_fops, $mul.ref(0, 88)), $mul.ref(72, 1)), dev_open);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(dev_fops, $mul.ref(0, 88)), $mul.ref(80, 1)), dev_close);
    $M.150 := $store.ref($M.150, gspca_template, $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(32, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(44, 1)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(48, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.150 := $store.i16($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(60, 1)), 0);
    $M.150 := $store.i16($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(62, 1)), 0);
    $M.150 := $store.i16($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(64, 1)), 0);
    $M.150 := $store.i16($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(66, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(96, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(100, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(128, 1)), dev_fops);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(8, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), $0.ref);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(52, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(208, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(216, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(288, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(312, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(320, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(96, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(104, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(24, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(496, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(504, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(512, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(4, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(5, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(6, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(7, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(8, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(8, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(200, 1)), $0.ref);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(208, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(209, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(16, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(24, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(32, 1)), $0.ref);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(40, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(48, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(52, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(56, 1)), $0.ref);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(344, 1)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(24, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(524, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(528, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(529, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(532, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(536, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(540, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(544, 1)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(552, 1)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(560, 1)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(568, 1)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(576, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(584, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(592, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1120, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1128, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1136, 1)), $0.ref);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1144, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1152, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1160, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1160, 1)), $mul.ref(8, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1176, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1184, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1184, 1)), $mul.ref(8, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1200, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1208, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1216, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1220, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1296, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1296, 1)), $mul.ref(8, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1344, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1352, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1360, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1368, 1)), $0.ref);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1376, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1377, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1520, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1528, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1536, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1544, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1552, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1560, 1)), $0.ref);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(0, 1)), 103);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(1, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(2, 1)), 112);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(3, 1)), 99);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(4, 1)), 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(5, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(6, 1)), 109);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(7, 1)), 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(8, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(9, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(10, 1)), 32);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(11, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(12, 1)), 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(13, 1)), 105);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(14, 1)), 118);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(15, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(16, 1)), 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(17, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(18, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(19, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(20, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(21, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(22, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(23, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(24, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(25, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(26, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(27, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(28, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(29, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(30, 1)), 0);
    $M.150 := $store.i8($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(31, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1600, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1604, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1608, 1)), 0);
    $M.150 := $store.i16($M.150, $add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1612, 1)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1616, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1624, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1704, 1)), $mul.ref(0, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1704, 1)), $mul.ref(8, 1)), $0.ref);
    $M.150 := $store.i32($M.150, $add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1720, 1)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1728, 1)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1736, 1)), video_device_release_empty);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1744, 1)), dev_ioctl_ops);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1752, 1)), $mul.ref(0, 8)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1752, 1)), $mul.ref(1, 8)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1752, 1)), $mul.ref(2, 8)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1776, 1)), $mul.ref(0, 8)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1776, 1)), $mul.ref(1, 8)), 0);
    $M.150 := $store.i64($M.150, $add.ref($add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1776, 1)), $mul.ref(2, 8)), 0);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(gspca_template, $mul.ref(0, 1808)), $mul.ref(1800, 1)), $0.ref);
    $M.0 := $store.i8($M.0, .str.80, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(10, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(11, 1)), 75);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.69, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(2, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(4, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.151 := $store.i8($M.151, .str.79, 85);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(.str.79, $mul.ref(0, 23)), $mul.ref(1, 1)), 83);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(.str.79, $mul.ref(0, 23)), $mul.ref(2, 1)), 66);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(.str.79, $mul.ref(0, 23)), $mul.ref(3, 1)), 32);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(.str.79, $mul.ref(0, 23)), $mul.ref(4, 1)), 67);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(.str.79, $mul.ref(0, 23)), $mul.ref(5, 1)), 97);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(.str.79, $mul.ref(0, 23)), $mul.ref(6, 1)), 109);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(.str.79, $mul.ref(0, 23)), $mul.ref(7, 1)), 101);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(.str.79, $mul.ref(0, 23)), $mul.ref(8, 1)), 114);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(.str.79, $mul.ref(0, 23)), $mul.ref(9, 1)), 97);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(.str.79, $mul.ref(0, 23)), $mul.ref(10, 1)), 32);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(.str.79, $mul.ref(0, 23)), $mul.ref(11, 1)), 40);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(.str.79, $mul.ref(0, 23)), $mul.ref(12, 1)), 37);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(.str.79, $mul.ref(0, 23)), $mul.ref(13, 1)), 48);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(.str.79, $mul.ref(0, 23)), $mul.ref(14, 1)), 52);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(.str.79, $mul.ref(0, 23)), $mul.ref(15, 1)), 120);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(.str.79, $mul.ref(0, 23)), $mul.ref(16, 1)), 58);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(.str.79, $mul.ref(0, 23)), $mul.ref(17, 1)), 37);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(.str.79, $mul.ref(0, 23)), $mul.ref(18, 1)), 48);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(.str.79, $mul.ref(0, 23)), $mul.ref(19, 1)), 52);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(.str.79, $mul.ref(0, 23)), $mul.ref(20, 1)), 120);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(.str.79, $mul.ref(0, 23)), $mul.ref(21, 1)), 41);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(.str.79, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.152 := $store.i8($M.152, .str.18, 117);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(.str.18, $mul.ref(0, 10)), $mul.ref(1, 1)), 115);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(.str.18, $mul.ref(0, 10)), $mul.ref(2, 1)), 98);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(.str.18, $mul.ref(0, 10)), $mul.ref(3, 1)), 45);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(.str.18, $mul.ref(0, 10)), $mul.ref(4, 1)), 37);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(.str.18, $mul.ref(0, 10)), $mul.ref(5, 1)), 115);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(.str.18, $mul.ref(0, 10)), $mul.ref(6, 1)), 45);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(.str.18, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(.str.18, $mul.ref(0, 10)), $mul.ref(8, 1)), 115);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(.str.18, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    call {:si_unique_call 904} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 321132);

procedure devirtbounce(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 322164);

procedure devirtbounce.1(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.7, $M.9, $M.10, $M.4, $CurrAddr, $M.6;



implementation devirtbounce.1(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(gspca_vm_close, $p0);
    assume {:branchcond $i12} true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i12 == 1);
    $i11 := $eq.ref(bulk_irq, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i11 == 1);
    $i10 := $eq.ref(isoc_irq, $p0);
    assume {:branchcond $i10} true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(gspca_vm_open, $p0);
    assume {:branchcond $i9} true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i9 == 1);
    $i8 := $eq.ref(int_irq, $p0);
    assume {:branchcond $i8} true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i8 == 1);
    $i7 := $eq.ref(video_device_release_empty, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 905} video_device_release_empty($p1);
    return;

  $bb3:
    assume $i8 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 906} int_irq($p2);
    return;

  $bb4:
    assume $i9 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 907} gspca_vm_open($p3);
    return;

  $bb5:
    assume $i10 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 908} isoc_irq($p4);
    return;

  $bb6:
    assume $i11 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 909} bulk_irq($p5);
    return;

  $bb7:
    assume $i12 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 910} gspca_vm_close($p6);
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 323196);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.4, $M.5, $M.7, $CurrAddr, $M.6;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(vidioc_s_input, $p0);
    assume {:branchcond $i9} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i9 == 1);
    $i8 := $eq.ref(vidioc_streamoff, $p0);
    assume {:branchcond $i8} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i8 == 1);
    $i7 := $eq.ref(vidioc_streamon, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 911} $i2 := vidioc_streamon($p1, arg1, arg2);
    $r := $i2;
    return;

  $bb3:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 912} $i4 := vidioc_streamoff($p3, arg1, arg2);
    $r := $i4;
    return;

  $bb4:
    assume $i9 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 913} $i6 := vidioc_s_input($p5, arg1, arg2);
    $r := $i6;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 324228);

procedure devirtbounce.3(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.7, $M.9, $M.10, $M.4, $CurrAddr, $M.6;



implementation devirtbounce.3(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(gspca_vm_close, $p0);
    assume {:branchcond $i9} true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i9 == 1);
    $i8 := $eq.ref(bulk_irq, $p0);
    assume {:branchcond $i8} true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i8 == 1);
    $i7 := $eq.ref(isoc_irq, $p0);
    assume {:branchcond $i7} true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i7 == 1);
    $i6 := $eq.ref(gspca_vm_open, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i6 == 1);
    $i5 := $eq.ref(int_irq, $p0);
    assume {:branchcond $i5} true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i5 == 1);
    $i4 := $eq.ref(video_device_release_empty, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 914} video_device_release_empty($p1);
    return;

  $bb3:
    assume $i5 == 1;
    call {:si_unique_call 915} int_irq(arg);
    return;

  $bb4:
    assume $i6 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 916} gspca_vm_open($p2);
    return;

  $bb5:
    assume $i7 == 1;
    call {:si_unique_call 917} isoc_irq(arg);
    return;

  $bb6:
    assume $i8 == 1;
    call {:si_unique_call 918} bulk_irq(arg);
    return;

  $bb7:
    assume $i9 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 919} gspca_vm_close($p3);
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 325260);

procedure devirtbounce.4(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.7, $M.9, $M.10, $M.4, $CurrAddr, $M.6;



implementation devirtbounce.4(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(int_irq, $p0);
    assume {:branchcond $i3} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i3 == 1);
    $i2 := $eq.ref(isoc_irq, $p0);
    assume {:branchcond $i2} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i2 == 1);
    $i1 := $eq.ref(bulk_irq, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 920} bulk_irq(arg);
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 921} isoc_irq(arg);
    return;

  $bb4:
    assume $i3 == 1;
    call {:si_unique_call 922} int_irq(arg);
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 326292);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 327324);

procedure devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.7, $M.4, $M.9, $M.10, $M.6, $CurrAddr;



implementation devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(dev_close, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(dev_open, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 923} $i2 := dev_open($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 924} $i4 := dev_close($p3);
    $r := $i4;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 328356);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: i32);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 329388);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 330420);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 331452);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9, $M.5, $M.7, $M.4, $M.10, $M.6;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(v4l2_event_unsubscribe, $p0);
    assume {:branchcond $i16} true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i16 == 1);
    $i15 := $eq.ref(v4l2_ctrl_subscribe_event, $p0);
    assume {:branchcond $i15} true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i15 == 1);
    $i14 := $eq.ref(dev_mmap, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i14 == 1);
    $i13 := $eq.ref(dev_poll, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 925} $i3 := dev_poll($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i14 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 926} $i6 := dev_mmap($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i15 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 927} $i9 := v4l2_ctrl_subscribe_event($p7, $p8);
    $r := $i9;
    return;

  $bb5:
    assume $i16 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 928} $i12 := v4l2_event_unsubscribe($p10, $p11);
    $r := $i12;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 332484);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9, $M.5, $M.7, $M.4, $M.10, $M.6;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(v4l2_event_unsubscribe, $p0);
    assume {:branchcond $i16} true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i16 == 1);
    $i15 := $eq.ref(v4l2_ctrl_subscribe_event, $p0);
    assume {:branchcond $i15} true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i15 == 1);
    $i14 := $eq.ref(dev_mmap, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i14 == 1);
    $i13 := $eq.ref(dev_poll, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 929} $i3 := dev_poll($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i14 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 930} $i6 := dev_mmap($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i15 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 931} $i9 := v4l2_ctrl_subscribe_event($p7, $p8);
    $r := $i9;
    return;

  $bb5:
    assume $i16 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 932} $i12 := v4l2_event_unsubscribe($p10, $p11);
    $r := $i12;
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 333516);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9, $M.5, $M.7, $M.4, $M.10, $M.6;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(v4l2_event_unsubscribe, $p0);
    assume {:branchcond $i16} true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i16 == 1);
    $i15 := $eq.ref(v4l2_ctrl_subscribe_event, $p0);
    assume {:branchcond $i15} true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i15 == 1);
    $i14 := $eq.ref(dev_mmap, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i14 == 1);
    $i13 := $eq.ref(dev_poll, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 933} $i3 := dev_poll($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i14 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 934} $i6 := dev_mmap($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i15 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 935} $i9 := v4l2_ctrl_subscribe_event($p7, $p8);
    $r := $i9;
    return;

  $bb5:
    assume $i16 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 936} $i12 := v4l2_event_unsubscribe($p10, $p11);
    $r := $i12;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.1, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.37, $M.38, $M.4, $M.35, $M.36, $M.5, $M.7, $M.6, $M.8, $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 937} __SMACK_static_init();
    call {:si_unique_call 938} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.0, $M.33, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.17, $M.18, $M.2, $M.3, $M.34, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.1, $M.37, $M.38, $M.4, $M.35, $M.36, $M.5, $M.7, $M.6, $M.8, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $CurrAddr, $M.9, $M.10;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation dev_read_loop_$bb14(in_$p0: ref, in_$p4: ref, in_$p5: ref, in_$p10: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i51: i32, in_$i50: i32, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i64, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$p71: ref, in_$i72: i64, in_$p73: ref, in_$i74: i64, in_$i75: i1, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i88: i32, in_$i89: i1, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8) returns (out_$i51: i32, out_$i50: i32, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i64, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$p71: ref, out_$i72: i64, out_$p73: ref, out_$i74: i64, out_$i75: i1, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i88: i32, out_$i89: i1, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8)
{

  entry:
    out_$i51, out_$i50, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i88, out_$i89, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9 := in_$i51, in_$i50, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$p67, in_$p71, in_$i72, in_$p73, in_$i74, in_$i75, in_$p76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i88, in_$i89, in_cmdloc_dummy_var_8, in_cmdloc_dummy_var_9;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb33:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    out_$i50 := out_$i65;
    goto $bb33_dummy;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i88;
    assume true;
    goto $bb33;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i32(out_$i88, 0);
    goto corral_source_split_121;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} out_$i88 := vidioc_dqbuf(in_$p0, in_$p46, in_$p4);
    call {:si_unique_call 25} {:cexpr "ret"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_120;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, in_$p45, 7);
    goto corral_source_split_119;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, in_$p44, 1);
    goto corral_source_split_118;

  $bb32:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 23} out_cmdloc_dummy_var_9 := $memset.i8(out_cmdloc_dummy_var_8, in_$p43, 0, 88, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_9;
    goto corral_source_split_117;

  $bb28:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    out_$i80 := out_$i78;
    assume true;
    goto $bb28;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_104;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} out_$i78 := vidioc_qbuf(in_$p0, out_$p77, in_$p4);
    call {:si_unique_call 21} {:cexpr "ret"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_103;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(in_$p10);
    goto corral_source_split_102;

  $bb25:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    out_$p76 := out_$p64;
    assume true;
    goto $bb25;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    out_$i75 := $sge.i64(out_$i72, out_$i74);
    goto corral_source_split_98;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i64($M.3, out_$p73);
    goto corral_source_split_97;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_96;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i64($M.0, out_$p71);
    goto corral_source_split_95;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($add.ref($add.ref(out_$p60, $mul.ref(out_$i63, 104)), $mul.ref(16, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_94;

  $bb21:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    out_$p67 := out_$p64;
    assume true;
    goto $bb21;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i65, 0);
    goto corral_source_split_84;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    out_$i65 := $sub.i32(out_$i50, 1);
    call {:si_unique_call 19} {:cexpr "n"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_83;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(out_$p60, $mul.ref(out_$i63, 104));
    goto corral_source_split_82;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i32.i64(out_$i62);
    goto corral_source_split_81;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, out_$p61);
    goto corral_source_split_80;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p4, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_79;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_78;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p10, $mul.ref(0, 4808)), $mul.ref(2640, 1));
    goto corral_source_split_77;

  $bb33_dummy:
    call {:si_unique_call 1} out_$i51, out_$i50, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i88, out_$i89, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9 := dev_read_loop_$bb14(in_$p0, in_$p4, in_$p5, in_$p10, in_$p43, in_$p44, in_$p45, in_$p46, out_$i51, out_$i50, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i88, out_$i89, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9);
    return;

  exit:
    return;
}



procedure dev_read_loop_$bb14(in_$p0: ref, in_$p4: ref, in_$p5: ref, in_$p10: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i51: i32, in_$i50: i32, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i64, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$p71: ref, in_$i72: i64, in_$p73: ref, in_$i74: i64, in_$i75: i1, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i88: i32, in_$i89: i1, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8) returns (out_$i51: i32, out_$i50: i32, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i64, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$p71: ref, out_$i72: i64, out_$p73: ref, out_$i74: i64, out_$i75: i1, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i88: i32, out_$i89: i1, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8);
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $CurrAddr, $M.5, $M.7, $M.9, $M.10, $M.4, $M.6;



implementation dev_mmap_loop_$bb45(in_$p1: ref, in_$p99: ref, in_$p100: ref, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i64, in_$i105: i64, in_$i106: i64, in_$i107: i1, in_$i96: i64, in_$i97: i64, in_$i98: i64) returns (out_$p99: ref, out_$p100: ref, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i64, out_$i105: i64, out_$i106: i64, out_$i107: i1, out_$i96: i64, out_$i97: i64, out_$i98: i64)
{

  entry:
    out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i96, out_$i97, out_$i98 := in_$p99, in_$p100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i96, in_$i97, in_$i98;
    goto $bb45, exit;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_352;

  $bb50:
    assume out_$i107 == 1;
    assume {:verifier.code 0} true;
    out_$i96, out_$i97, out_$i98 := out_$i106, out_$i104, out_$i105;
    goto $bb50_dummy;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i64(out_$i106, 0);
    goto corral_source_split_364;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    out_$i106 := $sub.i64(out_$i96, 4096);
    call {:si_unique_call 73} {:cexpr "size"} boogie_si_record_i64(out_$i106);
    goto corral_source_split_363;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    out_$i105 := $add.i64(out_$i98, 4096);
    call {:si_unique_call 72} {:cexpr "addr"} boogie_si_record_i64(out_$i105);
    goto corral_source_split_362;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i104 := $add.i64(out_$i97, 4096);
    call {:si_unique_call 71} {:cexpr "start"} boogie_si_record_i64(out_$i104);
    goto corral_source_split_361;

  $bb48:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    out_$i103 := out_$i101;
    assume true;
    goto $bb48;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i101, 0);
    goto corral_source_split_357;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} out_$i101 := vm_insert_page(in_$p1, out_$i97, out_$p100);
    call {:si_unique_call 70} {:cexpr "ret"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_356;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} out_$p100 := vmalloc_to_page(out_$p99);
    goto corral_source_split_355;

  $bb46:
    assume {:verifier.code 0} true;
    out_$p99 := $i2p.i64.ref(out_$i98);
    goto corral_source_split_354;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb50_dummy:
    call {:si_unique_call 1} out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i96, out_$i97, out_$i98 := dev_mmap_loop_$bb45(in_$p1, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i96, out_$i97, out_$i98);
    return;

  exit:
    return;
}



procedure dev_mmap_loop_$bb45(in_$p1: ref, in_$p99: ref, in_$p100: ref, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i64, in_$i105: i64, in_$i106: i64, in_$i107: i1, in_$i96: i64, in_$i97: i64, in_$i98: i64) returns (out_$p99: ref, out_$p100: ref, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i64, out_$i105: i64, out_$i106: i64, out_$i107: i1, out_$i96: i64, out_$i97: i64, out_$i98: i64);



implementation dev_mmap_loop_$bb15(in_$p1: ref, in_$p3: ref, in_$p29: ref, in_$i34: i64, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i48: i64, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$i56: i64, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$i60: i32, in_$i65: i32, in_$i66: i8, in_$i67: i32, in_$i68: i1, in_$i33: i32) returns (out_$i34: i64, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i48: i64, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$i56: i64, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$i60: i32, out_$i65: i32, out_$i66: i8, out_$i67: i32, out_$i68: i1, out_$i33: i32)
{

  entry:
    out_$i34, out_$p38, out_$i39, out_$i40, out_$i48, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i65, out_$i66, out_$i67, out_$i68, out_$i33 := in_$i34, in_$p38, in_$i39, in_$i40, in_$i48, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$i60, in_$i65, in_$i66, in_$i67, in_$i68, in_$i33;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_274;

  $bb27:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := out_$i65;
    goto $bb27_dummy;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    out_$i68 := $sgt.i32(out_$i67, out_$i65);
    goto corral_source_split_313;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i8.i32(out_$i66);
    goto corral_source_split_312;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i8($M.0, in_$p29);
    goto corral_source_split_311;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i33, 1);
    call {:si_unique_call 64} {:cexpr "i"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_310;

  $bb25:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i33;
    assume true;
    goto $bb25;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i64(out_$i56, out_$i58);
    goto corral_source_split_302;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i64($M.0, out_$p57);
    goto corral_source_split_301;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_300;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i32.i64(out_$i55);
    goto corral_source_split_299;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    out_$i55 := $lshr.i32(out_$i54, 12);
    goto corral_source_split_298;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.0, out_$p53);
    goto corral_source_split_297;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_296;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 4808)), $mul.ref(2640, 1)), $mul.ref(out_$i48, 104)), $mul.ref(16, 1)), $mul.ref(64, 1));
    goto corral_source_split_295;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i33);
    goto corral_source_split_294;

  $bb18:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 1);
    goto corral_source_split_279;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_278;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 4808)), $mul.ref(2640, 1)), $mul.ref(out_$i34, 104)), $mul.ref(16, 1)), $mul.ref(60, 1));
    goto corral_source_split_277;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i33);
    goto corral_source_split_276;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i34, out_$p38, out_$i39, out_$i40, out_$i48, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i65, out_$i66, out_$i67, out_$i68, out_$i33 := dev_mmap_loop_$bb15(in_$p1, in_$p3, in_$p29, out_$i34, out_$p38, out_$i39, out_$i40, out_$i48, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i65, out_$i66, out_$i67, out_$i68, out_$i33);
    return;

  exit:
    return;
}



procedure dev_mmap_loop_$bb15(in_$p1: ref, in_$p3: ref, in_$p29: ref, in_$i34: i64, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i48: i64, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$i56: i64, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$i60: i32, in_$i65: i32, in_$i66: i8, in_$i67: i32, in_$i68: i1, in_$i33: i32) returns (out_$i34: i64, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i48: i64, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$i56: i64, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$i60: i32, out_$i65: i32, out_$i66: i8, out_$i67: i32, out_$i68: i1, out_$i33: i32);



implementation frame_free_loop_$bb9(in_$p0: ref, in_$p14: ref, in_$i19: i64, in_$p22: ref, in_$i23: i32, in_$i24: i8, in_$i25: i32, in_$i26: i1, in_$i18: i32) returns (out_$i19: i64, out_$p22: ref, out_$i23: i32, out_$i24: i8, out_$i25: i32, out_$i26: i1, out_$i18: i32)
{

  entry:
    out_$i19, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i18 := in_$i19, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i18;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_596;

  $bb11:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := out_$i23;
    goto $bb11_dummy;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    out_$i26 := $sgt.i32(out_$i25, out_$i23);
    goto corral_source_split_604;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i8.i32(out_$i24);
    goto corral_source_split_603;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i8($M.0, in_$p14);
    goto corral_source_split_602;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i18, 1);
    call {:si_unique_call 140} {:cexpr "i"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_601;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p22, $0.ref);
    goto corral_source_split_600;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2640, 1)), $mul.ref(out_$i19, 104)), $mul.ref(0, 1));
    goto corral_source_split_599;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i18);
    goto corral_source_split_598;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i19, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i18 := frame_free_loop_$bb9(in_$p0, in_$p14, out_$i19, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i18);
    return;

  exit:
    return;
}



procedure frame_free_loop_$bb9(in_$p0: ref, in_$p14: ref, in_$i19: i64, in_$p22: ref, in_$i23: i32, in_$i24: i8, in_$i25: i32, in_$i26: i1, in_$i18: i32) returns (out_$i19: i64, out_$p22: ref, out_$i23: i32, out_$i24: i8, out_$i25: i32, out_$i26: i1, out_$i18: i32);
  modifies $M.0;



implementation destroy_urbs_loop_$bb4(in_$p0: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$i14: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i32, in_$i27: i1, in_$i7: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$i14: i64, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i32, out_$i27: i1, out_$i7: i32)
{

  entry:
    out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i7 := in_$i8, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$p16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_633;

  $bb10:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i26;
    goto $bb10_dummy;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    out_$i27 := $ule.i32(out_$i26, 3);
    goto corral_source_split_659;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i7, 1);
    call {:si_unique_call 147} {:cexpr "i"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_658;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} ldv_usb_free_urb_10(out_$p11);
    goto corral_source_split_657;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} usb_free_coherent(out_$p18, out_$i21, out_$p23, out_$i25);
    goto corral_source_split_656;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.0, out_$p24);
    goto corral_source_split_655;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p11, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_654;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_653;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p11, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_652;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i32.i64(out_$i20);
    goto corral_source_split_651;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_650;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p11, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_649;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_648;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_647;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} usb_kill_urb(out_$p11);
    goto corral_source_split_646;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p16, $0.ref);
    goto corral_source_split_645;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2592, 1)), $mul.ref(out_$i14, 8));
    goto corral_source_split_644;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i32.i64(out_$i7);
    goto corral_source_split_643;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i64(out_$i12, 0);
    goto corral_source_split_639;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_638;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_637;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2592, 1)), $mul.ref(out_$i8, 8));
    goto corral_source_split_636;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $zext.i32.i64(out_$i7);
    goto corral_source_split_635;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i7 := destroy_urbs_loop_$bb4(in_$p0, out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i7);
    return;

  exit:
    return;
}



procedure destroy_urbs_loop_$bb4(in_$p0: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$i14: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i32, in_$i27: i1, in_$i7: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$i14: i64, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i32, out_$i27: i1, out_$i7: i32);
  modifies $M.4, $M.0;



implementation gspca_input_create_urb_loop_$bb6(in_$p14: ref, in_$p16: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$i32: i32, in_$i33: i8, in_$i34: i32, in_$i35: i1, in_$i20: i32) returns (out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$i32: i32, out_$i33: i8, out_$i34: i32, out_$i35: i1, out_$i20: i32)
{

  entry:
    out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i32, out_$i33, out_$i34, out_$i35, out_$i20 := in_$p21, in_$p22, in_$i23, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p30, in_$i32, in_$i33, in_$i34, in_$i35, in_$i20;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_728;

  $bb15:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := out_$i32;
    goto $bb15_dummy;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    out_$i35 := $sgt.i32(out_$i34, out_$i32);
    goto corral_source_split_748;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i8.i32(out_$i33);
    goto corral_source_split_747;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i8($M.0, in_$p16);
    goto corral_source_split_746;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i20, 1);
    call {:si_unique_call 160} {:cexpr "i"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_745;

  $bb9:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    out_$p30 := out_$p25;
    assume true;
    goto $bb11;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_740;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} out_$i28 := usb_endpoint_xfer_int(out_$p25);
    call {:si_unique_call 158} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_739;

  $bb8:
    assume out_$i27 == 1;
    goto corral_source_split_738;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_736;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} out_$i26 := usb_endpoint_dir_in(out_$p25);
    call {:si_unique_call 156} {:cexpr "tmp"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_735;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p22, $mul.ref(out_$i23, 64)), $mul.ref(0, 1));
    goto corral_source_split_734;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    goto corral_source_split_733;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i20);
    goto corral_source_split_732;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_731;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_730;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i32, out_$i33, out_$i34, out_$i35, out_$i20 := gspca_input_create_urb_loop_$bb6(in_$p14, in_$p16, out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i32, out_$i33, out_$i34, out_$i35, out_$i20);
    return;

  exit:
    return;
}



procedure gspca_input_create_urb_loop_$bb6(in_$p14: ref, in_$p16: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$i32: i32, in_$i33: i8, in_$i34: i32, in_$i35: i1, in_$i20: i32) returns (out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$i32: i32, out_$i33: i8, out_$i34: i32, out_$i35: i1, out_$i20: i32);



implementation ldv_stop___0_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop___0_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop___0_loop_$bb1();



implementation read_alloc_loop_$bb20(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p38: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i54: i32, in_$i55: i8, in_$i56: i32, in_$i57: i1, in_$i42: i32) returns (out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i54: i32, out_$i55: i8, out_$i56: i32, out_$i57: i1, out_$i42: i32)
{

  entry:
    out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i54, out_$i55, out_$i56, out_$i57, out_$i42 := in_$p43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i54, in_$i55, in_$i56, in_$i57, in_$i42;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1127;

  $bb28:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := out_$i54;
    goto $bb28_dummy;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    out_$i57 := $sgt.i32(out_$i56, out_$i54);
    goto corral_source_split_1147;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i8.i32(out_$i55);
    goto corral_source_split_1146;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i8($M.0, in_$p38);
    goto corral_source_split_1145;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i42, 1);
    call {:si_unique_call 255} {:cexpr "i"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_1144;

  $bb23:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i45;
    assume true;
    goto $bb23;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_1133;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} out_$i45 := vidioc_qbuf(in_$p1, out_$p44, in_$p2);
    call {:si_unique_call 253} {:cexpr "ret"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_1132;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    out_$p44 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_1131;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p43, out_$i42);
    goto corral_source_split_1130;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_1129;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i54, out_$i55, out_$i56, out_$i57, out_$i42 := read_alloc_loop_$bb20(in_$p0, in_$p1, in_$p2, in_$p38, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i54, out_$i55, out_$i56, out_$i57, out_$i42);
    return;

  exit:
    return;
}



procedure read_alloc_loop_$bb20(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p38: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i54: i32, in_$i55: i8, in_$i56: i32, in_$i57: i1, in_$i42: i32) returns (out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i54: i32, out_$i55: i8, out_$i56: i32, out_$i57: i1, out_$i42: i32);
  modifies $M.0;



implementation vidioc_reqbufs_loop_$bb39(in_$p4: ref, in_$p40: ref, in_$i45: i64, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i8, in_$i53: i32, in_$i54: i1, in_$i44: i32) returns (out_$i45: i64, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i8, out_$i53: i32, out_$i54: i1, out_$i44: i32)
{

  entry:
    out_$i45, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i44 := in_$i45, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i44;
    goto $bb39, exit;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_1249;

  $bb44:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i44 := out_$i51;
    goto $bb44_dummy;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    out_$i54 := $sgt.i32(out_$i53, out_$i51);
    goto corral_source_split_1261;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    out_$i53 := $sext.i8.i32(out_$i52);
    goto corral_source_split_1260;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i8($M.0, in_$p40);
    goto corral_source_split_1259;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i32(out_$i44, 1);
    call {:si_unique_call 265} {:cexpr "i"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_1258;

  $bb42:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_1254;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, out_$p48);
    goto corral_source_split_1253;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 4808)), $mul.ref(2640, 1)), $mul.ref(out_$i45, 104)), $mul.ref(8, 1));
    goto corral_source_split_1252;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i32.i64(out_$i44);
    goto corral_source_split_1251;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb44_dummy:
    call {:si_unique_call 1} out_$i45, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i44 := vidioc_reqbufs_loop_$bb39(in_$p4, in_$p40, out_$i45, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i44);
    return;

  exit:
    return;
}



procedure vidioc_reqbufs_loop_$bb39(in_$p4: ref, in_$p40: ref, in_$i45: i64, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i8, in_$i53: i32, in_$i54: i1, in_$i44: i32) returns (out_$i45: i64, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i8, out_$i53: i32, out_$i54: i1, out_$i44: i32);



implementation gspca_init_transfer_loop_$bb57(in_$p0: ref, in_$i168: i64, in_$p170: ref, in_$p171: ref, in_$i172: i64, in_$i173: i1, in_$i174: i32, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i32, in_$i180: i1, in_$i166: i32, in_$i167: i32, in_$i181: i32) returns (out_$i168: i64, out_$p170: ref, out_$p171: ref, out_$i172: i64, out_$i173: i1, out_$i174: i32, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i32, out_$i180: i1, out_$i166: i32, out_$i167: i32, out_$i181: i32)
{

  entry:
    out_$i168, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i166, out_$i167, out_$i181 := in_$i168, in_$p170, in_$p171, in_$i172, in_$i173, in_$i174, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i166, in_$i167, in_$i181;
    goto $bb57, exit;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1728;

  $bb66:
    assume out_$i180 == 1;
    assume {:verifier.code 0} true;
    out_$i166, out_$i167 := out_$i176, out_$i179;
    goto $bb66_dummy;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    out_$i181 := out_$i176;
    assume true;
    goto $bb66;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    out_$i180 := $sle.i32(out_$i179, 3);
    goto corral_source_split_1747;

  $bb65:
    assume {:verifier.code 0} true;
    out_$i179 := $add.i32(out_$i167, 1);
    call {:si_unique_call 325} {:cexpr "n"} boogie_si_record_i32(out_$i179);
    goto corral_source_split_1746;

  $bb64:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    out_$i178 := out_$i176;
    assume true;
    goto $bb64;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    out_$i177 := $slt.i32(out_$i176, 0);
    goto corral_source_split_1742;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} out_$i176 := ldv_usb_submit_urb_12(out_$p171, 208);
    call {:si_unique_call 324} {:cexpr "ret"} boogie_si_record_i32(out_$i176);
    goto corral_source_split_1741;

  $bb60:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    out_$i174 := out_$i166;
    assume true;
    goto $bb60;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    out_$i173 := $eq.i64(out_$i172, 0);
    goto corral_source_split_1734;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    out_$i172 := $p2i.ref.i64(out_$p171);
    goto corral_source_split_1733;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    out_$p171 := $load.ref($M.0, out_$p170);
    goto corral_source_split_1732;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2592, 1)), $mul.ref(out_$i168, 8));
    goto corral_source_split_1731;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i168 := $sext.i32.i64(out_$i167);
    goto corral_source_split_1730;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb66_dummy:
    call {:si_unique_call 1} out_$i168, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i166, out_$i167, out_$i181 := gspca_init_transfer_loop_$bb57(in_$p0, out_$i168, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i166, out_$i167, out_$i181);
    return;

  exit:
    return;
}



procedure gspca_init_transfer_loop_$bb57(in_$p0: ref, in_$i168: i64, in_$p170: ref, in_$p171: ref, in_$i172: i64, in_$i173: i1, in_$i174: i32, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i32, in_$i180: i1, in_$i166: i32, in_$i167: i32, in_$i181: i32) returns (out_$i168: i64, out_$p170: ref, out_$p171: ref, out_$i172: i64, out_$i173: i1, out_$i174: i32, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i32, out_$i180: i1, out_$i166: i32, out_$i167: i32, out_$i181: i32);
  modifies $M.5, $M.7, $M.0, $M.9, $M.10, $M.4, $CurrAddr, $M.6;



implementation gspca_init_transfer_loop_$bb20(in_$p0: ref, in_$p1: ref, in_$p12: ref, in_$i43: i32, in_$i84: i32, in_$i85: i32, in_$p86: ref, in_$i87: i8, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i8, in_$i92: i32, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$i99: i8, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i103: i1, in_$i104: i32, in_$i105: i32, in_$i109: i32, in_$p111: ref, in_$i112: i8, in_$i113: i32, in_$i114: i1, in_$i115: i32, in_$i116: i1, in_$p118: ref, in_$p119: ref, in_$p121: ref, in_$p122: ref, in_$i123: i64, in_$p124: ref, in_$p125: ref, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$p130: ref, in_$i131: i8, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$p135: ref, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$i140: i32, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$i146: i32, in_$i147: i1, in_$i148: i32, in_$p149: ref, in_$p151: ref, in_$p152: ref, in_$p155: ref, in_$i156: i8, in_$i157: i32, in_$i158: i1, in_$p160: ref, in_$i161: i8, in_$i162: i32, in_$i163: i1, in_$i164: i32, in_$i168: i64, in_$p170: ref, in_$p171: ref, in_$i172: i64, in_$i173: i1, in_$i174: i32, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i32, in_$i180: i1, in_$i166: i32, in_$i167: i32, in_$i181: i32, in_$i175: i32, in_$i182: i1, in_$i183: i32, in_$i184: i1, in_$i185: i32, in_$i106: i32, in_$p191: ref, in_$p192: ref, in_$p194: ref, in_$p195: ref, in_$p196: ref, in_$p197: ref, in_$i198: i64, in_$i199: i1, in_$p200: ref, in_$p201: ref, in_$p202: ref, in_$p203: ref, in_$i204: i32, in_$i205: i1, in_$i206: i32, in_$i208: i1, in_$i210: i32, in_$i211: i64, in_$p213: ref, in_$i214: i32, in_$i215: i8, in_$p216: ref, in_$i207: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32) returns (out_$i84: i32, out_$i85: i32, out_$p86: ref, out_$i87: i8, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i8, out_$i92: i32, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$i99: i8, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i103: i1, out_$i104: i32, out_$i105: i32, out_$i109: i32, out_$p111: ref, out_$i112: i8, out_$i113: i32, out_$i114: i1, out_$i115: i32, out_$i116: i1, out_$p118: ref, out_$p119: ref, out_$p121: ref, out_$p122: ref, out_$i123: i64, out_$p124: ref, out_$p125: ref, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$p130: ref, out_$i131: i8, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$p135: ref, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$i140: i32, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$i146: i32, out_$i147: i1, out_$i148: i32, out_$p149: ref, out_$p151: ref, out_$p152: ref, out_$p155: ref, out_$i156: i8, out_$i157: i32, out_$i158: i1, out_$p160: ref, out_$i161: i8, out_$i162: i32, out_$i163: i1, out_$i164: i32, out_$i168: i64, out_$p170: ref, out_$p171: ref, out_$i172: i64, out_$i173: i1, out_$i174: i32, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i32, out_$i180: i1, out_$i166: i32, out_$i167: i32, out_$i181: i32, out_$i175: i32, out_$i182: i1, out_$i183: i32, out_$i184: i1, out_$i185: i32, out_$i106: i32, out_$p191: ref, out_$p192: ref, out_$p194: ref, out_$p195: ref, out_$p196: ref, out_$p197: ref, out_$i198: i64, out_$i199: i1, out_$p200: ref, out_$p201: ref, out_$p202: ref, out_$p203: ref, out_$i204: i32, out_$i205: i1, out_$i206: i32, out_$i208: i1, out_$i210: i32, out_$i211: i64, out_$p213: ref, out_$i214: i32, out_$i215: i8, out_$p216: ref, out_$i207: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32)
{

  entry:
    out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i109, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$p118, out_$p119, out_$p121, out_$p122, out_$i123, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$p130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$p137, out_$p138, out_$p139, out_$i140, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$i148, out_$p149, out_$p151, out_$p152, out_$p155, out_$i156, out_$i157, out_$i158, out_$p160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i168, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i166, out_$i167, out_$i181, out_$i175, out_$i182, out_$i183, out_$i184, out_$i185, out_$i106, out_$p191, out_$p192, out_$p194, out_$p195, out_$p196, out_$p197, out_$i198, out_$i199, out_$p200, out_$p201, out_$p202, out_$p203, out_$i204, out_$i205, out_$i206, out_$i208, out_$i210, out_$i211, out_$p213, out_$i214, out_$i215, out_$p216, out_$i207, out_vslice_dummy_var_78, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82 := in_$i84, in_$i85, in_$p86, in_$i87, in_$i88, in_$i89, in_$p90, in_$i91, in_$i92, in_$p93, in_$i94, in_$i95, in_$p96, in_$p97, in_$p98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i109, in_$p111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$p118, in_$p119, in_$p121, in_$p122, in_$i123, in_$p124, in_$p125, in_$i126, in_$i127, in_$i128, in_$p130, in_$i131, in_$i132, in_$i133, in_$p134, in_$p135, in_$p137, in_$p138, in_$p139, in_$i140, in_$p142, in_$p143, in_$p144, in_$p145, in_$i146, in_$i147, in_$i148, in_$p149, in_$p151, in_$p152, in_$p155, in_$i156, in_$i157, in_$i158, in_$p160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i168, in_$p170, in_$p171, in_$i172, in_$i173, in_$i174, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i166, in_$i167, in_$i181, in_$i175, in_$i182, in_$i183, in_$i184, in_$i185, in_$i106, in_$p191, in_$p192, in_$p194, in_$p195, in_$p196, in_$p197, in_$i198, in_$i199, in_$p200, in_$p201, in_$p202, in_$p203, in_$i204, in_$i205, in_$i206, in_$i208, in_$i210, in_$i211, in_$p213, in_$i214, in_$i215, in_$p216, in_$i207, in_vslice_dummy_var_78, in_vslice_dummy_var_80, in_vslice_dummy_var_81, in_vslice_dummy_var_82;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1614;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    out_$i84, out_$i85 := out_$i106, out_$i207;
    goto corral_source_split_1772_dummy;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_1772;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p216, out_$i215);
    assume {:verifier.code 0} true;
    out_$i207 := out_$i210;
    goto $bb80;

  $bb79:
    assume {:verifier.code 0} true;
    out_$i207 := out_$i85;
    goto $bb80;

  $bb78:
    assume !(out_$i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    out_$i206 := out_$i204;
    assume true;
    goto $bb78;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    out_$i205 := $slt.i32(out_$i204, 0);
    goto corral_source_split_1765;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    out_$p203 := $load.ref($M.0, out_$p202);
    call {:si_unique_call 328} out_$i204 := devirtbounce.6(out_$p203, in_$p0);
    call {:si_unique_call 329} {:cexpr "ret"} boogie_si_record_i32(out_$i204);
    goto corral_source_split_1764;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    out_$p202 := $add.ref($add.ref(out_$p201, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_1763;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    out_$p201 := $load.ref($M.0, out_$p200);
    goto corral_source_split_1762;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    out_$p200 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_1761;

  $bb75:
    assume out_$i199 == 1;
    goto corral_source_split_1760;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    out_$i199 := $ne.i64(out_$i198, 0);
    goto corral_source_split_1652;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    out_$i198 := $p2i.ref.i64(out_$p197);
    goto corral_source_split_1651;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    out_$p197 := $load.ref($M.0, out_$p196);
    goto corral_source_split_1650;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    out_$p196 := $add.ref($add.ref(out_$p195, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_1649;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    out_$p195 := $load.ref($M.0, out_$p194);
    goto corral_source_split_1648;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    out_$p194 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_1647;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} msleep(20);
    goto corral_source_split_1646;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} out_vslice_dummy_var_78 := printk.ref.ref.i32(.str.31, out_$p192, out_$i106);
    goto corral_source_split_1645;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    out_$p192 := $bitcast.ref.ref(out_$p191);
    goto corral_source_split_1644;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    out_$p191 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_1643;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1642;

  $bb74:
    assume {:verifier.code 0} true;
    out_$i106 := out_$i109;
    goto $bb29;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    out_$i106 := out_$i92;
    goto $bb29;

  $bb27:
    assume out_$i103 == 1;
    goto corral_source_split_1640;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    out_$i104, out_$i105 := out_$i92, out_$i101;
    assume true;
    goto $bb27;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i101, $sub.i32(0, 28));
    goto corral_source_split_1638;

  $bb25:
    assume out_$i102 == 1;
    goto corral_source_split_1637;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i101, 0);
    goto corral_source_split_1635;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} out_$i101 := usb_set_interface(out_$p97, out_$i100, out_$i92);
    call {:si_unique_call 308} {:cexpr "ret"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_1634;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    out_$i100 := $zext.i8.i32(out_$i99);
    goto corral_source_split_1633;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    out_$i99 := $load.i8($M.0, out_$p98);
    goto corral_source_split_1632;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(4802, 1));
    goto corral_source_split_1631;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.0, out_$p96);
    goto corral_source_split_1630;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_1629;

  $bb23:
    assume out_$i95 == 1;
    goto corral_source_split_1628;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    out_$i95 := $ugt.i32(out_$i94, 1);
    goto corral_source_split_1626;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i32($M.0, out_$p93);
    goto corral_source_split_1625;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p12, $mul.ref(0, 1528)), $mul.ref(16, 1));
    goto corral_source_split_1624;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    out_$i92 := $zext.i8.i32(out_$i91);
    call {:si_unique_call 306} {:cexpr "alt"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_1623;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i8($M.0, out_$p90);
    goto corral_source_split_1622;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(4803, 1));
    goto corral_source_split_1621;

  $bb21:
    assume out_$i89 == 1;
    goto corral_source_split_1620;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i32(out_$i88, out_$i84);
    goto corral_source_split_1618;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i8.i32(out_$i87);
    goto corral_source_split_1617;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i8($M.0, out_$p86);
    goto corral_source_split_1616;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(4803, 1));
    goto corral_source_split_1615;

  $bb73:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    out_$i185 := out_$i175;
    assume true;
    goto $bb73;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    out_$i184 := $ne.i32(out_$i175, $sub.i32(0, 28));
    goto corral_source_split_1752;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} gspca_stream_off(in_$p0);
    goto corral_source_split_1751;

  $bb70:
    assume !(out_$i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    out_$i183 := out_$i175;
    assume true;
    goto $bb70;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    out_$i182 := $sge.i32(out_$i175, 0);
    goto corral_source_split_1739;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_1738;

  $bb68:
    assume {:verifier.code 0} true;
    out_$i175 := out_$i181;
    goto $bb61;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    out_$i175 := out_$i178;
    goto $bb61;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    out_$i175 := out_$i174;
    goto $bb61;

  $bb59:
    assume out_$i173 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1736;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    out_$i174 := out_$i166;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    out_$i173 := $eq.i64(out_$i172, 0);
    goto corral_source_split_1734;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    out_$i172 := $p2i.ref.i64(out_$p171);
    goto corral_source_split_1733;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    out_$p171 := $load.ref($M.0, out_$p170);
    goto corral_source_split_1732;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2592, 1)), $mul.ref(out_$i168, 8));
    goto corral_source_split_1731;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i168 := $sext.i32.i64(out_$i167);
    goto corral_source_split_1730;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb57:
    call out_$i168, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i166, out_$i167, out_$i181 := gspca_init_transfer_loop_$bb57(in_$p0, out_$i168, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i166, out_$i167, out_$i181);
    goto $bb57_last;

  $bb57_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1728;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i166, out_$i167 := out_$i146, 0;
    goto $bb57;

  $bb66:
    assume out_$i180 == 1;
    assume {:verifier.code 0} true;
    out_$i166, out_$i167 := out_$i176, out_$i179;
    assume false;
    return;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    out_$i181 := out_$i176;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    out_$i180 := $sle.i32(out_$i179, 3);
    goto corral_source_split_1747;

  $bb65:
    assume {:verifier.code 0} true;
    out_$i179 := $add.i32(out_$i167, 1);
    call {:si_unique_call 325} {:cexpr "n"} boogie_si_record_i32(out_$i179);
    goto corral_source_split_1746;

  $bb64:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    out_$i178 := out_$i176;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    out_$i177 := $slt.i32(out_$i176, 0);
    goto corral_source_split_1742;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} out_$i176 := ldv_usb_submit_urb_12(out_$p171, 208);
    call {:si_unique_call 324} {:cexpr "ret"} boogie_si_record_i32(out_$i176);
    goto corral_source_split_1741;

  $bb60:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i158 == 1);
    goto $bb52;

  $bb54:
    assume {:verifier.code 0} true;
    assume !(out_$i163 == 1);
    goto $bb52;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    out_$i164 := out_$i146;
    assume true;
    goto $bb54;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i32(out_$i162, 0);
    goto corral_source_split_1722;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    out_$i162 := $zext.i8.i32(out_$i161);
    goto corral_source_split_1721;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    out_$i161 := $load.i8($M.0, out_$p160);
    goto corral_source_split_1720;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(26, 1));
    goto corral_source_split_1719;

  $bb50:
    assume out_$i158 == 1;
    goto corral_source_split_1718;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    out_$i158 := $ne.i32(out_$i157, 0);
    goto corral_source_split_1716;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    out_$i157 := $zext.i8.i32(out_$i156);
    goto corral_source_split_1715;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    out_$i156 := $load.i8($M.0, out_$p155);
    goto corral_source_split_1714;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(27, 1));
    goto corral_source_split_1713;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} out_vslice_dummy_var_82 := v4l2_ctrl_handler_setup(out_$p152);
    goto corral_source_split_1712;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    out_$p152 := $load.ref($M.0, out_$p151);
    goto corral_source_split_1711;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(0, 1)), $mul.ref(1544, 1));
    goto corral_source_split_1710;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p149, 1);
    goto corral_source_split_1709;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(4348, 1));
    goto corral_source_split_1708;

  $bb48:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    out_$i148 := out_$i146;
    assume true;
    goto $bb48;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    out_$i147 := $slt.i32(out_$i146, 0);
    goto corral_source_split_1703;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    out_$p145 := $load.ref($M.0, out_$p144);
    call {:si_unique_call 319} out_$i146 := devirtbounce.6(out_$p145, in_$p0);
    call {:si_unique_call 320} {:cexpr "ret"} boogie_si_record_i32(out_$i146);
    goto corral_source_split_1702;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(out_$p143, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_1701;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    out_$p143 := $load.ref($M.0, out_$p142);
    goto corral_source_split_1700;

  $bb46:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2296, 1));
    goto corral_source_split_1699;

  $bb45:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} out_vslice_dummy_var_81 := usb_clear_halt(out_$p135, out_$i140);
    goto corral_source_split_1697;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    out_$i140 := $load.i32($M.0, out_$p139);
    goto corral_source_split_1696;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(out_$p138, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1695;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    out_$p138 := $load.ref($M.0, out_$p137);
    goto corral_source_split_1694;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2592, 1)), $mul.ref(0, 8));
    goto corral_source_split_1693;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    out_$p135 := $load.ref($M.0, out_$p134);
    goto corral_source_split_1692;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_1691;

  $bb44:
    assume out_$i133 == 1;
    goto corral_source_split_1690;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    out_$i133 := $ne.i32(out_$i132, 0);
    goto corral_source_split_1688;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    out_$i132 := $zext.i8.i32(out_$i131);
    goto corral_source_split_1687;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    out_$i131 := $load.i8($M.0, out_$p130);
    goto corral_source_split_1686;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(27, 1));
    goto corral_source_split_1685;

  $bb36:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb41:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    out_$i128 := out_$i126;
    assume true;
    goto $bb41;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    out_$i127 := $slt.i32(out_$i126, 0);
    goto corral_source_split_1680;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} out_$i126 := create_urbs(in_$p0, out_$p125);
    call {:si_unique_call 316} {:cexpr "ret"} boogie_si_record_i32(out_$i126);
    goto corral_source_split_1679;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} out_$p125 := alt_xfer(out_$p124, in_$i43);
    goto corral_source_split_1678;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref(out_$p122, $mul.ref(out_$i123, 40));
    goto corral_source_split_1677;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    out_$i123 := $sext.i32.i64(out_$i109);
    goto corral_source_split_1676;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    out_$p122 := $load.ref($M.0, out_$p121);
    goto corral_source_split_1675;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(in_$p12, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_1674;

  $bb38:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} out_vslice_dummy_var_80 := printk.ref.ref.i32(.str.29, out_$p119, out_$i109);
    goto corral_source_split_1672;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    out_$p119 := $bitcast.ref.ref(out_$p118);
    goto corral_source_split_1671;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_1670;

  $bb37:
    assume out_$i116 == 1;
    goto corral_source_split_1669;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    out_$i116 := $sgt.i32(out_$i115, 2);
    goto corral_source_split_1667;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    out_$i115 := $M.1;
    goto corral_source_split_1666;

  $bb35:
    assume out_$i114 == 1;
    goto corral_source_split_1665;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 0);
    goto corral_source_split_1663;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    out_$i113 := $zext.i8.i32(out_$i112);
    goto corral_source_split_1662;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i8($M.0, out_$p111);
    goto corral_source_split_1661;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(25, 1));
    goto corral_source_split_1660;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_1659;

  $bb22:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    out_$i109 := out_$i84;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i109 := out_$i92;
    goto $bb34;

  $bb24:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb26:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb63:
    assume out_$i177 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1744;

  $bb67:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    out_$p216 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(4803, 1));
    goto corral_source_split_1782;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    out_$i215 := $trunc.i32.i8(out_$i214);
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    out_$i214 := $load.i32($M.9, out_$p213);
    goto corral_source_split_1780;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    out_$p213 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 128)), $mul.ref(out_$i211, 8)), $mul.ref(0, 1));
    goto corral_source_split_1779;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    out_$i211 := $sext.i32.i64(out_$i210);
    goto corral_source_split_1778;

  $bb83:
    assume {:verifier.code 0} true;
    out_$i210 := $sub.i32(out_$i85, 1);
    call {:si_unique_call 331} {:cexpr "alt_idx"} boogie_si_record_i32(out_$i210);
    goto corral_source_split_1777;

  $bb82:
    assume !(out_$i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    out_$i208 := $sle.i32(out_$i85, 0);
    goto corral_source_split_1768;

  $bb76:
    assume !(out_$i199 == 1);
    goto corral_source_split_1767;

  corral_source_split_1772_dummy:
    call {:si_unique_call 1} out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i109, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$p118, out_$p119, out_$p121, out_$p122, out_$i123, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$p130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$p137, out_$p138, out_$p139, out_$i140, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$i148, out_$p149, out_$p151, out_$p152, out_$p155, out_$i156, out_$i157, out_$i158, out_$p160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i168, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i166, out_$i167, out_$i181, out_$i175, out_$i182, out_$i183, out_$i184, out_$i185, out_$i106, out_$p191, out_$p192, out_$p194, out_$p195, out_$p196, out_$p197, out_$i198, out_$i199, out_$p200, out_$p201, out_$p202, out_$p203, out_$i204, out_$i205, out_$i206, out_$i208, out_$i210, out_$i211, out_$p213, out_$i214, out_$i215, out_$p216, out_$i207, out_vslice_dummy_var_78, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82 := gspca_init_transfer_loop_$bb20(in_$p0, in_$p1, in_$p12, in_$i43, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i109, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$p118, out_$p119, out_$p121, out_$p122, out_$i123, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$p130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$p137, out_$p138, out_$p139, out_$i140, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$i148, out_$p149, out_$p151, out_$p152, out_$p155, out_$i156, out_$i157, out_$i158, out_$p160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i168, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i166, out_$i167, out_$i181, out_$i175, out_$i182, out_$i183, out_$i184, out_$i185, out_$i106, out_$p191, out_$p192, out_$p194, out_$p195, out_$p196, out_$p197, out_$i198, out_$i199, out_$p200, out_$p201, out_$p202, out_$p203, out_$i204, out_$i205, out_$i206, out_$i208, out_$i210, out_$i211, out_$p213, out_$i214, out_$i215, out_$p216, out_$i207, out_vslice_dummy_var_78, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82);
    return;

  exit:
    return;
}



procedure gspca_init_transfer_loop_$bb20(in_$p0: ref, in_$p1: ref, in_$p12: ref, in_$i43: i32, in_$i84: i32, in_$i85: i32, in_$p86: ref, in_$i87: i8, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i8, in_$i92: i32, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$i99: i8, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i103: i1, in_$i104: i32, in_$i105: i32, in_$i109: i32, in_$p111: ref, in_$i112: i8, in_$i113: i32, in_$i114: i1, in_$i115: i32, in_$i116: i1, in_$p118: ref, in_$p119: ref, in_$p121: ref, in_$p122: ref, in_$i123: i64, in_$p124: ref, in_$p125: ref, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$p130: ref, in_$i131: i8, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$p135: ref, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$i140: i32, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$i146: i32, in_$i147: i1, in_$i148: i32, in_$p149: ref, in_$p151: ref, in_$p152: ref, in_$p155: ref, in_$i156: i8, in_$i157: i32, in_$i158: i1, in_$p160: ref, in_$i161: i8, in_$i162: i32, in_$i163: i1, in_$i164: i32, in_$i168: i64, in_$p170: ref, in_$p171: ref, in_$i172: i64, in_$i173: i1, in_$i174: i32, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i32, in_$i180: i1, in_$i166: i32, in_$i167: i32, in_$i181: i32, in_$i175: i32, in_$i182: i1, in_$i183: i32, in_$i184: i1, in_$i185: i32, in_$i106: i32, in_$p191: ref, in_$p192: ref, in_$p194: ref, in_$p195: ref, in_$p196: ref, in_$p197: ref, in_$i198: i64, in_$i199: i1, in_$p200: ref, in_$p201: ref, in_$p202: ref, in_$p203: ref, in_$i204: i32, in_$i205: i1, in_$i206: i32, in_$i208: i1, in_$i210: i32, in_$i211: i64, in_$p213: ref, in_$i214: i32, in_$i215: i8, in_$p216: ref, in_$i207: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32) returns (out_$i84: i32, out_$i85: i32, out_$p86: ref, out_$i87: i8, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i8, out_$i92: i32, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$i99: i8, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i103: i1, out_$i104: i32, out_$i105: i32, out_$i109: i32, out_$p111: ref, out_$i112: i8, out_$i113: i32, out_$i114: i1, out_$i115: i32, out_$i116: i1, out_$p118: ref, out_$p119: ref, out_$p121: ref, out_$p122: ref, out_$i123: i64, out_$p124: ref, out_$p125: ref, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$p130: ref, out_$i131: i8, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$p135: ref, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$i140: i32, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$i146: i32, out_$i147: i1, out_$i148: i32, out_$p149: ref, out_$p151: ref, out_$p152: ref, out_$p155: ref, out_$i156: i8, out_$i157: i32, out_$i158: i1, out_$p160: ref, out_$i161: i8, out_$i162: i32, out_$i163: i1, out_$i164: i32, out_$i168: i64, out_$p170: ref, out_$p171: ref, out_$i172: i64, out_$i173: i1, out_$i174: i32, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i32, out_$i180: i1, out_$i166: i32, out_$i167: i32, out_$i181: i32, out_$i175: i32, out_$i182: i1, out_$i183: i32, out_$i184: i1, out_$i185: i32, out_$i106: i32, out_$p191: ref, out_$p192: ref, out_$p194: ref, out_$p195: ref, out_$p196: ref, out_$p197: ref, out_$i198: i64, out_$i199: i1, out_$p200: ref, out_$p201: ref, out_$p202: ref, out_$p203: ref, out_$i204: i32, out_$i205: i1, out_$i206: i32, out_$i208: i1, out_$i210: i32, out_$i211: i64, out_$p213: ref, out_$i214: i32, out_$i215: i8, out_$p216: ref, out_$i207: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32);
  modifies $M.0, $M.5, $M.7, $M.4, $M.9, $M.10, $M.6, $CurrAddr;



implementation alt_xfer_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$p19: ref, in_$i20: i16, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i28: i32, in_$i29: i8, in_$i30: i32, in_$i31: i1, in_$i7: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$p19: ref, out_$i20: i16, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i28: i32, out_$i29: i8, out_$i30: i32, out_$i31: i1, out_$i7: i32)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$p11, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i28, out_$i29, out_$i30, out_$i31, out_$i7 := in_$p8, in_$p9, in_$i10, in_$p11, in_$p13, in_$i14, in_$i15, in_$i16, in_$i17, in_$p19, in_$i20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$p26, in_$i28, in_$i29, in_$i30, in_$i31, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1823;

  $bb16:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i28;
    goto $bb16_dummy;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    out_$i31 := $sgt.i32(out_$i30, out_$i28);
    goto corral_source_split_1853;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i8.i32(out_$i29);
    goto corral_source_split_1852;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i8($M.0, in_$p3);
    goto corral_source_split_1851;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i7, 1);
    call {:si_unique_call 342} {:cexpr "i"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_1850;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p11;
    assume true;
    goto $bb12;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_1844;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} out_$i24 := usb_endpoint_dir_in(out_$p23);
    call {:si_unique_call 341} {:cexpr "tmp"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_1843;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 64)), $mul.ref(0, 1));
    goto corral_source_split_1842;

  $bb9:
    assume out_$i22 == 1;
    goto corral_source_split_1841;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_1839;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i16.i32(out_$i20);
    goto corral_source_split_1838;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i16($M.0, out_$p19);
    goto corral_source_split_1837;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 64)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1836;

  $bb6:
    assume out_$i17 == 1;
    goto corral_source_split_1835;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, in_$i1);
    goto corral_source_split_1833;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    out_$i16 := $and.i32(out_$i15, 3);
    call {:si_unique_call 339} {:cexpr "attr"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_1832;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i8.i32(out_$i14);
    goto corral_source_split_1831;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i8($M.0, out_$p13);
    goto corral_source_split_1830;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 64)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_1829;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref(out_$p9, $mul.ref(out_$i10, 64));
    goto corral_source_split_1828;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i7);
    goto corral_source_split_1827;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_1826;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1825;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb8;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$p11, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i28, out_$i29, out_$i30, out_$i31, out_$i7 := alt_xfer_loop_$bb4(in_$p0, in_$i1, in_$p3, out_$p8, out_$p9, out_$i10, out_$p11, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i28, out_$i29, out_$i30, out_$i31, out_$i7);
    return;

  exit:
    return;
}



procedure alt_xfer_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$p19: ref, in_$i20: i16, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i28: i32, in_$i29: i8, in_$i30: i32, in_$i31: i1, in_$i7: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$p19: ref, out_$i20: i16, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i28: i32, out_$i29: i8, out_$i30: i32, out_$i31: i1, out_$i7: i32);



implementation build_isoc_ep_tb_loop_$bb55(in_$i107: i32, in_$p113: ref, in_$p114: ref, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$i119: i32, in_$i120: i1, in_$p111: ref, in_$i112: i32, in_$i121: i32) returns (out_$p113: ref, out_$p114: ref, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$i119: i32, out_$i120: i1, out_$p111: ref, out_$i112: i32, out_$i121: i32)
{

  entry:
    out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i119, out_$i120, out_$p111, out_$i112, out_$i121 := in_$p113, in_$p114, in_$i115, in_$i116, in_$i117, in_$i119, in_$i120, in_$p111, in_$i112, in_$i121;
    goto $bb55, exit;

  $bb55:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2003;

  $bb61:
    assume out_$i120 == 1;
    assume {:verifier.code 0} true;
    out_$p111, out_$i112 := out_$p113, out_$i119;
    goto $bb61_dummy;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    out_$i121 := out_$i119;
    assume true;
    goto $bb61;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    out_$i120 := $sgt.i32(out_$i119, 1);
    goto corral_source_split_2015;

  $bb60:
    assume {:verifier.code 0} true;
    out_$i119 := $sub.i32(out_$i112, 1);
    call {:si_unique_call 359} {:cexpr "i"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_2014;

  $bb58:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    out_$i117 := out_$i112;
    assume true;
    goto $bb58;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    out_$i116 := $ult.i32(out_$i115, in_$i107);
    goto corral_source_split_2008;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i32($M.10, out_$p114);
    goto corral_source_split_2007;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(out_$p111, $mul.ref($sub.ref(0, 1), 8)), $mul.ref(4, 1));
    goto corral_source_split_2006;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref(out_$p111, $mul.ref($sub.ref(0, 1), 8));
    goto corral_source_split_2005;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb61_dummy:
    call {:si_unique_call 1} out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i119, out_$i120, out_$p111, out_$i112, out_$i121 := build_isoc_ep_tb_loop_$bb55(in_$i107, out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i119, out_$i120, out_$p111, out_$i112, out_$i121);
    return;

  exit:
    return;
}



procedure build_isoc_ep_tb_loop_$bb55(in_$i107: i32, in_$p113: ref, in_$p114: ref, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$i119: i32, in_$i120: i1, in_$p111: ref, in_$i112: i32, in_$i121: i32) returns (out_$p113: ref, out_$p114: ref, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$i119: i32, out_$i120: i1, out_$p111: ref, out_$i112: i32, out_$i121: i32);



implementation build_isoc_ep_tb_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$i6: i32, in_$p8: ref, in_$i9: i32, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$p31: ref, in_$i32: i16, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i32, in_$p53: ref, in_$i54: i8, in_$i55: i32, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i22: i32, in_$i23: i32, in_$i65: i32, in_$i66: i1, in_$i13: i32, in_$i14: i32, in_$i67: i32, in_vslice_dummy_var_87: i32) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$p31: ref, out_$i32: i16, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i32, out_$p53: ref, out_$i54: i8, out_$i55: i32, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i22: i32, out_$i23: i32, out_$i65: i32, out_$i66: i1, out_$i13: i32, out_$i14: i32, out_$i67: i32, out_vslice_dummy_var_87: i32)
{

  entry:
    out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p25, out_$i26, out_$i27, out_$i28, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i22, out_$i23, out_$i65, out_$i66, out_$i13, out_$i14, out_$i67, out_vslice_dummy_var_87 := in_$p15, in_$p16, in_$i17, in_$p18, in_$p19, in_$i20, in_$i21, in_$p25, in_$i26, in_$i27, in_$i28, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p41, in_$p42, in_$i43, in_$i44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$i50, in_$i51, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$p59, in_$i60, in_$i61, in_$p62, in_$p63, in_$i64, in_$i22, in_$i23, in_$i65, in_$i66, in_$i13, in_$i14, in_$i67, in_vslice_dummy_var_87;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1873;

  $bb29:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$i13, out_$i14 := out_$i23, out_$i65;
    goto $bb29_dummy;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    out_$i67 := out_$i23;
    assume true;
    goto $bb29;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i65, in_$i6);
    goto corral_source_split_1887;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i22, 1);
    call {:si_unique_call 345} {:cexpr "j"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_1886;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1885;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    out_$i22, out_$i23 := out_$i14, out_$i64;
    goto $bb12;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    out_$i22, out_$i23 := out_$i14, out_$i13;
    goto $bb12;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    out_$i22, out_$i23 := out_$i14, out_$i13;
    goto $bb12;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    out_$i22, out_$i23 := out_$i14, out_$i13;
    goto $bb12;

  $bb10:
    assume out_$i21 == 1;
    goto corral_source_split_1883;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i64(out_$i20, 0);
    goto corral_source_split_1881;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_1880;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} out_$p19 := alt_xfer(out_$p18, 1);
    goto corral_source_split_1879;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p16, $mul.ref(out_$i17, 40));
    goto corral_source_split_1878;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i14);
    goto corral_source_split_1877;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_1876;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_1875;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} out_vslice_dummy_var_87 := printk.ref.i32(.str.32, out_$i14);
    goto corral_source_split_1895;

  $bb14:
    assume out_$i28 == 1;
    goto corral_source_split_1894;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 0);
    goto corral_source_split_1892;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i8.i32(out_$i26);
    goto corral_source_split_1891;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i8($M.0, out_$p25);
    goto corral_source_split_1890;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_1889;

  $bb11:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb23:
    assume out_$i58 == 1;
    goto corral_source_split_1929;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    out_$i58 := $ule.i32(out_$i57, in_$i9);
    goto corral_source_split_1927;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    out_$i57 := $lshr.i32(out_$i51, out_$i56);
    call {:si_unique_call 351} {:cexpr "bandwidth"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_1926;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i32(out_$i55, $sub.i32(0, 1));
    goto corral_source_split_1925;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i8.i32(out_$i54);
    goto corral_source_split_1924;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i8($M.0, out_$p53);
    goto corral_source_split_1923;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_1922;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1921;

  $bb21:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    out_$i51 := out_$i39;
    goto $bb22;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i50;
    goto $bb22;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i50 := $mul.i32(out_$i39, 8);
    call {:si_unique_call 350} {:cexpr "bandwidth"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_1912;

  $bb20:
    assume {:verifier.code 0} true;
    assume out_$i49 == 1;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i44 == 1;
    goto $bb18;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i43, 3);
    goto corral_source_split_1910;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, out_$p42);
    goto corral_source_split_1909;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p41, $mul.ref(0, 1992)), $mul.ref(28, 1));
    goto corral_source_split_1908;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_1907;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_1906;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    out_$i39 := $mul.i32(out_$i38, 1000);
    call {:si_unique_call 349} {:cexpr "bandwidth"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_1905;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    out_$i38 := $mul.i32(out_$i34, out_$i37);
    call {:si_unique_call 348} {:cexpr "psize"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_1904;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i36, 1);
    goto corral_source_split_1903;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    out_$i36 := $and.i32(out_$i35, 3);
    goto corral_source_split_1902;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$i35 := $ashr.i32(out_$i33, 11);
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    out_$i34 := $and.i32(out_$i33, 2047);
    goto corral_source_split_1900;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i16.i32(out_$i32);
    call {:si_unique_call 347} {:cexpr "psize"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_1899;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i16($M.0, out_$p31);
    goto corral_source_split_1898;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1897;

  $bb15:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, 5);
    goto corral_source_split_1919;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    goto corral_source_split_1918;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p46, $mul.ref(0, 1992)), $mul.ref(28, 1));
    goto corral_source_split_1917;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_1916;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_1915;

  $bb19:
    assume !(out_$i44 == 1);
    goto corral_source_split_1914;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_1941;

  $bb27:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    out_$i64 := out_$i13;
    goto $bb28;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    out_$i64 := 1;
    goto $bb28;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, out_$p63, out_$i14);
    goto corral_source_split_1939;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p8, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1938;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, out_$p62, out_$i57);
    goto corral_source_split_1937;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1936;

  $bb26:
    assume out_$i61 == 1;
    goto corral_source_split_1935;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    out_$i61 := $ugt.i32(out_$i60, out_$i57);
    goto corral_source_split_1933;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.10, out_$p59);
    goto corral_source_split_1932;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1931;

  $bb24:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p25, out_$i26, out_$i27, out_$i28, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i22, out_$i23, out_$i65, out_$i66, out_$i13, out_$i14, out_$i67, out_vslice_dummy_var_87 := build_isoc_ep_tb_loop_$bb8(in_$p0, in_$p1, in_$i6, in_$p8, in_$i9, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p25, out_$i26, out_$i27, out_$i28, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i22, out_$i23, out_$i65, out_$i66, out_$i13, out_$i14, out_$i67, out_vslice_dummy_var_87);
    return;

  exit:
    return;
}



procedure build_isoc_ep_tb_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$i6: i32, in_$p8: ref, in_$i9: i32, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$p31: ref, in_$i32: i16, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i32, in_$p53: ref, in_$i54: i8, in_$i55: i32, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i22: i32, in_$i23: i32, in_$i65: i32, in_$i66: i1, in_$i13: i32, in_$i14: i32, in_$i67: i32, in_vslice_dummy_var_87: i32) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$p31: ref, out_$i32: i16, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i32, out_$p53: ref, out_$i54: i8, out_$i55: i32, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i22: i32, out_$i23: i32, out_$i65: i32, out_$i66: i1, out_$i13: i32, out_$i14: i32, out_$i67: i32, out_vslice_dummy_var_87: i32);
  modifies $M.9, $M.10;



implementation build_isoc_ep_tb_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i6: i32, in_$i7: i32, in_$p8: ref, in_$i9: i32, in_$p10: ref, in_$i11: i1, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$p31: ref, in_$i32: i16, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i32, in_$p53: ref, in_$i54: i8, in_$i55: i32, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i22: i32, in_$i23: i32, in_$i65: i32, in_$i66: i1, in_$i13: i32, in_$i14: i32, in_$i67: i32, in_$i12: i32, in_$i68: i1, in_$i69: i32, in_$p70: ref, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$p79: ref, in_$i80: i32, in_$p82: ref, in_$i83: i32, in_$i84: i32, in_$p85: ref, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32) returns (out_$i7: i32, out_$p8: ref, out_$i9: i32, out_$p10: ref, out_$i11: i1, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$p31: ref, out_$i32: i16, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i32, out_$p53: ref, out_$i54: i8, out_$i55: i32, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i22: i32, out_$i23: i32, out_$i65: i32, out_$i66: i1, out_$i13: i32, out_$i14: i32, out_$i67: i32, out_$i12: i32, out_$i68: i1, out_$i69: i32, out_$p70: ref, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$p79: ref, out_$i80: i32, out_$p82: ref, out_$i83: i32, out_$i84: i32, out_$p85: ref, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32)
{

  entry:
    out_$i7, out_$p8, out_$i9, out_$p10, out_$i11, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p25, out_$i26, out_$i27, out_$i28, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i22, out_$i23, out_$i65, out_$i66, out_$i13, out_$i14, out_$i67, out_$i12, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$p75, out_$p76, out_$p77, out_$i78, out_$p79, out_$i80, out_$p82, out_$i83, out_$i84, out_$p85, out_vslice_dummy_var_87, out_vslice_dummy_var_88 := in_$i7, in_$p8, in_$i9, in_$p10, in_$i11, in_$p15, in_$p16, in_$i17, in_$p18, in_$p19, in_$i20, in_$i21, in_$p25, in_$i26, in_$i27, in_$i28, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p41, in_$p42, in_$i43, in_$i44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$i50, in_$i51, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$p59, in_$i60, in_$i61, in_$p62, in_$p63, in_$i64, in_$i22, in_$i23, in_$i65, in_$i66, in_$i13, in_$i14, in_$i67, in_$i12, in_$i68, in_$i69, in_$p70, in_$i71, in_$i72, in_$i73, in_$p75, in_$p76, in_$p77, in_$i78, in_$p79, in_$i80, in_$p82, in_$i83, in_$i84, in_$p85, in_vslice_dummy_var_87, in_vslice_dummy_var_88;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1866;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    out_$i7, out_$p8, out_$i9 := out_$i84, out_$p85, out_$i83;
    goto corral_source_split_1969_dummy;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref(out_$p8, $mul.ref(1, 8));
    goto corral_source_split_1969;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    out_$i84 := $add.i32(out_$i7, 1);
    call {:si_unique_call 354} {:cexpr "i"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_1968;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i32($M.10, out_$p82);
    call {:si_unique_call 353} {:cexpr "last_bw"} boogie_si_record_i32(out_$i83);
    goto corral_source_split_1967;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1966;

  $bb37:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} out_vslice_dummy_var_88 := printk.ref.ref.i32.i32(.str.33, out_$p76, out_$i78, out_$i80);
    goto corral_source_split_1964;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.10, out_$p79);
    goto corral_source_split_1963;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1962;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.9, out_$p77);
    goto corral_source_split_1961;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p8, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1960;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(out_$p75);
    goto corral_source_split_1959;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_1958;

  $bb36:
    assume out_$i73 == 1;
    goto corral_source_split_1957;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    out_$i73 := $sgt.i32(out_$i72, 2);
    goto corral_source_split_1955;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i72 := $M.1;
    goto corral_source_split_1954;

  $bb33:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    out_$i69, out_$p70, out_$i71 := out_$i7, out_$p8, out_$i9;
    assume true;
    goto $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i12, 0);
    goto corral_source_split_1945;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb6:
    assume {:verifier.code 0} true;
    assume !(out_$i11 == 1);
    goto $bb7;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i67;
    goto $bb7;

  $bb30:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1943;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    out_$i67 := out_$i23;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i65, in_$i6);
    goto corral_source_split_1887;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i22, 1);
    call {:si_unique_call 345} {:cexpr "j"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_1886;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1885;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    out_$i22, out_$i23 := out_$i14, out_$i64;
    goto $bb12;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    out_$i22, out_$i23 := out_$i14, out_$i13;
    goto $bb12;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    out_$i22, out_$i23 := out_$i14, out_$i13;
    goto $bb12;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    out_$i22, out_$i23 := out_$i14, out_$i13;
    goto $bb12;

  $bb10:
    assume out_$i21 == 1;
    goto corral_source_split_1883;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i64(out_$i20, 0);
    goto corral_source_split_1881;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_1880;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} out_$p19 := alt_xfer(out_$p18, 1);
    goto corral_source_split_1879;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p16, $mul.ref(out_$i17, 40));
    goto corral_source_split_1878;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i14);
    goto corral_source_split_1877;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_1876;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_1875;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb8:
    call out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p25, out_$i26, out_$i27, out_$i28, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i22, out_$i23, out_$i65, out_$i66, out_$i13, out_$i14, out_$i67, out_vslice_dummy_var_87 := build_isoc_ep_tb_loop_$bb8(in_$p0, in_$p1, in_$i6, out_$p8, out_$i9, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p25, out_$i26, out_$i27, out_$i28, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i22, out_$i23, out_$i65, out_$i66, out_$i13, out_$i14, out_$i67, out_vslice_dummy_var_87);
    goto $bb8_last;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1873;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    out_$i13, out_$i14 := 0, 0;
    goto $bb8;

  $bb29:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$i13, out_$i14 := out_$i23, out_$i65;
    assume false;
    return;

  $bb5:
    assume out_$i11 == 1;
    goto corral_source_split_1871;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    out_$i12 := 0;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(0, in_$i6);
    goto corral_source_split_1869;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, out_$p10, 480000000);
    goto corral_source_split_1868;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1867;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} out_vslice_dummy_var_87 := printk.ref.i32(.str.32, out_$i14);
    goto corral_source_split_1895;

  $bb14:
    assume out_$i28 == 1;
    goto corral_source_split_1894;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 0);
    goto corral_source_split_1892;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i8.i32(out_$i26);
    goto corral_source_split_1891;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i8($M.0, out_$p25);
    goto corral_source_split_1890;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_1889;

  $bb11:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb23:
    assume out_$i58 == 1;
    goto corral_source_split_1929;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    out_$i58 := $ule.i32(out_$i57, out_$i9);
    goto corral_source_split_1927;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    out_$i57 := $lshr.i32(out_$i51, out_$i56);
    call {:si_unique_call 351} {:cexpr "bandwidth"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_1926;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i32(out_$i55, $sub.i32(0, 1));
    goto corral_source_split_1925;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i8.i32(out_$i54);
    goto corral_source_split_1924;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i8($M.0, out_$p53);
    goto corral_source_split_1923;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_1922;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1921;

  $bb21:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    out_$i51 := out_$i39;
    goto $bb22;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i50;
    goto $bb22;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i50 := $mul.i32(out_$i39, 8);
    call {:si_unique_call 350} {:cexpr "bandwidth"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_1912;

  $bb20:
    assume {:verifier.code 0} true;
    assume out_$i49 == 1;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i44 == 1;
    goto $bb18;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i43, 3);
    goto corral_source_split_1910;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, out_$p42);
    goto corral_source_split_1909;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p41, $mul.ref(0, 1992)), $mul.ref(28, 1));
    goto corral_source_split_1908;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_1907;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_1906;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    out_$i39 := $mul.i32(out_$i38, 1000);
    call {:si_unique_call 349} {:cexpr "bandwidth"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_1905;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    out_$i38 := $mul.i32(out_$i34, out_$i37);
    call {:si_unique_call 348} {:cexpr "psize"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_1904;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i36, 1);
    goto corral_source_split_1903;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    out_$i36 := $and.i32(out_$i35, 3);
    goto corral_source_split_1902;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$i35 := $ashr.i32(out_$i33, 11);
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    out_$i34 := $and.i32(out_$i33, 2047);
    goto corral_source_split_1900;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i16.i32(out_$i32);
    call {:si_unique_call 347} {:cexpr "psize"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_1899;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i16($M.0, out_$p31);
    goto corral_source_split_1898;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1897;

  $bb15:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, 5);
    goto corral_source_split_1919;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    goto corral_source_split_1918;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p46, $mul.ref(0, 1992)), $mul.ref(28, 1));
    goto corral_source_split_1917;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_1916;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_1915;

  $bb19:
    assume !(out_$i44 == 1);
    goto corral_source_split_1914;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_1941;

  $bb27:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    out_$i64 := out_$i13;
    goto $bb28;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    out_$i64 := 1;
    goto $bb28;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, out_$p63, out_$i14);
    goto corral_source_split_1939;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p8, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1938;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, out_$p62, out_$i57);
    goto corral_source_split_1937;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1936;

  $bb26:
    assume out_$i61 == 1;
    goto corral_source_split_1935;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    out_$i61 := $ugt.i32(out_$i60, out_$i57);
    goto corral_source_split_1933;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.10, out_$p59);
    goto corral_source_split_1932;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1931;

  $bb24:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_1969_dummy:
    call {:si_unique_call 1} out_$i7, out_$p8, out_$i9, out_$p10, out_$i11, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p25, out_$i26, out_$i27, out_$i28, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i22, out_$i23, out_$i65, out_$i66, out_$i13, out_$i14, out_$i67, out_$i12, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$p75, out_$p76, out_$p77, out_$i78, out_$p79, out_$i80, out_$p82, out_$i83, out_$i84, out_$p85, out_vslice_dummy_var_87, out_vslice_dummy_var_88 := build_isoc_ep_tb_loop_$bb4(in_$p0, in_$p1, in_$i6, out_$i7, out_$p8, out_$i9, out_$p10, out_$i11, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p25, out_$i26, out_$i27, out_$i28, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i22, out_$i23, out_$i65, out_$i66, out_$i13, out_$i14, out_$i67, out_$i12, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$p75, out_$p76, out_$p77, out_$i78, out_$p79, out_$i80, out_$p82, out_$i83, out_$i84, out_$p85, out_vslice_dummy_var_87, out_vslice_dummy_var_88);
    return;

  exit:
    return;
}



procedure build_isoc_ep_tb_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i6: i32, in_$i7: i32, in_$p8: ref, in_$i9: i32, in_$p10: ref, in_$i11: i1, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$p31: ref, in_$i32: i16, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i32, in_$p53: ref, in_$i54: i8, in_$i55: i32, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i22: i32, in_$i23: i32, in_$i65: i32, in_$i66: i1, in_$i13: i32, in_$i14: i32, in_$i67: i32, in_$i12: i32, in_$i68: i1, in_$i69: i32, in_$p70: ref, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$p79: ref, in_$i80: i32, in_$p82: ref, in_$i83: i32, in_$i84: i32, in_$p85: ref, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32) returns (out_$i7: i32, out_$p8: ref, out_$i9: i32, out_$p10: ref, out_$i11: i1, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$p31: ref, out_$i32: i16, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i32, out_$p53: ref, out_$i54: i8, out_$i55: i32, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i22: i32, out_$i23: i32, out_$i65: i32, out_$i66: i1, out_$i13: i32, out_$i14: i32, out_$i67: i32, out_$i12: i32, out_$i68: i1, out_$i69: i32, out_$p70: ref, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$p79: ref, out_$i80: i32, out_$p82: ref, out_$i83: i32, out_$i84: i32, out_$p85: ref, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32);
  modifies $M.10, $M.9;



implementation create_urbs_loop_$bb39(in_$i38: i32, in_$i39: i32, in_$p64: ref, in_$i111: i64, in_$p114: ref, in_$i115: i32, in_$i116: i64, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$i110: i32) returns (out_$i111: i64, out_$p114: ref, out_$i115: i32, out_$i116: i64, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$i110: i32)
{

  entry:
    out_$i111, out_$p114, out_$i115, out_$i116, out_$p119, out_$i120, out_$i121, out_$i110 := in_$i111, in_$p114, in_$i115, in_$i116, in_$p119, in_$i120, in_$i121, in_$i110;
    goto $bb39, exit;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_2175;

  $bb41:
    assume out_$i121 == 1;
    assume {:verifier.code 0} true;
    out_$i110 := out_$i120;
    goto $bb41_dummy;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    out_$i121 := $slt.i32(out_$i120, in_$i39);
    goto corral_source_split_2185;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    out_$i120 := $add.i32(out_$i110, 1);
    call {:si_unique_call 377} {:cexpr "i"} boogie_si_record_i32(out_$i120);
    goto corral_source_split_2184;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p119, out_$i115);
    goto corral_source_split_2183;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref($add.ref($add.ref(in_$p64, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i116, 16)), $mul.ref(0, 1));
    goto corral_source_split_2182;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    out_$i116 := $sext.i32.i64(out_$i110);
    goto corral_source_split_2181;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    out_$i115 := $mul.i32(in_$i38, out_$i110);
    goto corral_source_split_2180;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p114, in_$i38);
    goto corral_source_split_2179;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref($add.ref($add.ref(in_$p64, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i111, 16)), $mul.ref(4, 1));
    goto corral_source_split_2178;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i111 := $sext.i32.i64(out_$i110);
    goto corral_source_split_2177;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb41_dummy:
    call {:si_unique_call 1} out_$i111, out_$p114, out_$i115, out_$i116, out_$p119, out_$i120, out_$i121, out_$i110 := create_urbs_loop_$bb39(in_$i38, in_$i39, in_$p64, out_$i111, out_$p114, out_$i115, out_$i116, out_$p119, out_$i120, out_$i121, out_$i110);
    return;

  exit:
    return;
}



procedure create_urbs_loop_$bb39(in_$i38: i32, in_$i39: i32, in_$p64: ref, in_$i111: i64, in_$p114: ref, in_$i115: i32, in_$i116: i64, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$i110: i32) returns (out_$i111: i64, out_$p114: ref, out_$i115: i32, out_$i116: i64, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$i110: i32);
  modifies $M.0;



implementation create_urbs_loop_$bb25(in_$p0: ref, in_$p1: ref, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$i69: i64, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p87: ref, in_$p88: ref, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$p93: ref, in_$i94: i8, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$p98: ref, in_$p99: ref, in_$p101: ref, in_$i102: i8, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i1, in_$i111: i64, in_$p114: ref, in_$i115: i32, in_$i116: i64, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$i110: i32, in_$p122: ref, in_$p123: ref, in_$p125: ref, in_$i126: i8, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i1, in_$i63: i32) returns (out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$i69: i64, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p87: ref, out_$p88: ref, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$p93: ref, out_$i94: i8, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$p98: ref, out_$p99: ref, out_$p101: ref, out_$i102: i8, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i1, out_$i111: i64, out_$p114: ref, out_$i115: i32, out_$i116: i64, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$i110: i32, out_$p122: ref, out_$p123: ref, out_$p125: ref, out_$i126: i8, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i1, out_$i63: i32)
{

  entry:
    out_$p64, out_$i65, out_$i66, out_$i69, out_$p71, out_$p72, out_$p73, out_$i74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p83, out_$p84, out_$p85, out_$p87, out_$p88, out_$i89, out_$p90, out_$p91, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i111, out_$p114, out_$i115, out_$i116, out_$p119, out_$i120, out_$i121, out_$i110, out_$p122, out_$p123, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i63 := in_$p64, in_$i65, in_$i66, in_$i69, in_$p71, in_$p72, in_$p73, in_$i74, in_$p75, in_$p76, in_$p77, in_$p78, in_$p79, in_$i80, in_$i81, in_$p83, in_$p84, in_$p85, in_$p87, in_$p88, in_$i89, in_$p90, in_$p91, in_$p93, in_$i94, in_$i95, in_$i96, in_$i97, in_$p98, in_$p99, in_$p101, in_$i102, in_$i103, in_$i104, in_$i105, in_$p106, in_$p107, in_$p108, in_$i109, in_$i111, in_$p114, in_$i115, in_$i116, in_$p119, in_$i120, in_$i121, in_$i110, in_$p122, in_$p123, in_$p125, in_$i126, in_$i127, in_$i128, in_$i129, in_$p130, in_$p131, in_$p132, in_$i133, in_$i134, in_$i63;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2094;

  $bb45:
    assume out_$i134 == 1;
    assume {:verifier.code 0} true;
    out_$i63 := out_$i133;
    goto $bb45_dummy;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    out_$i134 := $slt.i32(out_$i133, in_$i37);
    goto corral_source_split_2190;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i133 := $add.i32(out_$i63, 1);
    call {:si_unique_call 378} {:cexpr "n"} boogie_si_record_i32(out_$i133);
    goto corral_source_split_2189;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p132, bulk_irq);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i109 == 1);
    goto $bb38;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb42:
    assume !(out_$i121 == 1);
    goto corral_source_split_2187;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    out_$i121 := $slt.i32(out_$i120, in_$i39);
    goto corral_source_split_2185;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    out_$i120 := $add.i32(out_$i110, 1);
    call {:si_unique_call 377} {:cexpr "i"} boogie_si_record_i32(out_$i120);
    goto corral_source_split_2184;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p119, out_$i115);
    goto corral_source_split_2183;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref($add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i116, 16)), $mul.ref(0, 1));
    goto corral_source_split_2182;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    out_$i116 := $sext.i32.i64(out_$i110);
    goto corral_source_split_2181;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    out_$i115 := $mul.i32(in_$i38, out_$i110);
    goto corral_source_split_2180;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p114, in_$i38);
    goto corral_source_split_2179;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref($add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i111, 16)), $mul.ref(4, 1));
    goto corral_source_split_2178;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i111 := $sext.i32.i64(out_$i110);
    goto corral_source_split_2177;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb39:
    call out_$i111, out_$p114, out_$i115, out_$i116, out_$p119, out_$i120, out_$i121, out_$i110 := create_urbs_loop_$bb39(in_$i38, in_$i39, out_$p64, out_$i111, out_$p114, out_$i115, out_$i116, out_$p119, out_$i120, out_$i121, out_$i110);
    goto $bb39_last;

  $bb39_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2175;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    out_$i110 := 0;
    goto $bb39;

  $bb41:
    assume out_$i121 == 1;
    assume {:verifier.code 0} true;
    out_$i110 := out_$i120;
    assume false;
    return;

  $bb36:
    assume out_$i109 == 1;
    goto corral_source_split_2173;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    out_$i109 := $slt.i32(0, in_$i39);
    goto corral_source_split_2157;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p108, in_$i39);
    goto corral_source_split_2156;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2155;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p107, isoc_irq);
    goto corral_source_split_2154;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2153;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p106, out_$i105);
    goto corral_source_split_2152;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_2151;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    out_$i105 := $shl.i32(1, out_$i104);
    goto corral_source_split_2150;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    out_$i104 := $add.i32(out_$i103, $sub.i32(0, 1));
    goto corral_source_split_2149;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i8.i32(out_$i102);
    goto corral_source_split_2148;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i8($M.0, out_$p101);
    goto corral_source_split_2147;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_2146;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p99, 6);
    goto corral_source_split_2145;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_2144;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p98, out_$i97);
    goto corral_source_split_2143;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2142;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    out_$i97 := $or.i32(out_$i96, 128);
    goto corral_source_split_2141;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} out_$i96 := __create_pipe(out_$p91, out_$i95);
    call {:si_unique_call 374} {:cexpr "tmp"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_2140;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i8.i32(out_$i94);
    goto corral_source_split_2139;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i8($M.0, out_$p93);
    goto corral_source_split_2138;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2137;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.0, out_$p90);
    goto corral_source_split_2136;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_2135;

  $bb34:
    assume out_$i89 == 1;
    goto corral_source_split_2134;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i32(in_$i39, 0);
    goto corral_source_split_2132;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p88, in_$i40);
    goto corral_source_split_2131;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2130;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p87, in_$p0);
    goto corral_source_split_2129;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2128;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    goto corral_source_split_2127;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p85, out_$p84);
    goto corral_source_split_2126;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2125;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.0, out_$p83);
    goto corral_source_split_2124;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_2123;

  $bb32:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i64(out_$i80, 0);
    goto corral_source_split_2118;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    out_$i80 := $p2i.ref.i64(out_$p79);
    goto corral_source_split_2117;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.0, out_$p78);
    goto corral_source_split_2116;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2115;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p77, out_$p76);
    goto corral_source_split_2114;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2113;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} out_$p76 := usb_alloc_coherent(out_$p73, out_$i74, 208, out_$p75);
    goto corral_source_split_2112;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_2111;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i32.i64(in_$i40);
    goto corral_source_split_2110;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.0, out_$p72);
    goto corral_source_split_2109;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_2108;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p71, out_$p64);
    goto corral_source_split_2107;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2592, 1)), $mul.ref(out_$i69, 8));
    goto corral_source_split_2106;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i32.i64(out_$i63);
    goto corral_source_split_2105;

  $bb28:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i64(out_$i65, 0);
    goto corral_source_split_2098;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    out_$i65 := $p2i.ref.i64(out_$p64);
    goto corral_source_split_2097;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} out_$p64 := ldv_usb_alloc_urb_11(in_$i39, 208);
    goto corral_source_split_2096;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2171;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p131, 4);
    goto corral_source_split_2170;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_2169;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p130, out_$i129);
    goto corral_source_split_2168;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(out_$p64, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2167;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    out_$i129 := $or.i32(out_$i128, $sub.i32(0, 1073741696));
    goto corral_source_split_2166;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} out_$i128 := __create_pipe(out_$p123, out_$i127);
    call {:si_unique_call 376} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i128);
    goto corral_source_split_2165;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    out_$i127 := $zext.i8.i32(out_$i126);
    goto corral_source_split_2164;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i8($M.0, out_$p125);
    goto corral_source_split_2163;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2162;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.0, out_$p122);
    goto corral_source_split_2161;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2176, 1));
    goto corral_source_split_2160;

  $bb35:
    assume !(out_$i89 == 1);
    goto corral_source_split_2159;

  $bb45_dummy:
    call {:si_unique_call 1} out_$p64, out_$i65, out_$i66, out_$i69, out_$p71, out_$p72, out_$p73, out_$i74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p83, out_$p84, out_$p85, out_$p87, out_$p88, out_$i89, out_$p90, out_$p91, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i111, out_$p114, out_$i115, out_$i116, out_$p119, out_$i120, out_$i121, out_$i110, out_$p122, out_$p123, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i63 := create_urbs_loop_$bb25(in_$p0, in_$p1, in_$i37, in_$i38, in_$i39, in_$i40, out_$p64, out_$i65, out_$i66, out_$i69, out_$p71, out_$p72, out_$p73, out_$i74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p83, out_$p84, out_$p85, out_$p87, out_$p88, out_$i89, out_$p90, out_$p91, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i111, out_$p114, out_$i115, out_$i116, out_$p119, out_$i120, out_$i121, out_$i110, out_$p122, out_$p123, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i63);
    return;

  exit:
    return;
}



procedure create_urbs_loop_$bb25(in_$p0: ref, in_$p1: ref, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$i69: i64, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p87: ref, in_$p88: ref, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$p93: ref, in_$i94: i8, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$p98: ref, in_$p99: ref, in_$p101: ref, in_$i102: i8, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i1, in_$i111: i64, in_$p114: ref, in_$i115: i32, in_$i116: i64, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$i110: i32, in_$p122: ref, in_$p123: ref, in_$p125: ref, in_$i126: i8, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i1, in_$i63: i32) returns (out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$i69: i64, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p87: ref, out_$p88: ref, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$p93: ref, out_$i94: i8, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$p98: ref, out_$p99: ref, out_$p101: ref, out_$i102: i8, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i1, out_$i111: i64, out_$p114: ref, out_$i115: i32, out_$i116: i64, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$i110: i32, out_$p122: ref, out_$p123: ref, out_$p125: ref, out_$i126: i8, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i1, out_$i63: i32);
  modifies $M.0, $M.4;



implementation fill_frame_loop_$bb15(in_$p0: ref, in_$p1: ref, in_$p22: ref, in_$p23: ref, in_$i27: i64, in_$p30: ref, in_$i31: i32, in_$i32: i64, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p39: ref, in_$i41: i1, in_$p42: ref, in_$i43: i8, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$p55: ref, in_$i56: i32, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p63: ref, in_$i64: i32, in_$i65: i64, in_$p66: ref, in_$i40: i32, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i26: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32) returns (out_$i27: i64, out_$p30: ref, out_$i31: i32, out_$i32: i64, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p39: ref, out_$i41: i1, out_$p42: ref, out_$i43: i8, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$p55: ref, out_$i56: i32, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p63: ref, out_$i64: i32, out_$i65: i64, out_$p66: ref, out_$i40: i32, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i26: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32)
{

  entry:
    out_$i27, out_$p30, out_$i31, out_$i32, out_$p35, out_$i36, out_$i37, out_$p39, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p50, out_$p51, out_$i52, out_$p55, out_$i56, out_$p58, out_$p59, out_$i60, out_$p63, out_$i64, out_$i65, out_$p66, out_$i40, out_$i67, out_$i68, out_$i69, out_$i26, out_vslice_dummy_var_100, out_vslice_dummy_var_101 := in_$i27, in_$p30, in_$i31, in_$i32, in_$p35, in_$i36, in_$i37, in_$p39, in_$i41, in_$p42, in_$i43, in_$i44, in_$i45, in_$p46, in_$i47, in_$i48, in_$p50, in_$p51, in_$i52, in_$p55, in_$i56, in_$p58, in_$p59, in_$i60, in_$p63, in_$i64, in_$i65, in_$p66, in_$i40, in_$i67, in_$i68, in_$i69, in_$i26, in_vslice_dummy_var_100, in_vslice_dummy_var_101;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2343;

  $bb30:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i26 := out_$i67;
    goto $bb30_dummy;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    out_$i69 := $sgt.i32(out_$i68, out_$i67);
    goto corral_source_split_2361;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.0, in_$p23);
    goto corral_source_split_2360;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i40, 1);
    call {:si_unique_call 409} {:cexpr "i"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_2359;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2358;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i26;
    goto $bb19;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i26;
    goto $bb19;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i26;
    goto $bb19;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p39, 0);
    goto corral_source_split_2356;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(4346, 1));
    goto corral_source_split_2355;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} out_vslice_dummy_var_100 := printk.ref.i32.i32.i32(.str.42, out_$i26, out_$i31, out_$i36);
    goto corral_source_split_2354;

  $bb17:
    assume out_$i37 == 1;
    goto corral_source_split_2353;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_2351;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, out_$p35);
    call {:si_unique_call 407} {:cexpr "st"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_2350;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i32, 16)), $mul.ref(12, 1));
    goto corral_source_split_2349;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i26);
    goto corral_source_split_2348;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, out_$p30);
    call {:si_unique_call 406} {:cexpr "len"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_2347;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i27, 16)), $mul.ref(8, 1));
    goto corral_source_split_2346;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i26);
    goto corral_source_split_2345;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb24:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p46, 1);
    goto corral_source_split_2373;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(4347, 1));
    goto corral_source_split_2372;

  $bb23:
    assume out_$i45 == 1;
    goto corral_source_split_2371;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 0);
    goto corral_source_split_2369;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i8.i32(out_$i43);
    goto corral_source_split_2368;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i8($M.0, out_$p42);
    goto corral_source_split_2367;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(4347, 1));
    goto corral_source_split_2366;

  $bb21:
    assume out_$i41 == 1;
    goto corral_source_split_2365;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i31, 0);
    goto corral_source_split_2363;

  $bb18:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(out_$p59, $mul.ref(out_$i65, 1));
    call {:si_unique_call 411} devirtbounce.7(in_$p22, in_$p0, out_$p66, out_$i31);
    goto corral_source_split_2392;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i32.i64(out_$i64);
    goto corral_source_split_2391;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.0, out_$p63);
    goto corral_source_split_2390;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i60, 16)), $mul.ref(0, 1));
    goto corral_source_split_2389;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i26);
    goto corral_source_split_2388;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_2387;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2386;

  $bb28:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} out_vslice_dummy_var_101 := printk.ref.ref.i32.i32.i32(.str.43, out_$p51, out_$i26, out_$i56, out_$i31);
    goto corral_source_split_2384;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.0, out_$p55);
    goto corral_source_split_2383;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i52, 16)), $mul.ref(0, 1));
    goto corral_source_split_2382;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i32.i64(out_$i26);
    goto corral_source_split_2381;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_2380;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(1816, 1)), $mul.ref(104, 1));
    goto corral_source_split_2379;

  $bb27:
    assume out_$i48 == 1;
    goto corral_source_split_2378;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    out_$i48 := $sgt.i32(out_$i47, 4);
    goto corral_source_split_2376;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i47 := $M.1;
    goto corral_source_split_2375;

  $bb22:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb30_dummy:
    call {:si_unique_call 1} out_$i27, out_$p30, out_$i31, out_$i32, out_$p35, out_$i36, out_$i37, out_$p39, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p50, out_$p51, out_$i52, out_$p55, out_$i56, out_$p58, out_$p59, out_$i60, out_$p63, out_$i64, out_$i65, out_$p66, out_$i40, out_$i67, out_$i68, out_$i69, out_$i26, out_vslice_dummy_var_100, out_vslice_dummy_var_101 := fill_frame_loop_$bb15(in_$p0, in_$p1, in_$p22, in_$p23, out_$i27, out_$p30, out_$i31, out_$i32, out_$p35, out_$i36, out_$i37, out_$p39, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p50, out_$p51, out_$i52, out_$p55, out_$i56, out_$p58, out_$p59, out_$i60, out_$p63, out_$i64, out_$i65, out_$p66, out_$i40, out_$i67, out_$i68, out_$i69, out_$i26, out_vslice_dummy_var_100, out_vslice_dummy_var_101);
    return;

  exit:
    return;
}



procedure fill_frame_loop_$bb15(in_$p0: ref, in_$p1: ref, in_$p22: ref, in_$p23: ref, in_$i27: i64, in_$p30: ref, in_$i31: i32, in_$i32: i64, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p39: ref, in_$i41: i1, in_$p42: ref, in_$i43: i8, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$p55: ref, in_$i56: i32, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p63: ref, in_$i64: i32, in_$i65: i64, in_$p66: ref, in_$i40: i32, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i26: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32) returns (out_$i27: i64, out_$p30: ref, out_$i31: i32, out_$i32: i64, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p39: ref, out_$i41: i1, out_$p42: ref, out_$i43: i8, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$p55: ref, out_$i56: i32, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p63: ref, out_$i64: i32, out_$i65: i64, out_$p66: ref, out_$i40: i32, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i26: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32);
  modifies $M.0;



implementation frame_alloc_loop_$bb14(in_$p0: ref, in_$i2: i32, in_$i21: i32, in_$i23: i32, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p47: ref, in_$p49: ref, in_$p51: ref, in_$p53: ref, in_$p55: ref, in_$p57: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i64, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$i41: i32) returns (out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p47: ref, out_$p49: ref, out_$p51: ref, out_$p53: ref, out_$p55: ref, out_$p57: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i64, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$i41: i32)
{

  entry:
    out_$p42, out_$p43, out_$i44, out_$p47, out_$p49, out_$p51, out_$p53, out_$p55, out_$p57, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$p68, out_$p69, out_$i70, out_$i71, out_$i41 := in_$p42, in_$p43, in_$i44, in_$p47, in_$p49, in_$p51, in_$p53, in_$p55, in_$p57, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$p64, in_$p65, in_$i66, in_$p68, in_$p69, in_$i70, in_$i71, in_$i41;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2544;

  $bb16:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i41 := out_$i70;
    goto $bb16_dummy;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    out_$i71 := $ult.i32(out_$i70, in_$i23);
    goto corral_source_split_2576;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i41, 1);
    call {:si_unique_call 435} {:cexpr "i"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_2575;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p69, out_$i66);
    goto corral_source_split_2574;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    out_$p69 := $bitcast.ref.ref(out_$p68);
    goto corral_source_split_2573;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(out_$i44, 104)), $mul.ref(16, 1)), $mul.ref(64, 1));
    goto corral_source_split_2572;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    out_$i66 := $mul.i32(out_$i41, in_$i21);
    goto corral_source_split_2571;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p65, out_$p64);
    goto corral_source_split_2570;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p43, $mul.ref(out_$i44, 104)), $mul.ref(0, 1));
    goto corral_source_split_2569;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(out_$p61, $mul.ref(out_$i63, 1));
    goto corral_source_split_2568;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i32.i64(out_$i62);
    goto corral_source_split_2567;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    out_$i62 := $mul.i32(out_$i41, in_$i21);
    goto corral_source_split_2566;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_2565;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2632, 1));
    goto corral_source_split_2564;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p59, 0);
    goto corral_source_split_2563;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(out_$i44, 104)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_2562;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p57, in_$i2);
    goto corral_source_split_2561;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(out_$i44, 104)), $mul.ref(16, 1)), $mul.ref(60, 1));
    goto corral_source_split_2560;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p55, in_$i21);
    goto corral_source_split_2559;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(out_$i44, 104)), $mul.ref(16, 1)), $mul.ref(72, 1));
    goto corral_source_split_2558;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p53, 1);
    goto corral_source_split_2557;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(out_$i44, 104)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_2556;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p51, 0);
    goto corral_source_split_2555;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(out_$i44, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_2554;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p49, 1);
    goto corral_source_split_2553;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(out_$i44, 104)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_2552;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p47, out_$i41);
    goto corral_source_split_2551;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(out_$i44, 104)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2550;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    goto corral_source_split_2549;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i41);
    goto corral_source_split_2548;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p42);
    goto corral_source_split_2547;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2640, 1));
    goto corral_source_split_2546;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p42, out_$p43, out_$i44, out_$p47, out_$p49, out_$p51, out_$p53, out_$p55, out_$p57, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$p68, out_$p69, out_$i70, out_$i71, out_$i41 := frame_alloc_loop_$bb14(in_$p0, in_$i2, in_$i21, in_$i23, out_$p42, out_$p43, out_$i44, out_$p47, out_$p49, out_$p51, out_$p53, out_$p55, out_$p57, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$p68, out_$p69, out_$i70, out_$i71, out_$i41);
    return;

  exit:
    return;
}



procedure frame_alloc_loop_$bb14(in_$p0: ref, in_$i2: i32, in_$i21: i32, in_$i23: i32, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p47: ref, in_$p49: ref, in_$p51: ref, in_$p53: ref, in_$p55: ref, in_$p57: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i64, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$i41: i32) returns (out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p47: ref, out_$p49: ref, out_$p51: ref, out_$p53: ref, out_$p55: ref, out_$p57: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i64, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$i41: i32);
  modifies $M.0;



implementation vidioc_dqbuf_loop_$bb27(in_$p0: ref, in_$p3: ref, in_$p5: ref, in_$p46: ref, in_$p47: ref, in_$i53: i64, in_$i52: i64, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i58: i64, in_$i59: i1, in_$i60: i64, in_$i61: i32, in_$i62: i32, in_$i63: i1) returns (out_$i53: i64, out_$i52: i64, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i58: i64, out_$i59: i1, out_$i60: i64, out_$i61: i32, out_$i62: i32, out_$i63: i1)
{

  entry:
    out_$i53, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63 := in_$i53, in_$i52, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb38:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    out_$i52 := out_$i58;
    goto $bb38_dummy;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i58;
    assume true;
    goto $bb38;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i32(out_$i62, 0);
    goto corral_source_split_2740;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} out_$i62 := frame_ready(in_$p5, in_$p0, out_$i61);
    call {:si_unique_call 475} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_2739;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, in_$p47);
    goto corral_source_split_2738;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} prepare_to_wait(in_$p46, in_$p3, 1);
    goto corral_source_split_2737;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb34:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i58;
    assume true;
    goto $bb34;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i64(out_$i58, 0);
    goto corral_source_split_2733;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} out_$i58 := schedule_timeout(out_$i52);
    call {:si_unique_call 472} {:cexpr "__ret"} boogie_si_record_i64(out_$i58);
    goto corral_source_split_2732;

  $bb31:
    assume out_$i57 == 1;
    goto corral_source_split_2731;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, 0);
    goto corral_source_split_2729;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} out_$i56 := signal_pending(out_$p55);
    call {:si_unique_call 470} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_2728;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} out_$p55 := get_current();
    goto corral_source_split_2727;

  $bb38_dummy:
    call {:si_unique_call 1} out_$i53, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63 := vidioc_dqbuf_loop_$bb27(in_$p0, in_$p3, in_$p5, in_$p46, in_$p47, out_$i53, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63);
    return;

  exit:
    return;
}



procedure vidioc_dqbuf_loop_$bb27(in_$p0: ref, in_$p3: ref, in_$p5: ref, in_$p46: ref, in_$p47: ref, in_$i53: i64, in_$i52: i64, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i58: i64, in_$i59: i1, in_$i60: i64, in_$i61: i32, in_$i62: i32, in_$i63: i1) returns (out_$i53: i64, out_$i52: i64, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i58: i64, out_$i59: i1, out_$i60: i64, out_$i61: i32, out_$i62: i32, out_$i63: i1);



implementation vidioc_dqbuf_loop_$bb11(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p16: ref, in_$i22: i32, in_$i21: i32, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i30: i64, in_$p31: ref, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i53: i64, in_$i51: i64, in_$i52: i64, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i58: i64, in_$i59: i1, in_$i60: i64, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$i54: i64, in_$i64: i1, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i69: i64, in_$i70: i64, in_$p71: ref, in_$i72: i64, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i76: i1, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i32, in_$i82: i1) returns (out_$i22: i32, out_$i21: i32, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i30: i64, out_$p31: ref, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i53: i64, out_$i51: i64, out_$i52: i64, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i58: i64, out_$i59: i1, out_$i60: i64, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$i54: i64, out_$i64: i1, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i69: i64, out_$i70: i64, out_$p71: ref, out_$i72: i64, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i76: i1, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i32, out_$i82: i1)
{

  entry:
    out_$i22, out_$i21, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p38, out_$p39, out_$p40, out_$p42, out_$p43, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i53, out_$i51, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i54, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82 := in_$i22, in_$i21, in_$i24, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$p31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p38, in_$p39, in_$p40, in_$p42, in_$p43, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$i50, in_$i53, in_$i51, in_$i52, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i54, in_$i64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$p71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb55:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    out_$i21 := out_$i81;
    goto $bb55_dummy;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i81;
    assume true;
    goto $bb55;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(out_$i81, 0);
    goto corral_source_split_2774;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} out_$i81 := frame_ready_nolock(in_$p5, in_$p0, out_$i80);
    call {:si_unique_call 483} {:cexpr "ret"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_2773;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.0, in_$p16);
    goto corral_source_split_2772;

  $bb53:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_2768;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} out_$i78 := mutex_lock_interruptible_nested(out_$p77, 0);
    call {:si_unique_call 481} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_2767;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p5, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_2766;

  $bb50:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i73, 0);
    goto corral_source_split_2762;

  $bb47:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    out_$i75 := out_$i73;
    assume true;
    goto $bb47;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    out_$i74 := $slt.i32(out_$i73, 0);
    goto corral_source_split_2758;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    out_$i73 := $trunc.i64.i32(out_$i72);
    call {:si_unique_call 479} {:cexpr "ret"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_2757;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_2756;

  $bb23:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := out_$i30;
    goto $bb45;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i70;
    goto $bb45;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} finish_wait(out_$p71, in_$p3);
    goto corral_source_split_2754;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p5, $mul.ref(0, 4808)), $mul.ref(4368, 1));
    goto corral_source_split_2753;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_2752;

  $bb40:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    out_$i70 := out_$i54;
    goto $bb44;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    out_$i70 := out_$i69;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_2750;

  $bb42:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    out_$i69 := out_$i54;
    goto $bb43;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    out_$i69 := 1;
    goto $bb43;

  $bb41:
    assume out_$i68 == 1;
    goto corral_source_split_2748;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(out_$i67, 0);
    goto corral_source_split_2746;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} out_$i67 := frame_ready(in_$p5, in_$p0, out_$i66);
    call {:si_unique_call 477} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_2745;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, out_$p65);
    goto corral_source_split_2744;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p2, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_2743;

  $bb39:
    assume out_$i64 == 1;
    goto corral_source_split_2742;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i64(out_$i54, 0);
    goto corral_source_split_2725;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_2724;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i54 := $sub.i64(0, 512);
    goto $bb29;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i51;
    goto $bb29;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i60;
    goto $bb29;

  $bb33:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2735;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i58;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i64(out_$i58, 0);
    goto corral_source_split_2733;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} out_$i58 := schedule_timeout(out_$i52);
    call {:si_unique_call 472} {:cexpr "__ret"} boogie_si_record_i64(out_$i58);
    goto corral_source_split_2732;

  $bb31:
    assume out_$i57 == 1;
    goto corral_source_split_2731;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, 0);
    goto corral_source_split_2729;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} out_$i56 := signal_pending(out_$p55);
    call {:si_unique_call 470} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_2728;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} out_$p55 := get_current();
    goto corral_source_split_2727;

  $bb27:
    call out_$i53, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63 := vidioc_dqbuf_loop_$bb27(in_$p0, in_$p3, in_$p5, out_$p46, out_$p47, out_$i53, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63);
    goto $bb27_last;

  $bb27_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i30;
    goto $bb27;

  $bb38:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    out_$i52 := out_$i58;
    assume false;
    return;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i58;
    assume true;
    goto $bb28, $bb38;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i32(out_$i62, 0);
    goto corral_source_split_2740;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} out_$i62 := frame_ready(in_$p5, in_$p0, out_$i61);
    call {:si_unique_call 475} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_2739;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p47);
    goto corral_source_split_2738;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} prepare_to_wait(out_$p46, in_$p3, 1);
    goto corral_source_split_2737;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb34:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb26:
    assume !(out_$i50 == 1);
    goto corral_source_split_2720;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i30;
    assume true;
    goto $bb24, $bb26;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_2716;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} out_$i49 := frame_ready(in_$p5, in_$p0, out_$i48);
    call {:si_unique_call 467} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_2715;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    goto corral_source_split_2714;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p2, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_2713;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} prepare_to_wait(out_$p46, in_$p3, 1);
    goto corral_source_split_2712;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p5, $mul.ref(0, 4808)), $mul.ref(4368, 1));
    goto corral_source_split_2711;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, out_$p45, out_$p43);
    goto corral_source_split_2710;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_2709;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2708;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, out_$p42, out_$p40);
    goto corral_source_split_2707;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2706;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2705;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, out_$p39, autoremove_wake_function);
    goto corral_source_split_2704;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2703;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, out_$p38, out_$p35);
    goto corral_source_split_2702;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2701;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    goto corral_source_split_2700;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, out_$p36, 0);
    goto corral_source_split_2699;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2698;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} out_$p35 := get_current();
    goto corral_source_split_2697;

  $bb22:
    assume out_$i34 == 1;
    goto corral_source_split_2696;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 0);
    goto corral_source_split_2694;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} out_$i33 := frame_ready(in_$p5, in_$p0, out_$i32);
    call {:si_unique_call 463} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_2693;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.0, out_$p31);
    goto corral_source_split_2692;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p2, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_2691;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} out_$i30 := msecs_to_jiffies(3000);
    call {:si_unique_call 461} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_2690;

  $bb20:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_2686;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    out_$i28 := $and.i32(out_$i27, 2048);
    goto corral_source_split_2685;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_2684;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 360)), $mul.ref(136, 1));
    goto corral_source_split_2683;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} mutex_unlock(out_$p25);
    goto corral_source_split_2682;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p5, $mul.ref(0, 4808)), $mul.ref(4624, 1));
    goto corral_source_split_2681;

  $bb16:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i24 := $sgt.i32(out_$i21, 0);
    goto corral_source_split_2654;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2718;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i53;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    assume out_$i50 == 1;
    goto $bb25;

  $bb28:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2722;

  $bb32:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb55_dummy:
    call {:si_unique_call 1} out_$i22, out_$i21, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p38, out_$p39, out_$p40, out_$p42, out_$p43, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i53, out_$i51, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i54, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82 := vidioc_dqbuf_loop_$bb11(in_$p0, in_$p2, in_$p3, in_$p5, in_$p16, out_$i22, out_$i21, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p38, out_$p39, out_$p40, out_$p42, out_$p43, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i53, out_$i51, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i54, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82);
    return;

  exit:
    return;
}



procedure vidioc_dqbuf_loop_$bb11(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p16: ref, in_$i22: i32, in_$i21: i32, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i30: i64, in_$p31: ref, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i53: i64, in_$i51: i64, in_$i52: i64, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i58: i64, in_$i59: i1, in_$i60: i64, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$i54: i64, in_$i64: i1, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i69: i64, in_$i70: i64, in_$p71: ref, in_$i72: i64, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i76: i1, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i32, in_$i82: i1) returns (out_$i22: i32, out_$i21: i32, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i30: i64, out_$p31: ref, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i53: i64, out_$i51: i64, out_$i52: i64, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i58: i64, out_$i59: i1, out_$i60: i64, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$i54: i64, out_$i64: i1, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i69: i64, out_$i70: i64, out_$p71: ref, out_$i72: i64, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i76: i1, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i32, out_$i82: i1);
  modifies $M.15, $M.14, $M.13, $M.12, $M.11;



implementation vidioc_enum_fmt_vid_cap_loop_$bb9(in_$p3: ref, in_$p28: ref, in_$i33: i32, in_$i32: i32, in_$i34: i32, in_$i35: i64, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1) returns (out_$i33: i32, out_$i32: i32, out_$i34: i32, out_$i35: i64, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1)
{

  entry:
    out_$i33, out_$i32, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39 := in_$i33, in_$i32, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i39;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := out_$i34;
    goto $bb13_dummy;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i34;
    assume true;
    goto $bb13;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i37, out_$i38);
    goto corral_source_split_3038;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.16, in_$p28);
    goto corral_source_split_3037;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.16, out_$p36);
    goto corral_source_split_3036;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p3, $mul.ref(0, 32)), $mul.ref(out_$i35, 4));
    goto corral_source_split_3035;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i34);
    goto corral_source_split_3034;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i32, 1);
    call {:si_unique_call 541} {:cexpr "j"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_3033;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i33, out_$i32, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39 := vidioc_enum_fmt_vid_cap_loop_$bb9(in_$p3, in_$p28, out_$i33, out_$i32, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39);
    return;

  exit:
    return;
}



procedure vidioc_enum_fmt_vid_cap_loop_$bb9(in_$p3: ref, in_$p28: ref, in_$i33: i32, in_$i32: i32, in_$i34: i32, in_$i35: i64, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1) returns (out_$i33: i32, out_$i32: i32, out_$i34: i32, out_$i35: i64, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1);



implementation vidioc_enum_fmt_vid_cap_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$i22: i32, in_$i23: i64, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i33: i32, in_$i31: i32, in_$i32: i32, in_$i34: i32, in_$i35: i64, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i40: i1, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i32, in_$i48: i32, in_$i49: i1, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i14: i32, in_$i15: i32, in_$i54: i32, in_$i55: i32) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$i22: i32, out_$i23: i64, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i33: i32, out_$i31: i32, out_$i32: i32, out_$i34: i32, out_$i35: i64, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i40: i1, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i32, out_$i48: i32, out_$i49: i1, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i14: i32, out_$i15: i32, out_$i54: i32, out_$i55: i32)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i33, out_$i31, out_$i32, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i48, out_$i49, out_$i51, out_$i52, out_$i53, out_$i14, out_$i15, out_$i54, out_$i55 := in_$p17, in_$p18, in_$i19, in_$p21, in_$i22, in_$i23, in_$p24, in_$p25, in_$i26, in_$i27, in_$p28, in_$i29, in_$i30, in_$i33, in_$i31, in_$i32, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i48, in_$i49, in_$i51, in_$i52, in_$i53, in_$i14, in_$i15, in_$i54, in_$i55;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3007;

  $bb25:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i14, out_$i15 := out_$i52, out_$i51;
    goto $bb25_dummy;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    out_$i54, out_$i55 := out_$i51, out_$i52;
    assume true;
    goto $bb25;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    out_$i53 := $sge.i32(out_$i52, 0);
    goto corral_source_split_3059;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    out_$i52 := $sub.i32(out_$i14, 1);
    call {:si_unique_call 543} {:cexpr "i"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_3058;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3057;

  $bb15:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i51 := out_$i15;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i48;
    goto $bb24;

  $bb21:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    out_$i49 := $ugt.i32(out_$i48, 7);
    goto corral_source_split_3051;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i15, 1);
    call {:si_unique_call 542} {:cexpr "index"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_3050;

  $bb17:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    out_$i44, out_$i45 := out_$i15, out_$i14;
    assume true;
    goto $bb17;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, out_$i15);
    goto corral_source_split_3043;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, out_$p41);
    goto corral_source_split_3042;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3041;

  $bb14:
    assume out_$i40 == 1;
    goto corral_source_split_3040;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i31, out_$i15);
    goto corral_source_split_3031;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3025;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i33;
    goto $bb7;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i30 == 1;
    goto $bb7;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    out_$i31 := 0;
    assume true;
    goto $bb6, $bb8;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i26, out_$i29);
    goto corral_source_split_3023;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.16, out_$p28);
    goto corral_source_split_3022;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p3, $mul.ref(0, 32)), $mul.ref(out_$i27, 4));
    goto corral_source_split_3021;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i15);
    goto corral_source_split_3020;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.16, out_$p25);
    goto corral_source_split_3019;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p3, $mul.ref(0, 32)), $mul.ref(0, 4));
    goto corral_source_split_3018;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, out_$p24, out_$i22);
    goto corral_source_split_3017;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p3, $mul.ref(0, 32)), $mul.ref(out_$i23, 4));
    goto corral_source_split_3016;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i15);
    goto corral_source_split_3015;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, out_$p21);
    goto corral_source_split_3014;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 32)), $mul.ref(8, 1));
    goto corral_source_split_3013;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    goto corral_source_split_3012;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i14);
    goto corral_source_split_3011;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_3010;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3009;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3029;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i34;
    assume true;
    goto $bb10, $bb13;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i37, out_$i38);
    goto corral_source_split_3038;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.16, out_$p28);
    goto corral_source_split_3037;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.16, out_$p36);
    goto corral_source_split_3036;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p3, $mul.ref(0, 32)), $mul.ref(out_$i35, 4));
    goto corral_source_split_3035;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i34);
    goto corral_source_split_3034;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i32, 1);
    call {:si_unique_call 541} {:cexpr "j"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_3033;

  $bb9:
    call out_$i33, out_$i32, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39 := vidioc_enum_fmt_vid_cap_loop_$bb9(in_$p3, out_$p28, out_$i33, out_$i32, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    out_$i32 := 0;
    goto $bb9;

  $bb13:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := out_$i34;
    assume false;
    return;

  $bb8:
    assume !(out_$i30 == 1);
    goto corral_source_split_3027;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i33, out_$i31, out_$i32, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i48, out_$i49, out_$i51, out_$i52, out_$i53, out_$i14, out_$i15, out_$i54, out_$i55 := vidioc_enum_fmt_vid_cap_loop_$bb4(in_$p2, in_$p3, in_$p5, out_$p17, out_$p18, out_$i19, out_$p21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i33, out_$i31, out_$i32, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i48, out_$i49, out_$i51, out_$i52, out_$i53, out_$i14, out_$i15, out_$i54, out_$i55);
    return;

  exit:
    return;
}



procedure vidioc_enum_fmt_vid_cap_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$i22: i32, in_$i23: i64, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i33: i32, in_$i31: i32, in_$i32: i32, in_$i34: i32, in_$i35: i64, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i40: i1, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i32, in_$i48: i32, in_$i49: i1, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i14: i32, in_$i15: i32, in_$i54: i32, in_$i55: i32) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$i22: i32, out_$i23: i64, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i33: i32, out_$i31: i32, out_$i32: i32, out_$i34: i32, out_$i35: i64, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i40: i1, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i32, out_$i48: i32, out_$i49: i1, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i14: i32, out_$i15: i32, out_$i54: i32, out_$i55: i32);
  modifies $M.16;



implementation vidioc_streamoff_loop_$bb18(in_$p4: ref, in_$p21: ref, in_$i26: i64, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i64, in_$p37: ref, in_$i38: i32, in_$i39: i8, in_$i40: i32, in_$i41: i1, in_$i25: i32) returns (out_$i26: i64, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i64, out_$p37: ref, out_$i38: i32, out_$i39: i8, out_$i40: i32, out_$i41: i1, out_$i25: i32)
{

  entry:
    out_$i26, out_$p30, out_$i31, out_$i32, out_$i33, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i25 := in_$i26, in_$p30, in_$i31, in_$i32, in_$i33, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i25;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3302;

  $bb20:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$i25 := out_$i38;
    goto $bb20_dummy;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    out_$i41 := $sgt.i32(out_$i40, out_$i38);
    goto corral_source_split_3314;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i8.i32(out_$i39);
    goto corral_source_split_3313;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.0, in_$p21);
    goto corral_source_split_3312;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i25, 1);
    call {:si_unique_call 566} {:cexpr "i"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_3311;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p37, out_$i32);
    goto corral_source_split_3310;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 4808)), $mul.ref(2640, 1)), $mul.ref(out_$i33, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_3309;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i25);
    goto corral_source_split_3308;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    out_$i32 := $and.i32(out_$i31, $sub.i32(0, 7));
    goto corral_source_split_3307;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, out_$p30);
    goto corral_source_split_3306;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 4808)), $mul.ref(2640, 1)), $mul.ref(out_$i26, 104)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_3305;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i25);
    goto corral_source_split_3304;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i26, out_$p30, out_$i31, out_$i32, out_$i33, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i25 := vidioc_streamoff_loop_$bb18(in_$p4, in_$p21, out_$i26, out_$p30, out_$i31, out_$i32, out_$i33, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i25);
    return;

  exit:
    return;
}



procedure vidioc_streamoff_loop_$bb18(in_$p4: ref, in_$p21: ref, in_$i26: i64, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i64, in_$p37: ref, in_$i38: i32, in_$i39: i8, in_$i40: i32, in_$i41: i1, in_$i25: i32) returns (out_$i26: i64, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i64, out_$p37: ref, out_$i38: i32, out_$i39: i8, out_$i40: i32, out_$i41: i1, out_$i25: i32);
  modifies $M.0;



implementation vidioc_enum_framesizes_loop_$bb4(in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$p12: ref, in_$i13: i32, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i49: i32, in_$i22: i32, in_$i50: i32, in_$i51: i8, in_$i52: i32, in_$i53: i1, in_$i10: i32, in_$i11: i32) returns (out_$p12: ref, out_$i13: i32, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i49: i32, out_$i22: i32, out_$i50: i32, out_$i51: i8, out_$i52: i32, out_$i53: i1, out_$i10: i32, out_$i11: i32)
{

  entry:
    out_$p12, out_$i13, out_$p15, out_$p16, out_$i17, out_$p19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i49, out_$i22, out_$i50, out_$i51, out_$i52, out_$i53, out_$i10, out_$i11 := in_$p12, in_$i13, in_$p15, in_$p16, in_$i17, in_$p19, in_$i20, in_$i21, in_$p23, in_$i24, in_$i25, in_$i26, in_$i49, in_$i22, in_$i50, in_$i51, in_$i52, in_$i53, in_$i10, in_$i11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3508;

  $bb14:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i10, out_$i11 := out_$i22, out_$i50;
    goto $bb14_dummy;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    out_$i53 := $sgt.i32(out_$i52, out_$i50);
    goto corral_source_split_3526;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i8.i32(out_$i51);
    goto corral_source_split_3525;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i8($M.0, in_$p6);
    goto corral_source_split_3524;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i11, 1);
    call {:si_unique_call 593} {:cexpr "i"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_3523;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3522;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i49;
    goto $bb8;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i10;
    goto $bb8;

  $bb6:
    assume out_$i21 == 1;
    goto corral_source_split_3520;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i13, out_$i20);
    goto corral_source_split_3518;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_3517;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 32)), $mul.ref(8, 1));
    goto corral_source_split_3516;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    goto corral_source_split_3515;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i11);
    goto corral_source_split_3514;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_3513;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3512;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, out_$p12);
    goto corral_source_split_3511;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p2, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_3510;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i10, 1);
    call {:si_unique_call 594} {:cexpr "index"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_3558;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i11;
    assume true;
    goto $bb11;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, out_$i10);
    goto corral_source_split_3530;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, out_$p23);
    goto corral_source_split_3529;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_3528;

  $bb7:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p12, out_$i13, out_$p15, out_$p16, out_$i17, out_$p19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i49, out_$i22, out_$i50, out_$i51, out_$i52, out_$i53, out_$i10, out_$i11 := vidioc_enum_framesizes_loop_$bb4(in_$p2, in_$p4, in_$p6, out_$p12, out_$i13, out_$p15, out_$p16, out_$i17, out_$p19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i49, out_$i22, out_$i50, out_$i51, out_$i52, out_$i53, out_$i10, out_$i11);
    return;

  exit:
    return;
}



procedure vidioc_enum_framesizes_loop_$bb4(in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$p12: ref, in_$i13: i32, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i49: i32, in_$i22: i32, in_$i50: i32, in_$i51: i8, in_$i52: i32, in_$i53: i1, in_$i10: i32, in_$i11: i32) returns (out_$p12: ref, out_$i13: i32, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i49: i32, out_$i22: i32, out_$i50: i32, out_$i51: i8, out_$i52: i32, out_$i53: i1, out_$i10: i32, out_$i11: i32);



implementation vidioc_enum_frameintervals_loop_$bb14(in_$p2: ref, in_$p35: ref, in_$i37: i64, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i65: i32, in_$p66: ref, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$i42: i32) returns (out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i65: i32, out_$p66: ref, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$i42: i32)
{

  entry:
    out_$p43, out_$i44, out_$i45, out_$i46, out_$i65, out_$p66, out_$p68, out_$i69, out_$i70, out_$i42 := in_$p43, in_$i44, in_$i45, in_$i46, in_$i65, in_$p66, in_$p68, in_$i69, in_$i70, in_$i42;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3608;

  $bb19:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := out_$i65;
    goto $bb19_dummy;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    out_$i70 := $ugt.i32(out_$i69, out_$i65);
    goto corral_source_split_3641;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i32($M.0, out_$p68);
    goto corral_source_split_3640;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p66, $mul.ref(in_$i37, 16)), $mul.ref(8, 1));
    goto corral_source_split_3639;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    goto corral_source_split_3638;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, in_$p35);
    goto corral_source_split_3637;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i42, 1);
    call {:si_unique_call 598} {:cexpr "i"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_3636;

  $bb17:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i42;
    assume true;
    goto $bb17;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, out_$i42);
    goto corral_source_split_3612;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, out_$p43);
    goto corral_source_split_3611;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p2, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_3610;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p43, out_$i44, out_$i45, out_$i46, out_$i65, out_$p66, out_$p68, out_$i69, out_$i70, out_$i42 := vidioc_enum_frameintervals_loop_$bb14(in_$p2, in_$p35, in_$i37, out_$p43, out_$i44, out_$i45, out_$i46, out_$i65, out_$p66, out_$p68, out_$i69, out_$i70, out_$i42);
    return;

  exit:
    return;
}



procedure vidioc_enum_frameintervals_loop_$bb14(in_$p2: ref, in_$p35: ref, in_$i37: i64, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i65: i32, in_$p66: ref, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$i42: i32) returns (out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i65: i32, out_$p66: ref, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$i42: i32);



implementation wxh_to_mode_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i29: i32, in_$i30: i1, in_$i10: i32, in_$i31: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i29: i32, out_$i30: i1, out_$i10: i32, out_$i31: i32)
{

  entry:
    out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p20, out_$p21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$i29, out_$i30, out_$i10, out_$i31 := in_$p12, in_$p13, in_$i14, in_$p16, in_$i17, in_$i18, in_$p20, in_$p21, in_$i22, in_$p24, in_$i25, in_$i26, in_$i27, in_$i29, in_$i30, in_$i10, in_$i31;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3660;

  $bb13:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i29;
    goto $bb13_dummy;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i29;
    assume true;
    goto $bb13;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    out_$i30 := $sgt.i32(out_$i29, 0);
    goto corral_source_split_3684;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i29 := $sub.i32(out_$i10, 1);
    call {:si_unique_call 607} {:cexpr "i"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_3683;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i26 == 1);
    goto $bb8;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i10;
    assume true;
    goto $bb10;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    out_$i26 := $uge.i32(in_$i2, out_$i25);
    goto corral_source_split_3677;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, out_$p24);
    goto corral_source_split_3676;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p21, $mul.ref(out_$i22, 32)), $mul.ref(4, 1));
    goto corral_source_split_3675;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    goto corral_source_split_3674;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i10);
    goto corral_source_split_3673;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_3672;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3671;

  $bb6:
    assume out_$i18 == 1;
    goto corral_source_split_3670;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    out_$i18 := $uge.i32(in_$i1, out_$i17);
    goto corral_source_split_3668;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, out_$p16);
    goto corral_source_split_3667;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p13, $mul.ref(out_$i14, 32)), $mul.ref(0, 1));
    goto corral_source_split_3666;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    goto corral_source_split_3665;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i10);
    goto corral_source_split_3664;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_3663;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3662;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p20, out_$p21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$i29, out_$i30, out_$i10, out_$i31 := wxh_to_mode_loop_$bb4(in_$p0, in_$i1, in_$i2, out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p20, out_$p21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$i29, out_$i30, out_$i10, out_$i31);
    return;

  exit:
    return;
}



procedure wxh_to_mode_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i29: i32, in_$i30: i1, in_$i10: i32, in_$i31: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i29: i32, out_$i30: i1, out_$i10: i32, out_$i31: i32);



implementation gspca_get_mode_loop_$bb1(in_$p0: ref, in_$i2: i32, in_$i5: i32, in_$i6: i1, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i17: i32, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i1, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i3: i32, in_$i4: i32, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$i37: i1) returns (out_$i5: i32, out_$i6: i1, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i17: i32, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i1, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i3: i32, out_$i4: i32, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$i37: i1)
{

  entry:
    out_$i5, out_$i6, out_$p8, out_$p9, out_$i10, out_$p12, out_$i13, out_$i14, out_$i15, out_$i17, out_$p19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$i3, out_$i4, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37 := in_$i5, in_$i6, in_$p8, in_$p9, in_$i10, in_$p12, in_$i13, in_$i14, in_$i15, in_$i17, in_$p19, in_$i20, in_$i21, in_$i22, in_$p24, in_$p25, in_$i26, in_$p28, in_$i29, in_$i30, in_$i31, in_$i3, in_$i4, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3749;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i3, out_$i4 := out_$i17, out_$i5;
    goto $bb15_dummy;

  $bb11:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i17;
    assume true;
    goto $bb13;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, in_$i2);
    goto corral_source_split_3784;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, out_$p28);
    goto corral_source_split_3783;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 32)), $mul.ref(8, 1));
    goto corral_source_split_3782;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    goto corral_source_split_3781;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i17);
    goto corral_source_split_3780;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_3779;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3778;

  $bb10:
    assume out_$i22 == 1;
    goto corral_source_split_3777;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(out_$i17, out_$i21);
    goto corral_source_split_3775;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i20);
    goto corral_source_split_3774;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i8($M.0, out_$p19);
    goto corral_source_split_3773;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(24, 1));
    goto corral_source_split_3772;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i3, 1);
    call {:si_unique_call 626} {:cexpr "modeU"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_3771;

  $bb4:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    out_$i15 := out_$i5;
    assume true;
    goto $bb6;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, in_$i2);
    goto corral_source_split_3765;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, out_$p12);
    goto corral_source_split_3764;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 32)), $mul.ref(8, 1));
    goto corral_source_split_3763;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    goto corral_source_split_3762;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i5);
    goto corral_source_split_3761;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_3760;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3759;

  $bb3:
    assume out_$i6 == 1;
    goto corral_source_split_3758;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    out_$i6 := $sge.i32(out_$i5, 0);
    goto corral_source_split_3756;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i5 := $sub.i32(out_$i4, 1);
    call {:si_unique_call 625} {:cexpr "modeD"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_3755;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb19:
    assume {:verifier.code 0} true;
    assume out_$i37 == 1;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i36 == 1;
    goto $bb17;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    out_$i36 := $sgt.i32(out_$i35, out_$i3);
    goto corral_source_split_3753;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    goto corral_source_split_3752;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.0, out_$p33);
    goto corral_source_split_3751;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4808)), $mul.ref(2264, 1)), $mul.ref(24, 1));
    goto corral_source_split_3750;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    out_$i37 := $sge.i32(out_$i4, 0);
    goto corral_source_split_3789;

  $bb18:
    assume !(out_$i36 == 1);
    goto corral_source_split_3788;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i5, out_$i6, out_$p8, out_$p9, out_$i10, out_$p12, out_$i13, out_$i14, out_$i15, out_$i17, out_$p19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$i3, out_$i4, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37 := gspca_get_mode_loop_$bb1(in_$p0, in_$i2, out_$i5, out_$i6, out_$p8, out_$p9, out_$i10, out_$p12, out_$i13, out_$i14, out_$i15, out_$i17, out_$p19, out_$i20, out_$i21, out_$i22, out_$p24, out_$p25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$i3, out_$i4, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37);
    return;

  exit:
    return;
}



procedure gspca_get_mode_loop_$bb1(in_$p0: ref, in_$i2: i32, in_$i5: i32, in_$i6: i1, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i17: i32, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i1, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i3: i32, in_$i4: i32, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$i37: i1) returns (out_$i5: i32, out_$i6: i1, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i17: i32, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i1, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i3: i32, out_$i4: i32, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$i37: i1);



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i4: i64, in_$p6: ref, in_$p8: ref, in_$p10: ref, in_$i11: i64, in_$i12: i32, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p35: ref, in_$p37: ref, in_$p39: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p51: ref, in_$p52: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p60: ref, in_$p61: ref, in_$i64: i32, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i32, in_$i72: i1, in_$i73: i32, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$i86: i1, in_$i87: i32, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$i101: i1, in_$i102: i32, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i1, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i139: i32, in_$i140: i32, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$i156: i32, in_$i157: i32, in_$i158: i1, in_$i159: i32, in_$i160: i32, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$i165: i32, in_$i166: i1, in_$p167: ref, in_$i169: i32, in_$i170: i1, in_$i171: i32, in_$i172: i1, in_$i173: i1, in_$i174: i1, in_$i175: i1, in_$i176: i1, in_$i177: i1, in_$i178: i1, in_$i179: i1, in_$i180: i1, in_$i181: i1, in_$i182: i1, in_$i183: i1, in_$i184: i1, in_$i185: i1, in_$i186: i1, in_$i187: i1, in_$i188: i1, in_$i189: i1, in_$i190: i1, in_$i191: i1, in_$i192: i1, in_$i193: i1, in_$i194: i1, in_$i195: i1, in_$i196: i1, in_$i197: i1, in_$i198: i32, in_$i199: i1, in_$p200: ref, in_$i202: i32, in_$i203: i1, in_$p204: ref, in_$p205: ref, in_$i207: i32, in_$i208: i1, in_$p209: ref, in_$p210: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$p215: ref, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$p220: ref, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$i225: i32, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$i231: i32, in_$i232: i1, in_$p233: ref, in_$p234: ref, in_$i236: i32, in_$i237: i1, in_$p238: ref, in_$i240: i32, in_$i241: i1, in_$p242: ref, in_$p243: ref, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$i249: i32, in_$i250: i1, in_$p251: ref, in_$p252: ref, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$i258: i32, in_$i259: i1, in_$p260: ref, in_$i262: i32, in_$i263: i1, in_$p264: ref, in_$i266: i32, in_$i267: i1, in_$p268: ref, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$i274: i32, in_$i275: i1, in_$p276: ref, in_$i278: i32, in_$i279: i1, in_$p280: ref, in_$p281: ref, in_$i283: i32, in_$i284: i1, in_$p285: ref, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$p290: ref, in_$i292: i32, in_$i293: i1, in_$p294: ref, in_$p295: ref, in_$i297: i32, in_$i298: i1, in_$p299: ref, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$i308: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i64, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i64, in_vslice_dummy_var_122: i64, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i32, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i32, in_vslice_dummy_var_131: i32, in_vslice_dummy_var_132: i32, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i32, in_vslice_dummy_var_142: i32, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i32, in_vslice_dummy_var_145: i32, in_vslice_dummy_var_146: i32, in_vslice_dummy_var_147: i32) returns (out_$i64: i32, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i32, out_$i72: i1, out_$i73: i32, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$i86: i1, out_$i87: i32, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i98: i32, out_$i99: i32, out_$i100: i32, out_$i101: i1, out_$i102: i32, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i1, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i139: i32, out_$i140: i32, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$i156: i32, out_$i157: i32, out_$i158: i1, out_$i159: i32, out_$i160: i32, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$i165: i32, out_$i166: i1, out_$p167: ref, out_$i169: i32, out_$i170: i1, out_$i171: i32, out_$i172: i1, out_$i173: i1, out_$i174: i1, out_$i175: i1, out_$i176: i1, out_$i177: i1, out_$i178: i1, out_$i179: i1, out_$i180: i1, out_$i181: i1, out_$i182: i1, out_$i183: i1, out_$i184: i1, out_$i185: i1, out_$i186: i1, out_$i187: i1, out_$i188: i1, out_$i189: i1, out_$i190: i1, out_$i191: i1, out_$i192: i1, out_$i193: i1, out_$i194: i1, out_$i195: i1, out_$i196: i1, out_$i197: i1, out_$i198: i32, out_$i199: i1, out_$p200: ref, out_$i202: i32, out_$i203: i1, out_$p204: ref, out_$p205: ref, out_$i207: i32, out_$i208: i1, out_$p209: ref, out_$p210: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$p215: ref, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$p220: ref, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$i225: i32, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$i231: i32, out_$i232: i1, out_$p233: ref, out_$p234: ref, out_$i236: i32, out_$i237: i1, out_$p238: ref, out_$i240: i32, out_$i241: i1, out_$p242: ref, out_$p243: ref, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$i249: i32, out_$i250: i1, out_$p251: ref, out_$p252: ref, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$i258: i32, out_$i259: i1, out_$p260: ref, out_$i262: i32, out_$i263: i1, out_$p264: ref, out_$i266: i32, out_$i267: i1, out_$p268: ref, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$i274: i32, out_$i275: i1, out_$p276: ref, out_$i278: i32, out_$i279: i1, out_$p280: ref, out_$p281: ref, out_$i283: i32, out_$i284: i1, out_$p285: ref, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$p290: ref, out_$i292: i32, out_$i293: i1, out_$p294: ref, out_$p295: ref, out_$i297: i32, out_$i298: i1, out_$p299: ref, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$i308: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i64, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i64, out_vslice_dummy_var_122: i64, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i32, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i32, out_vslice_dummy_var_131: i32, out_vslice_dummy_var_132: i32, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i32, out_vslice_dummy_var_142: i32, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i32, out_vslice_dummy_var_145: i32, out_vslice_dummy_var_146: i32, out_vslice_dummy_var_147: i32)
{

  entry:
    out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$p137, out_$i139, out_$i140, out_$i141, out_$i142, out_$p143, out_$i145, out_$i146, out_$p147, out_$i149, out_$i150, out_$p151, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p163, out_$i165, out_$i166, out_$p167, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$p200, out_$i202, out_$i203, out_$p204, out_$p205, out_$i207, out_$i208, out_$p209, out_$p210, out_$i212, out_$i213, out_$p214, out_$p215, out_$i217, out_$i218, out_$p219, out_$p220, out_$i222, out_$i223, out_$p224, out_$i225, out_$i227, out_$i228, out_$p229, out_$i231, out_$i232, out_$p233, out_$p234, out_$i236, out_$i237, out_$p238, out_$i240, out_$i241, out_$p242, out_$p243, out_$i245, out_$i246, out_$p247, out_$i249, out_$i250, out_$p251, out_$p252, out_$i254, out_$i255, out_$p256, out_$i258, out_$i259, out_$p260, out_$i262, out_$i263, out_$p264, out_$i266, out_$i267, out_$p268, out_$i270, out_$i271, out_$p272, out_$i274, out_$i275, out_$p276, out_$i278, out_$i279, out_$p280, out_$p281, out_$i283, out_$i284, out_$p285, out_$i287, out_$i288, out_$p289, out_$p290, out_$i292, out_$i293, out_$p294, out_$p295, out_$i297, out_$i298, out_$p299, out_$i301, out_$i302, out_$p303, out_$i305, out_$i306, out_$p307, out_$i308, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147 := in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$p79, in_$i80, in_$i81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$p129, in_$i131, in_$i132, in_$p133, in_$i135, in_$i136, in_$p137, in_$i139, in_$i140, in_$i141, in_$i142, in_$p143, in_$i145, in_$i146, in_$p147, in_$i149, in_$i150, in_$p151, in_$i153, in_$i154, in_$p155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$p163, in_$i165, in_$i166, in_$p167, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$p200, in_$i202, in_$i203, in_$p204, in_$p205, in_$i207, in_$i208, in_$p209, in_$p210, in_$i212, in_$i213, in_$p214, in_$p215, in_$i217, in_$i218, in_$p219, in_$p220, in_$i222, in_$i223, in_$p224, in_$i225, in_$i227, in_$i228, in_$p229, in_$i231, in_$i232, in_$p233, in_$p234, in_$i236, in_$i237, in_$p238, in_$i240, in_$i241, in_$p242, in_$p243, in_$i245, in_$i246, in_$p247, in_$i249, in_$i250, in_$p251, in_$p252, in_$i254, in_$i255, in_$p256, in_$i258, in_$i259, in_$p260, in_$i262, in_$i263, in_$p264, in_$i266, in_$i267, in_$p268, in_$i270, in_$i271, in_$p272, in_$i274, in_$i275, in_$p276, in_$i278, in_$i279, in_$p280, in_$p281, in_$i283, in_$i284, in_$p285, in_$i287, in_$i288, in_$p289, in_$p290, in_$i292, in_$i293, in_$p294, in_$p295, in_$i297, in_$i298, in_$p299, in_$i301, in_$i302, in_$p303, in_$i305, in_$i306, in_$p307, in_$i308, in_vslice_dummy_var_114, in_vslice_dummy_var_115, in_vslice_dummy_var_116, in_vslice_dummy_var_117, in_vslice_dummy_var_118, in_vslice_dummy_var_119, in_vslice_dummy_var_120, in_vslice_dummy_var_121, in_vslice_dummy_var_122, in_vslice_dummy_var_123, in_vslice_dummy_var_124, in_vslice_dummy_var_125, in_vslice_dummy_var_126, in_vslice_dummy_var_127, in_vslice_dummy_var_128, in_vslice_dummy_var_129, in_vslice_dummy_var_130, in_vslice_dummy_var_131, in_vslice_dummy_var_132, in_vslice_dummy_var_133, in_vslice_dummy_var_134, in_vslice_dummy_var_135, in_vslice_dummy_var_136, in_vslice_dummy_var_137, in_vslice_dummy_var_138, in_vslice_dummy_var_139, in_vslice_dummy_var_140, in_vslice_dummy_var_141, in_vslice_dummy_var_142, in_vslice_dummy_var_143, in_vslice_dummy_var_144, in_vslice_dummy_var_145, in_vslice_dummy_var_146, in_vslice_dummy_var_147;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 710} out_$i64 := __VERIFIER_nondet_int();
    call {:si_unique_call 711} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i64);
    call {:si_unique_call 712} {:cexpr "tmp___43"} boogie_si_record_i32(out_$i64);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb36_dummy;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb17:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 717} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3984;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} gspca_vm_close(out_$p79);
    goto corral_source_split_3983;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    out_$p79 := $M.18;
    goto corral_source_split_3982;

  $bb26:
    assume out_$i78 == 1;
    goto corral_source_split_3981;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i77, 2);
    goto corral_source_split_3979;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    out_$i77 := $M.27;
    goto corral_source_split_3978;

  $bb24:
    assume out_$i76 == 1;
    goto corral_source_split_3977;

  $bb19:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i73, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i74 := $slt.i32(out_$i73, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_3971:
    assume {:verifier.code 1} true;
    call {:si_unique_call 713} out_$i73 := __VERIFIER_nondet_int();
    call {:si_unique_call 714} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i73);
    call {:si_unique_call 715} {:cexpr "tmp___44"} boogie_si_record_i32(out_$i73);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i72 == 1;
    goto corral_source_split_3971;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i32(out_$i71, 0);
    goto corral_source_split_3969;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    out_$i71 := $M.27;
    goto corral_source_split_3968;

  $bb14:
    assume out_$i70 == 1;
    goto corral_source_split_3967;

  $bb12:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i64, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb3:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i64, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i65 := $slt.i32(out_$i64, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb31:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $M.29 := out_$i84;
    call {:si_unique_call 720} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_3992;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    out_$i84 := $add.i32(out_$i83, 1);
    goto corral_source_split_3991;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    out_$i83 := $M.29;
    goto corral_source_split_3990;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 719} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3989;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} gspca_vm_open(out_$p82);
    goto corral_source_split_3988;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    out_$p82 := $M.18;
    goto corral_source_split_3987;

  $bb30:
    assume out_$i81 == 1;
    goto corral_source_split_3986;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i80, 1);
    goto corral_source_split_3975;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    out_$i80 := $M.27;
    goto corral_source_split_3974;

  $bb21:
    assume out_$i75 == 1;
    goto corral_source_split_3973;

  $bb20:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i73, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} ldv_stop();
    goto corral_source_split_3994;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i75 == 1);
    goto $bb23;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i76 == 1);
    goto $bb23;

  $bb38:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $M.29 := out_$i94;
    call {:si_unique_call 727} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_4011;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    out_$i94 := $sub.i32(out_$i93, 1);
    goto corral_source_split_4010;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    out_$i93 := $M.29;
    goto corral_source_split_4009;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 726} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4008;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} video_device_release_empty(in_$p3);
    goto corral_source_split_4007;

  $bb47:
    assume out_$i92 == 1;
    goto corral_source_split_4006;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 2);
    goto corral_source_split_4004;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    out_$i91 := $M.28;
    goto corral_source_split_4003;

  $bb45:
    assume out_$i90 == 1;
    goto corral_source_split_4002;

  $bb40:
    assume out_$i88 == 1;
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i87, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i88 := $slt.i32(out_$i87, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_3996:
    assume {:verifier.code 1} true;
    call {:si_unique_call 722} out_$i87 := __VERIFIER_nondet_int();
    call {:si_unique_call 723} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i87);
    call {:si_unique_call 724} {:cexpr "tmp___45"} boogie_si_record_i32(out_$i87);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume out_$i86 == 1;
    goto corral_source_split_3996;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i32(out_$i85, 0);
    goto corral_source_split_3965;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    out_$i85 := $M.28;
    goto corral_source_split_3964;

  $bb13:
    assume !(out_$i69 == 1);
    goto corral_source_split_3963;

  $bb52:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $M.29 := out_$i99;
    call {:si_unique_call 730} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_4018;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    out_$i99 := $add.i32(out_$i98, 1);
    goto corral_source_split_4017;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    out_$i98 := $M.29;
    goto corral_source_split_4016;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 729} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4015;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} out_vslice_dummy_var_114 := ldv_probe_1();
    goto corral_source_split_4014;

  $bb51:
    assume out_$i96 == 1;
    goto corral_source_split_4013;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    out_$i96 := $eq.i32(out_$i95, 1);
    goto corral_source_split_4000;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    out_$i95 := $M.28;
    goto corral_source_split_3999;

  $bb42:
    assume out_$i89 == 1;
    goto corral_source_split_3998;

  $bb41:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i87, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} ldv_stop();
    goto corral_source_split_4020;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb43:
    assume {:verifier.code 0} true;
    assume !(out_$i89 == 1);
    goto $bb44;

  $bb46:
    assume {:verifier.code 0} true;
    assume !(out_$i90 == 1);
    goto $bb44;

  $bb58:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb68:
    assume {:verifier.code 0} true;
    assume !(out_$i107 == 1);
    goto $bb69;

  $bb71:
    assume {:verifier.code 0} true;
    assume !(out_$i109 == 1);
    goto $bb69;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i32(out_$i108, 0);
    goto corral_source_split_4034;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    out_$i108 := $M.29;
    goto corral_source_split_4033;

  $bb67:
    assume out_$i107 == 1;
    goto corral_source_split_4032;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    out_$i107 := $eq.i32(out_$i106, 3);
    goto corral_source_split_4030;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    out_$i106 := $M.30;
    goto corral_source_split_4029;

  $bb65:
    assume out_$i105 == 1;
    goto corral_source_split_4028;

  $bb60:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i102, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i102, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_4022:
    assume {:verifier.code 1} true;
    call {:si_unique_call 732} out_$i102 := __VERIFIER_nondet_int();
    call {:si_unique_call 733} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i102);
    call {:si_unique_call 734} {:cexpr "tmp___46"} boogie_si_record_i32(out_$i102);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb57:
    assume out_$i101 == 1;
    goto corral_source_split_4022;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.i32(out_$i100, 0);
    goto corral_source_split_3953;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    out_$i100 := $M.30;
    goto corral_source_split_3952;

  $bb5:
    assume out_$i66 == 1;
    goto corral_source_split_3951;

  $bb4:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i64, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb76:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb81:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    out_$i116 := $ne.i32(out_$i115, 0);
    goto corral_source_split_4059;

  $bb79:
    assume {:verifier.code 0} true;
    out_$i115 := $M.33;
    goto corral_source_split_4058;

  $bb78:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} ldv_initialize_vm_operations_struct_4();
    goto corral_source_split_4056;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 746} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4055;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 745} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4054;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} ldv_initialize_v4l2_file_operations_3();
    goto corral_source_split_4053;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 743} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4052;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} ldv_initialize_v4l2_ioctl_ops_2();
    goto corral_source_split_4051;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 741} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4050;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $M.30 := 3;
    call {:si_unique_call 740} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4049;

  $bb77:
    assume out_$i114 == 1;
    goto corral_source_split_4048;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 0);
    goto corral_source_split_4046;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    out_$i113 := $M.33;
    goto corral_source_split_4045;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $M.33 := out_$i112;
    call {:si_unique_call 739} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_4044;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} out_$i112 := gspca_init();
    goto corral_source_split_4043;

  $bb75:
    assume out_$i111 == 1;
    goto corral_source_split_4042;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 1);
    goto corral_source_split_4026;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    out_$i110 := $M.30;
    goto corral_source_split_4025;

  $bb62:
    assume out_$i104 == 1;
    goto corral_source_split_4024;

  $bb61:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i102, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} ldv_stop();
    goto corral_source_split_4064;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb63:
    assume {:verifier.code 0} true;
    assume !(out_$i104 == 1);
    goto $bb64;

  $bb66:
    assume {:verifier.code 0} true;
    assume !(out_$i105 == 1);
    goto $bb64;

  $bb88:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb109:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $M.31 := 2;
    call {:si_unique_call 756} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4103;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} out_vslice_dummy_var_116 := dev_mmap(out_$p133, in_$p6);
    goto corral_source_split_4102;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    out_$p133 := $M.17;
    goto corral_source_split_4101;

  $bb108:
    assume out_$i132 == 1;
    goto corral_source_split_4100;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(out_$i131, 2);
    goto corral_source_split_4098;

  $bb107:
    assume {:verifier.code 0} true;
    out_$i131 := $M.31;
    goto corral_source_split_4097;

  $bb106:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 754} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4095;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} out_vslice_dummy_var_115 := dev_mmap(out_$p129, in_$p6);
    goto corral_source_split_4094;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    out_$p129 := $M.17;
    goto corral_source_split_4093;

  $bb105:
    assume out_$i128 == 1;
    goto corral_source_split_4092;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i127, 1);
    goto corral_source_split_4090;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    out_$i127 := $M.31;
    goto corral_source_split_4089;

  $bb103:
    assume out_$i126 == 1;
    goto corral_source_split_4088;

  $bb99:
    assume out_$i124 == 1;
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i119, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb90:
    assume out_$i120 == 1;
    assume {:verifier.code 0} true;
    out_$i124 := $slt.i32(out_$i119, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb89:
    assume {:verifier.code 0} true;
    out_$i120 := $slt.i32(out_$i119, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_4066:
    assume {:verifier.code 1} true;
    call {:si_unique_call 750} out_$i119 := __VERIFIER_nondet_int();
    call {:si_unique_call 751} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i119);
    call {:si_unique_call 752} {:cexpr "tmp___47"} boogie_si_record_i32(out_$i119);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb87:
    assume out_$i118 == 1;
    goto corral_source_split_4066;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i117, 0);
    goto corral_source_split_3957;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    out_$i117 := $M.31;
    goto corral_source_split_3956;

  $bb7:
    assume out_$i67 == 1;
    goto corral_source_split_3955;

  $bb6:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i64, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb113:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $M.29 := out_$i140;
    call {:si_unique_call 759} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i140);
    goto corral_source_split_4111;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    out_$i140 := $sub.i32(out_$i139, 1);
    goto corral_source_split_4110;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    out_$i139 := $M.29;
    goto corral_source_split_4109;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 758} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4108;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} out_vslice_dummy_var_117 := dev_close(out_$p137);
    goto corral_source_split_4107;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    out_$p137 := $M.17;
    goto corral_source_split_4106;

  $bb112:
    assume out_$i136 == 1;
    goto corral_source_split_4105;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    out_$i136 := $eq.i32(out_$i135, 2);
    goto corral_source_split_4082;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    out_$i135 := $M.31;
    goto corral_source_split_4081;

  $bb101:
    assume out_$i125 == 1;
    goto corral_source_split_4080;

  $bb100:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    out_$i125 := $slt.i32(out_$i119, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb116:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $M.31 := 2;
    call {:si_unique_call 761} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4116;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} out_vslice_dummy_var_118 := dev_read(out_$p143, in_$p13, in_$i11, in_$p8);
    goto corral_source_split_4115;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    out_$p143 := $M.17;
    goto corral_source_split_4114;

  $bb115:
    assume out_$i142 == 1;
    goto corral_source_split_4113;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, 2);
    goto corral_source_split_4086;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    out_$i141 := $M.31;
    goto corral_source_split_4085;

  $bb102:
    assume !(out_$i125 == 1);
    goto corral_source_split_4084;

  $bb122:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $M.31 := 2;
    call {:si_unique_call 765} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4129;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} out_vslice_dummy_var_120 := dev_poll(out_$p151, in_$p10);
    goto corral_source_split_4128;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    out_$p151 := $M.17;
    goto corral_source_split_4127;

  $bb121:
    assume out_$i150 == 1;
    goto corral_source_split_4126;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    out_$i150 := $eq.i32(out_$i149, 2);
    goto corral_source_split_4124;

  $bb120:
    assume {:verifier.code 0} true;
    out_$i149 := $M.31;
    goto corral_source_split_4123;

  $bb119:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 763} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4121;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} out_vslice_dummy_var_119 := dev_poll(out_$p147, in_$p10);
    goto corral_source_split_4120;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    out_$p147 := $M.17;
    goto corral_source_split_4119;

  $bb118:
    assume out_$i146 == 1;
    goto corral_source_split_4118;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(out_$i145, 1);
    goto corral_source_split_4070;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    out_$i145 := $M.31;
    goto corral_source_split_4069;

  $bb92:
    assume out_$i121 == 1;
    goto corral_source_split_4068;

  $bb91:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    out_$i121 := $slt.i32(out_$i119, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb125:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb127:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $M.29 := out_$i160;
    call {:si_unique_call 769} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i160);
    goto corral_source_split_4142;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    out_$i160 := $add.i32(out_$i159, 1);
    goto corral_source_split_4141;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    out_$i159 := $M.29;
    goto corral_source_split_4140;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $M.31 := 2;
    call {:si_unique_call 768} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4139;

  $bb126:
    assume out_$i158 == 1;
    goto corral_source_split_4138;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    out_$i158 := $eq.i32(out_$i157, 0);
    goto corral_source_split_4136;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    out_$i157 := $M.34;
    goto corral_source_split_4135;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $M.34 := out_$i156;
    call {:si_unique_call 767} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i156);
    goto corral_source_split_4134;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} out_$i156 := dev_open(out_$p155);
    goto corral_source_split_4133;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    out_$p155 := $M.17;
    goto corral_source_split_4132;

  $bb124:
    assume out_$i154 == 1;
    goto corral_source_split_4131;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    out_$i154 := $eq.i32(out_$i153, 1);
    goto corral_source_split_4074;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    out_$i153 := $M.31;
    goto corral_source_split_4073;

  $bb94:
    assume out_$i122 == 1;
    goto corral_source_split_4072;

  $bb93:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    out_$i122 := $slt.i32(out_$i119, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb134:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $M.31 := 2;
    call {:si_unique_call 773} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4155;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} out_vslice_dummy_var_122 := video_ioctl2(out_$p167, in_$i12, in_$i4);
    goto corral_source_split_4154;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    out_$p167 := $M.17;
    goto corral_source_split_4153;

  $bb133:
    assume out_$i166 == 1;
    goto corral_source_split_4152;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i165, 2);
    goto corral_source_split_4150;

  $bb132:
    assume {:verifier.code 0} true;
    out_$i165 := $M.31;
    goto corral_source_split_4149;

  $bb131:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 771} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4147;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} out_vslice_dummy_var_121 := video_ioctl2(out_$p163, in_$i12, in_$i4);
    goto corral_source_split_4146;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    out_$p163 := $M.17;
    goto corral_source_split_4145;

  $bb130:
    assume out_$i162 == 1;
    goto corral_source_split_4144;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i161, 1);
    goto corral_source_split_4078;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    out_$i161 := $M.31;
    goto corral_source_split_4077;

  $bb96:
    assume out_$i123 == 1;
    goto corral_source_split_4076;

  $bb95:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    out_$i123 := $eq.i32(out_$i119, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} ldv_stop();
    goto corral_source_split_4157;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb97:
    assume {:verifier.code 0} true;
    assume !(out_$i123 == 1);
    goto $bb98;

  $bb104:
    assume {:verifier.code 0} true;
    assume !(out_$i126 == 1);
    goto $bb98;

  $bb140:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb196:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 779} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4264;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} out_vslice_dummy_var_123 := vidioc_reqbufs(out_$p200, in_$p49, in_$p26);
    goto corral_source_split_4263;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    out_$p200 := $M.19;
    goto corral_source_split_4262;

  $bb195:
    assume out_$i199 == 1;
    goto corral_source_split_4261;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    out_$i199 := $eq.i32(out_$i198, 1);
    goto corral_source_split_4259;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    out_$i198 := $M.32;
    goto corral_source_split_4258;

  $bb193:
    assume out_$i197 == 1;
    goto corral_source_split_4257;

  $bb189:
    assume out_$i195 == 1;
    assume {:verifier.code 0} true;
    out_$i197 := $eq.i32(out_$i171, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb183:
    assume out_$i192 == 1;
    assume {:verifier.code 0} true;
    out_$i195 := $slt.i32(out_$i171, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb171:
    assume out_$i186 == 1;
    assume {:verifier.code 0} true;
    out_$i192 := $slt.i32(out_$i171, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb142:
    assume out_$i172 == 1;
    assume {:verifier.code 0} true;
    out_$i186 := $slt.i32(out_$i171, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb141:
    assume {:verifier.code 0} true;
    out_$i172 := $slt.i32(out_$i171, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_4159:
    assume {:verifier.code 1} true;
    call {:si_unique_call 775} out_$i171 := __VERIFIER_nondet_int();
    call {:si_unique_call 776} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i171);
    call {:si_unique_call 777} {:cexpr "tmp___48"} boogie_si_record_i32(out_$i171);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb139:
    assume out_$i170 == 1;
    goto corral_source_split_4159;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    out_$i170 := $ne.i32(out_$i169, 0);
    goto corral_source_split_3961;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    out_$i169 := $M.32;
    goto corral_source_split_3960;

  $bb9:
    assume out_$i68 == 1;
    goto corral_source_split_3959;

  $bb8:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i64, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb200:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 781} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4270;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} out_vslice_dummy_var_124 := v4l2_event_unsubscribe(out_$p204, out_$p205);
    goto corral_source_split_4269;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    out_$p205 := $M.21;
    goto corral_source_split_4268;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    out_$p204 := $M.22;
    goto corral_source_split_4267;

  $bb199:
    assume out_$i203 == 1;
    goto corral_source_split_4266;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    out_$i203 := $eq.i32(out_$i202, 1);
    goto corral_source_split_4251;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    out_$i202 := $M.32;
    goto corral_source_split_4250;

  $bb191:
    assume out_$i196 == 1;
    goto corral_source_split_4249;

  $bb190:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    out_$i196 := $slt.i32(out_$i171, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb203:
    assume !(out_$i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 783} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4276;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} out_vslice_dummy_var_125 := vidioc_try_fmt_vid_cap(out_$p209, in_$p19, out_$p210);
    goto corral_source_split_4275;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    out_$p210 := $M.20;
    goto corral_source_split_4274;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    out_$p209 := $M.19;
    goto corral_source_split_4273;

  $bb202:
    assume out_$i208 == 1;
    goto corral_source_split_4272;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    out_$i208 := $eq.i32(out_$i207, 1);
    goto corral_source_split_4255;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    out_$i207 := $M.32;
    goto corral_source_split_4254;

  $bb192:
    assume !(out_$i196 == 1);
    goto corral_source_split_4253;

  $bb206:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 785} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4282;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} out_vslice_dummy_var_126 := vidioc_querybuf(out_$p214, in_$p20, out_$p215);
    goto corral_source_split_4281;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    out_$p215 := $M.23;
    goto corral_source_split_4280;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    out_$p214 := $M.19;
    goto corral_source_split_4279;

  $bb205:
    assume out_$i213 == 1;
    goto corral_source_split_4278;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 1);
    goto corral_source_split_4239;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    out_$i212 := $M.32;
    goto corral_source_split_4238;

  $bb185:
    assume out_$i193 == 1;
    goto corral_source_split_4237;

  $bb184:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    out_$i193 := $slt.i32(out_$i171, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb209:
    assume !(out_$i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 787} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4288;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} out_vslice_dummy_var_127 := vidioc_dqbuf(out_$p219, in_$p42, out_$p220);
    goto corral_source_split_4287;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    out_$p220 := $M.23;
    goto corral_source_split_4286;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    out_$p219 := $M.19;
    goto corral_source_split_4285;

  $bb208:
    assume out_$i218 == 1;
    goto corral_source_split_4284;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    out_$i218 := $eq.i32(out_$i217, 1);
    goto corral_source_split_4243;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    out_$i217 := $M.32;
    goto corral_source_split_4242;

  $bb187:
    assume out_$i194 == 1;
    goto corral_source_split_4241;

  $bb186:
    assume !(out_$i193 == 1);
    assume {:verifier.code 0} true;
    out_$i194 := $slt.i32(out_$i171, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb212:
    assume !(out_$i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 789} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4294;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} out_vslice_dummy_var_128 := vidioc_streamoff(out_$p224, in_$p47, out_$i225);
    goto corral_source_split_4293;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    out_$i225 := $load.i32($M.25, in_$p0);
    goto corral_source_split_4292;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    out_$p224 := $M.19;
    goto corral_source_split_4291;

  $bb211:
    assume out_$i223 == 1;
    goto corral_source_split_4290;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    out_$i223 := $eq.i32(out_$i222, 1);
    goto corral_source_split_4247;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    out_$i222 := $M.32;
    goto corral_source_split_4246;

  $bb188:
    assume !(out_$i194 == 1);
    goto corral_source_split_4245;

  $bb215:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 791} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4299;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} out_vslice_dummy_var_129 := vidioc_enum_fmt_vid_cap(out_$p229, in_$p30, in_$p23);
    goto corral_source_split_4298;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    out_$p229 := $M.19;
    goto corral_source_split_4297;

  $bb214:
    assume out_$i228 == 1;
    goto corral_source_split_4296;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    out_$i228 := $eq.i32(out_$i227, 1);
    goto corral_source_split_4227;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    out_$i227 := $M.32;
    goto corral_source_split_4226;

  $bb179:
    assume out_$i190 == 1;
    goto corral_source_split_4225;

  $bb173:
    assume out_$i187 == 1;
    assume {:verifier.code 0} true;
    out_$i190 := $slt.i32(out_$i171, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb172:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    out_$i187 := $slt.i32(out_$i171, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb218:
    assume !(out_$i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 793} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4305;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} out_vslice_dummy_var_130 := vidioc_s_fmt_vid_cap(out_$p233, in_$p46, out_$p234);
    goto corral_source_split_4304;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    out_$p234 := $M.20;
    goto corral_source_split_4303;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    out_$p233 := $M.19;
    goto corral_source_split_4302;

  $bb217:
    assume out_$i232 == 1;
    goto corral_source_split_4301;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    out_$i232 := $eq.i32(out_$i231, 1);
    goto corral_source_split_4231;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    out_$i231 := $M.32;
    goto corral_source_split_4230;

  $bb181:
    assume out_$i191 == 1;
    goto corral_source_split_4229;

  $bb180:
    assume !(out_$i190 == 1);
    assume {:verifier.code 0} true;
    out_$i191 := $slt.i32(out_$i171, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb221:
    assume !(out_$i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 795} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4310;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} out_vslice_dummy_var_131 := vidioc_g_chip_info(out_$p238, in_$p29, in_$p35);
    goto corral_source_split_4309;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    out_$p238 := $M.19;
    goto corral_source_split_4308;

  $bb220:
    assume out_$i237 == 1;
    goto corral_source_split_4307;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    out_$i237 := $eq.i32(out_$i236, 1);
    goto corral_source_split_4235;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    out_$i236 := $M.32;
    goto corral_source_split_4234;

  $bb182:
    assume !(out_$i191 == 1);
    goto corral_source_split_4233;

  $bb224:
    assume !(out_$i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    goto $bb225;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 797} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4316;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} out_vslice_dummy_var_132 := vidioc_g_fmt_vid_cap(out_$p242, in_$p31, out_$p243);
    goto corral_source_split_4315;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    out_$p243 := $M.20;
    goto corral_source_split_4314;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    out_$p242 := $M.19;
    goto corral_source_split_4313;

  $bb223:
    assume out_$i241 == 1;
    goto corral_source_split_4312;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    out_$i241 := $eq.i32(out_$i240, 1);
    goto corral_source_split_4215;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    out_$i240 := $M.32;
    goto corral_source_split_4214;

  $bb175:
    assume out_$i188 == 1;
    goto corral_source_split_4213;

  $bb174:
    assume !(out_$i187 == 1);
    assume {:verifier.code 0} true;
    out_$i188 := $slt.i32(out_$i171, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb227:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    goto $bb228;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 799} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4321;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} out_vslice_dummy_var_133 := vidioc_g_input(out_$p247, in_$p17, in_$p41);
    goto corral_source_split_4320;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    out_$p247 := $M.19;
    goto corral_source_split_4319;

  $bb226:
    assume out_$i246 == 1;
    goto corral_source_split_4318;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    out_$i246 := $eq.i32(out_$i245, 1);
    goto corral_source_split_4219;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    out_$i245 := $M.32;
    goto corral_source_split_4218;

  $bb177:
    assume out_$i189 == 1;
    goto corral_source_split_4217;

  $bb176:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    out_$i189 := $slt.i32(out_$i171, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb230:
    assume !(out_$i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 801} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4327;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} out_vslice_dummy_var_134 := vidioc_qbuf(out_$p251, in_$p55, out_$p252);
    goto corral_source_split_4326;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    out_$p252 := $M.23;
    goto corral_source_split_4325;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    out_$p251 := $M.19;
    goto corral_source_split_4324;

  $bb229:
    assume out_$i250 == 1;
    goto corral_source_split_4323;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    out_$i250 := $eq.i32(out_$i249, 1);
    goto corral_source_split_4223;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    out_$i249 := $M.32;
    goto corral_source_split_4222;

  $bb178:
    assume !(out_$i189 == 1);
    goto corral_source_split_4221;

  $bb233:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    goto $bb234;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 803} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4332;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} out_vslice_dummy_var_135 := vidioc_enum_framesizes(out_$p256, in_$p24, in_$p37);
    goto corral_source_split_4331;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    out_$p256 := $M.19;
    goto corral_source_split_4330;

  $bb232:
    assume out_$i255 == 1;
    goto corral_source_split_4329;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    out_$i255 := $eq.i32(out_$i254, 1);
    goto corral_source_split_4203;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    out_$i254 := $M.32;
    goto corral_source_split_4202;

  $bb167:
    assume out_$i184 == 1;
    goto corral_source_split_4201;

  $bb161:
    assume out_$i181 == 1;
    assume {:verifier.code 0} true;
    out_$i184 := $slt.i32(out_$i171, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb144:
    assume out_$i173 == 1;
    assume {:verifier.code 0} true;
    out_$i181 := $slt.i32(out_$i171, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb143:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    out_$i173 := $slt.i32(out_$i171, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb236:
    assume !(out_$i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    goto $bb237;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 805} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4337;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} out_vslice_dummy_var_136 := vidioc_querycap(out_$p260, in_$p52, in_$p51);
    goto corral_source_split_4336;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    out_$p260 := $M.19;
    goto corral_source_split_4335;

  $bb235:
    assume out_$i259 == 1;
    goto corral_source_split_4334;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    out_$i259 := $eq.i32(out_$i258, 1);
    goto corral_source_split_4207;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    out_$i258 := $M.32;
    goto corral_source_split_4206;

  $bb169:
    assume out_$i185 == 1;
    goto corral_source_split_4205;

  $bb168:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    out_$i185 := $slt.i32(out_$i171, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb239:
    assume !(out_$i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    goto $bb240;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 807} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4342;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} out_vslice_dummy_var_137 := vidioc_enum_frameintervals(out_$p264, in_$p58, in_$p28);
    goto corral_source_split_4341;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    out_$p264 := $M.19;
    goto corral_source_split_4340;

  $bb238:
    assume out_$i263 == 1;
    goto corral_source_split_4339;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    out_$i263 := $eq.i32(out_$i262, 1);
    goto corral_source_split_4211;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    out_$i262 := $M.32;
    goto corral_source_split_4210;

  $bb170:
    assume !(out_$i185 == 1);
    goto corral_source_split_4209;

  $bb242:
    assume !(out_$i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    goto $bb243;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 809} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4347;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} out_vslice_dummy_var_138 := vidioc_g_register(out_$p268, in_$p18, in_$p60);
    goto corral_source_split_4346;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    out_$p268 := $M.19;
    goto corral_source_split_4345;

  $bb241:
    assume out_$i267 == 1;
    goto corral_source_split_4344;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    out_$i267 := $eq.i32(out_$i266, 1);
    goto corral_source_split_4191;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    out_$i266 := $M.32;
    goto corral_source_split_4190;

  $bb163:
    assume out_$i182 == 1;
    goto corral_source_split_4189;

  $bb162:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    out_$i182 := $slt.i32(out_$i171, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb245:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    goto $bb246;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 811} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4352;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} out_vslice_dummy_var_139 := vidioc_s_jpegcomp(out_$p272, in_$p56, in_$p39);
    goto corral_source_split_4351;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    out_$p272 := $M.19;
    goto corral_source_split_4350;

  $bb244:
    assume out_$i271 == 1;
    goto corral_source_split_4349;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    out_$i271 := $eq.i32(out_$i270, 1);
    goto corral_source_split_4195;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    out_$i270 := $M.32;
    goto corral_source_split_4194;

  $bb165:
    assume out_$i183 == 1;
    goto corral_source_split_4193;

  $bb164:
    assume !(out_$i182 == 1);
    assume {:verifier.code 0} true;
    out_$i183 := $slt.i32(out_$i171, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb248:
    assume !(out_$i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    goto $bb249;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 813} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4357;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} out_vslice_dummy_var_140 := vidioc_g_jpegcomp(out_$p276, in_$p61, in_$p15);
    goto corral_source_split_4356;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    out_$p276 := $M.19;
    goto corral_source_split_4355;

  $bb247:
    assume out_$i275 == 1;
    goto corral_source_split_4354;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    out_$i275 := $eq.i32(out_$i274, 1);
    goto corral_source_split_4199;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    out_$i274 := $M.32;
    goto corral_source_split_4198;

  $bb166:
    assume !(out_$i183 == 1);
    goto corral_source_split_4197;

  $bb251:
    assume !(out_$i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    goto $bb252;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 815} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4363;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} out_vslice_dummy_var_141 := vidioc_g_parm(out_$p280, in_$p57, out_$p281);
    goto corral_source_split_4362;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    out_$p281 := $M.24;
    goto corral_source_split_4361;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    out_$p280 := $M.19;
    goto corral_source_split_4360;

  $bb250:
    assume out_$i279 == 1;
    goto corral_source_split_4359;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    out_$i279 := $eq.i32(out_$i278, 1);
    goto corral_source_split_4179;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    out_$i278 := $M.32;
    goto corral_source_split_4178;

  $bb157:
    assume out_$i179 == 1;
    goto corral_source_split_4177;

  $bb146:
    assume out_$i174 == 1;
    assume {:verifier.code 0} true;
    out_$i179 := $slt.i32(out_$i171, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb145:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    out_$i174 := $slt.i32(out_$i171, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb254:
    assume !(out_$i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    goto $bb255;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 817} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4368;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} out_vslice_dummy_var_142 := vidioc_enum_input(out_$p285, in_$p32, in_$p54);
    goto corral_source_split_4367;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    out_$p285 := $M.19;
    goto corral_source_split_4366;

  $bb253:
    assume out_$i284 == 1;
    goto corral_source_split_4365;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    out_$i284 := $eq.i32(out_$i283, 1);
    goto corral_source_split_4183;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    out_$i283 := $M.32;
    goto corral_source_split_4182;

  $bb159:
    assume out_$i180 == 1;
    goto corral_source_split_4181;

  $bb158:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    out_$i180 := $slt.i32(out_$i171, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb257:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 819} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4374;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} out_vslice_dummy_var_143 := v4l2_ctrl_subscribe_event(out_$p289, out_$p290);
    goto corral_source_split_4373;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    out_$p290 := $M.21;
    goto corral_source_split_4372;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    out_$p289 := $M.22;
    goto corral_source_split_4371;

  $bb256:
    assume out_$i288 == 1;
    goto corral_source_split_4370;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    out_$i288 := $eq.i32(out_$i287, 1);
    goto corral_source_split_4187;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    out_$i287 := $M.32;
    goto corral_source_split_4186;

  $bb160:
    assume !(out_$i180 == 1);
    goto corral_source_split_4185;

  $bb260:
    assume !(out_$i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 821} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4380;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} out_vslice_dummy_var_144 := vidioc_s_parm(out_$p294, in_$p33, out_$p295);
    goto corral_source_split_4379;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    out_$p295 := $M.24;
    goto corral_source_split_4378;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    out_$p294 := $M.19;
    goto corral_source_split_4377;

  $bb259:
    assume out_$i293 == 1;
    goto corral_source_split_4376;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    out_$i293 := $eq.i32(out_$i292, 1);
    goto corral_source_split_4171;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    out_$i292 := $M.32;
    goto corral_source_split_4170;

  $bb155:
    assume out_$i178 == 1;
    goto corral_source_split_4169;

  $bb148:
    assume out_$i175 == 1;
    assume {:verifier.code 0} true;
    out_$i178 := $slt.i32(out_$i171, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb147:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    out_$i175 := $slt.i32(out_$i171, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb263:
    assume !(out_$i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    goto $bb264;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 823} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4385;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} out_vslice_dummy_var_145 := vidioc_s_input(out_$p299, in_$p43, in_$i21);
    goto corral_source_split_4384;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    out_$p299 := $M.19;
    goto corral_source_split_4383;

  $bb262:
    assume out_$i298 == 1;
    goto corral_source_split_4382;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    out_$i298 := $eq.i32(out_$i297, 1);
    goto corral_source_split_4175;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    out_$i297 := $M.32;
    goto corral_source_split_4174;

  $bb156:
    assume !(out_$i178 == 1);
    goto corral_source_split_4173;

  $bb266:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    goto $bb267;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 825} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4390;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} out_vslice_dummy_var_146 := vidioc_s_register(out_$p303, in_$p16, in_$p45);
    goto corral_source_split_4389;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    out_$p303 := $M.19;
    goto corral_source_split_4388;

  $bb265:
    assume out_$i302 == 1;
    goto corral_source_split_4387;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    out_$i302 := $eq.i32(out_$i301, 1);
    goto corral_source_split_4163;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    out_$i301 := $M.32;
    goto corral_source_split_4162;

  $bb150:
    assume out_$i176 == 1;
    goto corral_source_split_4161;

  $bb149:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    out_$i176 := $slt.i32(out_$i171, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb269:
    assume !(out_$i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    goto $bb270;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 827} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4396;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} out_vslice_dummy_var_147 := vidioc_streamon(out_$p307, in_$p48, out_$i308);
    goto corral_source_split_4395;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    out_$i308 := $load.i32($M.26, in_$p1);
    goto corral_source_split_4394;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    out_$p307 := $M.19;
    goto corral_source_split_4393;

  $bb268:
    assume out_$i306 == 1;
    goto corral_source_split_4392;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    out_$i306 := $eq.i32(out_$i305, 1);
    goto corral_source_split_4167;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    out_$i305 := $M.32;
    goto corral_source_split_4166;

  $bb152:
    assume out_$i177 == 1;
    goto corral_source_split_4165;

  $bb151:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i171, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} ldv_stop();
    goto corral_source_split_4398;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb153:
    assume {:verifier.code 0} true;
    assume !(out_$i177 == 1);
    goto $bb154;

  $bb194:
    assume {:verifier.code 0} true;
    assume !(out_$i197 == 1);
    goto $bb154;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} ldv_stop();
    goto corral_source_split_4400;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i68 == 1);
    goto $bb11;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i70 == 1);
    goto $bb11;

  $bb36_dummy:
    call {:si_unique_call 1} out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$p137, out_$i139, out_$i140, out_$i141, out_$i142, out_$p143, out_$i145, out_$i146, out_$p147, out_$i149, out_$i150, out_$p151, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p163, out_$i165, out_$i166, out_$p167, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$p200, out_$i202, out_$i203, out_$p204, out_$p205, out_$i207, out_$i208, out_$p209, out_$p210, out_$i212, out_$i213, out_$p214, out_$p215, out_$i217, out_$i218, out_$p219, out_$p220, out_$i222, out_$i223, out_$p224, out_$i225, out_$i227, out_$i228, out_$p229, out_$i231, out_$i232, out_$p233, out_$p234, out_$i236, out_$i237, out_$p238, out_$i240, out_$i241, out_$p242, out_$p243, out_$i245, out_$i246, out_$p247, out_$i249, out_$i250, out_$p251, out_$p252, out_$i254, out_$i255, out_$p256, out_$i258, out_$i259, out_$p260, out_$i262, out_$i263, out_$p264, out_$i266, out_$i267, out_$p268, out_$i270, out_$i271, out_$p272, out_$i274, out_$i275, out_$p276, out_$i278, out_$i279, out_$p280, out_$p281, out_$i283, out_$i284, out_$p285, out_$i287, out_$i288, out_$p289, out_$p290, out_$i292, out_$i293, out_$p294, out_$p295, out_$i297, out_$i298, out_$p299, out_$i301, out_$i302, out_$p303, out_$i305, out_$i306, out_$p307, out_$i308, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147 := main_loop_$bb1(in_$p0, in_$p1, in_$p3, in_$i4, in_$p6, in_$p8, in_$p10, in_$i11, in_$i12, in_$p13, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$p23, in_$p24, in_$p26, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p35, in_$p37, in_$p39, in_$p41, in_$p42, in_$p43, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p51, in_$p52, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p60, in_$p61, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$p137, out_$i139, out_$i140, out_$i141, out_$i142, out_$p143, out_$i145, out_$i146, out_$p147, out_$i149, out_$i150, out_$p151, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p163, out_$i165, out_$i166, out_$p167, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$p200, out_$i202, out_$i203, out_$p204, out_$p205, out_$i207, out_$i208, out_$p209, out_$p210, out_$i212, out_$i213, out_$p214, out_$p215, out_$i217, out_$i218, out_$p219, out_$p220, out_$i222, out_$i223, out_$p224, out_$i225, out_$i227, out_$i228, out_$p229, out_$i231, out_$i232, out_$p233, out_$p234, out_$i236, out_$i237, out_$p238, out_$i240, out_$i241, out_$p242, out_$p243, out_$i245, out_$i246, out_$p247, out_$i249, out_$i250, out_$p251, out_$p252, out_$i254, out_$i255, out_$p256, out_$i258, out_$i259, out_$p260, out_$i262, out_$i263, out_$p264, out_$i266, out_$i267, out_$p268, out_$i270, out_$i271, out_$p272, out_$i274, out_$i275, out_$p276, out_$i278, out_$i279, out_$p280, out_$p281, out_$i283, out_$i284, out_$p285, out_$i287, out_$i288, out_$p289, out_$p290, out_$i292, out_$i293, out_$p294, out_$p295, out_$i297, out_$i298, out_$p299, out_$i301, out_$i302, out_$p303, out_$i305, out_$i306, out_$p307, out_$i308, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i4: i64, in_$p6: ref, in_$p8: ref, in_$p10: ref, in_$i11: i64, in_$i12: i32, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p35: ref, in_$p37: ref, in_$p39: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p51: ref, in_$p52: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p60: ref, in_$p61: ref, in_$i64: i32, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i32, in_$i72: i1, in_$i73: i32, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$i86: i1, in_$i87: i32, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$i101: i1, in_$i102: i32, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i1, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i139: i32, in_$i140: i32, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$i156: i32, in_$i157: i32, in_$i158: i1, in_$i159: i32, in_$i160: i32, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$i165: i32, in_$i166: i1, in_$p167: ref, in_$i169: i32, in_$i170: i1, in_$i171: i32, in_$i172: i1, in_$i173: i1, in_$i174: i1, in_$i175: i1, in_$i176: i1, in_$i177: i1, in_$i178: i1, in_$i179: i1, in_$i180: i1, in_$i181: i1, in_$i182: i1, in_$i183: i1, in_$i184: i1, in_$i185: i1, in_$i186: i1, in_$i187: i1, in_$i188: i1, in_$i189: i1, in_$i190: i1, in_$i191: i1, in_$i192: i1, in_$i193: i1, in_$i194: i1, in_$i195: i1, in_$i196: i1, in_$i197: i1, in_$i198: i32, in_$i199: i1, in_$p200: ref, in_$i202: i32, in_$i203: i1, in_$p204: ref, in_$p205: ref, in_$i207: i32, in_$i208: i1, in_$p209: ref, in_$p210: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$p215: ref, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$p220: ref, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$i225: i32, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$i231: i32, in_$i232: i1, in_$p233: ref, in_$p234: ref, in_$i236: i32, in_$i237: i1, in_$p238: ref, in_$i240: i32, in_$i241: i1, in_$p242: ref, in_$p243: ref, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$i249: i32, in_$i250: i1, in_$p251: ref, in_$p252: ref, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$i258: i32, in_$i259: i1, in_$p260: ref, in_$i262: i32, in_$i263: i1, in_$p264: ref, in_$i266: i32, in_$i267: i1, in_$p268: ref, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$i274: i32, in_$i275: i1, in_$p276: ref, in_$i278: i32, in_$i279: i1, in_$p280: ref, in_$p281: ref, in_$i283: i32, in_$i284: i1, in_$p285: ref, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$p290: ref, in_$i292: i32, in_$i293: i1, in_$p294: ref, in_$p295: ref, in_$i297: i32, in_$i298: i1, in_$p299: ref, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$i308: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i64, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i64, in_vslice_dummy_var_122: i64, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i32, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i32, in_vslice_dummy_var_131: i32, in_vslice_dummy_var_132: i32, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i32, in_vslice_dummy_var_142: i32, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i32, in_vslice_dummy_var_145: i32, in_vslice_dummy_var_146: i32, in_vslice_dummy_var_147: i32) returns (out_$i64: i32, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i32, out_$i72: i1, out_$i73: i32, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$i86: i1, out_$i87: i32, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i98: i32, out_$i99: i32, out_$i100: i32, out_$i101: i1, out_$i102: i32, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i1, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i139: i32, out_$i140: i32, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$i156: i32, out_$i157: i32, out_$i158: i1, out_$i159: i32, out_$i160: i32, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$i165: i32, out_$i166: i1, out_$p167: ref, out_$i169: i32, out_$i170: i1, out_$i171: i32, out_$i172: i1, out_$i173: i1, out_$i174: i1, out_$i175: i1, out_$i176: i1, out_$i177: i1, out_$i178: i1, out_$i179: i1, out_$i180: i1, out_$i181: i1, out_$i182: i1, out_$i183: i1, out_$i184: i1, out_$i185: i1, out_$i186: i1, out_$i187: i1, out_$i188: i1, out_$i189: i1, out_$i190: i1, out_$i191: i1, out_$i192: i1, out_$i193: i1, out_$i194: i1, out_$i195: i1, out_$i196: i1, out_$i197: i1, out_$i198: i32, out_$i199: i1, out_$p200: ref, out_$i202: i32, out_$i203: i1, out_$p204: ref, out_$p205: ref, out_$i207: i32, out_$i208: i1, out_$p209: ref, out_$p210: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$p215: ref, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$p220: ref, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$i225: i32, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$i231: i32, out_$i232: i1, out_$p233: ref, out_$p234: ref, out_$i236: i32, out_$i237: i1, out_$p238: ref, out_$i240: i32, out_$i241: i1, out_$p242: ref, out_$p243: ref, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$i249: i32, out_$i250: i1, out_$p251: ref, out_$p252: ref, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$i258: i32, out_$i259: i1, out_$p260: ref, out_$i262: i32, out_$i263: i1, out_$p264: ref, out_$i266: i32, out_$i267: i1, out_$p268: ref, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$i274: i32, out_$i275: i1, out_$p276: ref, out_$i278: i32, out_$i279: i1, out_$p280: ref, out_$p281: ref, out_$i283: i32, out_$i284: i1, out_$p285: ref, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$p290: ref, out_$i292: i32, out_$i293: i1, out_$p294: ref, out_$p295: ref, out_$i297: i32, out_$i298: i1, out_$p299: ref, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$i308: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i64, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i64, out_vslice_dummy_var_122: i64, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i32, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i32, out_vslice_dummy_var_131: i32, out_vslice_dummy_var_132: i32, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i32, out_vslice_dummy_var_142: i32, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i32, out_vslice_dummy_var_145: i32, out_vslice_dummy_var_146: i32, out_vslice_dummy_var_147: i32);
  modifies $M.27, $M.0, $M.29, $M.28, $M.18, $CurrAddr, $M.17, $M.31, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.32, $M.30, $M.33, $M.5, $M.7, $M.4, $M.9, $M.10, $M.6, $M.2, $M.3, $M.11, $M.12, $M.13, $M.14, $M.15, $M.34, $M.16;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


