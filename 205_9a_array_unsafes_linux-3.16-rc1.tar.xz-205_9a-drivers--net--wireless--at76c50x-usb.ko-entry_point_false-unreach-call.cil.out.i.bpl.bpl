var $M.0: [ref]i8;

var $M.1: i32;

var $M.2: [ref]i8;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]ref;

var $M.7: [ref]i24;

var $M.8: [ref]i8;

var $M.9: [ref]i16;

var $M.10: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]ref;

var $M.13: [ref]ref;

var $M.14: [ref]i24;

var $M.15: [ref]i8;

var $M.16: [ref]ref;

var $M.17: [ref]ref;

var $M.18: [ref]ref;

var $M.19: [ref]ref;

var $M.20: [ref]i24;

var $M.21: [ref]i8;

var $M.22: [ref]i8;

var $M.23: [ref]ref;

var $M.24: [ref]ref;

var $M.25: [ref]ref;

var $M.26: [ref]ref;

var $M.27: [ref]i24;

var $M.28: [ref]i8;

var $M.29: [ref]i8;

var $M.30: [ref]ref;

var $M.32: ref;

var $M.33: i32;

var $M.34: [ref]ref;

var $M.35: i32;

var $M.36: [ref]ref;

var $M.37: [ref]ref;

var $M.38: [ref]i8;

var $M.39: ref;

var $M.40: [ref]i8;

var $M.41: [ref]ref;

var $M.42: [ref]i64;

var $M.49: ref;

var $M.50: ref;

var $M.51: ref;

var $M.52: [ref]i8;

var $M.53: [ref]i8;

var $M.54: i32;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.58: i32;

var $M.59: i32;

var $M.60: i32;

var $M.61: i32;

var $M.62: i32;

var $M.77: [ref]i8;

var $M.78: [ref]i8;

var $M.158: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 513308);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const at76_driver_group1: ref;

axiom at76_driver_group1 == $sub.ref(0, 2060);

const at76_ops_group0: ref;

axiom at76_ops_group0 == $sub.ref(0, 3092);

const at76_ops_group1: ref;

axiom at76_ops_group1 == $sub.ref(0, 4124);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 5152);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 6180);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 7208);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 8236);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 9264);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 10292);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 11320);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 12348);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 13376);

const last_index: ref;

axiom last_index == $sub.ref(0, 14404);

const LDV_SKBS: ref;

axiom LDV_SKBS == $sub.ref(0, 15436);

const __mod_usb__dev_table_device_table: ref;

axiom __mod_usb__dev_table_device_table == $sub.ref(0, 16492);

const {:count 15} set_impl: ref;

axiom set_impl == $sub.ref(0, 17636);

const {:count 4} hw_rates: ref;

axiom hw_rates == $sub.ref(0, 18664);

const {:count 3} preambles: ref;

axiom preambles == $sub.ref(0, 19712);

const tx_activity: ref;

axiom tx_activity == $sub.ref(0, 20740);

const ledtrig_tx: ref;

axiom ledtrig_tx == $sub.ref(0, 21772);

const {:count 55} dev_table: ref;

axiom dev_table == $sub.ref(0, 24556);

const at76_driver: ref;

axiom at76_driver == $sub.ref(0, 25884);

const ledtrig_tx_timer: ref;

axiom ledtrig_tx_timer == $sub.ref(0, 27036);

const {:count 4} at76_rates: ref;

axiom at76_rates == $sub.ref(0, 28108);

const {:count 14} at76_channels: ref;

axiom at76_channels == $sub.ref(0, 30028);

const at76_supported_band: ref;

axiom at76_supported_band == $sub.ref(0, 31124);

const at76_ops: ref;

axiom at76_ops == $sub.ref(0, 32780);

const at76_debug: ref;

axiom at76_debug == $sub.ref(0, 33808);

const fw_mutex: ref;

axiom fw_mutex == $sub.ref(0, 35000);

const {:count 9} firmwares: ref;

axiom firmwares == $sub.ref(0, 36528);

const .str.17: ref;

axiom .str.17 == $sub.ref(0, 37553);

const {:count 25} .str.18: ref;

axiom .str.18 == $sub.ref(0, 38602);

const {:count 25} .str.19: ref;

axiom .str.19 == $sub.ref(0, 39651);

const {:count 24} .str.20: ref;

axiom .str.20 == $sub.ref(0, 40699);

const {:count 28} .str.21: ref;

axiom .str.21 == $sub.ref(0, 41751);

const {:count 24} .str.22: ref;

axiom .str.22 == $sub.ref(0, 42799);

const {:count 28} .str.23: ref;

axiom .str.23 == $sub.ref(0, 43851);

const {:count 29} .str.24: ref;

axiom .str.24 == $sub.ref(0, 44904);

const {:count 27} .str.25: ref;

axiom .str.25 == $sub.ref(0, 45955);

const {:count 22} .str.197: ref;

axiom .str.197 == $sub.ref(0, 47001);

const {:count 13} .str.200: ref;

axiom .str.200 == $sub.ref(0, 48038);

const {:count 37} .str.201: ref;

axiom .str.201 == $sub.ref(0, 49099);

const {:count 21} .str.202: ref;

axiom .str.202 == $sub.ref(0, 50144);

const {:count 44} .str.64: ref;

axiom .str.64 == $sub.ref(0, 51212);

const {:count 13} .str.65: ref;

axiom .str.65 == $sub.ref(0, 52249);

const {:count 22} .str.66: ref;

axiom .str.66 == $sub.ref(0, 53295);

const {:count 232} .str.67: ref;

axiom .str.67 == $sub.ref(0, 54551);

const {:count 2} .str.2: ref;

axiom .str.2 == $sub.ref(0, 55577);

const {:count 12} .str.68: ref;

axiom .str.68 == $sub.ref(0, 56613);

const {:count 12} .str.69: ref;

axiom .str.69 == $sub.ref(0, 57649);

const {:count 9} .str.70: ref;

axiom .str.70 == $sub.ref(0, 58682);

const {:count 9} .str.71: ref;

axiom .str.71 == $sub.ref(0, 59715);

const {:count 15} .str.72: ref;

axiom .str.72 == $sub.ref(0, 60754);

const {:count 13} .str.73: ref;

axiom .str.73 == $sub.ref(0, 61791);

const {:count 14} .str.74: ref;

axiom .str.74 == $sub.ref(0, 62829);

const {:count 12} .str.75: ref;

axiom .str.75 == $sub.ref(0, 63865);

const {:count 8} .str.76: ref;

axiom .str.76 == $sub.ref(0, 64897);

const {:count 74} .str.194: ref;

axiom .str.194 == $sub.ref(0, 65995);

const {:count 13} .str.195: ref;

axiom .str.195 == $sub.ref(0, 67032);

const {:count 26} .str.196: ref;

axiom .str.196 == $sub.ref(0, 68082);

const {:count 46} .str.63: ref;

axiom .str.63 == $sub.ref(0, 69152);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 32} .str.77: ref;

axiom .str.77 == $sub.ref(0, 70208);

const {:count 56} .str.78: ref;

axiom .str.78 == $sub.ref(0, 71288);

const {:count 35} .str.79: ref;

axiom .str.79 == $sub.ref(0, 72347);

const {:count 16} .str.80: ref;

axiom .str.80 == $sub.ref(0, 73387);

const {:count 20} .str.81: ref;

axiom .str.81 == $sub.ref(0, 74431);

const {:count 19} .str.82: ref;

axiom .str.82 == $sub.ref(0, 75474);

const {:count 29} .str.83: ref;

axiom .str.83 == $sub.ref(0, 76527);

const {:count 34} .str.84: ref;

axiom .str.84 == $sub.ref(0, 77585);

const {:count 20} .str.85: ref;

axiom .str.85 == $sub.ref(0, 78629);

const {:count 23} .str.86: ref;

axiom .str.86 == $sub.ref(0, 79676);

const {:count 24} .str.87: ref;

axiom .str.87 == $sub.ref(0, 80724);

const {:count 23} .str.88: ref;

axiom .str.88 == $sub.ref(0, 81771);

const {:count 62} .str.192: ref;

axiom .str.192 == $sub.ref(0, 82857);

const {:count 22} .str.193: ref;

axiom .str.193 == $sub.ref(0, 83903);

const {:count 22} .str.198: ref;

axiom .str.198 == $sub.ref(0, 84949);

const {:count 23} .str.191: ref;

axiom .str.191 == $sub.ref(0, 85996);

const {:count 37} .str.95: ref;

axiom .str.95 == $sub.ref(0, 87057);

const {:count 10} .str.96: ref;

axiom .str.96 == $sub.ref(0, 88091);

const {:count 34} .str.97: ref;

axiom .str.97 == $sub.ref(0, 89149);

const {:count 46} .str.98: ref;

axiom .str.98 == $sub.ref(0, 90219);

const {:count 33} .str.99: ref;

axiom .str.99 == $sub.ref(0, 91276);

const {:count 30} .str.100: ref;

axiom .str.100 == $sub.ref(0, 92330);

const {:count 33} .str.189: ref;

axiom .str.189 == $sub.ref(0, 93387);

const {:count 12} .str.190: ref;

axiom .str.190 == $sub.ref(0, 94423);

const {:count 21} .str.145: ref;

axiom .str.145 == $sub.ref(0, 95468);

const {:count 22} .str.213: ref;

axiom .str.213 == $sub.ref(0, 96514);

const {:count 19} .str.199: ref;

axiom .str.199 == $sub.ref(0, 97557);

const {:count 19} .str.203: ref;

axiom .str.203 == $sub.ref(0, 98600);

const {:count 38} .str.167: ref;

axiom .str.167 == $sub.ref(0, 99662);

const {:count 20} .str.146: ref;

axiom .str.146 == $sub.ref(0, 100706);

const {:count 32} .str.147: ref;

axiom .str.147 == $sub.ref(0, 101762);

const {:count 6} .str.149: ref;

axiom .str.149 == $sub.ref(0, 102792);

const {:count 6} .str.150: ref;

axiom .str.150 == $sub.ref(0, 103822);

const {:count 8} .str.151: ref;

axiom .str.151 == $sub.ref(0, 104854);

const {:count 9} .str.152: ref;

axiom .str.152 == $sub.ref(0, 105887);

const {:count 82} .str.148: ref;

axiom .str.148 == $sub.ref(0, 106993);

const {:count 5} .str.154: ref;

axiom .str.154 == $sub.ref(0, 108022);

const {:count 10} .str.155: ref;

axiom .str.155 == $sub.ref(0, 109056);

const {:count 7} .str.156: ref;

axiom .str.156 == $sub.ref(0, 110087);

const {:count 8} .str.157: ref;

axiom .str.157 == $sub.ref(0, 111119);

const {:count 6} .str.158: ref;

axiom .str.158 == $sub.ref(0, 112149);

const {:count 6} .str.159: ref;

axiom .str.159 == $sub.ref(0, 113179);

const {:count 85} .str.153: ref;

axiom .str.153 == $sub.ref(0, 114288);

const {:count 5} .str.161: ref;

axiom .str.161 == $sub.ref(0, 115317);

const {:count 14} .str.162: ref;

axiom .str.162 == $sub.ref(0, 116355);

const {:count 7} .str.163: ref;

axiom .str.163 == $sub.ref(0, 117386);

const {:count 8} .str.164: ref;

axiom .str.164 == $sub.ref(0, 118418);

const {:count 93} .str.160: ref;

axiom .str.160 == $sub.ref(0, 119535);

const {:count 33} .str.187: ref;

axiom .str.187 == $sub.ref(0, 120592);

const {:count 121} .str.188: ref;

axiom .str.188 == $sub.ref(0, 121737);

const {:count 31} .str.185: ref;

axiom .str.185 == $sub.ref(0, 122792);

const {:count 260} .str.186: ref;

axiom .str.186 == $sub.ref(0, 124076);

const {:count 35} .str.182: ref;

axiom .str.182 == $sub.ref(0, 125135);

const {:count 52} .str.183: ref;

axiom .str.183 == $sub.ref(0, 126211);

const {:count 53} .str.184: ref;

axiom .str.184 == $sub.ref(0, 127288);

const {:count 35} .str.179: ref;

axiom .str.179 == $sub.ref(0, 128347);

const {:count 141} .str.180: ref;

axiom .str.180 == $sub.ref(0, 129512);

const {:count 47} .str.181: ref;

axiom .str.181 == $sub.ref(0, 130583);

const {:count 36} .str.177: ref;

axiom .str.177 == $sub.ref(0, 131643);

const {:count 364} .str.178: ref;

axiom .str.178 == $sub.ref(0, 133031);

const {:count 36} .str.174: ref;

axiom .str.174 == $sub.ref(0, 134091);

const {:count 61} .str.175: ref;

axiom .str.175 == $sub.ref(0, 135176);

const {:count 64} .str.176: ref;

axiom .str.176 == $sub.ref(0, 136264);

const {:count 31} .str.172: ref;

axiom .str.172 == $sub.ref(0, 137319);

const {:count 318} .str.173: ref;

axiom .str.173 == $sub.ref(0, 138661);

const {:count 40} .str.171: ref;

axiom .str.171 == $sub.ref(0, 139725);

const {:count 26} .str.170: ref;

axiom .str.170 == $sub.ref(0, 140775);

const {:count 37} .str.169: ref;

axiom .str.169 == $sub.ref(0, 141836);

const {:count 31} .str.168: ref;

axiom .str.168 == $sub.ref(0, 142891);

const {:count 26} .str.89: ref;

axiom .str.89 == $sub.ref(0, 143941);

const {:count 19} .str.90: ref;

axiom .str.90 == $sub.ref(0, 144984);

const {:count 27} .str.91: ref;

axiom .str.91 == $sub.ref(0, 146035);

const {:count 48} .str.92: ref;

axiom .str.92 == $sub.ref(0, 147107);

const {:count 31} .str.93: ref;

axiom .str.93 == $sub.ref(0, 148162);

const {:count 79} .str.94: ref;

axiom .str.94 == $sub.ref(0, 149265);

const {:count 17} .str.204: ref;

axiom .str.204 == $sub.ref(0, 150306);

const {:count 35} .str.205: ref;

axiom .str.205 == $sub.ref(0, 151365);

const {:count 54} .str.206: ref;

axiom .str.206 == $sub.ref(0, 152443);

const {:count 42} .str.207: ref;

axiom .str.207 == $sub.ref(0, 153509);

const {:count 28} .str.208: ref;

axiom .str.208 == $sub.ref(0, 154561);

const {:count 42} .str.209: ref;

axiom .str.209 == $sub.ref(0, 155627);

const {:count 26} .str.211: ref;

axiom .str.211 == $sub.ref(0, 156677);

const {:count 52} .str.212: ref;

axiom .str.212 == $sub.ref(0, 157753);

const {:count 23} .str.210: ref;

axiom .str.210 == $sub.ref(0, 158800);

const boot_tvec_bases: ref;

axiom boot_tvec_bases == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 236} .str.136: ref;

axiom .str.136 == $sub.ref(0, 160060);

const {:count 13} .str.140: ref;

axiom .str.140 == $sub.ref(0, 161097);

const {:count 15} .str.137: ref;

axiom .str.137 == $sub.ref(0, 162136);

const {:count 14} .str.138: ref;

axiom .str.138 == $sub.ref(0, 163174);

const {:count 26} .str.116: ref;

axiom .str.116 == $sub.ref(0, 164224);

const {:count 19} .str.133: ref;

axiom .str.133 == $sub.ref(0, 165267);

const {:count 34} .str.134: ref;

axiom .str.134 == $sub.ref(0, 166325);

const {:count 53} .str.135: ref;

axiom .str.135 == $sub.ref(0, 167402);

const {:count 25} .str.122: ref;

axiom .str.122 == $sub.ref(0, 168451);

const .str: ref;

axiom .str == $sub.ref(0, 169501);

const {:count 42} .str.1: ref;

axiom .str.1 == $sub.ref(0, 170567);

const {:count 31} .str.3: ref;

axiom .str.3 == $sub.ref(0, 171622);

const {:count 40} .str.4: ref;

axiom .str.4 == $sub.ref(0, 172686);

const {:count 31} .str.5: ref;

axiom .str.5 == $sub.ref(0, 173741);

const {:count 35} .str.6: ref;

axiom .str.6 == $sub.ref(0, 174800);

const {:count 44} .str.110: ref;

axiom .str.110 == $sub.ref(0, 175868);

const {:count 24} .str.111: ref;

axiom .str.111 == $sub.ref(0, 176916);

const {:count 12} .str.112: ref;

axiom .str.112 == $sub.ref(0, 177952);

const {:count 43} .str.113: ref;

axiom .str.113 == $sub.ref(0, 179019);

const {:count 39} .str.114: ref;

axiom .str.114 == $sub.ref(0, 180082);

const {:count 30} .str.115: ref;

axiom .str.115 == $sub.ref(0, 181136);

const {:count 10} .str.124: ref;

axiom .str.124 == $sub.ref(0, 182170);

const {:count 12} .str.125: ref;

axiom .str.125 == $sub.ref(0, 183206);

const {:count 22} .str.126: ref;

axiom .str.126 == $sub.ref(0, 184252);

const {:count 6} .str.127: ref;

axiom .str.127 == $sub.ref(0, 185282);

const {:count 7} .str.128: ref;

axiom .str.128 == $sub.ref(0, 186313);

const {:count 12} .str.129: ref;

axiom .str.129 == $sub.ref(0, 187349);

const {:count 13} .str.130: ref;

axiom .str.130 == $sub.ref(0, 188386);

const {:count 7} .str.131: ref;

axiom .str.131 == $sub.ref(0, 189417);

const {:count 10} .str.132: ref;

axiom .str.132 == $sub.ref(0, 190451);

const {:count 33} .str.123: ref;

axiom .str.123 == $sub.ref(0, 191508);

const {:count 16} .str.117: ref;

axiom .str.117 == $sub.ref(0, 192548);

const {:count 37} .str.118: ref;

axiom .str.118 == $sub.ref(0, 193609);

const {:count 54} .str.119: ref;

axiom .str.119 == $sub.ref(0, 194687);

const {:count 24} .str.120: ref;

axiom .str.120 == $sub.ref(0, 195735);

const {:count 21} .str.121: ref;

axiom .str.121 == $sub.ref(0, 196780);

const {:count 48} .str.55: ref;

axiom .str.55 == $sub.ref(0, 197852);

const {:count 11} .str.56: ref;

axiom .str.56 == $sub.ref(0, 198887);

const {:count 26} .str.57: ref;

axiom .str.57 == $sub.ref(0, 199937);

const {:count 24} .str.58: ref;

axiom .str.58 == $sub.ref(0, 200985);

const {:count 25} .str.59: ref;

axiom .str.59 == $sub.ref(0, 202034);

const {:count 32} .str.60: ref;

axiom .str.60 == $sub.ref(0, 203090);

const {:count 33} .str.61: ref;

axiom .str.61 == $sub.ref(0, 204147);

const {:count 33} .str.103: ref;

axiom .str.103 == $sub.ref(0, 205204);

const {:count 30} .str.104: ref;

axiom .str.104 == $sub.ref(0, 206258);

const {:count 61} .str.105: ref;

axiom .str.105 == $sub.ref(0, 207343);

const {:count 16} .str.106: ref;

axiom .str.106 == $sub.ref(0, 208383);

const {:count 63} .str.107: ref;

axiom .str.107 == $sub.ref(0, 209470);

const {:count 27} .str.108: ref;

axiom .str.108 == $sub.ref(0, 210521);

const {:count 54} .str.109: ref;

axiom .str.109 == $sub.ref(0, 211599);

const {:count 43} .str.101: ref;

axiom .str.101 == $sub.ref(0, 212666);

const {:count 19} .str.102: ref;

axiom .str.102 == $sub.ref(0, 213709);

const {:count 39} .str.62: ref;

axiom .str.62 == $sub.ref(0, 214772);

const {:count 22} .str.49: ref;

axiom .str.49 == $sub.ref(0, 215818);

const {:count 46} .str.50: ref;

axiom .str.50 == $sub.ref(0, 216888);

const {:count 68} .str.51: ref;

axiom .str.51 == $sub.ref(0, 217980);

const {:count 40} .str.52: ref;

axiom .str.52 == $sub.ref(0, 219044);

const {:count 38} .str.53: ref;

axiom .str.53 == $sub.ref(0, 220106);

const {:count 42} .str.54: ref;

axiom .str.54 == $sub.ref(0, 221172);

const {:count 40} .str.26: ref;

axiom .str.26 == $sub.ref(0, 222236);

const {:count 30} .str.27: ref;

axiom .str.27 == $sub.ref(0, 223290);

const {:count 30} .str.28: ref;

axiom .str.28 == $sub.ref(0, 224344);

const {:count 39} .str.29: ref;

axiom .str.29 == $sub.ref(0, 225407);

const {:count 32} .str.30: ref;

axiom .str.30 == $sub.ref(0, 226463);

const {:count 21} .str.31: ref;

axiom .str.31 == $sub.ref(0, 227508);

const {:count 27} .str.32: ref;

axiom .str.32 == $sub.ref(0, 228559);

const {:count 26} .str.33: ref;

axiom .str.33 == $sub.ref(0, 229609);

const {:count 40} .str.34: ref;

axiom .str.34 == $sub.ref(0, 230673);

const {:count 33} .str.35: ref;

axiom .str.35 == $sub.ref(0, 231730);

const {:count 40} .str.36: ref;

axiom .str.36 == $sub.ref(0, 232794);

const {:count 38} .str.37: ref;

axiom .str.37 == $sub.ref(0, 233856);

const {:count 28} .str.38: ref;

axiom .str.38 == $sub.ref(0, 234908);

const {:count 25} .str.39: ref;

axiom .str.39 == $sub.ref(0, 235957);

const {:count 68} .str.40: ref;

axiom .str.40 == $sub.ref(0, 237049);

const {:count 36} .str.41: ref;

axiom .str.41 == $sub.ref(0, 238109);

const {:count 40} .str.42: ref;

axiom .str.42 == $sub.ref(0, 239173);

const {:count 48} .str.43: ref;

axiom .str.43 == $sub.ref(0, 240245);

const {:count 35} .str.44: ref;

axiom .str.44 == $sub.ref(0, 241304);

const {:count 46} .str.45: ref;

axiom .str.45 == $sub.ref(0, 242374);

const {:count 38} .str.46: ref;

axiom .str.46 == $sub.ref(0, 243436);

const {:count 32} .str.47: ref;

axiom .str.47 == $sub.ref(0, 244492);

const {:count 39} .str.48: ref;

axiom .str.48 == $sub.ref(0, 245555);

const {:count 46} .str.7: ref;

axiom .str.7 == $sub.ref(0, 246625);

const {:count 40} .str.8: ref;

axiom .str.8 == $sub.ref(0, 247689);

const {:count 24} .str.9: ref;

axiom .str.9 == $sub.ref(0, 248737);

const {:count 92} .str.10: ref;

axiom .str.10 == $sub.ref(0, 249853);

const {:count 24} .str.11: ref;

axiom .str.11 == $sub.ref(0, 250901);

const {:count 31} .str.12: ref;

axiom .str.12 == $sub.ref(0, 251956);

const {:count 43} .str.13: ref;

axiom .str.13 == $sub.ref(0, 253023);

const {:count 41} .str.14: ref;

axiom .str.14 == $sub.ref(0, 254088);

const {:count 47} .str.15: ref;

axiom .str.15 == $sub.ref(0, 255159);

const {:count 31} .str.16: ref;

axiom .str.16 == $sub.ref(0, 256214);

const {:count 5} .str.165: ref;

axiom .str.165 == $sub.ref(0, 257243);

const {:count 6} .str.166: ref;

axiom .str.166 == $sub.ref(0, 258273);

const {:count 51} .str.141: ref;

axiom .str.141 == $sub.ref(0, 259348);

const {:count 10} .str.142: ref;

axiom .str.142 == $sub.ref(0, 260382);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 48} .str.143: ref;

axiom .str.143 == $sub.ref(0, 261454);

const {:count 12} .str.144: ref;

axiom .str.144 == $sub.ref(0, 262490);

const {:count 53} .str.139: ref;

axiom .str.139 == $sub.ref(0, 263567);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 264599);

const {:count 3} .str.1.442: ref;

axiom .str.1.442 == $sub.ref(0, 265626);

const {:count 14} .str.443: ref;

axiom .str.443 == $sub.ref(0, 266664);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 267692);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 268724);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := ldv_malloc($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 269756);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 270788);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p4 := malloc($i0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} __VERIFIER_assume($i7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 271820);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 9} $r := $malloc($i0);
    return;
}



const at76_mac80211_tx: ref;

axiom at76_mac80211_tx == $sub.ref(0, 272852);

procedure at76_mac80211_tx($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.35, $CurrAddr;



implementation at76_mac80211_tx($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i1;
  var $i38: i8;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $i62: i1;
  var $i63: i32;
  var $i64: i64;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $p74: ref;
  var $i75: i8;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i16;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i16;
  var $i84: i8;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i64;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i16;
  var $i105: i32;
  var $p106: ref;
  var $i107: i8;
  var $i108: i32;
  var $p109: ref;
  var $i110: i8;
  var $i111: i32;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i24;
  var $i124: i24;
  var $i125: i24;
  var $p126: ref;
  var $p127: ref;
  var $i128: i8;
  var $i129: i64;
  var $i130: i64;
  var $i131: i64;
  var $i132: i1;
  var $p133: ref;
  var $i134: i64;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i153: i1;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i64;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(24, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $p10 := IEEE80211_SKB_CB($p2);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i14 := $M.1;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(32, 1));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, $sub.i32(0, 115));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 176);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} ieee80211_stop_queues($p0);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} at76_ledtrig_tx_activity();
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(16, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i32($i55);
    call {:si_unique_call 23} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i56);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i32($i57);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i58);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i60 := ldv__builtin_expect($i59, 0);
    call {:si_unique_call 25} {:cexpr "tmp___2"} boogie_si_record_i64($i60);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i56, 0);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i63 := $zext.i1.i32($i62);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i63);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} vslice_dummy_var_133 := ldv__builtin_expect($i64, 0);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(16, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $p2);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $i69 := at76_calc_padding($i68);
    call {:si_unique_call 29} {:cexpr "padding"} boogie_si_record_i32($i69);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i71, $i69);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i72, 8);
    call {:si_unique_call 30} {:cexpr "submit_len"} boogie_si_record_i32($i73);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p9);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 31} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p74, 0, 2360, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i8($i69);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p9, $mul.ref(0, 2360)), $mul.ref(3, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, $i75);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i16($i78);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p9, $mul.ref(0, 2360)), $mul.ref(0, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p80, $i79);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $p81 := ieee80211_get_tx_rate($p0, $p10);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i83 := $load.i16($M.2, $p82);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i16.i8($i83);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p9, $mul.ref(0, 2360)), $mul.ref(2, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, $i84);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p9, $mul.ref(0, 2360)), $mul.ref(4, 1));
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 33} cmdloc_dummy_var_9 := $memset.i8(cmdloc_dummy_var_8, $p87, 0, 4, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_9;
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i90 := $zext.i32.i64($i89);
    call {:si_unique_call 34} {:cexpr "__len___0"} boogie_si_record_i64($i90);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p9, $mul.ref(0, 2360)), $mul.ref(8, 1));
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.0;
    cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 35} cmdloc_dummy_var_12 := $memcpy.i8(cmdloc_dummy_var_10, cmdloc_dummy_var_11, $p92, $p94, $i90, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_12;
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i95 := $M.1;
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i96 := $and.i32($i95, 16);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i113 := $M.1;
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i114 := $and.i32($i113, 32);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(32, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(48, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.0, $p139);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p9);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p6);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} usb_fill_bulk_urb($p136, $p138, $i140, $p141, $i73, at76_mac80211_tx_callback, $p142);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(32, 1));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $i145 := usb_submit_urb($p144, 32);
    call {:si_unique_call 44} {:cexpr "ret"} boogie_si_record_i32($i145);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i146 := $ne.i32($i145, 0);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume $i146 == 1;
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, $p147);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p148, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p150, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} vslice_dummy_var_136 := dev_err.ref.ref.i32($p151, .str.208, $i145);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i145, $sub.i32(0, 22));
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i153 == 1;
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p155, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p157, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(32, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(32, 1));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p162, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.0, $p163);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(32, 1));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.0, $p165);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p166, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} vslice_dummy_var_137 := dev_err.ref.ref.ref.ref.ref($p158, .str.209, $p160, $p164, $p168);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb26:
    assume $i115 == 1;
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} vslice_dummy_var_135 := printk.ref.ref.i32(.str.207, .str.204, $i73);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p117, .str.65);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p118, .str.204);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p119, .str.67);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p120, .str.17);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i123 := $load.i24($M.7, $p122);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i124 := $and.i24($i123, $sub.i24(0, 262144));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i125 := $or.i24($i124, 1860);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p122, $i125);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p126, 0);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.8, $p127);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i64($i128);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i130 := $and.i64($i129, 1);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $i131 := ldv__builtin_expect($i130, 0);
    call {:si_unique_call 40} {:cexpr "tmp___5"} boogie_si_record_i64($i131);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i132 := $ne.i64($i131, 0);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i132 == 1;
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p9);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i134 := $sext.i32.i64($i73);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} print_hex_dump(.str.2, .str.17, 2, 16, 1, $p133, $i134, 1);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb23:
    assume $i97 == 1;
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $p102 := wiphy_name($p101);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p9, $mul.ref(0, 2360)), $mul.ref(0, 1));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i104 := $load.i16($M.0, $p103);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i105 := $zext.i16.i32($i104);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p9, $mul.ref(0, 2360)), $mul.ref(3, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.0, $p106);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p9, $mul.ref(0, 2360)), $mul.ref(2, 1));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.0, $p109);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i32($i110);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} vslice_dummy_var_134 := printk.ref.ref.i32.i32.i32(.str.206, $p102, $i105, $i108, $i111);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i61 == 1;
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} warn_slowpath_null(.str.67, 1840);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(800, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $i37 := ether_addr_equal_64bits($p34, $p36);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i8($i37);
    call {:si_unique_call 16} {:cexpr "tmp___0"} boogie_si_record_i8($i38);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i38);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i41 == 1;
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i42 := $ugt.i64(6, 63);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i42 == 1);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(800, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 18} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p48, $p50, 6, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(384, 1));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} ieee80211_queue_work($p0, $p51);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} dev_kfree_skb_any($p2);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb15:
    assume $i42 == 1;
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(800, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 17} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p44, $p46, 6, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume $i39 == 1;
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb12;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} vslice_dummy_var_132 := dev_err.ref.ref.ref($p26, .str.205, .str.204);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} dev_kfree_skb_any($p2);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} vslice_dummy_var_131 := printk.ref.ref(.str.145, .str.204);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_mac80211_start: ref;

axiom at76_mac80211_start == $sub.ref(0, 273884);

procedure at76_mac80211_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, $M.34, $M.33;



implementation at76_mac80211_start($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p18: ref;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i4 := $M.1;
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 1128)), $mul.ref(56, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} mutex_lock_nested($p7, 0);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $i8 := at76_submit_rx_urb($p3);
    call {:si_unique_call 50} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} vslice_dummy_var_140 := at76_startup_device($p3);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} vslice_dummy_var_141 := at76_start_monitor($p3);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 1128)), $mul.ref(56, 1));
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} mutex_unlock($p18);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} vslice_dummy_var_139 := dev_err.ref.ref.i32($p14, .str.147, $i8);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} vslice_dummy_var_138 := printk.ref.ref(.str.145, .str.146);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_mac80211_stop: ref;

axiom at76_mac80211_stop == $sub.ref(0, 274916);

procedure at76_mac80211_stop($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr;



implementation at76_mac80211_stop($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i1;
  var vslice_dummy_var_144: i1;
  var vslice_dummy_var_145: i1;
  var vslice_dummy_var_146: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i4 := $M.1;
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 1128)), $mul.ref(464, 1));
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} vslice_dummy_var_143 := cancel_delayed_work($p7);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 1128)), $mul.ref(384, 1));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} vslice_dummy_var_144 := cancel_work_sync($p9);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 1128)), $mul.ref(224, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} vslice_dummy_var_145 := cancel_work_sync($p11);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 1128)), $mul.ref(56, 1));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} mutex_lock_nested($p13, 0);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p3);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(1032, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 1128)), $mul.ref(56, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} mutex_unlock($p22);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} vslice_dummy_var_146 := at76_set_radio($p3, 0);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 1128)), $mul.ref(40, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} usb_kill_urb($p21);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} vslice_dummy_var_142 := printk.ref.ref(.str.145, .str.203);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_add_interface: ref;

axiom at76_add_interface == $sub.ref(0, 275948);

procedure at76_add_interface($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation at76_add_interface($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var vslice_dummy_var_147: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i5 := $M.1;
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 1128)), $mul.ref(56, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} mutex_lock_nested($p8, 0);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 95);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 1128)), $mul.ref(56, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} mutex_unlock($p14);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 1128)), $mul.ref(796, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 2);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb9;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} vslice_dummy_var_147 := printk.ref.ref(.str.145, .str.199);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_remove_interface: ref;

axiom at76_remove_interface == $sub.ref(0, 276980);

procedure at76_remove_interface($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation at76_remove_interface($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var vslice_dummy_var_148: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} vslice_dummy_var_148 := printk.ref.ref(.str.145, .str.213);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_config: ref;

axiom at76_config == $sub.ref(0, 278012);

procedure at76_config($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr;



implementation at76_config($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i24;
  var $i26: i24;
  var $i27: i24;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i1;
  var $i49: i8;
  var $i50: i1;
  var $p53: ref;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 68} {:cexpr "at76_config:arg:changed"} boogie_si_record_i32($i1);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i6 := $M.1;
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i16 := $M.1;
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 1128)), $mul.ref(56, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} mutex_lock_nested($p37, 0);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.9, $p42);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 1128)), $mul.ref(792, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 1128)), $mul.ref(800, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $i48 := is_valid_ether_addr($p47);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i8($i48);
    call {:si_unique_call 76} {:cexpr "tmp___0"} boogie_si_record_i8($i49);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i8.i1($i49);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i50 == 1);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} vslice_dummy_var_152 := at76_start_monitor($p5);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 1128)), $mul.ref(56, 1));
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} mutex_unlock($p53);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb10:
    assume $i50 == 1;
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} vslice_dummy_var_151 := at76_join($p5);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} vslice_dummy_var_150 := printk.ref(.str.191);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p19, .str.65);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p20, .str.190);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p21, .str.67);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p22, .str.17);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i25 := $load.i24($M.14, $p24);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i26 := $and.i24($i25, $sub.i24(0, 262144));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i27 := $or.i24($i26, 2054);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $M.14 := $store.i24($M.14, $p24, $i27);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p28, 0);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.15, $p29);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 1);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 72} {:cexpr "tmp"} boogie_si_record_i64($i33);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i34 == 1;
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 1128)), $mul.ref(800, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} print_hex_dump(.str.2, .str.17, 2, 16, 1, $p36, 6, 1);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.9, $p12);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} vslice_dummy_var_149 := printk.ref.ref.i32(.str.189, .str.190, $i14);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_bss_info_changed: ref;

axiom at76_bss_info_changed == $sub.ref(0, 279044);

procedure at76_bss_info_changed($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr;



implementation at76_bss_info_changed($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i24;
  var $i23: i24;
  var $i24: i24;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i1;
  var $i47: i8;
  var $i48: i1;
  var $p50: ref;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 81} {:cexpr "at76_bss_info_changed:arg:changed"} boogie_si_record_i32($i3);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i8 := $M.1;
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i3, 128);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $M.1;
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref(0, 1128)), $mul.ref(56, 1));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} mutex_lock_nested($p34, 0);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i35 := $ugt.i64(6, 63);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p7, $mul.ref(0, 1128)), $mul.ref(800, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 89} cmdloc_dummy_var_18 := $memcpy.i8(cmdloc_dummy_var_16, cmdloc_dummy_var_17, $p41, $p43, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_18;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p7, $mul.ref(0, 1128)), $mul.ref(800, 1));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $i46 := is_valid_ether_addr($p45);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i8($i46);
    call {:si_unique_call 91} {:cexpr "tmp___0"} boogie_si_record_i8($i47);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i8.i1($i47);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p7, $mul.ref(0, 1128)), $mul.ref(56, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} mutex_unlock($p50);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i48 == 1;
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} vslice_dummy_var_155 := at76_join($p7);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref(0, 1128)), $mul.ref(800, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.0;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 88} cmdloc_dummy_var_15 := $memcpy.i8(cmdloc_dummy_var_13, cmdloc_dummy_var_14, $p37, $p39, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} vslice_dummy_var_154 := printk.ref(.str.191);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p16, .str.65);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $M.17 := $store.ref($M.17, $p17, .str.198);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, $p18, .str.67);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p19, .str.17);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i22 := $load.i24($M.20, $p21);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i23 := $and.i24($i22, $sub.i24(0, 262144));
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i24 := $or.i24($i23, 2082);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $M.20 := $store.i24($M.20, $p21, $i24);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $M.21 := $store.i8($M.21, $p25, 0);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.21, $p26);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i64($i27);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 1);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 85} {:cexpr "tmp"} boogie_si_record_i64($i30);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} print_hex_dump(.str.2, .str.17, 2, 16, 1, $p33, 6, 1);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} vslice_dummy_var_153 := printk.ref.ref(.str.197, .str.198);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_configure_filter: ref;

axiom at76_configure_filter == $sub.ref(0, 280076);

procedure at76_configure_filter($p0: ref, $i1: i32, $p2: ref, $i3: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation at76_configure_filter($p0: ref, $i1: i32, $p2: ref, $i3: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var vslice_dummy_var_156: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} {:cexpr "at76_configure_filter:arg:changed_flags"} boogie_si_record_i32($i1);
    call {:si_unique_call 95} {:cexpr "at76_configure_filter:arg:multicast"} boogie_si_record_i64($i3);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i7 := $M.1;
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i1, 1);
    call {:si_unique_call 97} {:cexpr "flags"} boogie_si_record_i32($i11);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 1);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p6);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(1032, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i11, 0);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(848, 1));
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb16;

  $bb17:
    assume $i25 == 1;
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(848, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 0);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(224, 1));
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} ieee80211_queue_work($p0, $p27);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(848, 1));
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb10;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(848, 1));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 1);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p2);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} vslice_dummy_var_156 := printk.ref.ref.i32.i32(.str.192, .str.193, $i1, $i9);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_set_key: ref;

axiom at76_set_key == $sub.ref(0, 281108);

procedure at76_set_key($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr;



implementation at76_set_key($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i8;
  var $p28: ref;
  var $p29: ref;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i64;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i64;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p70: ref;
  var $i25: i32;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} {:cexpr "at76_set_key:arg:cmd"} boogie_si_record_i32($i1);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i8 := $M.1;
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 1027073);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, $i27);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p7, $mul.ref(0, 1128)), $mul.ref(56, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} mutex_lock_nested($p29, 0);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i58 := $sext.i8.i32($i57);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i58);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1128)), $mul.ref(788, 1)), $mul.ref($i59, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, 0);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p7, $mul.ref(0, 1128)), $mul.ref(728, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, 0);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1128)), $mul.ref(788, 1)), $mul.ref(0, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1128)), $mul.ref(788, 1)), $mul.ref(1, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1128)), $mul.ref(788, 1)), $mul.ref(2, 1));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1128)), $mul.ref(788, 1)), $mul.ref(3, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.0, $p84);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} vslice_dummy_var_158 := at76_set_wep($p7);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p7, $mul.ref(0, 1128)), $mul.ref(56, 1));
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} mutex_unlock($p70);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb36:
    assume $i87 == 1;
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p7, $mul.ref(0, 1128)), $mul.ref(728, 1));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, 1);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb32:
    assume $i81 == 1;
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p7, $mul.ref(0, 1128)), $mul.ref(728, 1));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, 1);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb28:
    assume $i75 == 1;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p7, $mul.ref(0, 1128)), $mul.ref(728, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, 1);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb23:
    assume $i67 == 1;
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p7, $mul.ref(0, 1128)), $mul.ref(728, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, 1);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb12:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb16;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(9, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i64($i34);
    call {:si_unique_call 102} {:cexpr "__len"} boogie_si_record_i64($i35);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref(0, 1128)), $mul.ref(736, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i40 := $sext.i8.i64($i39);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p37, $mul.ref($i40, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.0;
    cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 103} cmdloc_dummy_var_21 := $memcpy.i8(cmdloc_dummy_var_19, cmdloc_dummy_var_20, $p41, $p43, $i35, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_21;
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(9, 1));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i48 := $sext.i8.i32($i47);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1128)), $mul.ref(788, 1)), $mul.ref($i49, 1));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, $i45);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i54 := $sext.i8.i32($i53);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p7, $mul.ref(0, 1128)), $mul.ref(732, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i54);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 1027077);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb6;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 95);
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i13);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(9, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} vslice_dummy_var_157 := printk.ref.ref.i32.i32.i32.i32(.str.194, .str.195, $i1, $i11, $i14, $i17);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_hw_scan: ref;

axiom at76_hw_scan == $sub.ref(0, 282140);

procedure at76_hw_scan($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr;



implementation at76_hw_scan($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $p34: ref;
  var $p32: ref;
  var $i33: i32;
  var $i35: i1;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i16;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i16;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i16;
  var $i52: i32;
  var $i53: i32;
  var $i54: i16;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $p3 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i7 := $M.1;
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p6);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(1032, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(56, 1));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} mutex_lock_nested($p15, 0);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} ieee80211_stop_queues($p0);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p3);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.22;
    call {:si_unique_call 110} cmdloc_dummy_var_23 := $memset.i8(cmdloc_dummy_var_22, $p16, 0, 48, $zext.i32.i64(2), 0 == 1);
    $M.22 := cmdloc_dummy_var_23;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.22;
    call {:si_unique_call 111} cmdloc_dummy_var_25 := $memset.i8(cmdloc_dummy_var_24, $p18, $sub.i8(0, 1), 6, $zext.i32.i64(2), 0 == 1);
    $M.22 := cmdloc_dummy_var_25;
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(38, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p34, 1);
    assume {:verifier.code 0} true;
    $p32, $i33 := $0.ref, 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i33, 0);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(876, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i16($i42);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(42, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $M.22 := $store.i16($M.22, $p44, $i43);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(880, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i16($i46);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $M.22 := $store.i16($M.22, $p48, $i47);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(876, 1));
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i53 := $mul.i32($i52, 1000);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $M.22 := $store.i16($M.22, $p55, $i54);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(47, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p56, 0);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i57 := $M.1;
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i57, 0);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p3);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $i63 := at76_set_card_command($p61, 3, $p62, 48);
    call {:si_unique_call 117} {:cexpr "ret"} boogie_si_record_i32($i63);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i63, 0);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(892, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, 1);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(464, 1));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} ieee80211_queue_delayed_work($p73, $p74, 62);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(56, 1));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} mutex_unlock($p75);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb17:
    assume $i64 == 1;
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} vslice_dummy_var_161 := dev_err.ref.ref.i32($p69, .str.202, $i63);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i58 == 1;
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} vslice_dummy_var_160 := printk.ref.ref(.str.201, .str.200);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i35 == 1;
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i33);
    call {:si_unique_call 113} {:cexpr "__len"} boogie_si_record_i64($i36);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(6, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.22;
    cmdloc_dummy_var_27 := $M.22;
    call {:si_unique_call 114} cmdloc_dummy_var_28 := $memcpy.i8(cmdloc_dummy_var_26, cmdloc_dummy_var_27, $p38, $p32, $i36, $zext.i32.i64(1), 0 == 1);
    $M.22 := cmdloc_dummy_var_28;
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i33);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(46, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p40, $i39);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(38, 1));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p22, 0);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 33)), $mul.ref(0, 1));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 33)), $mul.ref(32, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.22, $p29);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    call {:si_unique_call 112} {:cexpr "len"} boogie_si_record_i32($i31);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p32, $i33 := $p24, $i31;
    goto $bb10;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} vslice_dummy_var_159 := printk.ref.ref(.str.197, .str.200);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 283172);

procedure printk.ref.ref.i32.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 1} true;
    call {:si_unique_call 121} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 122} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.ref.i32($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref.i32($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 1} true;
    call {:si_unique_call 123} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 124} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 1} true;
    call {:si_unique_call 125} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 126} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 1} true;
    call {:si_unique_call 127} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 128} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 1} true;
    call {:si_unique_call 129} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 130} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 1} true;
    call {:si_unique_call 131} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 132} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 1} true;
    call {:si_unique_call 133} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 134} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 1} true;
    call {:si_unique_call 135} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 136} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 1} true;
    call {:si_unique_call 137} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 138} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);



procedure printk.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 1} true;
    call {:si_unique_call 139} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 140} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);



procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb12:
    assume {:verifier.code 1} true;
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 1} true;
    call {:si_unique_call 141} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 142} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.ref.ref.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32, p.13: i32, p.14: i32, p.15: i32, p.16: i32, p.17: ref, p.18: ref, p.19: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.ref.ref.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32, p.13: i32, p.14: i32, p.15: i32, p.16: i32, p.17: ref, p.18: ref, p.19: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb13:
    assume {:verifier.code 1} true;
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 1} true;
    call {:si_unique_call 143} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 144} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.ref.i32.ref.i32.i32.i32.i32.i32.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: ref, p.12: i32, p.13: ref, p.14: i32, p.15: i32, p.16: i32, p.17: i32, p.18: i32, p.19: i32, p.20: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.ref.i32.ref.i32.i32.i32.i32.i32.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: ref, p.12: i32, p.13: ref, p.14: i32, p.15: i32, p.16: i32, p.17: i32, p.18: i32, p.19: i32, p.20: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb14:
    assume {:verifier.code 1} true;
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 1} true;
    call {:si_unique_call 145} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 146} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb15:
    assume {:verifier.code 1} true;
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 1} true;
    call {:si_unique_call 147} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 148} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb16:
    assume {:verifier.code 1} true;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 1} true;
    call {:si_unique_call 149} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 150} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32, p.13: i32, p.14: i32, p.15: i32, p.16: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32, p.13: i32, p.14: i32, p.15: i32, p.16: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb17:
    assume {:verifier.code 1} true;
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 1} true;
    call {:si_unique_call 151} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 152} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb18:
    assume {:verifier.code 1} true;
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 1} true;
    call {:si_unique_call 153} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 154} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.ref.i32.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: ref, p.5: i32, p.6: i32, p.7: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.ref.i32.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: ref, p.5: i32, p.6: i32, p.7: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb19:
    assume {:verifier.code 1} true;
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 1} true;
    call {:si_unique_call 155} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 156} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32.i32.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: ref, p.7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32.i32.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: ref, p.7: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb20:
    assume {:verifier.code 1} true;
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 1} true;
    call {:si_unique_call 157} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 158} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.ref.i32.ref.ref.i32.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: ref, p.6: ref, p.7: i32, p.8: ref, p.9: i32, p.10: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref.i32.ref.ref.i32.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: ref, p.6: ref, p.7: i32, p.8: ref, p.9: i32, p.10: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb21:
    assume {:verifier.code 1} true;
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 1} true;
    call {:si_unique_call 159} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 160} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb22:
    assume {:verifier.code 1} true;
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 1} true;
    call {:si_unique_call 161} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 162} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 284204);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    return;
}



const ieee80211_stop_queues: ref;

axiom ieee80211_stop_queues == $sub.ref(0, 285236);

procedure ieee80211_stop_queues($p0: ref);
  free requires assertsPassed;



implementation ieee80211_stop_queues($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 286268);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 287300);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const at76_set_card_command: ref;

axiom at76_set_card_command == $sub.ref(0, 288332);

procedure at76_set_card_command($p0: ref, $i1: i8, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr;



implementation at76_set_card_command($p0: ref, $i1: i8, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i8;
  var $p24: ref;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i24;
  var $i34: i24;
  var $i35: i24;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $i49: i16;
  var $i50: i32;
  var $i51: i32;
  var $i52: i16;
  var $i53: i32;
  var $p54: ref;
  var $i11: i32;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var vslice_dummy_var_162: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 165} {:cexpr "at76_set_card_command:arg:cmd"} boogie_si_record_i8($i1);
    call {:si_unique_call 166} {:cexpr "at76_set_card_command:arg:buf_size"} boogie_si_record_i32($i3);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i3);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 4);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $p7 := kmalloc($i6, 208);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i1);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i3);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, $i14);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i3);
    call {:si_unique_call 168} {:cexpr "__len"} boogie_si_record_i64($i16);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.0;
    cmdloc_dummy_var_30 := $M.0;
    call {:si_unique_call 169} cmdloc_dummy_var_31 := $memcpy.i8(cmdloc_dummy_var_29, cmdloc_dummy_var_30, $p18, $p2, $i16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_31;
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i19 := $M.1;
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 1073741824);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $i46 := __create_pipe($p0, 0);
    call {:si_unique_call 176} {:cexpr "tmp___2"} boogie_si_record_i32($i46);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i46, $sub.i32(0, 2147483648));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p8);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i16($i3);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i50, 4);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $i53 := usb_control_msg($p0, $i47, 14, 64, 0, 0, $p48, $i52, 5000);
    call {:si_unique_call 178} {:cexpr "ret"} boogie_si_record_i32($i53);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p8);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} kfree($p54);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i11 := $i53;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i1);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $p24 := at76_get_cmd_string($i23);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i1);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} vslice_dummy_var_162 := printk.ref.ref.i32(.str.64, $p24, $i25);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p27, .str.65);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p28, .str.66);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p29, .str.67);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p30, .str.17);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i33 := $load.i24($M.27, $p32);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i34 := $and.i24($i33, $sub.i24(0, 262144));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i35 := $or.i24($i34, 777);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $M.27 := $store.i24($M.27, $p32, $i35);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p36, 0);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.28, $p37);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i64($i38);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 1);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 173} {:cexpr "tmp___1"} boogie_si_record_i64($i41);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i42 == 1;
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p8);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i3);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 4);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} print_hex_dump(.str.2, .str.17, 2, 16, 1, $p43, $i45, 1);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 289364);

procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 1} true;
    call {:si_unique_call 180} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 181} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 1} true;
    call {:si_unique_call 182} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 183} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 1} true;
    call {:si_unique_call 184} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 185} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 1} true;
    call {:si_unique_call 186} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 187} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 1} true;
    call {:si_unique_call 188} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 189} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 1} true;
    call {:si_unique_call 190} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 191} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ieee80211_queue_delayed_work: ref;

axiom ieee80211_queue_delayed_work == $sub.ref(0, 290396);

procedure ieee80211_queue_delayed_work($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation ieee80211_queue_delayed_work($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} {:cexpr "ieee80211_queue_delayed_work:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 291428);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 292460);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 194} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const at76_get_cmd_string: ref;

axiom at76_get_cmd_string == $sub.ref(0, 293492);

procedure at76_get_cmd_string($i0: i8) returns ($r: ref);
  free requires assertsPassed;



implementation at76_get_cmd_string($i0: i8) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} {:cexpr "at76_get_cmd_string:arg:cmd_status"} boogie_si_record_i8($i0);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i1, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p12 := .str.76;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb8:
    assume $i5 == 1;
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p12 := .str.75;
    goto $bb23;

  $bb6:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb11:
    assume $i6 == 1;
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p12 := .str.74;
    goto $bb23;

  $bb4:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p12 := .str.73;
    goto $bb23;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p12 := .str.72;
    goto $bb23;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i9 == 1);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p12 := .str.71;
    goto $bb23;

  $bb17:
    assume $i9 == 1;
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p12 := .str.70;
    goto $bb23;

  $bb15:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i10 == 1);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p12 := .str.69;
    goto $bb23;

  $bb19:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb21:
    assume $i11 == 1;
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p12 := .str.68;
    goto $bb23;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 294524);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 198} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const print_hex_dump: ref;

axiom print_hex_dump == $sub.ref(0, 295556);

procedure print_hex_dump($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64, $i7: i1);
  free requires assertsPassed;



implementation print_hex_dump($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64, $i7: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} {:cexpr "print_hex_dump:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 200} {:cexpr "print_hex_dump:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 201} {:cexpr "print_hex_dump:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 202} {:cexpr "print_hex_dump:arg:arg6"} boogie_si_record_i64($i6);
    call {:si_unique_call 203} {:cexpr "print_hex_dump:arg:arg7"} boogie_si_record_i1($i7);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 296588);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 297620);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 205} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 206} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 207} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 208} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 209} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 210} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 211} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 1} true;
    call {:si_unique_call 212} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 213} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 298652);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} free_($p0);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 299684);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 215} $free($p0);
    return;
}



const at76_set_wep: ref;

axiom at76_set_wep == $sub.ref(0, 300716);

procedure at76_set_wep($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr;



implementation at76_set_wep($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i8;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i8;
  var $p34: ref;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var vslice_dummy_var_163: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(4, 1));
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(0, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 6);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(1, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 65);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(2, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p3);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.0;
    call {:si_unique_call 216} cmdloc_dummy_var_33 := $memset.i8(cmdloc_dummy_var_32, $p10, 0, 65, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_33;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(728, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 68)), $mul.ref(3, 1));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 0);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 68)), $mul.ref(64, 1));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 0);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(728, 1));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, $i29);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(732, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 68)), $mul.ref(1, 1));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, $i33);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i35 := $ugt.i64(52, 63);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i35 == 1);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 68)), $mul.ref(12, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(736, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_37 := $M.0;
    cmdloc_dummy_var_38 := $M.0;
    call {:si_unique_call 218} cmdloc_dummy_var_39 := $memcpy.i8(cmdloc_dummy_var_37, cmdloc_dummy_var_38, $p41, $p43, 52, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_39;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1));
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i45 := at76_set_mib($p0, $p44);
    call {:si_unique_call 220} {:cexpr "ret"} boogie_si_record_i32($i45);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, 0);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $r := $i45;
    return;

  $bb10:
    assume $i46 == 1;
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} vslice_dummy_var_163 := dev_err.ref.ref.i32($p51, .str.196, $i45);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i35 == 1;
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 68)), $mul.ref(12, 1));
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(736, 1));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_34 := $M.0;
    cmdloc_dummy_var_35 := $M.0;
    call {:si_unique_call 217} cmdloc_dummy_var_36 := $memcpy.i8(cmdloc_dummy_var_34, cmdloc_dummy_var_35, $p37, $p39, 52, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_36;
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(732, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(788, 1)), $mul.ref($i16, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i32($i20, 5);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i21 == 1);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 68)), $mul.ref(64, 1));
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 68)), $mul.ref(3, 1));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 1);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i21 == 1;
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 68)), $mul.ref(64, 1));
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 2);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const at76_set_mib: ref;

axiom at76_set_mib == $sub.ref(0, 301748);

procedure at76_set_mib($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr;



implementation at76_set_mib($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i20: i32;
  var $i11: i32;
  var vslice_dummy_var_164: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(1, 1));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 4);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i9 := at76_set_card_command($p3, 1, $p4, $i8);
    call {:si_unique_call 223} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i12 := at76_wait_completion($p0, 1);
    call {:si_unique_call 225} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 1);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i20 := $i12;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i11 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} vslice_dummy_var_164 := _dev_info.ref.ref.i32($p18, .str.63, $i12);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 5);
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb3;
}



const at76_wait_completion: ref;

axiom at76_wait_completion == $sub.ref(0, 302780);

procedure at76_wait_completion($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation at76_wait_completion($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i13: i32;
  var $i11: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i12: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i8;
  var $i25: i32;
  var $i26: i8;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i34: i1;
  var $i35: i1;
  var $i36: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i20: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i64;
  var vslice_dummy_var_168: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} {:cexpr "at76_wait_completion:arg:cmd"} boogie_si_record_i32($i1);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, jiffies);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 1250);
    call {:si_unique_call 228} {:cexpr "timeout"} boogie_si_record_i64($i3);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i1);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} $i9 := at76_get_cmd_status($p5, $i8);
    call {:si_unique_call 230} {:cexpr "status"} boogie_si_record_i32($i9);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i10 == 1);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb4;

  $bb4:
    call $i13, $i12, $i21, $i22, $i23, $i24, $i25, $i26, $p27, $p28, $p29, $p30, $p31, $p32, $i34, $i35, $i36, $i38, $i39, $i40, $p47, $i48, $i49, vslice_dummy_var_166, vslice_dummy_var_167 := at76_wait_completion_loop_$bb4($p0, $i1, $i3, $p4, $i8, $i13, $i12, $i21, $i22, $i23, $i24, $i25, $i26, $p27, $p28, $p29, $p30, $p31, $p32, $i34, $i35, $i36, $i38, $i39, $i40, $p47, $i48, $i49, vslice_dummy_var_166, vslice_dummy_var_167);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i21 := $M.1;
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 2097152);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i12, 8);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} vslice_dummy_var_167 := schedule_timeout_interruptible(25);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, jiffies);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i39 := $sub.i64($i3, $i38);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i40 := $slt.i64($i39, 0);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p4);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $i48 := at76_get_cmd_status($p47, $i8);
    call {:si_unique_call 238} {:cexpr "status"} boogie_si_record_i32($i48);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 0);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i13 := $i48;
    assume true;
    goto $bb5, $bb20;

  $bb20:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i12 := $i48;
    goto $bb20_dummy;

  $bb5:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i11 := $i13;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} vslice_dummy_var_165 := dev_err.ref.ref.i32($p18, .str.77, $i11);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i20 := $i11;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} vslice_dummy_var_168 := dev_err.ref.ref.i32($p45, .str.79, $i1);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 110);
    goto $bb6;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i12, 0);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i36 := $i12;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb13;

  $bb14:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i20 := $i36;
    goto $bb6;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i12);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $p27 := at76_get_cmd_status_string($i26);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $p32 := wiphy_name($p31);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} vslice_dummy_var_166 := printk.ref.ref.i32.i32.ref(.str.78, $p32, $i1, $i12, $p27);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb20_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 303812);

procedure _dev_info.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 1} true;
    call {:si_unique_call 239} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 240} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 1} true;
    call {:si_unique_call 241} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 242} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 1} true;
    call {:si_unique_call 243} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 244} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 1} true;
    call {:si_unique_call 245} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 246} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const at76_get_cmd_status: ref;

axiom at76_get_cmd_status == $sub.ref(0, 304844);

procedure at76_get_cmd_status($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation at76_get_cmd_status($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} {:cexpr "at76_get_cmd_status:arg:cmd"} boogie_si_record_i8($i1);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $p2 := kmalloc(40, 16);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $i6 := __create_pipe($p0, 0);
    call {:si_unique_call 250} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, $sub.i32(0, 2147483520));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $i10 := usb_control_msg($p0, $i7, 34, $sub.i8(0, 63), $i9, 0, $p2, 40, 5000);
    call {:si_unique_call 252} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i11 := $sge.i32($i10, 0);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i15 := $i10;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} kfree($p2);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i5 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p2, $mul.ref(5, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    call {:si_unique_call 253} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;
}



const at76_get_cmd_status_string: ref;

axiom at76_get_cmd_status_string == $sub.ref(0, 305876);

procedure at76_get_cmd_status_string($i0: i8) returns ($r: ref);
  free requires assertsPassed;



implementation at76_get_cmd_status_string($i0: i8) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} {:cexpr "at76_get_cmd_status_string:arg:cmd_status"} boogie_si_record_i8($i0);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i1, 240);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i1, 255);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 255);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p15 := .str.76;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $r := $p15;
    return;

  $bb10:
    assume $i6 == 1;
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p15 := .str.87;
    goto $bb29;

  $bb8:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 240);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb12;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p15 := .str.88;
    goto $bb29;

  $bb6:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb12;

  $bb15:
    assume $i8 == 1;
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p15 := .str.86;
    goto $bb29;

  $bb4:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i1, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i9 == 1);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p15 := .str.85;
    goto $bb29;

  $bb17:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb12;

  $bb19:
    assume $i10 == 1;
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p15 := .str.84;
    goto $bb29;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i12 == 1);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p15 := .str.83;
    goto $bb29;

  $bb23:
    assume $i12 == 1;
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p15 := .str.82;
    goto $bb29;

  $bb21:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i13 == 1);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p15 := .str.81;
    goto $bb29;

  $bb25:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb12;

  $bb27:
    assume $i14 == 1;
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p15 := .str.80;
    goto $bb29;
}



const wiphy_name: ref;

axiom wiphy_name == $sub.ref(0, 306908);

procedure wiphy_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation wiphy_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $p2 := dev_name($p1);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const schedule_timeout_interruptible: ref;

axiom schedule_timeout_interruptible == $sub.ref(0, 307940);

procedure schedule_timeout_interruptible($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout_interruptible($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 257} {:cexpr "schedule_timeout_interruptible:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 1} true;
    call {:si_unique_call 258} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 259} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 308972);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $p9 := kobject_name($p8);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 310004);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ieee80211_queue_work: ref;

axiom ieee80211_queue_work == $sub.ref(0, 311036);

procedure ieee80211_queue_work($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ieee80211_queue_work($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    return;
}



const is_valid_ether_addr: ref;

axiom is_valid_ether_addr == $sub.ref(0, 312068);

procedure is_valid_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_valid_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $i1 := is_multicast_ether_addr($p0);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 262} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i6 := is_zero_ether_addr($p0);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 264} {:cexpr "tmp___1"} boogie_si_record_i8($i7);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb12;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb11;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const at76_join: ref;

axiom at76_join == $sub.ref(0, 313100);

procedure at76_join($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr;



implementation at76_join($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i8;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $p1 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_40 := $M.0;
    call {:si_unique_call 266} cmdloc_dummy_var_41 := $memset.i8(cmdloc_dummy_var_40, $p2, 0, 44, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_41;
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(840, 1));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    call {:si_unique_call 267} {:cexpr "__len"} boogie_si_record_i64($i5);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(6, 1));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(806, 1));
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.0;
    cmdloc_dummy_var_43 := $M.0;
    call {:si_unique_call 268} cmdloc_dummy_var_44 := $memcpy.i8(cmdloc_dummy_var_42, cmdloc_dummy_var_43, $p7, $p9, $i5, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_44;
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(840, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(42, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i64(6, 63);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(800, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.0;
    cmdloc_dummy_var_49 := $M.0;
    call {:si_unique_call 270} cmdloc_dummy_var_50 := $memcpy.i8(cmdloc_dummy_var_48, cmdloc_dummy_var_49, $p20, $p22, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_50;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(38, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 2);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(792, 1));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(39, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, $i26);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(40, 1));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, 2000);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i29 := $M.1;
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 0);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p1);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i35 := at76_set_card_command($p33, 4, $p34, 44);
    call {:si_unique_call 273} {:cexpr "ret"} boogie_si_record_i32($i35);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 0);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i43 := at76_wait_completion($p0, 4);
    call {:si_unique_call 276} {:cexpr "ret"} boogie_si_record_i32($i43);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i44 := $M.1;
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, 0);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i43, 1);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} vslice_dummy_var_173 := at76_set_pm_mode($p0);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb14:
    assume $i47 == 1;
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} vslice_dummy_var_172 := dev_err.ref.ref.i32($p52, .str.99, $i43);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11:
    assume $i45 == 1;
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} vslice_dummy_var_171 := printk.ref.ref.i32(.str.98, .str.96, $i43);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} vslice_dummy_var_170 := dev_err.ref.ref.i32($p41, .str.97, $i35);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} vslice_dummy_var_169 := printk.ref.ref(.str.95, .str.96);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(800, 1));
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.0;
    cmdloc_dummy_var_46 := $M.0;
    call {:si_unique_call 269} cmdloc_dummy_var_47 := $memcpy.i8(cmdloc_dummy_var_45, cmdloc_dummy_var_46, $p16, $p18, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_47;
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_set_pm_mode: ref;

axiom at76_set_pm_mode == $sub.ref(0, 314132);

procedure at76_set_pm_mode($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr;



implementation at76_set_pm_mode($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var vslice_dummy_var_174: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(0, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 5);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(1, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 1);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(2, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 53);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(896, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(4, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i8);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i13 := at76_set_mib($p0, $p12);
    call {:si_unique_call 281} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} vslice_dummy_var_174 := dev_err.ref.ref.i32($p19, .str.100, $i13);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const is_multicast_ether_addr: ref;

axiom is_multicast_ether_addr == $sub.ref(0, 315164);

procedure is_multicast_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_multicast_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const is_zero_ether_addr: ref;

axiom is_zero_ether_addr == $sub.ref(0, 316196);

procedure is_zero_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_zero_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 2));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i2, $i6);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const at76_start_monitor: ref;

axiom at76_start_monitor == $sub.ref(0, 317228);

procedure at76_start_monitor($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr;



implementation at76_start_monitor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i16;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i16;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $p1 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_51 := $M.29;
    call {:si_unique_call 284} cmdloc_dummy_var_52 := $memset.i8(cmdloc_dummy_var_51, $p2, 0, 48, $zext.i32.i64(2), 0 == 1);
    $M.29 := cmdloc_dummy_var_52;
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.29;
    call {:si_unique_call 285} cmdloc_dummy_var_54 := $memset.i8(cmdloc_dummy_var_53, $p4, $sub.i8(0, 1), 6, $zext.i32.i64(2), 0 == 1);
    $M.29 := cmdloc_dummy_var_54;
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(792, 1));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(39, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p8, $i7);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(38, 1));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p9, 1);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(47, 1));
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p10, 0);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(876, 1));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(42, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p14, $i13);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(880, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p18, $i17);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $M.29 := $store.i16($M.29, $p19, 0);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p1);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i23 := at76_set_card_command($p21, 3, $p22, 48);
    call {:si_unique_call 287} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i24 := $sge.i32($i23, 0);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i28 := $i23;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i27 := at76_get_cmd_status($p26, 3);
    call {:si_unique_call 289} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb3;
}



const cancel_delayed_work: ref;

axiom cancel_delayed_work == $sub.ref(0, 318260);

procedure cancel_delayed_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_delayed_work($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 1} true;
    call {:si_unique_call 290} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 291} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const cancel_work_sync: ref;

axiom cancel_work_sync == $sub.ref(0, 319292);

procedure cancel_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 1} true;
    call {:si_unique_call 292} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 293} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const at76_set_radio: ref;

axiom at76_set_radio == $sub.ref(0, 320324);

procedure at76_set_radio($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr;



implementation at76_set_radio($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i21: i32;
  var $p22: ref;
  var $i5: i32;
  var vslice_dummy_var_175: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} {:cexpr "at76_set_radio:arg:enable"} boogie_si_record_i32($i1);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(844, 1));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $i1);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i1, 0);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then 6 else 7);
    call {:si_unique_call 295} {:cexpr "cmd"} boogie_si_record_i32($i7);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i7);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i13 := at76_set_card_command($p9, $i12, $0.ref, 0);
    call {:si_unique_call 297} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(844, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i1);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i5 := $i21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} vslice_dummy_var_175 := dev_err.ref.ref.i32.i32($p19, .str.167, $i7, $i13);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i21 := $i13;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 321356);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    return;
}



const at76_submit_rx_urb: ref;

axiom at76_submit_rx_urb == $sub.ref(0, 322388);

procedure at76_submit_rx_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.33, $CurrAddr;



implementation at76_submit_rx_urb($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p26: ref;
  var $i28: i32;
  var $p27: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i25: i32;
  var $i54: i1;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i13: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: ref;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(8, 1));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(40, 1));
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p2);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $i28 := skb_headroom($p2);
    call {:si_unique_call 302} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} vslice_dummy_var_177 := skb_push($p2, $i28);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} skb_trim($p2, 0);
    assume {:verifier.code 0} true;
    $p27 := $p2;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $i30 := skb_tailroom($p27);
    call {:si_unique_call 307} {:cexpr "size"} boogie_si_record_i32($i30);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $p31 := skb_put($p27, $i30);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(40, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(52, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p0);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} usb_fill_bulk_urb($p33, $p35, $i37, $p31, $i30, at76_rx_callback, $p38);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(40, 1));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $i41 := usb_submit_urb($p40, 32);
    call {:si_unique_call 311} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 0);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i25 := $i41;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i25, 0);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i13 := $i25;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb21:
    assume $i54 == 1;
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i25, $sub.i32(0, 19));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb23;

  $bb24:
    assume $i55 == 1;
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} vslice_dummy_var_181 := dev_err.ref.ref($p60, .str.94);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb12:
    assume $i42 == 1;
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i41, $sub.i32(0, 19));
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i43 == 1);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} vslice_dummy_var_179 := dev_err.ref.ref.i32($p52, .str.93, $i41);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i43 == 1;
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i44 := $M.1;
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 16384);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i46 == 1;
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} vslice_dummy_var_180 := printk.ref(.str.92);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $p16 := ldv_dev_alloc_skb_12(2364);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(8, 1));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p16);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p27 := $p16;
    goto $bb11;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} vslice_dummy_var_178 := dev_err.ref.ref($p23, .str.91);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 12);
    goto $bb9;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} vslice_dummy_var_176 := dev_err.ref.ref.ref($p11, .str.89, .str.90);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 14);
    goto $bb3;
}



const at76_startup_device: ref;

axiom at76_startup_device == $sub.ref(0, 323420);

procedure at76_startup_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr;



implementation at76_startup_device($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i8;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $i115: i64;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $i128: i16;
  var $p129: ref;
  var $p130: ref;
  var $i131: i32;
  var $i132: i16;
  var $p133: ref;
  var $i134: i1;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $i141: i1;
  var $i142: i32;
  var $i143: i8;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i8;
  var $p148: ref;
  var $p149: ref;
  var $i150: i32;
  var $i151: i8;
  var $p152: ref;
  var $i153: i1;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i32;
  var $i164: i8;
  var $p165: ref;
  var $p166: ref;
  var $i167: i32;
  var $i168: i8;
  var $p169: ref;
  var $i170: i1;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $i180: i32;
  var $i181: i8;
  var $p182: ref;
  var $p183: ref;
  var $i184: i32;
  var $i185: i16;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $i204: i32;
  var $i205: i1;
  var $p207: ref;
  var $i208: i32;
  var $i209: i8;
  var $i210: i32;
  var $i211: i8;
  var $i212: i32;
  var $i213: i1;
  var $p214: ref;
  var $i215: i32;
  var $i216: i16;
  var $i217: i32;
  var $i218: i16;
  var $i219: i32;
  var $i220: i1;
  var $p221: ref;
  var $i222: i32;
  var $i223: i16;
  var $i224: i32;
  var $i225: i16;
  var $i226: i32;
  var $i227: i1;
  var $p228: ref;
  var $i229: i32;
  var $i230: i1;
  var $i231: i32;
  var $i232: i32;
  var $i233: i1;
  var $i234: i32;
  var $i235: i1;
  var $i236: i32;
  var $i237: i32;
  var $i238: i1;
  var $i199: i32;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1));
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1048576);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i36 := $M.1;
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 1048576);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i78 := $M.1;
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, 1048576);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p1);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_55 := $M.0;
    call {:si_unique_call 321} cmdloc_dummy_var_56 := $memset.i8(cmdloc_dummy_var_55, $p104, 0, 104, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_56;
    $p105 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1)), $mul.ref(1, 1));
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p105, 0);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(872, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i8($i107);
    $p109 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1)), $mul.ref(2, 1));
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p109, $i108);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(728, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i112 == 1);
    $p124 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1)), $mul.ref(0, 1));
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p124, 0);
    $p125 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1)), $mul.ref(3, 1));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p125, 0);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(868, 1));
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.0, $p126);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i32.i16($i127);
    $p129 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1)), $mul.ref(4, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p129, $i128);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(864, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i132 := $trunc.i32.i16($i131);
    $p133 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1)), $mul.ref(6, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p133, $i132);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i134 := $ugt.i64(4, 63);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i134 == 1);
    $p137 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1)), $mul.ref(8, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_60 := $M.0;
    cmdloc_dummy_var_61 := $M.0;
    call {:si_unique_call 323} cmdloc_dummy_var_62 := $memcpy.i8(cmdloc_dummy_var_60, cmdloc_dummy_var_61, $p138, hw_rates, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_62;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(860, 1));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.0, $p139);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 4);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i142 := $zext.i1.i32($i141);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i143 := $trunc.i32.i8($i142);
    $p144 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1)), $mul.ref(12, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p144, $i143);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(792, 1));
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i32.i8($i146);
    $p148 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1)), $mul.ref(13, 1));
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p148, $i147);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(728, 1));
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.0, $p149);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i151 := $trunc.i32.i8($i150);
    $p152 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1)), $mul.ref(14, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p152, $i151);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i153 := $ugt.i64(32, 63);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i153 == 1);
    $p158 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1)), $mul.ref(16, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p158);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(806, 1));
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p160);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_66 := $M.0;
    cmdloc_dummy_var_67 := $M.0;
    call {:si_unique_call 325} cmdloc_dummy_var_68 := $memcpy.i8(cmdloc_dummy_var_66, cmdloc_dummy_var_67, $p159, $p161, 32, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_68;
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(840, 1));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, $p162);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i164 := $trunc.i32.i8($i163);
    $p165 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1)), $mul.ref(100, 1));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p165, $i164);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(732, 1));
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.0, $p166);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i168 := $trunc.i32.i8($i167);
    $p169 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1)), $mul.ref(15, 1));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p169, $i168);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i170 := $ugt.i64(52, 63);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i170 == 1);
    $p175 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1)), $mul.ref(48, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p175);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(736, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p177);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_72 := $M.0;
    cmdloc_dummy_var_73 := $M.0;
    call {:si_unique_call 327} cmdloc_dummy_var_74 := $memcpy.i8(cmdloc_dummy_var_72, cmdloc_dummy_var_73, $p176, $p178, 52, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_74;
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(852, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.0, $p179);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i181 := $trunc.i32.i8($i180);
    $p182 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1)), $mul.ref(101, 1));
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p182, $i181);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1108, 1));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i184 := $load.i32($M.0, $p183);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i185 := $trunc.i32.i16($i184);
    $p186 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1)), $mul.ref(102, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p186, $i185);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p190 := $bitcast.ref.ref($p189);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $i191 := at76_set_card_command($p188, 11, $p190, 104);
    call {:si_unique_call 329} {:cexpr "ret"} boogie_si_record_i32($i191);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i192 := $slt.i32($i191, 0);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} vslice_dummy_var_186 := at76_wait_completion($p0, 11);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(800, 1));
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p202 := $bitcast.ref.ref($p201);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_75 := $M.0;
    call {:si_unique_call 332} cmdloc_dummy_var_76 := $memset.i8(cmdloc_dummy_var_75, $p202, 0, 6, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_76;
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(892, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p203, 0);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $i204 := at76_set_radio($p0, 1);
    call {:si_unique_call 334} {:cexpr "tmp___2"} boogie_si_record_i32($i204);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i204, 1);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(852, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i208 := $load.i32($M.0, $p207);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i209 := $trunc.i32.i8($i208);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i210 := $zext.i8.i32($i209);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i32.i8($i210);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $i212 := at76_set_preamble($p0, $i211);
    call {:si_unique_call 337} {:cexpr "ret"} boogie_si_record_i32($i212);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i213 := $slt.i32($i212, 0);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(864, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.0, $p214);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i216 := $trunc.i32.i16($i215);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i217 := $zext.i16.i32($i216);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i218 := $trunc.i32.i16($i217);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $i219 := at76_set_frag($p0, $i218);
    call {:si_unique_call 339} {:cexpr "ret"} boogie_si_record_i32($i219);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i220 := $slt.i32($i219, 0);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i220} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(868, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i222 := $load.i32($M.0, $p221);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i223 := $trunc.i32.i16($i222);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i224 := $zext.i16.i32($i223);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i225 := $trunc.i32.i16($i224);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $i226 := at76_set_rts($p0, $i225);
    call {:si_unique_call 341} {:cexpr "ret"} boogie_si_record_i32($i226);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i227 := $slt.i32($i226, 0);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i227} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(860, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i229 := $load.i32($M.0, $p228);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, 4);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i231 := $zext.i1.i32($i230);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $i232 := at76_set_autorate_fallback($p0, $i231);
    call {:si_unique_call 343} {:cexpr "ret"} boogie_si_record_i32($i232);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i233 := $slt.i32($i232, 0);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $i234 := at76_set_pm_mode($p0);
    call {:si_unique_call 345} {:cexpr "ret"} boogie_si_record_i32($i234);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i235 := $slt.i32($i234, 0);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i235} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i236 := $M.1;
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i237 := $and.i32($i236, 33554432);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i238 := $ne.i32($i237, 0);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i238} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i199 := 0;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $r := $i199;
    return;

  $bb59:
    assume $i238 == 1;
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} at76_dump_mib_mac($p0);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} at76_dump_mib_mac_addr($p0);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} at76_dump_mib_mac_mgmt($p0);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} at76_dump_mib_mac_wep($p0);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} at76_dump_mib_mdomain($p0);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} at76_dump_mib_phy($p0);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} at76_dump_mib_local($p0);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb56:
    assume $i235 == 1;
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i199 := $i234;
    goto $bb39;

  $bb53:
    assume $i233 == 1;
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i199 := $i232;
    goto $bb39;

  $bb50:
    assume $i227 == 1;
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i199 := $i226;
    goto $bb39;

  $bb47:
    assume $i220 == 1;
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i199 := $i219;
    goto $bb39;

  $bb44:
    assume $i213 == 1;
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i199 := $i212;
    goto $bb39;

  $bb41:
    assume $i205 == 1;
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} vslice_dummy_var_187 := at76_wait_completion($p0, 6);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb37:
    assume $i192 == 1;
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p194 := $load.ref($M.0, $p193);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p194, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p196 := $load.ref($M.0, $p195);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p196, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} vslice_dummy_var_185 := dev_err.ref.ref.i32($p197, .str.97, $i191);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i199 := $i191;
    goto $bb39;

  $bb34:
    assume $i170 == 1;
    $p171 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1)), $mul.ref(48, 1));
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p172 := $bitcast.ref.ref($p171);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(736, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p173);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_69 := $M.0;
    cmdloc_dummy_var_70 := $M.0;
    call {:si_unique_call 326} cmdloc_dummy_var_71 := $memcpy.i8(cmdloc_dummy_var_69, cmdloc_dummy_var_70, $p172, $p174, 52, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_71;
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i153 == 1;
    $p154 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1)), $mul.ref(16, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p154);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(806, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p156);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_63 := $M.0;
    cmdloc_dummy_var_64 := $M.0;
    call {:si_unique_call 324} cmdloc_dummy_var_65 := $memcpy.i8(cmdloc_dummy_var_63, cmdloc_dummy_var_64, $p155, $p157, 32, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_65;
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i134 == 1;
    $p135 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1)), $mul.ref(8, 1));
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p135);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_57 := $M.0;
    cmdloc_dummy_var_58 := $M.0;
    call {:si_unique_call 322} cmdloc_dummy_var_59 := $memcpy.i8(cmdloc_dummy_var_57, cmdloc_dummy_var_58, $p136, hw_rates, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_59;
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb22:
    assume $i112 == 1;
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(732, 1));
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i115 := $sext.i32.i64($i114);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(788, 1)), $mul.ref($i115, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.0, $p117);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i120 := $ugt.i32($i119, 5);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i120 == 1);
    $p122 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1)), $mul.ref(3, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p122, 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    $p123 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1)), $mul.ref(0, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p123, 1);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i120 == 1;
    $p121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(920, 1)), $mul.ref(3, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p121, 2);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb19:
    assume $i80 == 1;
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $p85 := wiphy_name($p84);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(896, 1));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.0, $p86);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(900, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(856, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 0);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p94 := (if $i93 == 1 then .str.161 else .str.162);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(876, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(880, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(884, 1));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 0);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p102 := (if $i101 == 1 then .str.163 else .str.164);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} vslice_dummy_var_184 := printk.ref.ref.i32.i32.ref.i32.i32.ref(.str.160, $p85, $i88, $i90, $p94, $i96, $i98, $p102);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb4:
    assume $i38 == 1;
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $p43 := wiphy_name($p42);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(852, 1));
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i45);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref(preambles, $mul.ref(0, 24)), $mul.ref($i46, 8));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.30, $p47);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(868, 1));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(872, 1));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(864, 1));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(860, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i57 == 1);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p74 := .str.159;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(856, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} vslice_dummy_var_183 := printk.ref.ref.ref.i32.i32.i32.ref.i32(.str.153, $p43, $p48, $i50, $i52, $i54, $p74, $i76);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb6:
    assume $i57 == 1;
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(860, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 1);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i60 == 1);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p73 := .str.158;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p74 := $p73;
    goto $bb17;

  $bb8:
    assume $i60 == 1;
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(860, 1));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 2);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i63 == 1);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p72 := .str.157;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p73 := $p72;
    goto $bb16;

  $bb10:
    assume $i63 == 1;
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(860, 1));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 3);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i66 == 1);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p71 := .str.156;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p72 := $p71;
    goto $bb15;

  $bb12:
    assume $i66 == 1;
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(860, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 4);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p70 := (if $i69 == 1 then .str.154 else .str.155);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p71 := $p70;
    goto $bb14;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $p9 := wiphy_name($p8);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(840, 1));
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(806, 1));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(806, 1));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(796, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p19 := (if $i18 == 1 then .str.149 else .str.150);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(792, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(728, 1));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p25 := (if $i24 == 1 then .str.151 else .str.152);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(732, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(732, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(788, 1)), $mul.ref($i30, 1));
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} vslice_dummy_var_182 := printk.ref.ref.i32.ref.i32.ref.ref.i32.ref.i32.i32(.str.148, $p9, $i11, $p13, 32, $p15, $p19, $i21, $p25, $i27, $i34);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_set_preamble: ref;

axiom at76_set_preamble == $sub.ref(0, 324452);

procedure at76_set_preamble($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr;



implementation at76_set_preamble($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var vslice_dummy_var_188: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} {:cexpr "at76_set_preamble:arg:type"} boogie_si_record_i8($i1);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(0, 1));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 1);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(1, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 1);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(2, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 9);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(4, 1));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $i1);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $i12 := at76_set_mib($p0, $p11);
    call {:si_unique_call 355} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} vslice_dummy_var_188 := dev_err.ref.ref.i32($p18, .str.168, $i12);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_set_frag: ref;

axiom at76_set_frag == $sub.ref(0, 325484);

procedure at76_set_frag($p0: ref, $i1: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr;



implementation at76_set_frag($p0: ref, $i1: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var vslice_dummy_var_189: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} {:cexpr "at76_set_frag:arg:size"} boogie_si_record_i16($i1);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(0, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 3);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(1, 1));
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 2);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(2, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 8);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(4, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, $i1);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $i12 := at76_set_mib($p0, $p11);
    call {:si_unique_call 359} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} vslice_dummy_var_189 := dev_err.ref.ref.i32($p18, .str.169, $i12);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_set_rts: ref;

axiom at76_set_rts == $sub.ref(0, 326516);

procedure at76_set_rts($p0: ref, $i1: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr;



implementation at76_set_rts($p0: ref, $i1: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var vslice_dummy_var_190: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} {:cexpr "at76_set_rts:arg:size"} boogie_si_record_i16($i1);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(0, 1));
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 3);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(1, 1));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 2);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(2, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 10);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(4, 1));
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, $i1);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1));
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i12 := at76_set_mib($p0, $p11);
    call {:si_unique_call 363} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} vslice_dummy_var_190 := dev_err.ref.ref.i32($p18, .str.170, $i12);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_set_autorate_fallback: ref;

axiom at76_set_autorate_fallback == $sub.ref(0, 327548);

procedure at76_set_autorate_fallback($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr;



implementation at76_set_autorate_fallback($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i8;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var vslice_dummy_var_191: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} {:cexpr "at76_set_autorate_fallback:arg:onoff"} boogie_si_record_i32($i1);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(0, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 1);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(1, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 1);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(2, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 3);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i1);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1)), $mul.ref(4, 1));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i8);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1036, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $i13 := at76_set_mib($p0, $p12);
    call {:si_unique_call 367} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} vslice_dummy_var_191 := dev_err.ref.ref.i32($p19, .str.171, $i13);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_dump_mib_mac: ref;

axiom at76_dump_mib_mac == $sub.ref(0, 328580);

procedure at76_dump_mib_mac($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation at76_dump_mib_mac($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $p55: ref;
  var $i56: i16;
  var $i57: i32;
  var $p58: ref;
  var $i59: i16;
  var $i60: i32;
  var $p61: ref;
  var $i62: i16;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $p72: ref;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $p1 := kmalloc(68, 208);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $i8 := at76_get_mib($p6, 3, $p7, 68);
    call {:si_unique_call 371} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i16 := $M.1;
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 33554432);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p2);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} kfree($p72);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $p23 := wiphy_name($p22);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(4, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(8, 1));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(10, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.0, $p31);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(12, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(14, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(16, 1));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(17, 1));
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(18, 1));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(19, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(20, 1));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.0, $p52);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(22, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.0, $p55);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(24, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i59 := $load.i16($M.0, $p58);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i32($i59);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(26, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.0, $p61);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(28, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(60, 1));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(66, 1));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} vslice_dummy_var_193 := printk.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.ref.ref.i32(.str.173, $p23, $i25, $i27, $i30, $i33, $i36, $i39, $i42, $i45, $i48, $i51, $i54, $i57, $i60, $i63, 32, $p65, $p67, $i70);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} vslice_dummy_var_192 := dev_err.ref.ref.i32($p14, .str.172, $i8);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_dump_mib_mac_addr: ref;

axiom at76_dump_mib_mac_addr == $sub.ref(0, 329612);

procedure at76_dump_mib_mac_addr($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation at76_dump_mib_mac_addr($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $p1 := kmalloc(36, 208);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $i8 := at76_get_mib($p6, 2, $p7, 36);
    call {:si_unique_call 378} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i16 := $M.1;
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 33554432);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i35 := $M.1;
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 33554432);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i51 := $M.1;
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 33554432);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i67 := $M.1;
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 33554432);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i83 := $M.1;
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, 33554432);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p2);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} kfree($p50);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb27:
    assume $i85 == 1;
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $p90 := wiphy_name($p89);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p92, $mul.ref(3, 1));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(32, 1)), $mul.ref(3, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.0, $p95);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} vslice_dummy_var_199 := printk.ref.ref.i32.ref.i32(.str.176, $p90, 3, $p93, $i97);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb23:
    assume $i69 == 1;
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $p74 := wiphy_name($p73);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p76, $mul.ref(2, 1));
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(32, 1)), $mul.ref(2, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} vslice_dummy_var_198 := printk.ref.ref.i32.ref.i32(.str.176, $p74, 2, $p77, $i81);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i53 == 1;
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $p58 := wiphy_name($p57);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p60, $mul.ref(1, 1));
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(32, 1)), $mul.ref(1, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} vslice_dummy_var_197 := printk.ref.ref.i32.ref.i32(.str.176, $p58, 1, $p61, $i65);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $p42 := wiphy_name($p41);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} vslice_dummy_var_196 := printk.ref.ref.i32.ref.i32(.str.176, $p42, 0, $p44, $i48);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $p23 := wiphy_name($p22);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(6, 1)), $mul.ref(0, 1));
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(6, 1)), $mul.ref(1, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} vslice_dummy_var_195 := printk.ref.ref.ref.i32.i32(.str.175, $p23, $p25, $i29, $i33);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} vslice_dummy_var_194 := dev_err.ref.ref.i32($p14, .str.174, $i8);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_dump_mib_mac_mgmt: ref;

axiom at76_dump_mib_mac_mgmt == $sub.ref(0, 330644);

procedure at76_dump_mib_mac_mgmt($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation at76_dump_mib_mac_mgmt($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p76: ref;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $p1 := kmalloc(64, 208);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $i8 := at76_get_mib($p6, 5, $p7, 64);
    call {:si_unique_call 393} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i16 := $M.1;
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 33554432);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p2);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} kfree($p76);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $p23 := wiphy_name($p22);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.0, $p30);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.0, $p33);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(10, 1));
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(11, 1));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(13, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(14, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(53, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(54, 1));
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(55, 1));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(57, 1));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(58, 1));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} vslice_dummy_var_201 := printk.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.ref.i32.ref.i32.i32.i32.i32.i32.i32.ref(.str.178, $p23, $i26, $i29, $i32, $i35, $i38, $i41, $i44, $i47, $i50, $p52, 32, $p54, $i57, $i60, $i63, $i66, $i69, $i72, $p74);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} vslice_dummy_var_200 := dev_err.ref.ref.i32($p14, .str.177, $i8);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_dump_mib_mac_wep: ref;

axiom at76_dump_mib_mac_wep == $sub.ref(0, 331676);

procedure at76_dump_mib_mac_wep($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation at76_dump_mib_mac_wep($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;
  var vslice_dummy_var_206: i32;
  var vslice_dummy_var_207: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $p1 := kmalloc(65, 208);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $i8 := at76_get_mib($p6, 6, $p7, 65);
    call {:si_unique_call 400} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i16 := $M.1;
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 33554432);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(64, 1));
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 1);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i51 := (if $i50 == 1 then 5 else 13);
    call {:si_unique_call 405} {:cexpr "key_len"} boogie_si_record_i32($i51);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i52 := $M.1;
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 33554432);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i64 := $M.1;
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 33554432);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i76 := $M.1;
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 33554432);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i88 := $M.1;
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i89 := $and.i32($i88, 33554432);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p2);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} kfree($p63);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb27:
    assume $i90 == 1;
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $p95 := wiphy_name($p94);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(12, 1));
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p97, $mul.ref(3, 1));
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} vslice_dummy_var_207 := printk.ref.ref.i32.i32.ref(.str.181, $p95, 3, $i51, $p98);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb23:
    assume $i78 == 1;
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $p83 := wiphy_name($p82);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(12, 1));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p85, $mul.ref(2, 1));
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} vslice_dummy_var_206 := printk.ref.ref.i32.i32.ref(.str.181, $p83, 2, $i51, $p86);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i66 == 1;
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $p71 := wiphy_name($p70);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(12, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p73, $mul.ref(1, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} vslice_dummy_var_205 := printk.ref.ref.i32.i32.ref(.str.181, $p71, 1, $i51, $p74);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb14:
    assume $i54 == 1;
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $p59 := wiphy_name($p58);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(12, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} vslice_dummy_var_204 := printk.ref.ref.i32.i32.ref(.str.181, $p59, 0, $i51, $p61);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $p23 := wiphy_name($p22);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(1, 1));
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(2, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(3, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(4, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(8, 1));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(64, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(1, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} vslice_dummy_var_203 := printk.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32(.str.180, $p23, $i26, $i29, $i32, $i35, $i37, $i39, $i42, $i45);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} vslice_dummy_var_202 := dev_err.ref.ref.i32($p14, .str.179, $i8);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_dump_mib_mdomain: ref;

axiom at76_dump_mib_mdomain == $sub.ref(0, 332708);

procedure at76_dump_mib_mdomain($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation at76_dump_mib_mdomain($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var vslice_dummy_var_208: i32;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $p1 := kmalloc(28, 208);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i8 := at76_get_mib($p6, 9, $p7, 28);
    call {:si_unique_call 416} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i16 := $M.1;
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 33554432);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i27 := $M.1;
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 33554432);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p2);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} kfree($p38);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i29 == 1;
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $p34 := wiphy_name($p33);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(0, 1));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} vslice_dummy_var_210 := printk.ref.ref.i32.ref(.str.184, $p34, 14, $p36);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $p23 := wiphy_name($p22);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 28)), $mul.ref(14, 1));
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} vslice_dummy_var_209 := printk.ref.ref.i32.ref(.str.183, $p23, 14, $p25);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} vslice_dummy_var_208 := dev_err.ref.ref.i32($p14, .str.182, $i8);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_dump_mib_phy: ref;

axiom at76_dump_mib_phy == $sub.ref(0, 333740);

procedure at76_dump_mib_phy($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation at76_dump_mib_phy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $p73: ref;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $p1 := kmalloc(24, 208);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $i8 := at76_get_mib($p6, 7, $p7, 24);
    call {:si_unique_call 425} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i16 := $M.1;
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 33554432);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p2);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} kfree($p73);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $p23 := wiphy_name($p22);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.0, $p26);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(6, 1));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(10, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.0, $p35);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.0, $p38);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1)), $mul.ref(3, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(21, 1));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(22, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(23, 1));
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} vslice_dummy_var_212 := printk.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32(.str.186, $p23, $i25, $i28, $i31, $i34, $i37, $i40, $i43, $i47, $i51, $i55, $i59, $i62, $i65, $i68, $i71);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} vslice_dummy_var_211 := dev_err.ref.ref.i32($p14, .str.185, $i8);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_dump_mib_local: ref;

axiom at76_dump_mib_local == $sub.ref(0, 334772);

procedure at76_dump_mib_local($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation at76_dump_mib_local($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $p40: ref;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $p1 := kmalloc(12, 208);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $i8 := at76_get_mib($p6, 1, $p7, 12);
    call {:si_unique_call 432} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i16 := $M.1;
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 33554432);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p2);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} kfree($p40);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $p23 := wiphy_name($p22);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 14)), $mul.ref(2, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 14)), $mul.ref(3, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 14)), $mul.ref(5, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 14)), $mul.ref(6, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 14)), $mul.ref(10, 1));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} vslice_dummy_var_214 := printk.ref.ref.i32.i32.i32.i32.i32(.str.188, $p23, $i26, $i29, $i32, $i35, $i38);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} vslice_dummy_var_213 := dev_err.ref.ref.i32($p14, .str.187, $i8);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_get_mib: ref;

axiom at76_get_mib == $sub.ref(0, 335804);

procedure at76_get_mib($p0: ref, $i1: i16, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation at76_get_mib($p0: ref, $i1: i16, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i16;
  var $i9: i16;
  var $i10: i32;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} {:cexpr "at76_get_mib:arg:mib"} boogie_si_record_i16($i1);
    call {:si_unique_call 438} {:cexpr "at76_get_mib:arg:buf_size"} boogie_si_record_i32($i3);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $i4 := __create_pipe($p0, 0);
    call {:si_unique_call 440} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, $sub.i32(0, 2147483520));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i1);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i6, 8);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i3);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i12 := usb_control_msg($p0, $i5, 51, $sub.i8(0, 63), $i8, 0, $p2, $i11, 5000);
    call {:si_unique_call 442} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i13 := $sge.i32($i12, 0);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $i12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i12, $i3);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 5);
    goto $bb6;
}



const ldv_dev_alloc_skb_12: ref;

axiom ldv_dev_alloc_skb_12 == $sub.ref(0, 336836);

procedure ldv_dev_alloc_skb_12($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.34, $M.33, $M.0, $CurrAddr;



implementation ldv_dev_alloc_skb_12($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} {:cexpr "ldv_dev_alloc_skb_12:arg:length"} boogie_si_record_i32($i0);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $p1 := ldv_skb_alloc();
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_headroom: ref;

axiom skb_headroom == $sub.ref(0, 337868);

procedure skb_headroom($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_headroom($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i4, $i8);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const skb_push: ref;

axiom skb_push == $sub.ref(0, 338900);

procedure skb_push($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_push($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} {:cexpr "skb_push:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $p2 := external_alloc();
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_trim: ref;

axiom skb_trim == $sub.ref(0, 339932);

procedure skb_trim($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation skb_trim($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} {:cexpr "skb_trim:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    return;
}



const skb_tailroom: ref;

axiom skb_tailroom == $sub.ref(0, 340964);

procedure skb_tailroom($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_tailroom($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $i1 := skb_is_nonlinear($p0);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 449} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(204, 1));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i6, $i8);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i4 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 341996);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_put($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $p2 := external_alloc();
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const at76_rx_callback: ref;

axiom at76_rx_callback == $sub.ref(0, 343028);

procedure at76_rx_callback($p0: ref);



const usb_fill_bulk_urb: ref;

axiom usb_fill_bulk_urb == $sub.ref(0, 344060);

procedure usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} {:cexpr "usb_fill_bulk_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 453} {:cexpr "usb_fill_bulk_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i2);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p3);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i4);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p5);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p6);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    return;
}



const usb_submit_urb: ref;

axiom usb_submit_urb == $sub.ref(0, 345092);

procedure usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 454} {:cexpr "usb_submit_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 1} true;
    call {:si_unique_call 455} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 456} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const tasklet_schedule: ref;

axiom tasklet_schedule == $sub.ref(0, 346124);

procedure tasklet_schedule($p0: ref);



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 347156);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);



const __tasklet_schedule: ref;

axiom __tasklet_schedule == $sub.ref(0, 348188);

procedure __tasklet_schedule($p0: ref);



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 349220);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 1} true;
    call {:si_unique_call 457} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 458} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const skb_is_nonlinear: ref;

axiom skb_is_nonlinear == $sub.ref(0, 350252);

procedure skb_is_nonlinear($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_is_nonlinear($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(108, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_skb_alloc: ref;

axiom ldv_skb_alloc == $sub.ref(0, 351284);

procedure ldv_skb_alloc() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.34, $M.33, $M.0, $CurrAddr;



implementation ldv_skb_alloc() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $p5: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $p0 := ldv_zalloc(232);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i3 := $ne.ref($p2, $0.ref);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p5 := $M.32;
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} ldv_set_add($p5, $p2);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p4 := $p0;
    goto $bb3;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 352316);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 461} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 1} true;
    call {:si_unique_call 462} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 463} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 464} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $p4 := calloc(1, $i0);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 1} true;
    call {:si_unique_call 466} __VERIFIER_assume($i7);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_set_add: ref;

axiom ldv_set_add == $sub.ref(0, 353348);

procedure ldv_set_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.34, $M.33;



implementation ldv_set_add($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i2 := $M.33;
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $M.33;
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 15);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i16 := $M.33;
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i17, 8));
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p18, $p1);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i19 := $M.33;
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $M.33 := $i20;
    call {:si_unique_call 468} {:cexpr "last_index"} boogie_si_record_i32($i20);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i13 := ldv_set_add_loop_$bb4($p1, $i4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i13);
    goto $bb4_last;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i5, 8));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.34, $p6);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i8, $i9);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i4, 1);
    call {:si_unique_call 467} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i12 := $M.33;
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, $i12);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i11;
    goto $bb12_dummy;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2651;
}



const IEEE80211_SKB_CB: ref;

axiom IEEE80211_SKB_CB == $sub.ref(0, 354380);

procedure IEEE80211_SKB_CB($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation IEEE80211_SKB_CB($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_kfree_skb_any: ref;

axiom dev_kfree_skb_any == $sub.ref(0, 355412);

procedure dev_kfree_skb_any($p0: ref);
  free requires assertsPassed;



implementation dev_kfree_skb_any($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} __dev_kfree_skb_any($p0, 1);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    return;
}



const ether_addr_equal_64bits: ref;

axiom ether_addr_equal_64bits == $sub.ref(0, 356444);

procedure ether_addr_equal_64bits($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ether_addr_equal_64bits($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i6 := $xor.i64($i3, $i5);
    call {:si_unique_call 470} {:cexpr "fold"} boogie_si_record_i64($i6);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i7 := $shl.i64($i6, 16);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const at76_ledtrig_tx_activity: ref;

axiom at76_ledtrig_tx_activity == $sub.ref(0, 357476);

procedure at76_ledtrig_tx_activity();
  free requires assertsPassed;
  modifies $M.35;



implementation at76_ledtrig_tx_activity()
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i64;
  var $i5: i64;
  var vslice_dummy_var_215: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i0 := $M.35;
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i1 := $add.i32($i0, 1);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $M.35 := $i1;
    call {:si_unique_call 471} {:cexpr "tx_activity"} boogie_si_record_i32($i1);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $i2 := timer_pending(ledtrig_tx_timer);
    call {:si_unique_call 473} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, jiffies);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 62);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} vslice_dummy_var_215 := mod_timer(ledtrig_tx_timer, $i5);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 358508);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    return;
}



const at76_calc_padding: ref;

axiom at76_calc_padding == $sub.ref(0, 359540);

procedure at76_calc_padding($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation at76_calc_padding($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i6: i1;
  var $i7: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} {:cexpr "at76_calc_padding:arg:wlen"} boogie_si_record_i32($i0);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i1 := $add.i32($i0, 8);
    call {:si_unique_call 477} {:cexpr "wlen"} boogie_si_record_i32($i1);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i2 := $srem.i32($i1, 64);
    call {:si_unique_call 478} {:cexpr "wlen"} boogie_si_record_i32($i2);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 49);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i2, 60);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(114, $i2);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i5 := $i7;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(50, $i2);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const ieee80211_get_tx_rate: ref;

axiom ieee80211_get_tx_rate == $sub.ref(0, 360572);

procedure ieee80211_get_tx_rate($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_get_tx_rate($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i64;
  var $p57: ref;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 479} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i12);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 481} {:cexpr "tmp___1"} boogie_si_record_i64($i16);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i12, 0);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 489} {:cexpr "tmp___2"} boogie_si_record_i64($i34);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 1768)), $mul.ref(216, 1)), $mul.ref($i40, 8));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.36, $p44);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.37, $p46);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p51, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i56 := $sext.i8.i64($i55);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p47, $mul.ref($i56, 12));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p36 := $p57;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $r := $p36;
    return;

  $bb10:
    assume $i35 == 1;
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p36 := $0.ref;
    goto $bb12;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1(1);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i19 := $xor.i1($i18, 1);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    call {:si_unique_call 482} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i20);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 484} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i20, 0);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 487} {:cexpr "tmp___0"} boogie_si_record_i64($i29);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} warn_slowpath_null(.str.210, 1807);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const at76_mac80211_tx_callback: ref;

axiom at76_mac80211_tx_callback == $sub.ref(0, 361604);

procedure at76_mac80211_tx_callback($p0: ref);



const ieee80211_tx_status_irqsafe: ref;

axiom ieee80211_tx_status_irqsafe == $sub.ref(0, 362636);

procedure ieee80211_tx_status_irqsafe($p0: ref, $p1: ref);



const ieee80211_wake_queues: ref;

axiom ieee80211_wake_queues == $sub.ref(0, 363668);

procedure ieee80211_wake_queues($p0: ref);



const timer_pending: ref;

axiom timer_pending == $sub.ref(0, 364700);

procedure timer_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation timer_pending($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.38, $p2);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 365732);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 490} {:cexpr "mod_timer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 1} true;
    call {:si_unique_call 491} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 492} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __dev_kfree_skb_any: ref;

axiom __dev_kfree_skb_any == $sub.ref(0, 366764);

procedure __dev_kfree_skb_any($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __dev_kfree_skb_any($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} {:cexpr "__dev_kfree_skb_any:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    return;
}



const at76_ledtrig_tx_timerfunc: ref;

axiom at76_ledtrig_tx_timerfunc == $sub.ref(0, 367796);

procedure at76_ledtrig_tx_timerfunc($i0: i64);
  free requires assertsPassed;



implementation at76_ledtrig_tx_timerfunc($i0: i64)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p7: ref;
  var vslice_dummy_var_216: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} {:cexpr "at76_ledtrig_tx_timerfunc:arg:data"} boogie_si_record_i64($i0);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i1 := $M.35;
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($u0, $i1);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p7 := $M.39;
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} led_trigger_event($p7, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p3 := $M.39;
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} led_trigger_event($p3, 255);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, jiffies);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, 62);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} vslice_dummy_var_216 := mod_timer(ledtrig_tx_timer, $i5);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const led_trigger_event: ref;

axiom led_trigger_event == $sub.ref(0, 368828);

procedure led_trigger_event($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation led_trigger_event($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} {:cexpr "led_trigger_event:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    return;
}



const at76_probe: ref;

axiom at76_probe == $sub.ref(0, 369860);

procedure at76_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.40, $CurrAddr, $M.34, $M.33;



implementation at76_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i20: i1;
  var $p21: ref;
  var $i23: i1;
  var $i24: i1;
  var $p25: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $i11: i32;
  var $p79: ref;
  var $i80: i1;
  var cmdloc_dummy_var_77: [ref]i8;
  var cmdloc_dummy_var_78: [ref]i8;
  var cmdloc_dummy_var_79: [ref]i8;
  var cmdloc_dummy_var_80: [ref]i8;
  var cmdloc_dummy_var_81: [ref]i8;
  var cmdloc_dummy_var_82: [ref]i8;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    call {:si_unique_call 499} {:cexpr "board_type"} boogie_si_record_i32($i4);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $p5 := interface_to_usbdev($p0);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $p6 := usb_get_dev($p5);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $p7 := kmalloc(4, 208);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $p12 := at76_load_firmware($p6, $i4);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $i15 := at76_get_op_mode($p6);
    call {:si_unique_call 506} {:cexpr "op_mode"} boogie_si_record_i32($i15);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i16 := $M.1;
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 16384);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i15, 2);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i15, 1);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 56)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.40, $p32);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i35 == 1);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 56)), $mul.ref(44, 1)), $mul.ref(1, 1));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.40, $p37);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i40 := $ugt.i32($i39, 99);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i40 == 1);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i15, 1);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i54 := 1;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $p65 := at76_alloc_new_device($p6);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i67 := $eq.i64($i66, 0);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p65);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} usb_set_intfdata($p0, $p68);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i69 := $ugt.i64(4, 63);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i69 == 1);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p65, $mul.ref(0, 1128)), $mul.ref(1028, 1));
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p8);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_80 := $M.0;
    cmdloc_dummy_var_81 := $M.0;
    call {:si_unique_call 525} cmdloc_dummy_var_82 := $memcpy.i8(cmdloc_dummy_var_80, cmdloc_dummy_var_81, $p74, $p75, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_82;
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p65, $mul.ref(0, 1128)), $mul.ref(1024, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, $i4);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $i77 := at76_init_new_device($p65, $p0);
    call {:si_unique_call 527} {:cexpr "ret"} boogie_si_record_i32($i77);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i77, 0);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i11 := $i77;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p8);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} kfree($p79);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i11, 0);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb55:
    assume $i80 == 1;
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} usb_put_dev($p6);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb52:
    assume $i78 == 1;
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} at76_delete_device($p65);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume $i69 == 1;
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p65, $mul.ref(0, 1128)), $mul.ref(1028, 1));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p8);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_77 := $M.0;
    cmdloc_dummy_var_78 := $M.0;
    call {:si_unique_call 524} cmdloc_dummy_var_79 := $memcpy.i8(cmdloc_dummy_var_77, cmdloc_dummy_var_78, $p71, $p72, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_79;
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i67 == 1;
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;

  $bb37:
    assume $i55 == 1;
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} vslice_dummy_var_221 := dev_printk.ref.ref.ref(.str.2, $p56, .str.5);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i58 := at76_load_external_fw($p6, $p12);
    call {:si_unique_call 518} {:cexpr "ret"} boogie_si_record_i32($i58);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i58, 0);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p8);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $i61 := at76_get_mib($p6, 8, $p60, 4);
    call {:si_unique_call 520} {:cexpr "ret"} boogie_si_record_i32($i61);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i61, 0);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i62 == 1;
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} vslice_dummy_var_222 := dev_err.ref.ref.i32($p63, .str.6, $i61);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i11 := $i61;
    goto $bb3;

  $bb39:
    assume $i59 == 1;
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i11 := $i58;
    goto $bb3;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p8);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $i43 := at76_get_mib($p6, 8, $p42, 4);
    call {:si_unique_call 515} {:cexpr "ret"} boogie_si_record_i32($i43);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 0);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i44 == 1);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p8, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p8, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($i47, $i50);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i54 := $i53;
    goto $bb36;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i53 := 1;
    goto $bb35;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb24;

  $bb14:
    assume $i23 == 1;
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i15, 4);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb16;

  $bb17:
    assume $i24 == 1;
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} vslice_dummy_var_219 := dev_printk.ref.ref.ref(.str.2, $p25, .str.3);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $i27 := at76_load_internal_fw($p6, $p12);
    call {:si_unique_call 511} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} usb_put_dev($p6);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i11 := $i27;
    goto $bb3;

  $bb19:
    assume $i28 == 1;
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} vslice_dummy_var_220 := dev_err.ref.ref.i32($p29, .str.4, $i27);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i11 := $i27;
    goto $bb3;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} vslice_dummy_var_218 := dev_err.ref.ref($p21, .str.1);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 16);
    goto $bb3;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} vslice_dummy_var_217 := printk.ref.i32(.str, $i15);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 2);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;
}



const at76_disconnect: ref;

axiom at76_disconnect == $sub.ref(0, 370892);

procedure at76_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.33;



implementation at76_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} usb_set_intfdata($p0, $0.ref);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} vslice_dummy_var_223 := _dev_info.ref.ref($p9, .str.137);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} at76_delete_device($p2);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} vslice_dummy_var_224 := _dev_info.ref.ref($p11, .str.138);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_get_intfdata: ref;

axiom usb_get_intfdata == $sub.ref(0, 371924);

procedure usb_get_intfdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intfdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_set_intfdata: ref;

axiom usb_set_intfdata == $sub.ref(0, 372956);

procedure usb_set_intfdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_set_intfdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} dev_set_drvdata($p2, $p1);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    return;
}



const at76_delete_device: ref;

axiom at76_delete_device == $sub.ref(0, 373988);

procedure at76_delete_device($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.33;



implementation at76_delete_device($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i8;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;
  var vslice_dummy_var_227: i32;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 131072);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1032, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i7 := $and.i8($i6, $sub.i8(0, 2));
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i8 := $or.i8($i7, 1);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, $i8);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(688, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} tasklet_kill($p9);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1120, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(32, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(40, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i31 := $M.1;
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 131072);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(24, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} kfree($p36);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} vslice_dummy_var_227 := del_timer_sync(ledtrig_tx_timer);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(8, 1));
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} ldv_kfree_skb_13($p39);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} usb_put_dev($p41);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i42 := $M.1;
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 131072);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} ieee80211_free_hw($p47);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i48 := $M.1;
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 131072);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i50 == 1;
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} vslice_dummy_var_229 := printk.ref.ref(.str.122, .str.133);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i44 == 1;
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} vslice_dummy_var_228 := printk.ref.ref(.str.135, .str.133);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} vslice_dummy_var_226 := printk.ref.ref(.str.134, .str.133);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(40, 1));
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} usb_kill_urb($p28);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(40, 1));
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} usb_free_urb($p30);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(32, 1));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} usb_kill_urb($p20);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(32, 1));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} usb_free_urb($p22);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} ieee80211_unregister_hw($p14);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} vslice_dummy_var_225 := printk.ref.ref(.str.116, .str.133);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tasklet_kill: ref;

axiom tasklet_kill == $sub.ref(0, 375020);

procedure tasklet_kill($p0: ref);
  free requires assertsPassed;



implementation tasklet_kill($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    return;
}



const ieee80211_unregister_hw: ref;

axiom ieee80211_unregister_hw == $sub.ref(0, 376052);

procedure ieee80211_unregister_hw($p0: ref);
  free requires assertsPassed;



implementation ieee80211_unregister_hw($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 377084);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;



implementation usb_free_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    return;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 378116);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 1} true;
    call {:si_unique_call 552} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 553} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_kfree_skb_13: ref;

axiom ldv_kfree_skb_13 == $sub.ref(0, 379148);

procedure ldv_kfree_skb_13($p0: ref);
  free requires assertsPassed;
  modifies $M.34, $M.33;



implementation ldv_kfree_skb_13($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} ldv_skb_free($p1);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    return;
}



const usb_put_dev: ref;

axiom usb_put_dev == $sub.ref(0, 380180);

procedure usb_put_dev($p0: ref);
  free requires assertsPassed;



implementation usb_put_dev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    return;
}



const ieee80211_free_hw: ref;

axiom ieee80211_free_hw == $sub.ref(0, 381212);

procedure ieee80211_free_hw($p0: ref);
  free requires assertsPassed;



implementation ieee80211_free_hw($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    return;
}



const ldv_skb_free: ref;

axiom ldv_skb_free == $sub.ref(0, 382244);

procedure ldv_skb_free($p0: ref);
  free requires assertsPassed;
  modifies $M.34, $M.33;



implementation ldv_skb_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p1 := $M.32;
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} ldv_set_remove($p1, $p2);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    return;
}



const ldv_set_remove: ref;

axiom ldv_set_remove == $sub.ref(0, 383276);

procedure ldv_set_remove($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.34, $M.33;



implementation ldv_set_remove($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i5: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i2 := $M.33;
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i5, 1);
    call {:si_unique_call 557} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i18 := $M.33;
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i17, $i18);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i30 := $M.33;
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i30, 1);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $M.33 := $i31;
    call {:si_unique_call 559} {:cexpr "last_index"} boogie_si_record_i32($i31);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i20 := $i17;
    goto $bb17;

  $bb17:
    call $i20, $i21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $i29 := ldv_set_remove_loop_$bb17($i20, $i21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $i29);
    goto $bb17_last;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i21, 8));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.34, $p22);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i20, 1);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i25, 8));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p26, $p23);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i20, 1);
    call {:si_unique_call 558} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i28 := $M.33;
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i27, $i28);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb19;

  $bb19:
    assume !($i29 == 1);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb21:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i20 := $i27;
    goto $bb21_dummy;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i4, $i6, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15 := ldv_set_remove_loop_$bb4($p1, $i4, $i6, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15);
    goto $bb4_last;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i6, 8));
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.34, $p7);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i9, $i10);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i12 := $i4;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i4, 1);
    call {:si_unique_call 556} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i14 := $M.33;
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, $i14);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i13;
    goto $bb11_dummy;

  $bb8:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i5 := $i12;
    goto $bb7;

  $bb21_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3121;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3094;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 384308);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 385340);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 386372);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const usb_get_dev: ref;

axiom usb_get_dev == $sub.ref(0, 387404);

procedure usb_get_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $p1 := external_alloc();
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const at76_load_firmware: ref;

axiom at76_load_firmware == $sub.ref(0, 388436);

procedure at76_load_firmware($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.40;



implementation at76_load_firmware($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p59: ref;
  var $i60: i8;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $p70: ref;
  var $p71: ref;
  var $i72: i8;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i64;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i64;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $i115: i32;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $i119: i32;
  var $p120: ref;
  var $i121: i32;
  var $p122: ref;
  var $i123: i32;
  var $p124: ref;
  var $i125: i32;
  var $i127: i32;
  var $i128: i32;
  var $i129: i1;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var vslice_dummy_var_230: i32;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;
  var vslice_dummy_var_234: i32;
  var vslice_dummy_var_235: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} {:cexpr "at76_load_firmware:arg:board_type"} boogie_si_record_i32($i1);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    $p3 := $add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56));
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} mutex_lock_nested(fw_mutex, 0);
    $p4 := $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(48, 1));
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.40, $p4);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i11 := $M.1;
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 268435456);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    $p17 := $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(8, 1));
    $p18 := $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(0, 1));
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.40, $p18);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $i21 := request_firmware($p17, $p19, $p20);
    call {:si_unique_call 567} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 0);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i29 := $M.1;
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 268435456);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    $p33 := $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(8, 1));
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.40, $p33);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.41, $p35);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    $p38 := $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(8, 1));
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.40, $p38);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.42, $p40);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i42 := $ule.i64($i41, 32);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    $p51 := $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(40, 1));
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p51, $i50);
    $p52 := $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(40, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.40, $p52);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, $i1);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(11, 1));
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    $p62 := $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p62, $i60);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(10, 1));
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    $p66 := $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(44, 1)), $mul.ref(1, 1));
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p66, $i64);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(9, 1));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    $p70 := $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(44, 1)), $mul.ref(2, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p70, $i68);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.0, $p71);
    $p74 := $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(44, 1)), $mul.ref(3, 1));
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p74, $i72);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p37);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i78 := $zext.i32.i64($i77);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p75, $mul.ref($i78, 1));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p37);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i83 := $zext.i32.i64($i82);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p80, $mul.ref($i83, 1));
    $p85 := $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(32, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $M.40 := $store.ref($M.40, $p85, $p84);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    $p88 := $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(20, 1));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p88, $i87);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p37);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i92 := $zext.i32.i64($i91);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p89, $mul.ref($i92, 1));
    $p94 := $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(24, 1));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $M.40 := $store.ref($M.40, $p94, $p93);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    $p97 := $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(16, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p97, $i96);
    $p98 := $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(48, 1));
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $M.40 := $store.i32($M.40, $p98, 1);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    $p100 := $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(0, 1));
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.40, $p100);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(11, 1));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.0, $p102);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(10, 1));
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(9, 1));
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.0, $p108);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.0, $p111);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} vslice_dummy_var_237 := dev_printk.ref.ref.ref.ref.i32.i32.i32.i32(.str.2, $p99, .str.14, $p101, $i104, $i107, $i110, $i113);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i115 := $M.1;
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i115, 16384);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i127 := $M.1;
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i128 := $and.i32($i127, 16384);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} mutex_unlock(fw_mutex);
    $p131 := $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(48, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.40, $p131);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i133 == 1);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p134 := $0.ref;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $r := $p134;
    return;

  $bb29:
    assume $i133 == 1;
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p134 := $p3;
    goto $bb31;

  $bb26:
    assume $i129 == 1;
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} vslice_dummy_var_239 := printk.ref.ref(.str.16, $p79);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i117 == 1;
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p122);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} vslice_dummy_var_238 := printk.ref.i32.i32.i32.i32.i32(.str.15, $i1, $i119, $i121, $i123, $i125);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i54 == 1;
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    $p56 := $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(40, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.40, $p56);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} vslice_dummy_var_236 := dev_err.ref.ref.i32.i32($p55, .str.13, $i1, $i57);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb17:
    assume $i42 == 1;
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    $p44 := $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(8, 1));
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.40, $p44);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.42, $p46);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} vslice_dummy_var_235 := dev_err.ref.ref.i64($p43, .str.12, $i47);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} vslice_dummy_var_234 := printk.ref(.str.11);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    $p24 := $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(0, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.40, $p24);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} vslice_dummy_var_232 := dev_err.ref.ref.ref($p23, .str.9, $p25);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} vslice_dummy_var_233 := dev_err.ref.ref($p27, .str.10);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i13 == 1;
    $p14 := $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(0, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.40, $p14);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} vslice_dummy_var_231 := printk.ref.ref(.str.8, $p15);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i7 := $M.1;
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 268435456);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} vslice_dummy_var_230 := printk.ref(.str.7);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const at76_get_op_mode: ref;

axiom at76_get_op_mode == $sub.ref(0, 389468);

procedure at76_get_op_mode($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation at76_get_op_mode($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $p1 := kmalloc(1, 16);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $i5 := __create_pipe($p0, 0);
    call {:si_unique_call 578} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, $sub.i32(0, 2147483520));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i7 := usb_control_msg($p0, $i6, 51, $sub.i8(0, 63), 1, 0, $p1, 1, 5000);
    call {:si_unique_call 580} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p1);
    call {:si_unique_call 581} {:cexpr "saved"} boogie_si_record_i8($i8);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} kfree($p1);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i7, 0);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i10 := $sle.i32($i7, 0);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i8);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i4 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 5);
    goto $bb3;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i4 := $i7;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;
}



const dev_printk: ref;

axiom dev_printk == $sub.ref(0, 390500);

procedure dev_printk.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 1} true;
    call {:si_unique_call 583} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 584} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure dev_printk.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 1} true;
    call {:si_unique_call 585} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 586} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const at76_load_internal_fw: ref;

axiom at76_load_internal_fw == $sub.ref(0, 391532);

procedure at76_load_internal_fw($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation at76_load_internal_fw($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i17: i32;
  var vslice_dummy_var_240: i32;
  var vslice_dummy_var_241: i32;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i64;
  var vslice_dummy_var_245: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.40, $p2);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i4 := at76_is_505a($i3);
    call {:si_unique_call 588} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 589} {:cexpr "need_remap"} boogie_si_record_i32($i6);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.40, $p7);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(20, 1));
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.40, $p9);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i6, 0);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i12 := (if $i11 == 1 then 0 else 500);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $i13 := at76_usbdfu_download($p0, $p8, $i10, $i12);
    call {:si_unique_call 591} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := $M.1;
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 16384);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i6, 0);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i27 := $i13;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i28 := $M.1;
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 16384);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} vslice_dummy_var_244 := schedule_timeout_interruptible(501);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} vslice_dummy_var_245 := usb_reset_device($p0);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i17 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} vslice_dummy_var_243 := printk.ref(.str.29);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $i23 := at76_remap($p0);
    call {:si_unique_call 595} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i27 := $i23;
    goto $bb13;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} vslice_dummy_var_242 := dev_err.ref.ref.i32($p25, .str.28, $i23);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i17 := $i23;
    goto $bb3;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} vslice_dummy_var_241 := printk.ref(.str.27);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} vslice_dummy_var_240 := dev_err.ref.ref.i32($p15, .str.26, $i13);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i17 := $i13;
    goto $bb3;
}



const at76_load_external_fw: ref;

axiom at76_load_external_fw == $sub.ref(0, 392564);

procedure at76_load_external_fw($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation at76_load_external_fw($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i64;
  var $i7: i1;
  var $i8: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i15: i1;
  var $p16: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $i42: i64;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i41: i32;
  var $i57: i1;
  var $p58: ref;
  var $i9: i32;
  var cmdloc_dummy_var_83: [ref]i8;
  var cmdloc_dummy_var_84: [ref]i8;
  var cmdloc_dummy_var_85: [ref]i8;
  var vslice_dummy_var_246: i32;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i32;
  var vslice_dummy_var_249: i32;
  var vslice_dummy_var_250: i32;
  var vslice_dummy_var_251: i32;
  var vslice_dummy_var_252: i64;
  var vslice_dummy_var_253: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.40, $p2);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.40, $p4);
    call {:si_unique_call 600} {:cexpr "size"} boogie_si_record_i32($i5);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p3);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $i10 := at76_get_op_mode($p0);
    call {:si_unique_call 602} {:cexpr "op_mode"} boogie_si_record_i32($i10);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i11 := $M.1;
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 16384);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i10, 4);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $p18 := kmalloc(1024, 208);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i21 := $M.1;
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 16384);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i25, $p26, $i27 := 0, $p3, $i5;
    goto $bb20;

  $bb20:
    call $i25, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i35, $i36, $i37, $i38, $i42, $p43, $i44, $i45, $i46, $i47, cmdloc_dummy_var_83, cmdloc_dummy_var_84, cmdloc_dummy_var_85, vslice_dummy_var_249 := at76_load_external_fw_loop_$bb20($p0, $p18, $i25, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i35, $i36, $i37, $i38, $i42, $p43, $i44, $i45, $i46, $i47, cmdloc_dummy_var_83, cmdloc_dummy_var_84, cmdloc_dummy_var_85, vslice_dummy_var_249);
    goto $bb20_last;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 1024);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i28 == 1);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i29 := 1024;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    call {:si_unique_call 607} {:cexpr "__len"} boogie_si_record_i64($i30);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_83 := $M.0;
    cmdloc_dummy_var_84 := $M.0;
    call {:si_unique_call 608} cmdloc_dummy_var_85 := $memcpy.i8(cmdloc_dummy_var_83, cmdloc_dummy_var_84, $p18, $p26, $i30, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_85;
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i31 := $M.1;
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 16384);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i35 := at76_load_ext_fw_block($p0, $i25, $p18, $i29);
    call {:si_unique_call 611} {:cexpr "ret"} boogie_si_record_i32($i35);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, $i29);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i37, $i38 := $i25, $i35;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i29);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p26, $mul.ref($i42, 1));
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32($i27, $i29);
    call {:si_unique_call 614} {:cexpr "size"} boogie_si_record_i32($i44);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i25, 1);
    call {:si_unique_call 615} {:cexpr "blockno"} boogie_si_record_i32($i45);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i46 := $sgt.i32($i29, 0);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i47 := $i35;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.40, $p48);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $i50 := at76_is_505a($i49);
    call {:si_unique_call 617} {:cexpr "tmp___0"} boogie_si_record_i32($i50);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i41 := $i47;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} kfree($p18);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i41, 0);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i9 := $i41;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb40:
    assume $i57 == 1;
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} vslice_dummy_var_253 := dev_err.ref.ref.i32($p58, .str.54, $i41);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb34:
    assume $i51 == 1;
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i52 := $M.1;
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 16384);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} vslice_dummy_var_252 := schedule_timeout_interruptible(51);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i54 == 1;
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} vslice_dummy_var_251 := printk.ref(.str.53);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb31:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i25, $p26, $i27 := $i45, $p43, $i44;
    goto $bb31_dummy;

  $bb27:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} vslice_dummy_var_250 := dev_err.ref.ref.i32.i32($p39, .str.52, $i37, $i38);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 5);
    goto $bb29;

  $bb24:
    assume $i33 == 1;
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} vslice_dummy_var_249 := printk.ref.i32.i32.i32(.str.51, $i27, $i29, $i25);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i28 == 1;
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb23;

  $bb17:
    assume $i23 == 1;
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} vslice_dummy_var_248 := printk.ref(.str.50);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb6;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} vslice_dummy_var_247 := dev_err.ref.ref.i32($p16, .str.49, $i10);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb6;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} vslice_dummy_var_246 := printk.ref.i32(.str, $i10);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 2);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb31_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3432;
}



const at76_alloc_new_device: ref;

axiom at76_alloc_new_device == $sub.ref(0, 393596);

procedure at76_alloc_new_device($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation at76_alloc_new_device($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p68: ref;
  var $p71: ref;
  var $p74: ref;
  var $p76: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p15: ref;
  var cmdloc_dummy_var_86: [ref]i8;
  var cmdloc_dummy_var_87: [ref]i8;
  var cmdloc_dummy_var_88: [ref]i8;
  var cmdloc_dummy_var_89: [ref]i8;
  var cmdloc_dummy_var_90: [ref]i8;
  var cmdloc_dummy_var_91: [ref]i8;
  var cmdloc_dummy_var_92: [ref]i8;
  var cmdloc_dummy_var_93: [ref]i8;
  var cmdloc_dummy_var_94: [ref]i8;
  var cmdloc_dummy_var_95: [ref]i8;
  var cmdloc_dummy_var_96: [ref]i8;
  var cmdloc_dummy_var_97: [ref]i8;
  var vslice_dummy_var_254: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $p11 := ieee80211_alloc_hw(1128, at76_ops);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p11, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p11);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p0);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(56, 1));
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} __mutex_init($p21, .str.56, $p1);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(224, 1));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} __init_work($p22, 0);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p23, 137438953408);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(224, 1)), $mul.ref(0, 1));
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p3);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_86 := $M.0;
    cmdloc_dummy_var_87 := $M.0;
    call {:si_unique_call 635} cmdloc_dummy_var_88 := $memcpy.i8(cmdloc_dummy_var_86, cmdloc_dummy_var_87, $p26, $p27, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_88;
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(224, 1)), $mul.ref(32, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} lockdep_init_map($p29, .str.57, $p2, 0);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(224, 1)), $mul.ref(8, 1));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} INIT_LIST_HEAD($p31);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(224, 1)), $mul.ref(24, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, at76_work_set_promisc);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(304, 1));
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} __init_work($p34, 0);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p35, 137438953408);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(304, 1)), $mul.ref(0, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p5);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_89 := $M.0;
    cmdloc_dummy_var_90 := $M.0;
    call {:si_unique_call 639} cmdloc_dummy_var_91 := $memcpy.i8(cmdloc_dummy_var_89, cmdloc_dummy_var_90, $p38, $p39, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_91;
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(304, 1)), $mul.ref(32, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} lockdep_init_map($p41, .str.58, $p4, 0);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(304, 1)), $mul.ref(8, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} INIT_LIST_HEAD($p43);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(304, 1)), $mul.ref(24, 1));
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, at76_work_submit_rx);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(384, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} __init_work($p46, 0);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p47, 137438953408);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(384, 1)), $mul.ref(0, 1));
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p7);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_92 := $M.0;
    cmdloc_dummy_var_93 := $M.0;
    call {:si_unique_call 643} cmdloc_dummy_var_94 := $memcpy.i8(cmdloc_dummy_var_92, cmdloc_dummy_var_93, $p50, $p51, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_94;
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(384, 1)), $mul.ref(32, 1));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} lockdep_init_map($p53, .str.59, $p6, 0);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(384, 1)), $mul.ref(8, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} INIT_LIST_HEAD($p55);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(384, 1)), $mul.ref(24, 1));
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, at76_work_join_bssid);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(464, 1)), $mul.ref(0, 1));
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} __init_work($p59, 0);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p9, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p60, 137438953408);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(464, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p9);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_95 := $M.0;
    cmdloc_dummy_var_96 := $M.0;
    call {:si_unique_call 647} cmdloc_dummy_var_97 := $memcpy.i8(cmdloc_dummy_var_95, cmdloc_dummy_var_96, $p64, $p65, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_97;
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(464, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} lockdep_init_map($p68, .str.60, $p8, 0);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(464, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} INIT_LIST_HEAD($p71);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(464, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, at76_dwork_hw_scan);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(464, 1)), $mul.ref(80, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} init_timer_key($p76, 2, .str.61, $p10);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(464, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p79, delayed_work_timer_fn);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(464, 1));
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(464, 1)), $mul.ref(80, 1)), $mul.ref(40, 1));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p84, $i81);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(688, 1));
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} tasklet_init($p85, at76_rx_tasklet, 0);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(896, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p86, 1);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p18, $mul.ref(0, 1128)), $mul.ref(900, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, 0);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p15 := $p17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $r := $p15;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} vslice_dummy_var_254 := printk.ref(.str.55);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p15 := $0.ref;
    goto $bb3;
}



const at76_init_new_device: ref;

axiom at76_init_new_device == $sub.ref(0, 394628);

procedure at76_init_new_device($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation at76_init_new_device($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i12: i32;
  var $i13: i1;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i16;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i8;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $p85: ref;
  var $i86: i8;
  var $i87: i32;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p116: ref;
  var $i117: i8;
  var $i118: i32;
  var $p120: ref;
  var $i121: i8;
  var $i122: i32;
  var $p124: ref;
  var $i125: i8;
  var $i126: i32;
  var $p128: ref;
  var $i129: i8;
  var $i130: i32;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i8;
  var $i139: i32;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i14: i32;
  var vslice_dummy_var_255: i32;
  var vslice_dummy_var_256: i32;
  var vslice_dummy_var_257: i32;
  var vslice_dummy_var_258: i32;
  var vslice_dummy_var_259: i32;
  var vslice_dummy_var_260: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 16384);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $i12 := at76_alloc_urbs($p0, $p1);
    call {:si_unique_call 654} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $i15 := at76_get_hw_config($p0);
    call {:si_unique_call 656} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(918, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $p23 := at76_get_reg_domain($i22);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(904, 1));
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p23);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(792, 1));
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 10);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(796, 1));
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 2);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(868, 1));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 1536);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(864, 1));
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 1536);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(872, 1));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 8);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(860, 1));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 4);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(852, 1));
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 0);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1108, 1));
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 100);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(856, 1));
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 0);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(876, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 10);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(880, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 120);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(884, 1));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 0);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1032, 1));
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i39 := $and.i8($i38, $sub.i8(0, 2));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $i39);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 1768)), $mul.ref(76, 1));
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, 1);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 1768)), $mul.ref(80, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p53, 0);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 1768)), $mul.ref(48, 1));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p58, 4);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p62, $mul.ref(0, 1768)), $mul.ref(216, 1)), $mul.ref(0, 8));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p64, at76_supported_band);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 144)), $mul.ref(80, 1));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 34);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 144)), $mul.ref(108, 1));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p70, 100);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} SET_IEEE80211_DEV($p72, $p73);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(912, 1));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} SET_IEEE80211_PERM_ADDR($p75, $p77);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p43, $mul.ref(0, 1768)), $mul.ref(109, 1));
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1028, 1)), $mul.ref(0, 1));
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.0, $p81);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1028, 1)), $mul.ref(1, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.0, $p85);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1028, 1)), $mul.ref(2, 1));
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.0, $p89);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1028, 1)), $mul.ref(3, 1));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p93);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} vslice_dummy_var_257 := snprintf.ref.i64.ref.i32.i32.i32.i32($p79, 32, .str.112, $i83, $i87, $i91, $i95);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1024, 1));
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p43, $mul.ref(0, 1768)), $mul.ref(144, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, $i98);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i102 := ieee80211_register_hw($p101);
    call {:si_unique_call 663} {:cexpr "ret"} boogie_si_record_i32($i102);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1120, 1));
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p105, 1);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $p107 := dev_name($p106);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p111, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(912, 1));
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1028, 1)), $mul.ref(0, 1));
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.0, $p116);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1028, 1)), $mul.ref(1, 1));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.0, $p120);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i121);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1028, 1)), $mul.ref(2, 1));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.0, $p124);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i32($i125);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1028, 1)), $mul.ref(3, 1));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.0, $p128);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} vslice_dummy_var_259 := _dev_info.ref.ref.ref.ref.i32.i32.i32.i32($p112, .str.114, $p107, $p114, $i118, $i122, $i126, $i130);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p133, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p135, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(918, 1));
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.0, $p137);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i138);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(904, 1));
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p141, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} vslice_dummy_var_260 := _dev_info.ref.ref.i32.ref($p136, .str.115, $i139, $p143);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i14 := $i102;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb11:
    assume $i103 == 1;
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} vslice_dummy_var_258 := printk.ref.i32(.str.113, $i102);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i14 := $i102;
    goto $bb6;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} vslice_dummy_var_256 := dev_err.ref.ref($p17, .str.111);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb6;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} vslice_dummy_var_255 := printk.ref.i32(.str.110, $i10);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const at76_alloc_urbs: ref;

axiom at76_alloc_urbs == $sub.ref(0, 395660);

procedure at76_alloc_urbs($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation at76_alloc_urbs($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i43: i64;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i8;
  var $i57: i32;
  var $i58: i1;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p59: ref;
  var $p60: ref;
  var $p23: ref;
  var $p24: ref;
  var $i61: i64;
  var $i62: i1;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $i95: i1;
  var $p96: ref;
  var $i98: i64;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i64;
  var $i104: i1;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $i67: i32;
  var vslice_dummy_var_261: i32;
  var vslice_dummy_var_262: i32;
  var vslice_dummy_var_263: i32;
  var vslice_dummy_var_264: i32;
  var vslice_dummy_var_265: i32;
  var vslice_dummy_var_266: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 131072);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $M.1;
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 32768);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, 0);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p23, $p24 := $0.ref, $0.ref;
    assume {:branchcond $i22} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p23);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i62 := $eq.i64($i61, 0);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i62 == 1);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p24);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i63, 0);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p23, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $i73 := __create_pipe($p69, $i72);
    call {:si_unique_call 678} {:cexpr "tmp___1"} boogie_si_record_i32($i73);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i73, $sub.i32(0, 1073741696));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(52, 1));
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p24, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $i81 := __create_pipe($p77, $i80);
    call {:si_unique_call 680} {:cexpr "tmp___2"} boogie_si_record_i32($i81);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i82 := $or.i32($i81, $sub.i32(0, 1073741824));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(48, 1));
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, $i82);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $p84 := usb_alloc_urb(0, 208);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(40, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p85, $p84);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $p86 := usb_alloc_urb(0, 208);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(32, 1));
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p87, $p86);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(40, 1));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p89);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i91 := $eq.i64($i90, 0);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb39;

  $bb39:
    assume !($i91 == 1);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(32, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p93);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i95 := $eq.i64($i94, 0);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64(2413);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $p99 := kmalloc($i98, 208);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(24, 1));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p100, $p99);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(24, 1));
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i103 := $p2i.ref.i64($p102);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i104 := $eq.i64($i103, 0);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i105 := $M.1;
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i105, 131072);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i67 := 0;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $r := $i67;
    return;

  $bb46:
    assume $i107 == 1;
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} vslice_dummy_var_266 := printk.ref.ref(.str.122, .str.117);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i104 == 1;
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i67 := $sub.i32(0, 12);
    goto $bb35;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} vslice_dummy_var_265 := dev_err.ref.ref($p96, .str.121);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i67 := $sub.i32(0, 12);
    goto $bb35;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb38;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} vslice_dummy_var_264 := dev_err.ref.ref($p65, .str.120);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i67 := $sub.i32(0, 6);
    goto $bb35;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb31;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i25, $p26, $p27 := 0, $0.ref, $0.ref;
    goto $bb10;

  $bb10:
    call $p28, $p29, $i30, $p32, $i33, $i34, $i35, $p36, $i37, $i38, $p39, $i40, $i41, $i43, $i44, $i45, $i46, $p47, $p48, $i49, $i50, $i51, $i52, $p53, $p54, $i55, $i56, $i57, $i58, $i25, $p26, $p27, $p59, $p60, vslice_dummy_var_263 := at76_alloc_urbs_loop_$bb10($p17, $p19, $p28, $p29, $i30, $p32, $i33, $i34, $i35, $p36, $i37, $i38, $p39, $i40, $i41, $i43, $i44, $i45, $i46, $p47, $p48, $i49, $i50, $i51, $i52, $p53, $p54, $i55, $i56, $i57, $i58, $i25, $p26, $p27, $p59, $p60, vslice_dummy_var_263);
    goto $bb10_last;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i25);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p29, $mul.ref($i30, 72)), $mul.ref(0, 1));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i33 := $M.1;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 32768);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p27);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $p48 := $p27;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p26);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $p54 := $p26;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i25, 1);
    call {:si_unique_call 675} {:cexpr "i"} boogie_si_record_i32($i55);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p19);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i58 := $sgt.i32($i57, $i55);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p59, $p60 := $p48, $p54;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p23, $p24 := $p59, $p60;
    goto $bb9;

  $bb27:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i25, $p26, $p27 := $i55, $p54, $p48;
    goto $bb27_dummy;

  $bb21:
    assume $i50 == 1;
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $i51 := usb_endpoint_is_bulk_out($p32);
    call {:si_unique_call 674} {:cexpr "tmp___0"} boogie_si_record_i32($i51);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $p53 := $p26;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p54 := $p53;
    goto $bb26;

  $bb23:
    assume $i52 == 1;
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p53 := $p32;
    goto $bb25;

  $bb15:
    assume $i44 == 1;
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $i45 := usb_endpoint_is_bulk_in($p32);
    call {:si_unique_call 672} {:cexpr "tmp"} boogie_si_record_i32($i45);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $p47 := $p27;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p48 := $p47;
    goto $bb20;

  $bb17:
    assume $i46 == 1;
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p47 := $p32;
    goto $bb19;

  $bb12:
    assume $i35 == 1;
    $p36 := $add.ref($add.ref($add.ref($p29, $mul.ref($i30, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    $p39 := $add.ref($add.ref($add.ref($p29, $mul.ref($i30, 72)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} vslice_dummy_var_263 := printk.ref.ref.i32.i32.i32(.str.119, .str.117, $i25, $i38, $i41);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} vslice_dummy_var_262 := printk.ref.ref.i32(.str.118, .str.117, $i14);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} vslice_dummy_var_261 := printk.ref.ref(.str.116, .str.117);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb27_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3776;
}



const at76_get_hw_config: ref;

axiom at76_get_hw_config == $sub.ref(0, 396692);

procedure at76_get_hw_config($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation at76_get_hw_config($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $p29: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i8;
  var $p73: ref;
  var $i54: i32;
  var $i30: i32;
  var $i14: i32;
  var $p74: ref;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i5: i32;
  var cmdloc_dummy_var_98: [ref]i8;
  var cmdloc_dummy_var_99: [ref]i8;
  var cmdloc_dummy_var_100: [ref]i8;
  var cmdloc_dummy_var_101: [ref]i8;
  var cmdloc_dummy_var_102: [ref]i8;
  var cmdloc_dummy_var_103: [ref]i8;
  var cmdloc_dummy_var_104: [ref]i8;
  var cmdloc_dummy_var_105: [ref]i8;
  var cmdloc_dummy_var_106: [ref]i8;
  var cmdloc_dummy_var_107: [ref]i8;
  var cmdloc_dummy_var_108: [ref]i8;
  var cmdloc_dummy_var_109: [ref]i8;
  var cmdloc_dummy_var_110: [ref]i8;
  var cmdloc_dummy_var_111: [ref]i8;
  var cmdloc_dummy_var_112: [ref]i8;
  var cmdloc_dummy_var_113: [ref]i8;
  var cmdloc_dummy_var_114: [ref]i8;
  var cmdloc_dummy_var_115: [ref]i8;
  var vslice_dummy_var_267: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $p1 := kmalloc(84, 208);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1024, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $i8 := at76_is_intersil($i7);
    call {:si_unique_call 688} {:cexpr "tmp___1"} boogie_si_record_i32($i8);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1024, 1));
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $i33 := at76_is_503rfmd($i32);
    call {:si_unique_call 692} {:cexpr "tmp___0"} boogie_si_record_i32($i33);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i34 == 1);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $i57 := at76_get_hw_cfg($p56, $p2, 84);
    call {:si_unique_call 699} {:cexpr "ret"} boogie_si_record_i32($i57);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i57, 0);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i59 := $ugt.i64(6, 63);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i59 == 1);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(912, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p2);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 84)), $mul.ref(46, 1));
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_113 := $M.0;
    cmdloc_dummy_var_114 := $M.0;
    call {:si_unique_call 703} cmdloc_dummy_var_115 := $memcpy.i8(cmdloc_dummy_var_113, cmdloc_dummy_var_114, $p66, $p69, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_115;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p2);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 84)), $mul.ref(52, 1));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.0, $p71);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(918, 1));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p73, $i72);
    assume {:verifier.code 0} true;
    $i54 := $i57;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i30 := $i54;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i14 := $i30;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p2);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} kfree($p74);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i14, 0);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i5 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb30:
    assume $i75 == 1;
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 1768)), $mul.ref(256, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} vslice_dummy_var_267 := dev_err.ref.ref.i32($p80, .str.123, $i14);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i59 == 1;
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(912, 1));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p2);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 84)), $mul.ref(46, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_110 := $M.0;
    cmdloc_dummy_var_111 := $M.0;
    call {:si_unique_call 702} cmdloc_dummy_var_112 := $memcpy.i8(cmdloc_dummy_var_110, cmdloc_dummy_var_111, $p61, $p64, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_112;
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i58 == 1;
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i14 := $i57;
    goto $bb9;

  $bb15:
    assume $i34 == 1;
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $i37 := at76_get_hw_cfg($p36, $p2, 84);
    call {:si_unique_call 697} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 0);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i39 := $ugt.i64(6, 63);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i39 == 1);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(912, 1));
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p2);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 84)), $mul.ref(46, 1));
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_107 := $M.0;
    cmdloc_dummy_var_108 := $M.0;
    call {:si_unique_call 701} cmdloc_dummy_var_109 := $memcpy.i8(cmdloc_dummy_var_107, cmdloc_dummy_var_108, $p46, $p49, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_109;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p2);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 84)), $mul.ref(52, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(918, 1));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, $i52);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i54 := $i37;
    goto $bb23;

  $bb20:
    assume $i39 == 1;
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(912, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p2);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 84)), $mul.ref(46, 1));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_104 := $M.0;
    cmdloc_dummy_var_105 := $M.0;
    call {:si_unique_call 700} cmdloc_dummy_var_106 := $memcpy.i8(cmdloc_dummy_var_104, cmdloc_dummy_var_105, $p41, $p44, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_106;
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i38 == 1;
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i14 := $i37;
    goto $bb9;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(0, 1));
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $i12 := at76_get_hw_cfg_intersil($p11, $p2, 40);
    call {:si_unique_call 690} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i64(6, 63);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(912, 1));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p2);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_101 := $M.0;
    cmdloc_dummy_var_102 := $M.0;
    call {:si_unique_call 695} cmdloc_dummy_var_103 := $memcpy.i8(cmdloc_dummy_var_101, cmdloc_dummy_var_102, $p22, $p25, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_103;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p2);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(38, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(918, 1));
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i28);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i30 := $i12;
    goto $bb14;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1128)), $mul.ref(912, 1));
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_98 := $M.0;
    cmdloc_dummy_var_99 := $M.0;
    call {:si_unique_call 694} cmdloc_dummy_var_100 := $memcpy.i8(cmdloc_dummy_var_98, cmdloc_dummy_var_99, $p17, $p20, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_100;
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;
}



const at76_get_reg_domain: ref;

axiom at76_get_reg_domain == $sub.ref(0, 397724);

procedure at76_get_reg_domain($i0: i16) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation at76_get_reg_domain($i0: i16) returns ($r: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $p68: ref;
  var $i69: i16;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $p74: ref;
  var $i75: i16;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $p80: ref;
  var $i81: i16;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $p86: ref;
  var $i87: i16;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $p92: ref;
  var $i93: i16;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $p98: ref;
  var $i99: i16;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $p104: ref;
  var $i105: i16;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $p1 := $alloc($mul.ref(216, $zext.i32.i64(1)));
    call {:si_unique_call 706} {:cexpr "at76_get_reg_domain:arg:code"} boogie_si_record_i16($i0);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, 16);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, .str.124);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 2047);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, 32);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(1, 24)), $mul.ref(8, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, .str.125);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(1, 24)), $mul.ref(16, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 2047);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(2, 24)), $mul.ref(0, 1));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, 48);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(2, 24)), $mul.ref(8, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, .str.126);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(2, 24)), $mul.ref(16, 1));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 8191);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(3, 24)), $mul.ref(0, 1));
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, 49);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(3, 24)), $mul.ref(8, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, .str.127);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(3, 24)), $mul.ref(16, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 1536);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(4, 24)), $mul.ref(0, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, 50);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(4, 24)), $mul.ref(8, 1));
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, .str.128);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(4, 24)), $mul.ref(16, 1));
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 7680);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(5, 24)), $mul.ref(0, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p33, 64);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(5, 24)), $mul.ref(8, 1));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, .str.129);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(5, 24)), $mul.ref(16, 1));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 8192);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(6, 24)), $mul.ref(0, 1));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, 65);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(6, 24)), $mul.ref(8, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, .str.130);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(6, 24)), $mul.ref(16, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 16383);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(7, 24)), $mul.ref(0, 1));
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p45, 80);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(7, 24)), $mul.ref(8, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, .str.131);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(7, 24)), $mul.ref(16, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 1020);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(8, 24)), $mul.ref(0, 1));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p51, 0);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(8, 24)), $mul.ref(8, 1));
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, .str.132);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(8, 24)), $mul.ref(16, 1));
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $sub.i32(0, 1));
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.0, $p57);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i32($i0);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i59, $i60);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i62 := 0;
    assume {:branchcond $i61} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i69 := $load.i16($M.0, $p68);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i69);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i0);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i70, $i71);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i62 := 1;
    assume {:branchcond $i72} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(2, 24)), $mul.ref(0, 1));
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i75 := $load.i16($M.0, $p74);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i75);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i0);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i76, $i77);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i62 := 2;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(3, 24)), $mul.ref(0, 1));
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i81 := $load.i16($M.0, $p80);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i0);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i82, $i83);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i62 := 3;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(4, 24)), $mul.ref(0, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i87 := $load.i16($M.0, $p86);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i88 := $zext.i16.i32($i87);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32($i0);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i88, $i89);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i62 := 4;
    assume {:branchcond $i90} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(5, 24)), $mul.ref(0, 1));
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i93 := $load.i16($M.0, $p92);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i93);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i95 := $zext.i16.i32($i0);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i94, $i95);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i62 := 5;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(6, 24)), $mul.ref(0, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i99 := $load.i16($M.0, $p98);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i100 := $zext.i16.i32($i99);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i0);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i100, $i101);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i62 := 6;
    assume {:branchcond $i102} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(7, 24)), $mul.ref(0, 1));
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i105 := $load.i16($M.0, $p104);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i106 := $zext.i16.i32($i105);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i0);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i106, $i107);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i62 := 7;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i63 := 8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p1);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i63);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p64, $mul.ref($i65, 24));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $r := $p66;
    return;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i63 := $i62;
    goto $bb6;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb4;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i96 == 1;
    goto $bb4;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb4;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb4;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb4;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb4;
}



const SET_IEEE80211_DEV: ref;

axiom SET_IEEE80211_DEV == $sub.ref(0, 398756);

procedure SET_IEEE80211_DEV($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation SET_IEEE80211_DEV($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} set_wiphy_dev($p3, $p1);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    return;
}



const SET_IEEE80211_PERM_ADDR: ref;

axiom SET_IEEE80211_PERM_ADDR == $sub.ref(0, 399788);

procedure SET_IEEE80211_PERM_ADDR($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation SET_IEEE80211_PERM_ADDR($p0: ref, $p1: ref)
{
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var cmdloc_dummy_var_116: [ref]i8;
  var cmdloc_dummy_var_117: [ref]i8;
  var cmdloc_dummy_var_118: [ref]i8;
  var cmdloc_dummy_var_119: [ref]i8;
  var cmdloc_dummy_var_120: [ref]i8;
  var cmdloc_dummy_var_121: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64(6, 63);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1768)), $mul.ref(0, 1));
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_119 := $M.0;
    cmdloc_dummy_var_120 := $M.0;
    call {:si_unique_call 709} cmdloc_dummy_var_121 := $memcpy.i8(cmdloc_dummy_var_119, cmdloc_dummy_var_120, $p10, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_121;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1768)), $mul.ref(0, 1));
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_116 := $M.0;
    cmdloc_dummy_var_117 := $M.0;
    call {:si_unique_call 708} cmdloc_dummy_var_118 := $memcpy.i8(cmdloc_dummy_var_116, cmdloc_dummy_var_117, $p6, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_118;
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 400820);

procedure snprintf.ref.i64.ref.i32.i32.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);



const ieee80211_register_hw: ref;

axiom ieee80211_register_hw == $sub.ref(0, 401852);

procedure ieee80211_register_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_register_hw($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 1} true;
    call {:si_unique_call 710} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 711} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const set_wiphy_dev: ref;

axiom set_wiphy_dev == $sub.ref(0, 402884);

procedure set_wiphy_dev($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation set_wiphy_dev($p0: ref, $p1: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1768)), $mul.ref(256, 1)), $mul.ref(0, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p1);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    return;
}



const at76_is_intersil: ref;

axiom at76_is_intersil == $sub.ref(0, 403916);

procedure at76_is_intersil($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation at76_is_intersil($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} {:cexpr "at76_is_intersil:arg:board"} boogie_si_record_i32($i0);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 2);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const at76_get_hw_cfg_intersil: ref;

axiom at76_get_hw_cfg_intersil == $sub.ref(0, 404948);

procedure at76_get_hw_cfg_intersil($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation at76_get_hw_cfg_intersil($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i16;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} {:cexpr "at76_get_hw_cfg_intersil:arg:buf_size"} boogie_si_record_i32($i2);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $i3 := __create_pipe($p0, 0);
    call {:si_unique_call 715} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i3, $sub.i32(0, 2147483520));
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i2);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $i9 := usb_control_msg($p0, $i4, 51, $sub.i8(0, 63), 2306, 0, $p5, $i8, 5000);
    call {:si_unique_call 717} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const at76_is_503rfmd: ref;

axiom at76_is_503rfmd == $sub.ref(0, 405980);

procedure at76_is_503rfmd($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation at76_is_503rfmd($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} {:cexpr "at76_is_503rfmd:arg:board"} boogie_si_record_i32($i0);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 3);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 4);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const at76_get_hw_cfg: ref;

axiom at76_get_hw_cfg == $sub.ref(0, 407012);

procedure at76_get_hw_cfg($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation at76_get_hw_cfg($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i16;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} {:cexpr "at76_get_hw_cfg:arg:buf_size"} boogie_si_record_i32($i2);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $i3 := __create_pipe($p0, 0);
    call {:si_unique_call 721} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i3, $sub.i32(0, 2147483520));
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i2);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $i9 := usb_control_msg($p0, $i4, 51, $sub.i8(0, 63), 2562, 0, $p5, $i8, 5000);
    call {:si_unique_call 723} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const usb_endpoint_is_bulk_in: ref;

axiom usb_endpoint_is_bulk_in == $sub.ref(0, 408044);

procedure usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $i1 := usb_endpoint_xfer_bulk($p0);
    call {:si_unique_call 725} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i3 := usb_endpoint_dir_in($p0);
    call {:si_unique_call 727} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_endpoint_is_bulk_out: ref;

axiom usb_endpoint_is_bulk_out == $sub.ref(0, 409076);

procedure usb_endpoint_is_bulk_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_bulk_out($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $i1 := usb_endpoint_xfer_bulk($p0);
    call {:si_unique_call 729} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i3 := usb_endpoint_dir_out($p0);
    call {:si_unique_call 731} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_alloc_urb: ref;

axiom usb_alloc_urb == $sub.ref(0, 410108);

procedure usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} {:cexpr "usb_alloc_urb:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 733} {:cexpr "usb_alloc_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} $p2 := external_alloc();
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const usb_endpoint_xfer_bulk: ref;

axiom usb_endpoint_xfer_bulk == $sub.ref(0, 411140);

procedure usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_endpoint_dir_out: ref;

axiom usb_endpoint_dir_out == $sub.ref(0, 412172);

procedure usb_endpoint_dir_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_out($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i4 := $sge.i32($i3, 0);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const usb_endpoint_dir_in: ref;

axiom usb_endpoint_dir_in == $sub.ref(0, 413204);

procedure usb_endpoint_dir_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ieee80211_alloc_hw: ref;

axiom ieee80211_alloc_hw == $sub.ref(0, 414236);

procedure ieee80211_alloc_hw($i0: i64, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_alloc_hw($i0: i64, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} {:cexpr "ieee80211_alloc_hw:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $p2 := external_alloc();
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 415268);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 416300);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 417332);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 418364);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    return;
}



const at76_work_set_promisc: ref;

axiom at76_work_set_promisc == $sub.ref(0, 419396);

procedure at76_work_set_promisc($p0: ref);



const at76_work_submit_rx: ref;

axiom at76_work_submit_rx == $sub.ref(0, 420428);

procedure at76_work_submit_rx($p0: ref);



const at76_work_join_bssid: ref;

axiom at76_work_join_bssid == $sub.ref(0, 421460);

procedure at76_work_join_bssid($p0: ref);



const at76_dwork_hw_scan: ref;

axiom at76_dwork_hw_scan == $sub.ref(0, 422492);

procedure at76_dwork_hw_scan($p0: ref);



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 423524);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    return;
}



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 424556);

procedure delayed_work_timer_fn($i0: i64);



const at76_rx_tasklet: ref;

axiom at76_rx_tasklet == $sub.ref(0, 425588);

procedure at76_rx_tasklet($i0: i64);



const tasklet_init: ref;

axiom tasklet_init == $sub.ref(0, 426620);

procedure tasklet_init($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation tasklet_init($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} {:cexpr "tasklet_init:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    return;
}



const skb_pull: ref;

axiom skb_pull == $sub.ref(0, 427652);

procedure skb_pull($p0: ref, $i1: i32) returns ($r: ref);



const at76_guess_freq: ref;

axiom at76_guess_freq == $sub.ref(0, 428684);

procedure at76_guess_freq($p0: ref) returns ($r: i32);



const IEEE80211_SKB_RXCB: ref;

axiom IEEE80211_SKB_RXCB == $sub.ref(0, 429716);

procedure IEEE80211_SKB_RXCB($p0: ref) returns ($r: ref);



const ieee80211_rx_irqsafe: ref;

axiom ieee80211_rx_irqsafe == $sub.ref(0, 430748);

procedure ieee80211_rx_irqsafe($p0: ref, $p1: ref);



const ieee80211_is_probe_resp: ref;

axiom ieee80211_is_probe_resp == $sub.ref(0, 431780);

procedure ieee80211_is_probe_resp($i0: i16) returns ($r: i32);



const ieee80211_is_beacon: ref;

axiom ieee80211_is_beacon == $sub.ref(0, 432812);

procedure ieee80211_is_beacon($i0: i16) returns ($r: i32);



const cfg80211_find_ie: ref;

axiom cfg80211_find_ie == $sub.ref(0, 433844);

procedure cfg80211_find_ie($i0: i8, $p1: ref, $i2: i32) returns ($r: ref);



const ieee80211_channel_to_frequency: ref;

axiom ieee80211_channel_to_frequency == $sub.ref(0, 434876);

procedure ieee80211_channel_to_frequency($i0: i32, $i1: i32) returns ($r: i32);



const ieee80211_scan_completed: ref;

axiom ieee80211_scan_completed == $sub.ref(0, 435908);

procedure ieee80211_scan_completed($p0: ref, $i1: i1);



const at76_load_ext_fw_block: ref;

axiom at76_load_ext_fw_block == $sub.ref(0, 436940);

procedure at76_load_ext_fw_block($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation at76_load_ext_fw_block($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;
  var $i7: i32;
  var $i8: i16;
  var $i9: i16;
  var $i10: i32;
  var $i11: i16;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} {:cexpr "at76_load_ext_fw_block:arg:blockno"} boogie_si_record_i32($i1);
    call {:si_unique_call 742} {:cexpr "at76_load_ext_fw_block:arg:size"} boogie_si_record_i32($i3);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $i4 := __create_pipe($p0, 0);
    call {:si_unique_call 744} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, $sub.i32(0, 2147483648));
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i1);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i3);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $i12 := usb_control_msg($p0, $i5, 14, 64, 2050, $i8, $p2, $i11, 5000);
    call {:si_unique_call 746} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const at76_is_505a: ref;

axiom at76_is_505a == $sub.ref(0, 437972);

procedure at76_is_505a($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation at76_is_505a($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} {:cexpr "at76_is_505a:arg:board"} boogie_si_record_i32($i0);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 7);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 8);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const at76_usbdfu_download: ref;

axiom at76_usbdfu_download == $sub.ref(0, 439004);

procedure at76_usbdfu_download($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation at76_usbdfu_download($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i8: i1;
  var $p9: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $p36: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i8;
  var $i60: i64;
  var $i61: i32;
  var $p64: ref;
  var $i62: i32;
  var $i63: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $i81: i64;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $i91: i1;
  var $i92: i32;
  var $i93: i64;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $i98: i32;
  var $i99: i64;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i113: i8;
  var $i114: i64;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i122: i64;
  var $i124: i32;
  var $i125: i32;
  var $i126: i1;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $i132: i32;
  var $i133: i32;
  var $i134: i1;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $i143: i8;
  var $i144: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $i146: i1;
  var $i148: i1;
  var $i147: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p149: ref;
  var $i150: i1;
  var $i151: i32;
  var $i11: i32;
  var cmdloc_dummy_var_122: [ref]i8;
  var cmdloc_dummy_var_123: [ref]i8;
  var cmdloc_dummy_var_124: [ref]i8;
  var vslice_dummy_var_268: i32;
  var vslice_dummy_var_269: i32;
  var vslice_dummy_var_270: i32;
  var vslice_dummy_var_271: i32;
  var vslice_dummy_var_272: i32;
  var vslice_dummy_var_273: i32;
  var vslice_dummy_var_274: i32;
  var vslice_dummy_var_275: i64;
  var vslice_dummy_var_276: i32;
  var vslice_dummy_var_277: i32;
  var vslice_dummy_var_278: i32;
  var vslice_dummy_var_279: i32;
  var vslice_dummy_var_280: i32;
  var vslice_dummy_var_281: i32;
  var vslice_dummy_var_282: i64;
  var vslice_dummy_var_283: i32;
  var vslice_dummy_var_284: i32;
  var vslice_dummy_var_285: i32;
  var vslice_dummy_var_286: i32;
  var vslice_dummy_var_287: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} {:cexpr "at76_usbdfu_download:arg:size"} boogie_si_record_i32($i2);
    call {:si_unique_call 749} {:cexpr "at76_usbdfu_download:arg:manifest_sync_timeout"} boogie_si_record_i32($i3);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i4 := $M.1;
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 536870912);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 0);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $p12 := kmalloc(6, 208);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $p19 := kmalloc(1024, 208);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $p22 := kmalloc(1, 208);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i25, $i26, $i27, $i28, $i29, $i30, $p31 := 0, 0, 0, 1, 0, $i2, $p1;
    goto $bb18;

  $bb18:
    call $i25, $i26, $i27, $i28, $i29, $i30, $p31, $i32, $i33, $i34, $i35, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i56, $i57, $p58, $i59, $i60, $i61, $p64, $i62, $i63, $i73, $i74, $i75, $i77, $i78, $i79, $i81, $i83, $i84, $i85, $i87, $i88, $i89, $i91, $i92, $i93, $i94, $i95, $i96, $i98, $i99, $p100, $i101, $i102, $i103, $p104, $i106, $i107, $i108, $i110, $i111, $p112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i122, $i124, $i125, $i126, $i128, $i129, $i130, $i132, $i133, $i134, $i136, $i137, $i138, $i140, $i141, $i142, $i143, $i144, $i66, $i67, $i68, $i69, $i70, $i71, $p72, $i146, $i148, $i147, cmdloc_dummy_var_122, cmdloc_dummy_var_123, cmdloc_dummy_var_124, vslice_dummy_var_271, vslice_dummy_var_272, vslice_dummy_var_273, vslice_dummy_var_274, vslice_dummy_var_275, vslice_dummy_var_276, vslice_dummy_var_277, vslice_dummy_var_278, vslice_dummy_var_279, vslice_dummy_var_280, vslice_dummy_var_281, vslice_dummy_var_282, vslice_dummy_var_283, vslice_dummy_var_284, vslice_dummy_var_285, vslice_dummy_var_286, vslice_dummy_var_287 := at76_usbdfu_download_loop_$bb18($p0, $i3, $p13, $p19, $p22, $i25, $i26, $i27, $i28, $i29, $i30, $p31, $i32, $i33, $i34, $i35, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i56, $i57, $p58, $i59, $i60, $i61, $p64, $i62, $i63, $i73, $i74, $i75, $i77, $i78, $i79, $i81, $i83, $i84, $i85, $i87, $i88, $i89, $i91, $i92, $i93, $i94, $i95, $i96, $i98, $i99, $p100, $i101, $i102, $i103, $p104, $i106, $i107, $i108, $i110, $i111, $p112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i122, $i124, $i125, $i126, $i128, $i129, $i130, $i132, $i133, $i134, $i136, $i137, $i138, $i140, $i141, $i142, $i143, $i144, $i66, $i67, $i68, $i69, $i70, $i71, $p72, $i146, $i148, $i147, cmdloc_dummy_var_122, cmdloc_dummy_var_123, cmdloc_dummy_var_124, vslice_dummy_var_271, vslice_dummy_var_272, vslice_dummy_var_273, vslice_dummy_var_274, vslice_dummy_var_275, vslice_dummy_var_276, vslice_dummy_var_277, vslice_dummy_var_278, vslice_dummy_var_279, vslice_dummy_var_280, vslice_dummy_var_281, vslice_dummy_var_282, vslice_dummy_var_283, vslice_dummy_var_284, vslice_dummy_var_285, vslice_dummy_var_286, vslice_dummy_var_287);
    goto $bb18_last;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i28, 0);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i38, $i39 := $i28, $i29;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p22);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i41, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i41, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i41, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i41, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i140 := $M.1;
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i141 := $and.i32($i140, 536870912);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i142 := $ne.i32($i141, 0);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i66, $i67, $i68, $i69, $i70, $i71, $p72 := $i25, $i26, $i27, $i38, $sub.i32(0, 22), $i30, $p31;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i68, 0);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i147 := $i70;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i16, $p17, $p18 := $i147, $p22, $p19;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} kfree($p17);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} kfree($p18);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p13);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} kfree($p149);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i150 := $sge.i32($i16, 0);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    $i151 := $i16;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i11 := $i151;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb110:
    assume $i150 == 1;
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i151 := 0;
    goto $bb112;

  $bb104:
    assume $i146 == 1;
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i148 := $sge.i32($i70, 0);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i147 := $i70;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i148 == 1);
    goto $bb106;

  $bb107:
    assume $i148 == 1;
    assume {:verifier.code 0} true;
    $i25, $i26, $i27, $i28, $i29, $i30, $p31 := $i66, $i67, $i68, $i69, $i70, $i71, $p72;
    goto $bb107_dummy;

  $bb101:
    assume $i142 == 1;
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.0, $p22);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i144 := $zext.i8.i32($i143);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} vslice_dummy_var_287 := printk.ref.i32(.str.48, $i144);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb34:
    assume $i46 == 1;
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i136 := $M.1;
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i137 := $and.i32($i136, 536870912);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i66, $i67, $i68, $i69, $i70, $i71, $p72 := $i25, $i26, $i27, $i38, $sub.i32(0, 32), $i30, $p31;
    goto $bb54;

  $bb97:
    assume $i138 == 1;
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} vslice_dummy_var_286 := printk.ref(.str.47);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb32:
    assume $i45 == 1;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i132 := $M.1;
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i133 := $and.i32($i132, 536870912);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i133, 0);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i66, $i67, $i68, $i69, $i70, $i71, $p72 := $i25, $i26, $i27, $i38, $i39, $i30, $p31;
    goto $bb54;

  $bb94:
    assume $i134 == 1;
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} vslice_dummy_var_285 := printk.ref(.str.46);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb30:
    assume $i44 == 1;
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i128 := $M.1;
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i128, 536870912);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i66, $i67, $i68, $i69, $i70, $i71, $p72 := $i25, $i26, 1, $i38, $i39, $i30, $p31;
    goto $bb54;

  $bb91:
    assume $i130 == 1;
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} vslice_dummy_var_284 := printk.ref(.str.45);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb28:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i41, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i47 == 1);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i124 := $M.1;
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i125 := $and.i32($i124, 536870912);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i66, $i67, $i68, $i69, $i70, $i71, $p72 := $i25, $i26, 1, $i38, $i39, $i30, $p31;
    goto $bb54;

  $bb88:
    assume $i126 == 1;
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} vslice_dummy_var_283 := printk.ref(.str.44);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb37:
    assume $i47 == 1;
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i106 := $M.1;
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i106, 536870912);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $i110 := at76_dfu_get_status($p0, $p13);
    call {:si_unique_call 783} {:cexpr "ret"} boogie_si_record_i32($i110);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i111 := $slt.i32($i110, 0);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p13, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.0, $p112);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i113);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $i114 := at76_get_timeout($p13);
    call {:si_unique_call 785} {:cexpr "tmp___3"} boogie_si_record_i64($i114);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i64.i32($i114);
    call {:si_unique_call 786} {:cexpr "dfu_timeout"} boogie_si_record_i32($i115);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i116 := $sgt.i32($i3, 0);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    $i117 := $i115;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i118 := $M.1;
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i118, 536870912);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i122 := $zext.i32.i64($i117);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} vslice_dummy_var_282 := schedule_timeout_interruptible($i122);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i66, $i67, $i68, $i69, $i70, $i71, $p72 := $i25, $i117, $i27, 0, $i110, $i30, $p31;
    goto $bb54;

  $bb85:
    assume $i120 == 1;
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} vslice_dummy_var_281 := printk.ref(.str.43);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb82:
    assume $i116 == 1;
    call {:si_unique_call 787} {:cexpr "at76_usbdfu_download:arg:dfu_timeout"} boogie_si_record_i32($i3);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i117 := $i3;
    goto $bb84;

  $bb79:
    assume $i111 == 1;
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i66, $i67, $i68, $i69, $i70, $i71, $p72 := $i25, $i26, $i27, $i38, $i110, $i30, $p31;
    goto $bb54;

  $bb76:
    assume $i108 == 1;
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} vslice_dummy_var_280 := printk.ref(.str.42);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb26:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i41, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i41, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i49 == 1);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i83 := $M.1;
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, 536870912);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i87 := $M.1;
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i88 := $and.i32($i87, 536870912);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i30, 1024);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i91 == 1);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i92 := 1024;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i92);
    call {:si_unique_call 773} {:cexpr "__len"} boogie_si_record_i64($i93);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_122 := $M.0;
    cmdloc_dummy_var_123 := $M.0;
    call {:si_unique_call 774} cmdloc_dummy_var_124 := $memcpy.i8(cmdloc_dummy_var_122, cmdloc_dummy_var_123, $p19, $p31, $i93, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_124;
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i94 := $M.1;
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i94, 536870912);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} $i98 := at76_load_int_fw_block($p0, $i25, $p19, $i92);
    call {:si_unique_call 777} {:cexpr "ret"} boogie_si_record_i32($i98);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i99 := $sext.i32.i64($i92);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p31, $mul.ref($i99, 1));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i101 := $sub.i32($i30, $i92);
    call {:si_unique_call 778} {:cexpr "size"} boogie_si_record_i32($i101);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i102 := $add.i32($i25, 1);
    call {:si_unique_call 779} {:cexpr "blockno"} boogie_si_record_i32($i102);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i98, $i92);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i66, $i67, $i68, $i69, $i70, $i71, $p72 := $i102, $i26, $i27, 1, $i98, $i101, $p100;
    goto $bb54;

  $bb73:
    assume $i103 == 1;
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} vslice_dummy_var_279 := dev_err.ref.ref.i32($p104, .str.41, $i98);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb70:
    assume $i96 == 1;
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} vslice_dummy_var_278 := printk.ref.i32.i32.i32(.str.40, $i30, $i92, $i25);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb67:
    assume $i91 == 1;
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i92 := $i30;
    goto $bb69;

  $bb64:
    assume $i89 == 1;
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} vslice_dummy_var_277 := printk.ref(.str.39);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb61:
    assume $i85 == 1;
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} vslice_dummy_var_276 := printk.ref(.str.38);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb41:
    assume $i49 == 1;
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i73 := $M.1;
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, 536870912);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i77 := $M.1;
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i78 := $and.i32($i77, 536870912);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i81 := $zext.i32.i64($i26);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} vslice_dummy_var_275 := schedule_timeout_interruptible($i81);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i66, $i67, $i68, $i69, $i70, $i71, $p72 := $i25, $i26, $i27, 1, $i39, $i30, $p31;
    goto $bb54;

  $bb58:
    assume $i79 == 1;
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} vslice_dummy_var_274 := printk.ref(.str.37);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb55:
    assume $i75 == 1;
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} vslice_dummy_var_273 := printk.ref(.str.36);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb39:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i41, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i50 == 1);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i52 := $M.1;
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 536870912);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $i56 := at76_dfu_get_status($p0, $p13);
    call {:si_unique_call 763} {:cexpr "ret"} boogie_si_record_i32($i56);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i57 := $sge.i32($i56, 0);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i57 == 1);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} vslice_dummy_var_272 := dev_err.ref.ref.i32($p64, .str.35, $i56);
    assume {:verifier.code 0} true;
    $i62, $i63 := $i26, $i38;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i66, $i67, $i68, $i69, $i70, $i71, $p72 := $i25, $i62, $i27, $i63, $i56, $i30, $p31;
    goto $bb54;

  $bb51:
    assume $i57 == 1;
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p13, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i59);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $i60 := at76_get_timeout($p13);
    call {:si_unique_call 765} {:cexpr "tmp___2"} boogie_si_record_i64($i60);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i64.i32($i60);
    call {:si_unique_call 766} {:cexpr "dfu_timeout"} boogie_si_record_i32($i61);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i62, $i63 := $i61, 0;
    goto $bb53;

  $bb48:
    assume $i54 == 1;
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} vslice_dummy_var_271 := printk.ref(.str.34);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb43:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i41, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb36;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb46;

  $bb19:
    assume $i32 == 1;
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i33 := at76_dfu_get_state($p0, $p22);
    call {:si_unique_call 759} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i35 := $i33;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i38, $i39 := 0, $i33;
    goto $bb24;

  $bb21:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} vslice_dummy_var_270 := dev_err.ref.ref.i32($p36, .str.33, $i35);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i16, $p17, $p18 := $i35, $p22, $p19;
    goto $bb10;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i16, $p17, $p18 := $sub.i32(0, 12), $p22, $p19;
    goto $bb10;

  $bb12:
    assume $i21 == 1;
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i16, $p17, $p18 := $sub.i32(0, 12), $0.ref, $p19;
    goto $bb10;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i16, $p17, $p18 := $sub.i32(0, 12), $0.ref, $0.ref;
    goto $bb10;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} vslice_dummy_var_269 := dev_err.ref.ref($p9, .str.32);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} vslice_dummy_var_268 := printk.ref.ref.ref.i32.i32(.str.30, .str.31, $p1, $i2, $i3);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb107_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4334;
}



const at76_remap: ref;

axiom at76_remap == $sub.ref(0, 440036);

procedure at76_remap($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation at76_remap($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i1 := __create_pipe($p0, 0);
    call {:si_unique_call 796} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, $sub.i32(0, 2147483648));
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $i3 := usb_control_msg($p0, $i2, 10, 65, 0, 0, $0.ref, 0, 5000);
    call {:si_unique_call 798} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;
}



const usb_reset_device: ref;

axiom usb_reset_device == $sub.ref(0, 441068);

procedure usb_reset_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_reset_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 1} true;
    call {:si_unique_call 799} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 800} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const at76_dfu_get_state: ref;

axiom at76_dfu_get_state == $sub.ref(0, 442100);

procedure at76_dfu_get_state($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation at76_dfu_get_state($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $i2 := __create_pipe($p0, 0);
    call {:si_unique_call 802} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, $sub.i32(0, 2147483520));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $i4 := usb_control_msg($p0, $i3, 5, $sub.i8(0, 95), 0, 0, $p1, 1, 5000);
    call {:si_unique_call 804} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const at76_dfu_get_status: ref;

axiom at76_dfu_get_status == $sub.ref(0, 443132);

procedure at76_dfu_get_status($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation at76_dfu_get_status($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $i2 := __create_pipe($p0, 0);
    call {:si_unique_call 806} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, $sub.i32(0, 2147483520));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $i5 := usb_control_msg($p0, $i3, 3, $sub.i8(0, 95), 0, 0, $p4, 6, 5000);
    call {:si_unique_call 808} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const at76_get_timeout: ref;

axiom at76_get_timeout == $sub.ref(0, 444164);

procedure at76_get_timeout($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation at76_get_timeout($p0: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6)), $mul.ref(1, 1)), $mul.ref(2, 1));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i4, 16);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6)), $mul.ref(1, 1)), $mul.ref(1, 1));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i10 := $shl.i32($i9, 8);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i5, $i10);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6)), $mul.ref(1, 1)), $mul.ref(0, 1));
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i11, $i15);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $i17 := msecs_to_jiffies($i16);
    call {:si_unique_call 810} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;
}



const at76_load_int_fw_block: ref;

axiom at76_load_int_fw_block == $sub.ref(0, 445196);

procedure at76_load_int_fw_block($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation at76_load_int_fw_block($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;
  var $i7: i32;
  var $i8: i16;
  var $i9: i16;
  var $i10: i32;
  var $i11: i16;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} {:cexpr "at76_load_int_fw_block:arg:blockno"} boogie_si_record_i32($i1);
    call {:si_unique_call 812} {:cexpr "at76_load_int_fw_block:arg:size"} boogie_si_record_i32($i3);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $i4 := __create_pipe($p0, 0);
    call {:si_unique_call 814} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, $sub.i32(0, 2147483648));
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i1);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i3);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $i12 := usb_control_msg($p0, $i5, 1, 33, $i8, 0, $p2, $i11, 5000);
    call {:si_unique_call 816} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 446228);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 817} {:cexpr "msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 1} true;
    call {:si_unique_call 818} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 819} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 447260);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 1} true;
    call {:si_unique_call 820} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 821} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 448292);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 822} __VERIFIER_error();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const ldv_usb_driver_1: ref;

axiom ldv_usb_driver_1 == $sub.ref(0, 449324);

procedure ldv_usb_driver_1();
  free requires assertsPassed;
  modifies $M.49, $M.0, $CurrAddr;



implementation ldv_usb_driver_1()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $p0 := ldv_zalloc(1560);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $M.49 := $p0;
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_ieee80211_ops_2: ref;

axiom ldv_initialize_ieee80211_ops_2 == $sub.ref(0, 450356);

procedure ldv_initialize_ieee80211_ops_2();
  free requires assertsPassed;
  modifies $M.50, $M.51, $M.0, $CurrAddr;



implementation ldv_initialize_ieee80211_ops_2()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $p0 := ldv_zalloc(144);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $M.50 := $p0;
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $p2 := ldv_zalloc(280);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $M.51 := $p2;
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 451388);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.0, $M.59, $M.61, $M.50, $M.51, $M.62, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.49, $M.60, $M.33, $M.32, $M.34, $M.30, $M.35, $M.39, $M.77, $M.78, $M.38, $M.1, $M.40, $M.158, $CurrAddr, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i64;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $i111: i64;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $i115: i32;
  var $p116: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i121: i32;
  var $p122: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $p145: ref;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $i155: i32;
  var $i156: i32;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $p166: ref;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var cmdloc_dummy_var_125: [ref]i8;
  var cmdloc_dummy_var_126: [ref]i8;
  var cmdloc_dummy_var_127: [ref]i8;
  var cmdloc_dummy_var_128: [ref]i8;
  var vslice_dummy_var_288: i32;
  var vslice_dummy_var_289: i32;
  var vslice_dummy_var_290: i32;
  var vslice_dummy_var_291: i32;
  var vslice_dummy_var_292: i32;
  var vslice_dummy_var_293: i32;
  var vslice_dummy_var_294: i32;
  var vslice_dummy_var_295: i32;

  $bb0:
    call {:si_unique_call 826} $initialize();
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $p2 := ldv_zalloc(32);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 1} true;
    call {:si_unique_call 831} $i4 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 832} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i4);
    call {:si_unique_call 833} {:cexpr "tmp___0"} boogie_si_record_i64($i4);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $p5 := ldv_zalloc(4);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $p7 := ldv_zalloc(88);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $p9 := ldv_zalloc(8);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 1} true;
    call {:si_unique_call 837} $i11 := __VERIFIER_nondet_uint();
    call {:si_unique_call 838} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i11);
    call {:si_unique_call 839} {:cexpr "tmp___4"} boogie_si_record_i32($i11);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 1} true;
    call {:si_unique_call 840} $i12 := __VERIFIER_nondet_u32();
    call {:si_unique_call 841} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i12);
    call {:si_unique_call 842} {:cexpr "tmp___5"} boogie_si_record_i32($i12);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $p13 := ldv_zalloc(232);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $p15 := ldv_zalloc(88);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 1} true;
    call {:si_unique_call 845} $i17 := __VERIFIER_nondet_u32();
    call {:si_unique_call 846} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i17);
    call {:si_unique_call 847} {:cexpr "tmp___8"} boogie_si_record_i32($i17);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $p18 := ldv_zalloc(12);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $p20 := ldv_zalloc(232);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} ldv_initialize();
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p0);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_125 := $M.52;
    call {:si_unique_call 851} cmdloc_dummy_var_126 := $memset.i8(cmdloc_dummy_var_125, $p22, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.52 := cmdloc_dummy_var_126;
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_127 := $M.53;
    call {:si_unique_call 852} cmdloc_dummy_var_128 := $memset.i8(cmdloc_dummy_var_127, $p23, 0, 8, $zext.i32.i64(8), 0 == 1);
    $M.53 := cmdloc_dummy_var_128;
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $M.54 := 0;
    call {:si_unique_call 853} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $M.55 := 0;
    call {:si_unique_call 854} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 855} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $M.57 := 0;
    call {:si_unique_call 856} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $M.58 := 0;
    call {:si_unique_call 857} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $p90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $p98, $i100, $i101, $p102, $i104, $i105, $p106, $i107, $i108, $i109, $p110, $i111, $i112, $i113, $p114, $i115, $p116, $i118, $i119, $p120, $i121, $p122, $i124, $i125, $p126, $p127, $i128, $i129, $p130, $p131, $i132, $i133, $p134, $p135, $i137, $i138, $p139, $p140, $i142, $i143, $p144, $p145, $i147, $i148, $p149, $p150, $i152, $i153, $p154, $i155, $i156, $i157, $i158, $p159, $i160, $i161, $p162, $i163, $i164, $p165, $p166, $i167, $i168, $p169, $p170, vslice_dummy_var_288, vslice_dummy_var_289, vslice_dummy_var_290, vslice_dummy_var_291, vslice_dummy_var_292, vslice_dummy_var_293, vslice_dummy_var_294, vslice_dummy_var_295 := main_loop_$bb1($p0, $p1, $p3, $i4, $p6, $p8, $p10, $i11, $i12, $p14, $p16, $i17, $p19, $p21, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $p90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $p98, $i100, $i101, $p102, $i104, $i105, $p106, $i107, $i108, $i109, $p110, $i111, $i112, $i113, $p114, $i115, $p116, $i118, $i119, $p120, $i121, $p122, $i124, $i125, $p126, $p127, $i128, $i129, $p130, $p131, $i132, $i133, $p134, $p135, $i137, $i138, $p139, $p140, $i142, $i143, $p144, $p145, $i147, $i148, $p149, $p150, $i152, $i153, $p154, $i155, $i156, $i157, $i158, $p159, $i160, $i161, $p162, $i163, $i164, $p165, $p166, $i167, $i168, $p169, $p170, vslice_dummy_var_288, vslice_dummy_var_289, vslice_dummy_var_290, vslice_dummy_var_291, vslice_dummy_var_292, vslice_dummy_var_293, vslice_dummy_var_294, vslice_dummy_var_295);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i24, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i24, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} ldv_stop();
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb40_dummy;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i74 := $M.58;
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb83:
    assume $i75 == 1;
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 1} true;
    call {:si_unique_call 892} $i76 := __VERIFIER_nondet_int();
    call {:si_unique_call 893} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i76);
    call {:si_unique_call 894} {:cexpr "tmp___15"} boogie_si_record_i32($i76);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i76, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i76, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i76, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i76, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i76, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} ldv_stop();
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb94:
    assume $i81 == 1;
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i163 := $M.58;
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i163, 1);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i167 := $M.58;
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 2);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb164:
    assume $i168 == 1;
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p169 := $M.50;
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p170 := $M.51;
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} at76_remove_interface($p169, $p170);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 933} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb161:
    assume $i164 == 1;
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p165 := $M.50;
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p166 := $M.51;
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} at76_remove_interface($p165, $p166);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 931} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb92:
    assume $i80 == 1;
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i157 := $M.58;
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 1);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $i160 := $M.58;
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 2);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb158:
    assume $i161 == 1;
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p162 := $M.50;
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} at76_mac80211_tx($p162, $p10, $p21);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 929} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb155:
    assume $i158 == 1;
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $p159 := $M.50;
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} at76_mac80211_tx($p159, $p10, $p21);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 927} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb90:
    assume $i79 == 1;
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i152 := $M.58;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 2);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb152:
    assume $i153 == 1;
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $p154 := $M.50;
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} at76_mac80211_stop($p154);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 924} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i155 := $M.55;
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i156 := $sub.i32($i155, 1);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $M.55 := $i156;
    call {:si_unique_call 925} {:cexpr "ref_cnt"} boogie_si_record_i32($i156);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb88:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i76, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i82 == 1);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i142 := $M.58;
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 1);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $i147 := $M.58;
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 2);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb149:
    assume $i148 == 1;
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p149 := $M.50;
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $p150 := $M.51;
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} vslice_dummy_var_295 := at76_hw_scan($p149, $p150, $p16);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 922} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb146:
    assume $i143 == 1;
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $p144 := $M.50;
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p145 := $M.51;
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} vslice_dummy_var_294 := at76_hw_scan($p144, $p145, $p16);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 920} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb97:
    assume $i82 == 1;
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i132 := $M.58;
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 1);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $i137 := $M.58;
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 2);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb143:
    assume $i138 == 1;
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $p139 := $M.50;
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p140 := $M.51;
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} vslice_dummy_var_293 := at76_add_interface($p139, $p140);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 918} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb140:
    assume $i133 == 1;
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p134 := $M.50;
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p135 := $M.51;
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} vslice_dummy_var_292 := at76_add_interface($p134, $p135);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 916} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb86:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i76, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i76, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i76, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i85 == 1);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i124 := $M.58;
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 1);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $i128 := $M.58;
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 2);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb137:
    assume $i129 == 1;
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p130 := $M.50;
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $p131 := $M.51;
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} at76_bss_info_changed($p130, $p131, $p14, $i12);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 914} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb134:
    assume $i125 == 1;
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $p126 := $M.50;
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $p127 := $M.51;
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} at76_bss_info_changed($p126, $p127, $p14, $i12);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 912} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb103:
    assume $i85 == 1;
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i112 := $M.58;
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 1);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i118 := $M.58;
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 2);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb131:
    assume $i119 == 1;
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p120 := $M.50;
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.52, $p0);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $p122 := $M.51;
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} vslice_dummy_var_291 := at76_set_key($p120, $i121, $p122, $p8, $p19);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 910} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb128:
    assume $i113 == 1;
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p114 := $M.50;
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.52, $p0);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $p116 := $M.51;
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} vslice_dummy_var_290 := at76_set_key($p114, $i115, $p116, $p8, $p19);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 908} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb101:
    assume $i84 == 1;
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i104 := $M.58;
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 1);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $i108 := $M.58;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 2);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb125:
    assume $i109 == 1;
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p110 := $M.50;
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i111 := $load.i64($M.53, $p1);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} at76_configure_filter($p110, $i11, $p6, $i111);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 906} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb122:
    assume $i105 == 1;
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p106 := $M.50;
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i107 := $load.i64($M.53, $p1);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} at76_configure_filter($p106, $i11, $p6, $i107);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 904} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb99:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i76, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i86 == 1);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i96 := $M.58;
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 1);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i100 := $M.58;
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 2);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb119:
    assume $i101 == 1;
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $p102 := $M.50;
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} vslice_dummy_var_289 := at76_config($p102, $i17);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 902} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb116:
    assume $i97 == 1;
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p98 := $M.50;
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} vslice_dummy_var_288 := at76_config($p98, $i17);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 900} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb105:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i76, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb96;

  $bb107:
    assume $i87 == 1;
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i88 := $M.58;
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 1);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb109:
    assume $i89 == 1;
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p90 := $M.50;
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $i91 := at76_mac80211_start($p90);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $M.62 := $i91;
    call {:si_unique_call 896} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i91);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i92 := $M.62;
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 0);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb111:
    assume $i93 == 1;
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 897} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i94 := $M.55;
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i94, 1);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $M.55 := $i95;
    call {:si_unique_call 898} {:cexpr "ref_cnt"} boogie_si_record_i32($i95);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i68 := $M.57;
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb71:
    assume $i69 == 1;
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 1} true;
    call {:si_unique_call 886} $i70 := __VERIFIER_nondet_int();
    call {:si_unique_call 887} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i70);
    call {:si_unique_call 888} {:cexpr "tmp___14"} boogie_si_record_i32($i70);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} ldv_stop();
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb74:
    assume $i71 == 1;
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i72 := $M.57;
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 1);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb76:
    assume $i73 == 1;
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} at76_ledtrig_tx_timerfunc($i4);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 890} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb3:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i24, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i51 := $M.56;
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb41:
    assume $i52 == 1;
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 1} true;
    call {:si_unique_call 872} $i53 := __VERIFIER_nondet_int();
    call {:si_unique_call 873} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i53);
    call {:si_unique_call 874} {:cexpr "tmp___13"} boogie_si_record_i32($i53);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i53, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} ldv_stop();
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb46:
    assume $i55 == 1;
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i61 := $M.56;
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 1);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb59:
    assume $i62 == 1;
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $i63 := at76_mod_init();
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $M.61 := $i63;
    call {:si_unique_call 879} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i63);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i64 := $M.61;
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i66 := $M.61;
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb64:
    assume $i67 == 1;
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 884} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} ldv_check_final_state();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb61:
    assume $i65 == 1;
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $M.56 := 3;
    call {:si_unique_call 880} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 881} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} ldv_initialize_ieee80211_ops_2();
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 883} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb44:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i53, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb48;

  $bb49:
    assume $i56 == 1;
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i57 := $M.56;
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 3);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb51:
    assume $i58 == 1;
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i59 := $M.55;
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb53;

  $bb54:
    assume $i60 == 1;
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} at76_mod_exit();
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 876} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb10:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i24, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb9;

  $bb12:
    assume $i29 == 1;
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i30 := $M.54;
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 1} true;
    call {:si_unique_call 861} $i32 := __VERIFIER_nondet_int();
    call {:si_unique_call 862} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i32);
    call {:si_unique_call 863} {:cexpr "tmp___12"} boogie_si_record_i32($i32);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i32, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} ldv_stop();
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb19:
    assume $i34 == 1;
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i44 := $M.54;
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 2);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb31:
    assume $i45 == 1;
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i46 := $M.60;
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb33;

  $bb34:
    assume $i47 == 1;
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p48 := $M.49;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} at76_disconnect($p48);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 869} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i49 := $M.55;
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32($i49, 1);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $M.55 := $i50;
    call {:si_unique_call 870} {:cexpr "ref_cnt"} boogie_si_record_i32($i50);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb17:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i32, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb21;

  $bb22:
    assume $i35 == 1;
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i36 := $M.54;
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 1);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb24:
    assume $i37 == 1;
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p38 := $M.49;
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $i39 := at76_probe($p38, $p3);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $M.59 := $i39;
    call {:si_unique_call 865} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i39);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i40 := $M.59;
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i41 == 1;
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $M.54 := 2;
    call {:si_unique_call 866} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i42 := $M.55;
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, 1);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $M.55 := $i43;
    call {:si_unique_call 867} {:cexpr "ref_cnt"} boogie_si_record_i32($i43);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb40_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 858} $i24 := __VERIFIER_nondet_int();
    call {:si_unique_call 859} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i24);
    call {:si_unique_call 860} {:cexpr "tmp___11"} boogie_si_record_i32($i24);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const __VERIFIER_nondet_u32: ref;

axiom __VERIFIER_nondet_u32 == $sub.ref(0, 452420);

procedure __VERIFIER_nondet_u32() returns ($r: i32);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 453452);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.33;



implementation ldv_initialize()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p0 := $M.32;
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} ldv_set_init($p0);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 454484);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const at76_mod_exit: ref;

axiom at76_mod_exit == $sub.ref(0, 455516);

procedure at76_mod_exit();
  free requires assertsPassed;
  modifies $M.54;



implementation at76_mod_exit()
{
  var $i2: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i1: i32;
  var $p8: ref;
  var vslice_dummy_var_296: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} vslice_dummy_var_296 := printk.ref(.str.139);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} ldv_usb_deregister_15(at76_driver);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i1 := 0;
    goto $bb1;

  $bb1:
    call $i2, $p4, $p5, $i6, $i7, $i1 := at76_mod_exit_loop_$bb1($i2, $p4, $p5, $i6, $i7, $i1);
    goto $bb1_last;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref($i2, 56)), $mul.ref(8, 1));
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.40, $p4);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} release_firmware($p5);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i1, 1);
    call {:si_unique_call 940} {:cexpr "i"} boogie_si_record_i32($i6);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i7 := $ule.i32($i6, 8);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $M.39;
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} led_trigger_unregister_simple($p8);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    return;

  $bb3:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i1 := $i6;
    goto $bb3_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4922;
}



const at76_mod_init: ref;

axiom at76_mod_init == $sub.ref(0, 456548);

procedure at76_mod_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.54, $M.60, $M.49, $CurrAddr, $M.0;



implementation at76_mod_init() returns ($r: i32)
{
  var $p0: ref;
  var $i2: i32;
  var $i3: i1;
  var vslice_dummy_var_297: i32;
  var vslice_dummy_var_298: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} vslice_dummy_var_297 := printk.ref(.str.141);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} __mutex_init(fw_mutex, .str.142, $p0);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $i2 := ldv_usb_register_driver_14(at76_driver, __this_module, .str.65);
    call {:si_unique_call 946} {:cexpr "result"} boogie_si_record_i32($i2);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} led_trigger_register_simple(.str.144, ledtrig_tx);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} vslice_dummy_var_298 := printk.ref.i32(.str.143, $i2);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 457580);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p0 := $M.32;
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $i1 := ldv_set_is_empty($p0);
    call {:si_unique_call 950} {:cexpr "tmp___7"} boogie_si_record_i32($i1);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_set_is_empty: ref;

axiom ldv_set_is_empty == $sub.ref(0, 458612);

procedure ldv_set_is_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_set_is_empty($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i1 := $M.33;
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_register_driver_14: ref;

axiom ldv_usb_register_driver_14 == $sub.ref(0, 459644);

procedure ldv_usb_register_driver_14($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.54, $M.60, $M.49, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_14($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 953} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 954} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $M.60 := 0;
    call {:si_unique_call 955} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} ldv_usb_driver_1();
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const led_trigger_register_simple: ref;

axiom led_trigger_register_simple == $sub.ref(0, 460676);

procedure led_trigger_register_simple($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation led_trigger_register_simple($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 461708);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 1} true;
    call {:si_unique_call 957} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 958} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_deregister_15: ref;

axiom ldv_usb_deregister_15 == $sub.ref(0, 462740);

procedure ldv_usb_deregister_15($p0: ref);
  free requires assertsPassed;
  modifies $M.54;



implementation ldv_usb_deregister_15($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} usb_deregister($p0);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $M.54 := 0;
    call {:si_unique_call 960} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    return;
}



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 463772);

procedure release_firmware($p0: ref);
  free requires assertsPassed;



implementation release_firmware($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    return;
}



const led_trigger_unregister_simple: ref;

axiom led_trigger_unregister_simple == $sub.ref(0, 464804);

procedure led_trigger_unregister_simple($p0: ref);
  free requires assertsPassed;



implementation led_trigger_unregister_simple($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 465836);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    return;
}



const ldv_set_init: ref;

axiom ldv_set_init == $sub.ref(0, 466868);

procedure ldv_set_init($p0: ref);
  free requires assertsPassed;
  modifies $M.33;



implementation ldv_set_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $M.33 := 0;
    call {:si_unique_call 961} {:cexpr "last_index"} boogie_si_record_i32(0);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 467900);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 962} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 1} true;
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 468932);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 469964);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 470996);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 472028);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 473060);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 474092);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 475124);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 476156);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 477188);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 478220);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 479252);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 480284);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 481316);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 1} true;
    call {:si_unique_call 963} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 964} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 965} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 1} true;
    call {:si_unique_call 966} __VERIFIER_assume($i4);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 482348);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 483380);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 484412);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 485444);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 1} true;
    call {:si_unique_call 967} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 968} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 969} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 1} true;
    call {:si_unique_call 970} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 971} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 972} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 1} true;
    call {:si_unique_call 973} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 974} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 975} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 1} true;
    call {:si_unique_call 976} __VERIFIER_assume($i7);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 1} true;
    call {:si_unique_call 977} __VERIFIER_assume($i11);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 486476);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 487508);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 1} true;
    call {:si_unique_call 978} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 979} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 980} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 1} true;
    call {:si_unique_call 981} __VERIFIER_assume($i4);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 488540);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 489572);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 490604);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 491636);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 492668);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 1} true;
    call {:si_unique_call 982} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 983} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 984} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 1} true;
    call {:si_unique_call 985} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 986} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 987} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 1} true;
    call {:si_unique_call 988} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 989} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 990} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 1} true;
    call {:si_unique_call 991} __VERIFIER_assume($i7);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 1} true;
    call {:si_unique_call 992} __VERIFIER_assume($i11);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 493700);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 494732);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 495764);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 496796);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 497828);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 498860);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 499892);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 500924);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 501956);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 1} true;
    call {:si_unique_call 993} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 994} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 995} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 1} true;
    call {:si_unique_call 996} __VERIFIER_assume($i10);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 502988);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 1} true;
    call {:si_unique_call 997} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 998} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 999} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 504020);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1000} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1001} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1002} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 505052);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1003} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1004} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 506084);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 507116);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1005} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1006} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 508148);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 509180);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 510212);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_129: [ref]i8;
  var cmdloc_dummy_var_130: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1007} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1008} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1009} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1010} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} $p6 := malloc($i5);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_129 := $M.0;
    call {:si_unique_call 1012} cmdloc_dummy_var_130 := $memset.i8(cmdloc_dummy_var_129, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_130;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 511244);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 512276);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.49, $M.50, $M.51, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.33, $M.32, $M.34, $M.0, $M.30, $M.35, $M.39, $M.77, $M.78, $M.38, $M.1, $M.40, $M.158;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1013} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.49 := $0.ref;
    $M.50 := $0.ref;
    $M.51 := $0.ref;
    $M.54 := 0;
    call {:si_unique_call 1014} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 1015} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 1016} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 1017} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.58 := 0;
    call {:si_unique_call 1018} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.59 := 0;
    call {:si_unique_call 1019} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.60 := 0;
    call {:si_unique_call 1020} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 1021} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.62 := 0;
    call {:si_unique_call 1022} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 1023} {:cexpr "last_index"} boogie_si_record_i32(0);
    $M.32 := $0.ref;
    $M.34 := $store.ref($M.34, set_impl, $0.ref);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(1, 8)), $0.ref);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(2, 8)), $0.ref);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(3, 8)), $0.ref);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(4, 8)), $0.ref);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(5, 8)), $0.ref);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(6, 8)), $0.ref);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(7, 8)), $0.ref);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(8, 8)), $0.ref);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(9, 8)), $0.ref);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(10, 8)), $0.ref);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(11, 8)), $0.ref);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(12, 8)), $0.ref);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(13, 8)), $0.ref);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(14, 8)), $0.ref);
    $M.0 := $store.i8($M.0, hw_rates, $sub.i8(0, 126));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(hw_rates, $mul.ref(0, 4)), $mul.ref(1, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(hw_rates, $mul.ref(0, 4)), $mul.ref(2, 1)), 11);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(hw_rates, $mul.ref(0, 4)), $mul.ref(3, 1)), 22);
    $M.30 := $store.ref($M.30, preambles, .str.165);
    $M.30 := $store.ref($M.30, $add.ref($add.ref(preambles, $mul.ref(0, 24)), $mul.ref(1, 8)), .str.166);
    $M.30 := $store.ref($M.30, $add.ref($add.ref(preambles, $mul.ref(0, 24)), $mul.ref(2, 8)), .str.154);
    $M.35 := 0;
    call {:si_unique_call 1024} {:cexpr "tx_activity"} boogie_si_record_i32(0);
    $M.39 := $0.ref;
    $M.77 := $store.i16($M.77, dev_table, 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(0, 32)), $mul.ref(2, 1)), 1003);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(0, 32)), $mul.ref(4, 1)), 30211);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(0, 32)), $mul.ref(24, 1)), 1);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(1, 32)), $mul.ref(2, 1)), 1643);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(1, 32)), $mul.ref(4, 1)), 8721);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(1, 32)), $mul.ref(24, 1)), 1);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(2, 32)), $mul.ref(2, 1)), 2148);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(2, 32)), $mul.ref(4, 1)), 16640);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(2, 32)), $mul.ref(24, 1)), 1);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(3, 32)), $mul.ref(2, 1)), 2875);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(3, 32)), $mul.ref(4, 1)), 5650);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(3, 32)), $mul.ref(24, 1)), 1);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(4, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(4, 32)), $mul.ref(2, 1)), 1008);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(4, 32)), $mul.ref(4, 1)), 284);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(4, 32)), $mul.ref(24, 1)), 1);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(5, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(5, 32)), $mul.ref(2, 1)), 3294);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(5, 32)), $mul.ref(4, 1)), 1);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(5, 32)), $mul.ref(24, 1)), 1);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(6, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(6, 32)), $mul.ref(2, 1)), 1690);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(6, 32)), $mul.ref(4, 1)), 800);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(6, 32)), $mul.ref(24, 1)), 1);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(7, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(7, 32)), $mul.ref(2, 1)), 3420);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(7, 32)), $mul.ref(4, 1)), $sub.i16(0, 24575));
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(7, 32)), $mul.ref(24, 1)), 1);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(8, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(8, 32)), $mul.ref(2, 1)), 1189);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(8, 32)), $mul.ref(4, 1)), $sub.i16(0, 28672));
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(8, 32)), $mul.ref(24, 1)), 1);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(9, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(9, 32)), $mul.ref(2, 1)), 1501);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(9, 32)), $mul.ref(4, 1)), $sub.i16(0, 207));
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(9, 32)), $mul.ref(24, 1)), 1);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(10, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(10, 32)), $mul.ref(2, 1)), $sub.i16(0, 32634));
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(10, 32)), $mul.ref(4, 1)), 512);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(10, 32)), $mul.ref(24, 1)), 1);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(11, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(11, 32)), $mul.ref(2, 1)), 3470);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(11, 32)), $mul.ref(4, 1)), 28928);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(11, 32)), $mul.ref(24, 1)), 1);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(12, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(12, 32)), $mul.ref(2, 1)), 3470);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(12, 32)), $mul.ref(4, 1)), 28944);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(12, 32)), $mul.ref(24, 1)), 1);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(13, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(13, 32)), $mul.ref(2, 1)), 1211);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(13, 32)), $mul.ref(4, 1)), 2329);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(13, 32)), $mul.ref(24, 1)), 1);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(14, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(14, 32)), $mul.ref(2, 1)), 1690);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(14, 32)), $mul.ref(4, 1)), 2081);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(14, 32)), $mul.ref(24, 1)), 1);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(15, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(15, 32)), $mul.ref(2, 1)), 1003);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(15, 32)), $mul.ref(4, 1)), 30212);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(15, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(15, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(15, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(15, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(15, 32)), $mul.ref(24, 1)), 2);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(16, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(16, 32)), $mul.ref(2, 1)), 1373);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(16, 32)), $mul.ref(4, 1)), $sub.i16(0, 24576));
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(16, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(16, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(16, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(16, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(16, 32)), $mul.ref(24, 1)), 2);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(17, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(17, 32)), $mul.ref(2, 1)), 1003);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(17, 32)), $mul.ref(4, 1)), 30213);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(17, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(17, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(17, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(17, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(17, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(17, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(17, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(17, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(17, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(17, 32)), $mul.ref(24, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(18, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(18, 32)), $mul.ref(2, 1)), 1690);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(18, 32)), $mul.ref(4, 1)), 801);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(18, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(18, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(18, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(18, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(18, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(18, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(18, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(18, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(18, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(18, 32)), $mul.ref(24, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(19, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(19, 32)), $mul.ref(2, 1)), 1915);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(19, 32)), $mul.ref(4, 1)), 8729);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(19, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(19, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(19, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(19, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(19, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(19, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(19, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(19, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(19, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(19, 32)), $mul.ref(24, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(20, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(20, 32)), $mul.ref(2, 1)), 1915);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(20, 32)), $mul.ref(4, 1)), 8743);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(20, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(20, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(20, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(20, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(20, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(20, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(20, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(20, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(20, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(20, 32)), $mul.ref(24, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(21, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(21, 32)), $mul.ref(2, 1)), 2148);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(21, 32)), $mul.ref(4, 1)), 16642);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(21, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(21, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(21, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(21, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(21, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(21, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(21, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(21, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(21, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(21, 32)), $mul.ref(24, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(22, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(22, 32)), $mul.ref(2, 1)), 8193);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(22, 32)), $mul.ref(4, 1)), 12800);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(22, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(22, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(22, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(22, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(22, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(22, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(22, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(22, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(22, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(22, 32)), $mul.ref(24, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(23, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(23, 32)), $mul.ref(2, 1)), 5736);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(23, 32)), $mul.ref(4, 1)), 30213);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(23, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(23, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(23, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(23, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(23, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(23, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(23, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(23, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(23, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(23, 32)), $mul.ref(24, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(24, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(24, 32)), $mul.ref(2, 1)), 1003);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(24, 32)), $mul.ref(4, 1)), 16642);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(24, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(24, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(24, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(24, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(24, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(24, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(24, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(24, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(24, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(24, 32)), $mul.ref(24, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(25, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(25, 32)), $mul.ref(2, 1)), 4977);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(25, 32)), $mul.ref(4, 1)), 22339);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(25, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(25, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(25, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(25, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(25, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(25, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(25, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(25, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(25, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(25, 32)), $mul.ref(24, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(26, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(26, 32)), $mul.ref(2, 1)), 4977);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(26, 32)), $mul.ref(4, 1)), 1);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(26, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(26, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(26, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(26, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(26, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(26, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(26, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(26, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(26, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(26, 32)), $mul.ref(24, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(27, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(27, 32)), $mul.ref(2, 1)), 4977);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(27, 32)), $mul.ref(4, 1)), 2);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(27, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(27, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(27, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(27, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(27, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(27, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(27, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(27, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(27, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(27, 32)), $mul.ref(24, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(28, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(28, 32)), $mul.ref(2, 1)), 1189);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(28, 32)), $mul.ref(4, 1)), $sub.i16(0, 28671));
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(28, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(28, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(28, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(28, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(28, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(28, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(28, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(28, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(28, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(28, 32)), $mul.ref(24, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(29, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(29, 32)), $mul.ref(2, 1)), 1286);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(29, 32)), $mul.ref(4, 1)), 2561);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(29, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(29, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(29, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(29, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(29, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(29, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(29, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(29, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(29, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(29, 32)), $mul.ref(24, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(30, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(30, 32)), $mul.ref(2, 1)), 1665);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(30, 32)), $mul.ref(4, 1)), 27);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(30, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(30, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(30, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(30, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(30, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(30, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(30, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(30, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(30, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(30, 32)), $mul.ref(24, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(31, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(31, 32)), $mul.ref(2, 1)), 1293);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(31, 32)), $mul.ref(4, 1)), 80);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(31, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(31, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(31, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(31, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(31, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(31, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(31, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(31, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(31, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(31, 32)), $mul.ref(24, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(32, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(32, 32)), $mul.ref(2, 1)), 1976);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(32, 32)), $mul.ref(4, 1)), $sub.i16(0, 20480));
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(32, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(32, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(32, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(32, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(32, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(32, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(32, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(32, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(32, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(32, 32)), $mul.ref(24, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(33, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(33, 32)), $mul.ref(2, 1)), 4164);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(33, 32)), $mul.ref(4, 1)), $sub.i16(0, 32765));
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(33, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(33, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(33, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(33, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(33, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(33, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(33, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(33, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(33, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(33, 32)), $mul.ref(24, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(34, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(34, 32)), $mul.ref(2, 1)), 8217);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(34, 32)), $mul.ref(4, 1)), 12832);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(34, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(34, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(34, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(34, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(34, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(34, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(34, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(34, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(34, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(34, 32)), $mul.ref(24, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(35, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(35, 32)), $mul.ref(2, 1)), 1183);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(35, 32)), $mul.ref(4, 1)), 50);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(35, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(35, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(35, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(35, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(35, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(35, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(35, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(35, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(35, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(35, 32)), $mul.ref(24, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(36, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(36, 32)), $mul.ref(2, 1)), 1962);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(36, 32)), $mul.ref(4, 1)), 17);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(36, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(36, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(36, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(36, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(36, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(36, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(36, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(36, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(36, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(36, 32)), $mul.ref(24, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(37, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(37, 32)), $mul.ref(2, 1)), 1962);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(37, 32)), $mul.ref(4, 1)), 24);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(37, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(37, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(37, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(37, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(37, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(37, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(37, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(37, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(37, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(37, 32)), $mul.ref(24, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(38, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(38, 32)), $mul.ref(2, 1)), 1501);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(38, 32)), $mul.ref(4, 1)), $sub.i16(0, 203));
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(38, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(38, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(38, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(38, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(38, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(38, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(38, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(38, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(38, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(38, 32)), $mul.ref(24, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(39, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(39, 32)), $mul.ref(2, 1)), 2106);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(39, 32)), $mul.ref(4, 1)), 13569);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(39, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(39, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(39, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(39, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(39, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(39, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(39, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(39, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(39, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(39, 32)), $mul.ref(24, 1)), 4);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(40, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(40, 32)), $mul.ref(2, 1)), 3420);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(40, 32)), $mul.ref(4, 1)), $sub.i16(0, 24574));
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(40, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(40, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(40, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(40, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(40, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(40, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(40, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(40, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(40, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(40, 32)), $mul.ref(24, 1)), 4);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(41, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(41, 32)), $mul.ref(2, 1)), 1003);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(41, 32)), $mul.ref(4, 1)), 30214);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(41, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(41, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(41, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(41, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(41, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(41, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(41, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(41, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(41, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(41, 32)), $mul.ref(24, 1)), 5);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(42, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(42, 32)), $mul.ref(2, 1)), 1003);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(42, 32)), $mul.ref(4, 1)), 30227);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(42, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(42, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(42, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(42, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(42, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(42, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(42, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(42, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(42, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(42, 32)), $mul.ref(24, 1)), 6);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(43, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(43, 32)), $mul.ref(2, 1)), 4977);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(43, 32)), $mul.ref(4, 1)), 20);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(43, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(43, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(43, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(43, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(43, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(43, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(43, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(43, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(43, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(43, 32)), $mul.ref(24, 1)), 6);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(44, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(44, 32)), $mul.ref(2, 1)), 4977);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(44, 32)), $mul.ref(4, 1)), 19);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(44, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(44, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(44, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(44, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(44, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(44, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(44, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(44, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(44, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(44, 32)), $mul.ref(24, 1)), 6);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(45, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(45, 32)), $mul.ref(2, 1)), 6421);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(45, 32)), $mul.ref(4, 1)), 8755);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(45, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(45, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(45, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(45, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(45, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(45, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(45, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(45, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(45, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(45, 32)), $mul.ref(24, 1)), 6);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(46, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(46, 32)), $mul.ref(2, 1)), 4861);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(46, 32)), $mul.ref(4, 1)), 4097);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(46, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(46, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(46, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(46, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(46, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(46, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(46, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(46, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(46, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(46, 32)), $mul.ref(24, 1)), 6);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(47, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(47, 32)), $mul.ref(2, 1)), 1962);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(47, 32)), $mul.ref(4, 1)), 30227);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(47, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(47, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(47, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(47, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(47, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(47, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(47, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(47, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(47, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(47, 32)), $mul.ref(24, 1)), 6);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(48, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(48, 32)), $mul.ref(2, 1)), 3504);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(48, 32)), $mul.ref(4, 1)), 4128);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(48, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(48, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(48, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(48, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(48, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(48, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(48, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(48, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(48, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(48, 32)), $mul.ref(24, 1)), 6);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(49, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(49, 32)), $mul.ref(2, 1)), 1003);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(49, 32)), $mul.ref(4, 1)), 30228);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(49, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(49, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(49, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(49, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(49, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(49, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(49, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(49, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(49, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(49, 32)), $mul.ref(24, 1)), 7);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(50, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(50, 32)), $mul.ref(2, 1)), 1003);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(50, 32)), $mul.ref(4, 1)), 30231);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(50, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(50, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(50, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(50, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(50, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(50, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(50, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(50, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(50, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(50, 32)), $mul.ref(24, 1)), 7);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(51, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(51, 32)), $mul.ref(2, 1)), 5776);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(51, 32)), $mul.ref(4, 1)), 1793);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(51, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(51, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(51, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(51, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(51, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(51, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(51, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(51, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(51, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(51, 32)), $mul.ref(24, 1)), 7);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(52, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(52, 32)), $mul.ref(2, 1)), 5463);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(52, 32)), $mul.ref(4, 1)), 2);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(52, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(52, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(52, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(52, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(52, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(52, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(52, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(52, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(52, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(52, 32)), $mul.ref(24, 1)), 7);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(53, 32)), $mul.ref(0, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(53, 32)), $mul.ref(2, 1)), 1003);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(53, 32)), $mul.ref(4, 1)), 30229);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(53, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(53, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(53, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(53, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(53, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(53, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(53, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(53, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(53, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(53, 32)), $mul.ref(24, 1)), 8);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(54, 32)), $mul.ref(0, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(54, 32)), $mul.ref(2, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(54, 32)), $mul.ref(4, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(54, 32)), $mul.ref(6, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(54, 32)), $mul.ref(8, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(54, 32)), $mul.ref(10, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(54, 32)), $mul.ref(11, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(54, 32)), $mul.ref(12, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(54, 32)), $mul.ref(13, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(54, 32)), $mul.ref(14, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(54, 32)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(54, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref(dev_table, $mul.ref(0, 1760)), $mul.ref(54, 32)), $mul.ref(24, 1)), 0);
    $M.78 := $store.ref($M.78, at76_driver, .str.140);
    $M.78 := $store.ref($M.78, $add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), at76_probe);
    $M.78 := $store.ref($M.78, $add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), at76_disconnect);
    $M.78 := $store.ref($M.78, $add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), dev_table);
    $M.78 := $store.i32($M.78, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.78 := $store.i32($M.78, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.78 := $store.i32($M.78, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.78 := $store.i32($M.78, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.78 := $store.i64($M.78, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.78 := $store.i8($M.78, $add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.78 := $store.ref($M.78, $add.ref($add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.78 := $store.i32($M.78, $add.ref($add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(at76_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 4);
    $M.38 := $store.ref($M.38, ledtrig_tx_timer, $0.ref);
    $M.38 := $store.ref($M.38, $add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1)), $i2p.i64.ref(1953723489));
    $M.38 := $store.i64($M.38, $add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(16, 1)), 0);
    $M.38 := $store.ref($M.38, $add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(24, 1)), boot_tvec_bases);
    $M.38 := $store.ref($M.38, $add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(32, 1)), at76_ledtrig_tx_timerfunc);
    $M.38 := $store.i64($M.38, $add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(40, 1)), 0);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(48, 1)), $sub.i32(0, 1));
    $M.38 := $store.i32($M.38, $add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(52, 1)), 0);
    $M.38 := $store.ref($M.38, $add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(56, 1)), $0.ref);
    $M.38 := $store.i8($M.38, $add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.38 := $store.i8($M.38, $add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.38 := $store.i8($M.38, $add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.38 := $store.i8($M.38, $add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.38 := $store.i8($M.38, $add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.38 := $store.i8($M.38, $add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.38 := $store.i8($M.38, $add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.38 := $store.i8($M.38, $add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.38 := $store.i8($M.38, $add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.38 := $store.i8($M.38, $add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.38 := $store.i8($M.38, $add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.38 := $store.i8($M.38, $add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.38 := $store.i8($M.38, $add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.38 := $store.i8($M.38, $add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.38 := $store.i8($M.38, $add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.38 := $store.i8($M.38, $add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.38 := $store.ref($M.38, $add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(0, 1)), .str.136);
    $M.38 := $store.ref($M.38, $add.ref($add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.38 := $store.ref($M.38, $add.ref($add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.38 := $store.ref($M.38, $add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(24, 1)), .str.136);
    $M.38 := $store.i32($M.38, $add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.38 := $store.i64($M.38, $add.ref($add.ref($add.ref(ledtrig_tx_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, at76_rates, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_rates, $mul.ref(0, 48)), $mul.ref(0, 12)), $mul.ref(4, 1)), 10);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_rates, $mul.ref(0, 48)), $mul.ref(0, 12)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_rates, $mul.ref(0, 48)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_rates, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_rates, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(4, 1)), 20);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_rates, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(6, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_rates, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_rates, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_rates, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_rates, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(6, 1)), 2);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_rates, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_rates, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_rates, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_rates, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(6, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_rates, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, at76_channels, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(4, 1)), 2412);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(6, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(4, 1)), 2417);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(6, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(4, 1)), 2422);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(6, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(4, 1)), 2427);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(6, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(4, 1)), 2432);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(6, 1)), 5);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(4, 1)), 2437);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(6, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(4, 1)), 2442);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(6, 1)), 7);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(4, 1)), 2447);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(6, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(4, 1)), 2452);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(6, 1)), 9);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(4, 1)), 2457);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(6, 1)), 10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(4, 1)), 2462);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(6, 1)), 11);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(4, 1)), 2467);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(6, 1)), 12);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(4, 1)), 2472);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(6, 1)), 13);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(4, 1)), 2484);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(6, 1)), 14);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, at76_supported_band, at76_channels);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(8, 1)), at76_rates);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(20, 1)), 14);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(24, 1)), 4);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(13, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(13, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(13, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(8, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(8, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(at76_supported_band, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.1 := 0;
    call {:si_unique_call 1025} {:cexpr "at76_debug"} boogie_si_record_i32(0);
    $M.0 := $store.i32($M.0, fw_mutex, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(fw_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(fw_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(fw_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_mutex, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_mutex, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_mutex, $mul.ref(0, 168)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_mutex, $mul.ref(0, 168)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_mutex, $mul.ref(0, 168)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fw_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fw_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fw_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(fw_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.40 := $store.ref($M.40, firmwares, .str.17);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(8, 1)), $0.ref);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(20, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(24, 1)), $0.ref);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(32, 1)), $0.ref);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(40, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(44, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(44, 1)), $mul.ref(1, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(44, 1)), $mul.ref(2, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(44, 1)), $mul.ref(3, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(48, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), .str.18);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(8, 1)), $0.ref);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(20, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(24, 1)), $0.ref);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(32, 1)), $0.ref);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(40, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(44, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(44, 1)), $mul.ref(1, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(44, 1)), $mul.ref(2, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(44, 1)), $mul.ref(3, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(48, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), .str.19);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(8, 1)), $0.ref);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(20, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(24, 1)), $0.ref);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(32, 1)), $0.ref);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(40, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(44, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(44, 1)), $mul.ref(1, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(44, 1)), $mul.ref(2, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(44, 1)), $mul.ref(3, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(48, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), .str.20);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(8, 1)), $0.ref);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(20, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(24, 1)), $0.ref);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(32, 1)), $0.ref);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(40, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(44, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(44, 1)), $mul.ref(1, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(44, 1)), $mul.ref(2, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(44, 1)), $mul.ref(3, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(48, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), .str.21);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(8, 1)), $0.ref);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(20, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(24, 1)), $0.ref);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(32, 1)), $0.ref);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(40, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(44, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(44, 1)), $mul.ref(1, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(44, 1)), $mul.ref(2, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(44, 1)), $mul.ref(3, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(48, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), .str.22);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(8, 1)), $0.ref);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(20, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(24, 1)), $0.ref);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(32, 1)), $0.ref);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(40, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(44, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(44, 1)), $mul.ref(1, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(44, 1)), $mul.ref(2, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(44, 1)), $mul.ref(3, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(48, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), .str.23);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(8, 1)), $0.ref);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(20, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(24, 1)), $0.ref);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(32, 1)), $0.ref);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(40, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(44, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(44, 1)), $mul.ref(1, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(44, 1)), $mul.ref(2, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(44, 1)), $mul.ref(3, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(48, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), .str.24);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(8, 1)), $0.ref);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(20, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(24, 1)), $0.ref);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(32, 1)), $0.ref);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(40, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(44, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(44, 1)), $mul.ref(1, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(44, 1)), $mul.ref(2, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(44, 1)), $mul.ref(3, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(48, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), .str.25);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(8, 1)), $0.ref);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(16, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(20, 1)), 0);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(24, 1)), $0.ref);
    $M.40 := $store.ref($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(32, 1)), $0.ref);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(40, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(44, 1)), $mul.ref(0, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(44, 1)), $mul.ref(1, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(44, 1)), $mul.ref(2, 1)), 0);
    $M.40 := $store.i8($M.40, $add.ref($add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(44, 1)), $mul.ref(3, 1)), 0);
    $M.40 := $store.i32($M.40, $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, .str.68, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 12)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 12)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 12)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 12)), $mul.ref(5, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 12)), $mul.ref(6, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 12)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 12)), $mul.ref(8, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 12)), $mul.ref(9, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 12)), $mul.ref(10, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.69, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(4, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(5, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(6, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(8, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(9, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(10, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.70, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 9)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 9)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 9)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 9)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 9)), $mul.ref(5, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 9)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 9)), $mul.ref(7, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.71, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(4, 1)), 74);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(5, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(6, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(7, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.72, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 15)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 15)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 15)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 15)), $mul.ref(5, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 15)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 15)), $mul.ref(7, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 15)), $mul.ref(8, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 15)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 15)), $mul.ref(10, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 15)), $mul.ref(11, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 15)), $mul.ref(12, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 15)), $mul.ref(13, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.73, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(4, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(5, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(6, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(7, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(8, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(10, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(11, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.74, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 14)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 14)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 14)), $mul.ref(4, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 14)), $mul.ref(5, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 14)), $mul.ref(6, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 14)), $mul.ref(7, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 14)), $mul.ref(8, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 14)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 14)), $mul.ref(10, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 14)), $mul.ref(11, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 14)), $mul.ref(12, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.75, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(5, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(7, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(8, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(9, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(10, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.76, 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 8)), $mul.ref(1, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 8)), $mul.ref(2, 1)), 75);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 8)), $mul.ref(3, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 8)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 8)), $mul.ref(5, 1)), 87);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 8)), $mul.ref(6, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.80, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 16)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 16)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 16)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 16)), $mul.ref(5, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 16)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 16)), $mul.ref(7, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 16)), $mul.ref(8, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 16)), $mul.ref(9, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 16)), $mul.ref(11, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 16)), $mul.ref(12, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 16)), $mul.ref(13, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 16)), $mul.ref(14, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.81, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 20)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 20)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 20)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 20)), $mul.ref(5, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 20)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 20)), $mul.ref(7, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 20)), $mul.ref(8, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 20)), $mul.ref(9, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 20)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 20)), $mul.ref(11, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 20)), $mul.ref(12, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 20)), $mul.ref(13, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 20)), $mul.ref(14, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 20)), $mul.ref(15, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 20)), $mul.ref(16, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 20)), $mul.ref(17, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 20)), $mul.ref(18, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.82, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 19)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 19)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 19)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 19)), $mul.ref(5, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 19)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 19)), $mul.ref(7, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 19)), $mul.ref(8, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 19)), $mul.ref(9, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 19)), $mul.ref(11, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 19)), $mul.ref(12, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 19)), $mul.ref(13, 1)), 75);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 19)), $mul.ref(14, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 19)), $mul.ref(15, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 19)), $mul.ref(16, 1)), 87);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 19)), $mul.ref(17, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.83, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(5, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(7, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(8, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(9, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(11, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(12, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(13, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(14, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(15, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(16, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(17, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(19, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(20, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(21, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(22, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(23, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(24, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(25, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(26, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(27, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, .str.84, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(5, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(7, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(8, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(9, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(11, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(12, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(13, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(14, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(15, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(16, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(17, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(18, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(20, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(21, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(22, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(23, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(24, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(25, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(26, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(27, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(28, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(29, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(30, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(31, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(32, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 34)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, .str.85, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 20)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 20)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 20)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 20)), $mul.ref(5, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 20)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 20)), $mul.ref(7, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 20)), $mul.ref(8, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 20)), $mul.ref(9, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 20)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 20)), $mul.ref(11, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 20)), $mul.ref(12, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 20)), $mul.ref(13, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 20)), $mul.ref(14, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 20)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 20)), $mul.ref(16, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 20)), $mul.ref(17, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 20)), $mul.ref(18, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.86, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 23)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 23)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 23)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 23)), $mul.ref(5, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 23)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 23)), $mul.ref(7, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 23)), $mul.ref(8, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 23)), $mul.ref(9, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 23)), $mul.ref(11, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 23)), $mul.ref(12, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 23)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 23)), $mul.ref(14, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 23)), $mul.ref(15, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 23)), $mul.ref(16, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 23)), $mul.ref(17, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 23)), $mul.ref(18, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 23)), $mul.ref(19, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 23)), $mul.ref(20, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 23)), $mul.ref(21, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.87, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(5, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(7, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(8, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(9, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(11, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(12, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(13, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(14, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(16, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(17, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(18, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(19, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(20, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(21, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(22, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.88, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 23)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 23)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 23)), $mul.ref(4, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 23)), $mul.ref(5, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 23)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 23)), $mul.ref(7, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 23)), $mul.ref(8, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 23)), $mul.ref(9, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 23)), $mul.ref(11, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 23)), $mul.ref(12, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 23)), $mul.ref(13, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 23)), $mul.ref(14, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 23)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 23)), $mul.ref(16, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 23)), $mul.ref(17, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 23)), $mul.ref(18, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 23)), $mul.ref(19, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 23)), $mul.ref(20, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 23)), $mul.ref(21, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.149, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 6)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 6)), $mul.ref(2, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 6)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 6)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.149, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.150, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 6)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 6)), $mul.ref(2, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 6)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 6)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.150, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.151, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 8)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 8)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 8)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 8)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 8)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 8)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.151, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.152, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 9)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 9)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 9)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 9)), $mul.ref(4, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 9)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 9)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 9)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.154, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 5)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 5)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 5)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.154, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.155, 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(3, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(8, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.156, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 7)), $mul.ref(1, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 7)), $mul.ref(2, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 7)), $mul.ref(3, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 7)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.156, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.157, 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 8)), $mul.ref(1, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 8)), $mul.ref(2, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 8)), $mul.ref(3, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 8)), $mul.ref(4, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 8)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 8)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.157, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.158, 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 6)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 6)), $mul.ref(2, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 6)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.158, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.159, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.159, $mul.ref(0, 6)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.159, $mul.ref(0, 6)), $mul.ref(2, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.159, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.159, $mul.ref(0, 6)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.159, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.161, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 5)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 5)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 5)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.162, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.162, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.163, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 7)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 7)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 7)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 7)), $mul.ref(4, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 7)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.164, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 8)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 8)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 8)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 8)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 8)), $mul.ref(5, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 8)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.158 := $store.i8($M.158, .str.112, 37);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(.str.112, $mul.ref(0, 12)), $mul.ref(1, 1)), 100);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(.str.112, $mul.ref(0, 12)), $mul.ref(2, 1)), 46);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(.str.112, $mul.ref(0, 12)), $mul.ref(3, 1)), 37);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(.str.112, $mul.ref(0, 12)), $mul.ref(4, 1)), 100);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(.str.112, $mul.ref(0, 12)), $mul.ref(5, 1)), 46);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(.str.112, $mul.ref(0, 12)), $mul.ref(6, 1)), 37);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(.str.112, $mul.ref(0, 12)), $mul.ref(7, 1)), 100);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(.str.112, $mul.ref(0, 12)), $mul.ref(8, 1)), 45);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(.str.112, $mul.ref(0, 12)), $mul.ref(9, 1)), 37);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(.str.112, $mul.ref(0, 12)), $mul.ref(10, 1)), 100);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(.str.112, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.124, 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 10)), $mul.ref(1, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 10)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 10)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 10)), $mul.ref(4, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 10)), $mul.ref(5, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 10)), $mul.ref(6, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 10)), $mul.ref(7, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 10)), $mul.ref(8, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.125, 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 12)), $mul.ref(1, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 12)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 12)), $mul.ref(3, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 12)), $mul.ref(4, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 12)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 12)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 12)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 12)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 12)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 12)), $mul.ref(10, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.125, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.126, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 22)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 22)), $mul.ref(2, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 22)), $mul.ref(3, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 22)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 22)), $mul.ref(5, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 22)), $mul.ref(6, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 22)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 22)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 22)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 22)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 22)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 22)), $mul.ref(12, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 22)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 22)), $mul.ref(14, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 22)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 22)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 22)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 22)), $mul.ref(18, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 22)), $mul.ref(20, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.127, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 6)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 6)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.128, 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 7)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 7)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 7)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 7)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 7)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.129, 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 12)), $mul.ref(1, 1)), 75);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 12)), $mul.ref(2, 1)), 75);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 12)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 12)), $mul.ref(4, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 12)), $mul.ref(5, 1)), 74);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 12)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 12)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 12)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 12)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 12)), $mul.ref(10, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.129, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.130, 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 13)), $mul.ref(1, 1)), 75);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 13)), $mul.ref(2, 1)), 75);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 13)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 13)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 13)), $mul.ref(5, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 13)), $mul.ref(6, 1)), 74);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 13)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 13)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 13)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 13)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 13)), $mul.ref(11, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.131, 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 7)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 7)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 7)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 7)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 7)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.131, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.132, 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 10)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 10)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 10)), $mul.ref(3, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 10)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 10)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 10)), $mul.ref(6, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 10)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 10)), $mul.ref(8, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.106, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(2, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(3, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(6, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(11, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.31, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(2, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(3, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(9, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(14, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.165, 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 5)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 5)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 5)), $mul.ref(3, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.166, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 6)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 6)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 6)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 6)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    call {:si_unique_call 1026} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 513308);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i32;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.49, $M.50, $M.51, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.33, $M.32, $M.34, $M.0, $M.30, $M.35, $M.39, $M.77, $M.78, $M.38, $M.1, $M.40, $M.158, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1027} __SMACK_static_init();
    call {:si_unique_call 1028} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.0, $M.59, $M.61, $M.50, $M.51, $M.62, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.49, $M.60, $M.33, $M.32, $M.34, $M.30, $M.35, $M.39, $M.77, $M.78, $M.38, $M.1, $M.40, $M.158, $CurrAddr, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation at76_wait_completion_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i3: i64, in_$p4: ref, in_$i8: i8, in_$i13: i32, in_$i12: i32, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i24: i8, in_$i25: i32, in_$i26: i8, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i34: i1, in_$i35: i1, in_$i36: i32, in_$i38: i64, in_$i39: i64, in_$i40: i1, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i64) returns (out_$i13: i32, out_$i12: i32, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i24: i8, out_$i25: i32, out_$i26: i8, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i34: i1, out_$i35: i1, out_$i36: i32, out_$i38: i64, out_$i39: i64, out_$i40: i1, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i64)
{

  entry:
    out_$i13, out_$i12, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i34, out_$i35, out_$i36, out_$i38, out_$i39, out_$i40, out_$p47, out_$i48, out_$i49, out_vslice_dummy_var_166, out_vslice_dummy_var_167 := in_$i13, in_$i12, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$i34, in_$i35, in_$i36, in_$i38, in_$i39, in_$i40, in_$p47, in_$i48, in_$i49, in_vslice_dummy_var_166, in_vslice_dummy_var_167;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb20:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    out_$i12 := out_$i48;
    goto $bb20_dummy;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i48;
    assume true;
    goto $bb20;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i48, 0);
    goto corral_source_split_1121;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} out_$i48 := at76_get_cmd_status(out_$p47, in_$i8);
    call {:si_unique_call 238} {:cexpr "status"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_1120;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, in_$p4);
    goto corral_source_split_1119;

  $bb18:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i64(out_$i39, 0);
    goto corral_source_split_1109;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    out_$i39 := $sub.i64(in_$i3, out_$i38);
    goto corral_source_split_1108;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i64($M.0, jiffies);
    goto corral_source_split_1107;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} out_vslice_dummy_var_167 := schedule_timeout_interruptible(25);
    goto corral_source_split_1106;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb13;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1);
    goto $bb13;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i12;
    assume true;
    goto $bb15;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i12, 0);
    goto corral_source_split_1102;

  $bb11:
    assume out_$i34 == 1;
    goto corral_source_split_1101;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i12, 8);
    goto corral_source_split_1099;

  $bb9:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} out_vslice_dummy_var_166 := printk.ref.ref.i32.i32.ref(.str.78, out_$p32, in_$i1, out_$i12, out_$p27);
    goto corral_source_split_1097;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} out_$p32 := wiphy_name(out_$p31);
    goto corral_source_split_1096;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_1095;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p29, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_1094;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_1093;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1128)), $mul.ref(1112, 1));
    goto corral_source_split_1092;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} out_$p27 := at76_get_cmd_status_string(out_$i26);
    goto corral_source_split_1091;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    out_$i26 := $trunc.i32.i8(out_$i25);
    goto corral_source_split_1090;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i8.i32(out_$i24);
    goto corral_source_split_1089;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i32.i8(out_$i12);
    goto corral_source_split_1088;

  $bb8:
    assume out_$i23 == 1;
    goto corral_source_split_1087;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_1085;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    out_$i22 := $and.i32(out_$i21, 2097152);
    goto corral_source_split_1084;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i21 := $M.1;
    goto corral_source_split_1083;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i13, out_$i12, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i34, out_$i35, out_$i36, out_$i38, out_$i39, out_$i40, out_$p47, out_$i48, out_$i49, out_vslice_dummy_var_166, out_vslice_dummy_var_167 := at76_wait_completion_loop_$bb4(in_$p0, in_$i1, in_$i3, in_$p4, in_$i8, out_$i13, out_$i12, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i34, out_$i35, out_$i36, out_$i38, out_$i39, out_$i40, out_$p47, out_$i48, out_$i49, out_vslice_dummy_var_166, out_vslice_dummy_var_167);
    return;

  exit:
    return;
}



procedure at76_wait_completion_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i3: i64, in_$p4: ref, in_$i8: i8, in_$i13: i32, in_$i12: i32, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i24: i8, in_$i25: i32, in_$i26: i8, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i34: i1, in_$i35: i1, in_$i36: i32, in_$i38: i64, in_$i39: i64, in_$i40: i1, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i64) returns (out_$i13: i32, out_$i12: i32, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i24: i8, out_$i25: i32, out_$i26: i8, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i34: i1, out_$i35: i1, out_$i36: i32, out_$i38: i64, out_$i39: i64, out_$i40: i1, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i64);
  modifies $CurrAddr;



implementation ldv_set_add_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$i11: i32, in_$i12: i32, in_$i13: i1) returns (out_$i4: i32, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$i11: i32, out_$i12: i32, out_$i13: i1)
{

  entry:
    out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13 := in_$i4, in_$i5, in_$p6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2651;

  $bb12:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i11;
    goto $bb12_dummy;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i11, out_$i12);
    goto corral_source_split_2669;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    out_$i12 := $M.33;
    goto corral_source_split_2668;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i4, 1);
    call {:si_unique_call 467} {:cexpr "i"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_2667;

  $bb9:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i64(out_$i8, out_$i9);
    goto corral_source_split_2658;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_2657;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_2656;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.34, out_$p6);
    goto corral_source_split_2655;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i5, 8));
    goto corral_source_split_2654;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i4);
    goto corral_source_split_2653;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13 := ldv_set_add_loop_$bb4(in_$p1, out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13);
    return;

  exit:
    return;
}



procedure ldv_set_add_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$i11: i32, in_$i12: i32, in_$i13: i1) returns (out_$i4: i32, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$i11: i32, out_$i12: i32, out_$i13: i1);



implementation ldv_set_remove_loop_$bb17(in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1) returns (out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1)
{

  entry:
    out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29 := in_$i20, in_$i21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3121;

  $bb21:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := out_$i27;
    goto $bb21_dummy;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i27, out_$i28);
    goto corral_source_split_3132;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    out_$i28 := $M.33;
    goto corral_source_split_3131;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i20, 1);
    call {:si_unique_call 558} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_3130;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, out_$p26, out_$p23);
    goto corral_source_split_3129;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i25, 8));
    goto corral_source_split_3128;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    goto corral_source_split_3127;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i20, 1);
    goto corral_source_split_3126;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.34, out_$p22);
    goto corral_source_split_3125;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i21, 8));
    goto corral_source_split_3124;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i20);
    goto corral_source_split_3123;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29 := ldv_set_remove_loop_$bb17(out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29);
    return;

  exit:
    return;
}



procedure ldv_set_remove_loop_$bb17(in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1) returns (out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1);
  modifies $M.34;



implementation ldv_set_remove_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i6: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1) returns (out_$i4: i32, out_$i6: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1)
{

  entry:
    out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15 := in_$i4, in_$i6, in_$p7, in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3094;

  $bb11:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i13;
    goto $bb11_dummy;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i13, out_$i14);
    goto corral_source_split_3112;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    out_$i14 := $M.33;
    goto corral_source_split_3111;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i4, 1);
    call {:si_unique_call 556} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_3110;

  $bb9:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i4;
    assume true;
    goto $bb9;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i64(out_$i9, out_$i10);
    goto corral_source_split_3101;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_3100;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_3099;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.34, out_$p7);
    goto corral_source_split_3098;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i6, 8));
    goto corral_source_split_3097;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i4);
    goto corral_source_split_3096;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15 := ldv_set_remove_loop_$bb4(in_$p1, out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure ldv_set_remove_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i6: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1) returns (out_$i4: i32, out_$i6: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1);



implementation at76_load_external_fw_loop_$bb20(in_$p0: ref, in_$p18: ref, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i64, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i32, in_$i42: i64, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_cmdloc_dummy_var_83: [ref]i8, in_cmdloc_dummy_var_84: [ref]i8, in_cmdloc_dummy_var_85: [ref]i8, in_vslice_dummy_var_249: i32) returns (out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i64, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i32, out_$i42: i64, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_cmdloc_dummy_var_83: [ref]i8, out_cmdloc_dummy_var_84: [ref]i8, out_cmdloc_dummy_var_85: [ref]i8, out_vslice_dummy_var_249: i32)
{

  entry:
    out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i35, out_$i36, out_$i37, out_$i38, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_cmdloc_dummy_var_83, out_cmdloc_dummy_var_84, out_cmdloc_dummy_var_85, out_vslice_dummy_var_249 := in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i35, in_$i36, in_$i37, in_$i38, in_$i42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_cmdloc_dummy_var_83, in_cmdloc_dummy_var_84, in_cmdloc_dummy_var_85, in_vslice_dummy_var_249;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3432;

  $bb31:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i25, out_$p26, out_$i27 := out_$i45, out_$p43, out_$i44;
    goto $bb31_dummy;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i35;
    assume true;
    goto $bb31;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    out_$i46 := $sgt.i32(out_$i29, 0);
    goto corral_source_split_3464;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i25, 1);
    call {:si_unique_call 615} {:cexpr "blockno"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_3463;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    out_$i44 := $sub.i32(out_$i27, out_$i29);
    call {:si_unique_call 614} {:cexpr "size"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_3462;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref(out_$p26, $mul.ref(out_$i42, 1));
    goto corral_source_split_3461;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i29);
    goto corral_source_split_3460;

  $bb28:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38 := out_$i25, out_$i35;
    assume true;
    goto $bb28;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, out_$i29);
    goto corral_source_split_3450;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} out_$i35 := at76_load_ext_fw_block(in_$p0, out_$i25, in_$p18, out_$i29);
    call {:si_unique_call 611} {:cexpr "ret"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_3449;

  $bb25:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} out_vslice_dummy_var_249 := printk.ref.i32.i32.i32(.str.51, out_$i27, out_$i29, out_$i25);
    goto corral_source_split_3447;

  $bb24:
    assume out_$i33 == 1;
    goto corral_source_split_3446;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_3444;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    out_$i32 := $and.i32(out_$i31, 16384);
    goto corral_source_split_3443;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    out_$i31 := $M.1;
    goto corral_source_split_3442;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_83 := $M.0;
    out_cmdloc_dummy_var_84 := $M.0;
    call {:si_unique_call 608} out_cmdloc_dummy_var_85 := $memcpy.i8(out_cmdloc_dummy_var_83, out_cmdloc_dummy_var_84, in_$p18, out_$p26, out_$i30, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_85;
    goto corral_source_split_3441;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i29);
    call {:si_unique_call 607} {:cexpr "__len"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_3440;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3439;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    out_$i29 := 1024;
    goto $bb23;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i27;
    goto $bb23;

  $bb21:
    assume out_$i28 == 1;
    goto corral_source_split_3435;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i27, 1024);
    goto corral_source_split_3433;

  $bb22:
    assume !(out_$i28 == 1);
    goto corral_source_split_3437;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i35, out_$i36, out_$i37, out_$i38, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_cmdloc_dummy_var_83, out_cmdloc_dummy_var_84, out_cmdloc_dummy_var_85, out_vslice_dummy_var_249 := at76_load_external_fw_loop_$bb20(in_$p0, in_$p18, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i35, out_$i36, out_$i37, out_$i38, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_cmdloc_dummy_var_83, out_cmdloc_dummy_var_84, out_cmdloc_dummy_var_85, out_vslice_dummy_var_249);
    return;

  exit:
    return;
}



procedure at76_load_external_fw_loop_$bb20(in_$p0: ref, in_$p18: ref, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i64, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i32, in_$i42: i64, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_cmdloc_dummy_var_83: [ref]i8, in_cmdloc_dummy_var_84: [ref]i8, in_cmdloc_dummy_var_85: [ref]i8, in_vslice_dummy_var_249: i32) returns (out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i64, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i32, out_$i42: i64, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_cmdloc_dummy_var_83: [ref]i8, out_cmdloc_dummy_var_84: [ref]i8, out_cmdloc_dummy_var_85: [ref]i8, out_vslice_dummy_var_249: i32);
  modifies $M.0;



implementation at76_alloc_urbs_loop_$bb10(in_$p17: ref, in_$p19: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i8, in_$i38: i32, in_$p39: ref, in_$i40: i8, in_$i41: i32, in_$i43: i64, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$i56: i8, in_$i57: i32, in_$i58: i1, in_$i25: i32, in_$p26: ref, in_$p27: ref, in_$p59: ref, in_$p60: ref, in_vslice_dummy_var_263: i32) returns (out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i8, out_$i38: i32, out_$p39: ref, out_$i40: i8, out_$i41: i32, out_$i43: i64, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$i56: i8, out_$i57: i32, out_$i58: i1, out_$i25: i32, out_$p26: ref, out_$p27: ref, out_$p59: ref, out_$p60: ref, out_vslice_dummy_var_263: i32)
{

  entry:
    out_$p28, out_$p29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i25, out_$p26, out_$p27, out_$p59, out_$p60, out_vslice_dummy_var_263 := in_$p28, in_$p29, in_$i30, in_$p32, in_$i33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i43, in_$i44, in_$i45, in_$i46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p53, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i25, in_$p26, in_$p27, in_$p59, in_$p60, in_vslice_dummy_var_263;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3776;

  $bb27:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$i25, out_$p26, out_$p27 := out_$i55, out_$p54, out_$p48;
    goto $bb27_dummy;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    out_$p59, out_$p60 := out_$p48, out_$p54;
    assume true;
    goto $bb27;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    out_$i58 := $sgt.i32(out_$i57, out_$i55);
    goto corral_source_split_3821;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i8.i32(out_$i56);
    goto corral_source_split_3820;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i8($M.0, in_$p19);
    goto corral_source_split_3819;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i32(out_$i25, 1);
    call {:si_unique_call 675} {:cexpr "i"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_3818;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_3817;

  $bb22:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    out_$p54 := out_$p26;
    goto $bb26;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    out_$p54 := out_$p53;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_3815;

  $bb24:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    out_$p53 := out_$p26;
    goto $bb25;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    out_$p53 := out_$p32;
    goto $bb25;

  $bb23:
    assume out_$i52 == 1;
    goto corral_source_split_3813;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 0);
    goto corral_source_split_3811;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} out_$i51 := usb_endpoint_is_bulk_out(out_$p32);
    call {:si_unique_call 674} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_3810;

  $bb21:
    assume out_$i50 == 1;
    goto corral_source_split_3809;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i64(out_$i49, 0);
    goto corral_source_split_3807;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_3806;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3805;

  $bb16:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    out_$p48 := out_$p27;
    goto $bb20;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    out_$p48 := out_$p47;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3803;

  $bb18:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$p47 := out_$p27;
    goto $bb19;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    out_$p47 := out_$p32;
    goto $bb19;

  $bb17:
    assume out_$i46 == 1;
    goto corral_source_split_3801;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_3799;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} out_$i45 := usb_endpoint_is_bulk_in(out_$p32);
    call {:si_unique_call 672} {:cexpr "tmp"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_3798;

  $bb15:
    assume out_$i44 == 1;
    goto corral_source_split_3797;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i64(out_$i43, 0);
    goto corral_source_split_3795;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_3794;

  $bb13:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} out_vslice_dummy_var_263 := printk.ref.ref.i32.i32.i32(.str.119, .str.117, out_$i25, out_$i38, out_$i41);
    goto corral_source_split_3792;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i8.i32(out_$i40);
    goto corral_source_split_3791;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i8($M.0, out_$p39);
    goto corral_source_split_3790;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i8.i32(out_$i37);
    out_$p39 := $add.ref($add.ref($add.ref(out_$p29, $mul.ref(out_$i30, 72)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3789;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i8($M.0, out_$p36);
    goto corral_source_split_3788;

  $bb12:
    assume out_$i35 == 1;
    out_$p36 := $add.ref($add.ref($add.ref(out_$p29, $mul.ref(out_$i30, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3787;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_3785;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    out_$i34 := $and.i32(out_$i33, 32768);
    goto corral_source_split_3784;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    out_$i33 := $M.1;
    goto corral_source_split_3783;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p29, $mul.ref(out_$i30, 72)), $mul.ref(0, 1));
    goto corral_source_split_3782;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    goto corral_source_split_3781;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i25);
    goto corral_source_split_3780;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_3779;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p17, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3778;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb27_dummy:
    call {:si_unique_call 1} out_$p28, out_$p29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i25, out_$p26, out_$p27, out_$p59, out_$p60, out_vslice_dummy_var_263 := at76_alloc_urbs_loop_$bb10(in_$p17, in_$p19, out_$p28, out_$p29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i25, out_$p26, out_$p27, out_$p59, out_$p60, out_vslice_dummy_var_263);
    return;

  exit:
    return;
}



procedure at76_alloc_urbs_loop_$bb10(in_$p17: ref, in_$p19: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i8, in_$i38: i32, in_$p39: ref, in_$i40: i8, in_$i41: i32, in_$i43: i64, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$i56: i8, in_$i57: i32, in_$i58: i1, in_$i25: i32, in_$p26: ref, in_$p27: ref, in_$p59: ref, in_$p60: ref, in_vslice_dummy_var_263: i32) returns (out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i8, out_$i38: i32, out_$p39: ref, out_$i40: i8, out_$i41: i32, out_$i43: i64, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$i56: i8, out_$i57: i32, out_$i58: i1, out_$i25: i32, out_$p26: ref, out_$p27: ref, out_$p59: ref, out_$p60: ref, out_vslice_dummy_var_263: i32);



implementation at76_usbdfu_download_loop_$bb18(in_$p0: ref, in_$i3: i32, in_$p13: ref, in_$p19: ref, in_$p22: ref, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$p31: ref, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i38: i32, in_$i39: i32, in_$i40: i8, in_$i41: i32, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i8, in_$i60: i64, in_$i61: i32, in_$p64: ref, in_$i62: i32, in_$i63: i32, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i77: i32, in_$i78: i32, in_$i79: i1, in_$i81: i64, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$i87: i32, in_$i88: i32, in_$i89: i1, in_$i91: i1, in_$i92: i32, in_$i93: i64, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i98: i32, in_$i99: i64, in_$p100: ref, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$p104: ref, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i113: i8, in_$i114: i64, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i122: i64, in_$i124: i32, in_$i125: i32, in_$i126: i1, in_$i128: i32, in_$i129: i32, in_$i130: i1, in_$i132: i32, in_$i133: i32, in_$i134: i1, in_$i136: i32, in_$i137: i32, in_$i138: i1, in_$i140: i32, in_$i141: i32, in_$i142: i1, in_$i143: i8, in_$i144: i32, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i71: i32, in_$p72: ref, in_$i146: i1, in_$i148: i1, in_$i147: i32, in_cmdloc_dummy_var_122: [ref]i8, in_cmdloc_dummy_var_123: [ref]i8, in_cmdloc_dummy_var_124: [ref]i8, in_vslice_dummy_var_271: i32, in_vslice_dummy_var_272: i32, in_vslice_dummy_var_273: i32, in_vslice_dummy_var_274: i32, in_vslice_dummy_var_275: i64, in_vslice_dummy_var_276: i32, in_vslice_dummy_var_277: i32, in_vslice_dummy_var_278: i32, in_vslice_dummy_var_279: i32, in_vslice_dummy_var_280: i32, in_vslice_dummy_var_281: i32, in_vslice_dummy_var_282: i64, in_vslice_dummy_var_283: i32, in_vslice_dummy_var_284: i32, in_vslice_dummy_var_285: i32, in_vslice_dummy_var_286: i32, in_vslice_dummy_var_287: i32) returns (out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$p31: ref, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i38: i32, out_$i39: i32, out_$i40: i8, out_$i41: i32, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i8, out_$i60: i64, out_$i61: i32, out_$p64: ref, out_$i62: i32, out_$i63: i32, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i77: i32, out_$i78: i32, out_$i79: i1, out_$i81: i64, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$i87: i32, out_$i88: i32, out_$i89: i1, out_$i91: i1, out_$i92: i32, out_$i93: i64, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i98: i32, out_$i99: i64, out_$p100: ref, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$p104: ref, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i113: i8, out_$i114: i64, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i122: i64, out_$i124: i32, out_$i125: i32, out_$i126: i1, out_$i128: i32, out_$i129: i32, out_$i130: i1, out_$i132: i32, out_$i133: i32, out_$i134: i1, out_$i136: i32, out_$i137: i32, out_$i138: i1, out_$i140: i32, out_$i141: i32, out_$i142: i1, out_$i143: i8, out_$i144: i32, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i71: i32, out_$p72: ref, out_$i146: i1, out_$i148: i1, out_$i147: i32, out_cmdloc_dummy_var_122: [ref]i8, out_cmdloc_dummy_var_123: [ref]i8, out_cmdloc_dummy_var_124: [ref]i8, out_vslice_dummy_var_271: i32, out_vslice_dummy_var_272: i32, out_vslice_dummy_var_273: i32, out_vslice_dummy_var_274: i32, out_vslice_dummy_var_275: i64, out_vslice_dummy_var_276: i32, out_vslice_dummy_var_277: i32, out_vslice_dummy_var_278: i32, out_vslice_dummy_var_279: i32, out_vslice_dummy_var_280: i32, out_vslice_dummy_var_281: i32, out_vslice_dummy_var_282: i64, out_vslice_dummy_var_283: i32, out_vslice_dummy_var_284: i32, out_vslice_dummy_var_285: i32, out_vslice_dummy_var_286: i32, out_vslice_dummy_var_287: i32)
{

  entry:
    out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p64, out_$i62, out_$i63, out_$i73, out_$i74, out_$i75, out_$i77, out_$i78, out_$i79, out_$i81, out_$i83, out_$i84, out_$i85, out_$i87, out_$i88, out_$i89, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i106, out_$i107, out_$i108, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i122, out_$i124, out_$i125, out_$i126, out_$i128, out_$i129, out_$i130, out_$i132, out_$i133, out_$i134, out_$i136, out_$i137, out_$i138, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i146, out_$i148, out_$i147, out_cmdloc_dummy_var_122, out_cmdloc_dummy_var_123, out_cmdloc_dummy_var_124, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281, out_vslice_dummy_var_282, out_vslice_dummy_var_283, out_vslice_dummy_var_284, out_vslice_dummy_var_285, out_vslice_dummy_var_286, out_vslice_dummy_var_287 := in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i56, in_$i57, in_$p58, in_$i59, in_$i60, in_$i61, in_$p64, in_$i62, in_$i63, in_$i73, in_$i74, in_$i75, in_$i77, in_$i78, in_$i79, in_$i81, in_$i83, in_$i84, in_$i85, in_$i87, in_$i88, in_$i89, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i98, in_$i99, in_$p100, in_$i101, in_$i102, in_$i103, in_$p104, in_$i106, in_$i107, in_$i108, in_$i110, in_$i111, in_$p112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i122, in_$i124, in_$i125, in_$i126, in_$i128, in_$i129, in_$i130, in_$i132, in_$i133, in_$i134, in_$i136, in_$i137, in_$i138, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$p72, in_$i146, in_$i148, in_$i147, in_cmdloc_dummy_var_122, in_cmdloc_dummy_var_123, in_cmdloc_dummy_var_124, in_vslice_dummy_var_271, in_vslice_dummy_var_272, in_vslice_dummy_var_273, in_vslice_dummy_var_274, in_vslice_dummy_var_275, in_vslice_dummy_var_276, in_vslice_dummy_var_277, in_vslice_dummy_var_278, in_vslice_dummy_var_279, in_vslice_dummy_var_280, in_vslice_dummy_var_281, in_vslice_dummy_var_282, in_vslice_dummy_var_283, in_vslice_dummy_var_284, in_vslice_dummy_var_285, in_vslice_dummy_var_286, in_vslice_dummy_var_287;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4334;

  $bb107:
    assume out_$i148 == 1;
    assume {:verifier.code 0} true;
    out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31 := out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72;
    goto $bb107_dummy;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    out_$i147 := out_$i70;
    assume true;
    goto $bb107;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    out_$i148 := $sge.i32(out_$i70, 0);
    goto corral_source_split_4509;

  $bb104:
    assume out_$i146 == 1;
    goto corral_source_split_4508;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    out_$i147 := out_$i70;
    assume true;
    goto $bb104;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(out_$i68, 0);
    goto corral_source_split_4411;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4410;

  $bb103:
    assume {:verifier.code 0} true;
    out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72 := out_$i25, out_$i26, out_$i27, out_$i38, $sub.i32(0, 22), out_$i30, out_$p31;
    goto $bb54;

  $bb99:
    assume {:verifier.code 0} true;
    out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72 := out_$i25, out_$i26, out_$i27, out_$i38, $sub.i32(0, 32), out_$i30, out_$p31;
    goto $bb54;

  $bb96:
    assume {:verifier.code 0} true;
    out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72 := out_$i25, out_$i26, out_$i27, out_$i38, out_$i39, out_$i30, out_$p31;
    goto $bb54;

  $bb93:
    assume {:verifier.code 0} true;
    out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72 := out_$i25, out_$i26, 1, out_$i38, out_$i39, out_$i30, out_$p31;
    goto $bb54;

  $bb90:
    assume {:verifier.code 0} true;
    out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72 := out_$i25, out_$i26, 1, out_$i38, out_$i39, out_$i30, out_$p31;
    goto $bb54;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72 := out_$i25, out_$i117, out_$i27, 0, out_$i110, out_$i30, out_$p31;
    goto $bb54;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72 := out_$i25, out_$i26, out_$i27, out_$i38, out_$i110, out_$i30, out_$p31;
    goto $bb54;

  $bb75:
    assume {:verifier.code 0} true;
    out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72 := out_$i102, out_$i26, out_$i27, 1, out_$i98, out_$i101, out_$p100;
    goto $bb54;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72 := out_$i25, out_$i26, out_$i27, 1, out_$i39, out_$i30, out_$p31;
    goto $bb54;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72 := out_$i25, out_$i62, out_$i27, out_$i63, out_$i56, out_$i30, out_$p31;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4408;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} out_vslice_dummy_var_272 := dev_err.ref.ref.i32(out_$p64, .str.35, out_$i56);
    assume {:verifier.code 0} true;
    out_$i62, out_$i63 := out_$i26, out_$i38;
    goto $bb53;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    out_$i62, out_$i63 := out_$i61, 0;
    goto $bb53;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    out_$i61 := $trunc.i64.i32(out_$i60);
    call {:si_unique_call 766} {:cexpr "dfu_timeout"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_4403;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} out_$i60 := at76_get_timeout(in_$p13);
    call {:si_unique_call 765} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i60);
    goto corral_source_split_4402;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, in_$p22, out_$i59);
    goto corral_source_split_4401;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i8($M.0, out_$p58);
    goto corral_source_split_4400;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p13, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4399;

  $bb51:
    assume out_$i57 == 1;
    goto corral_source_split_4398;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    out_$i57 := $sge.i32(out_$i56, 0);
    goto corral_source_split_4396;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} out_$i56 := at76_dfu_get_status(in_$p0, in_$p13);
    call {:si_unique_call 763} {:cexpr "ret"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_4395;

  $bb49:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} out_vslice_dummy_var_271 := printk.ref(.str.34);
    goto corral_source_split_4393;

  $bb48:
    assume out_$i54 == 1;
    goto corral_source_split_4392;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i53, 0);
    goto corral_source_split_4386;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    out_$i53 := $and.i32(out_$i52, 536870912);
    goto corral_source_split_4385;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    out_$i52 := $M.1;
    goto corral_source_split_4384;

  $bb44:
    assume !(out_$i50 == 1);
    goto corral_source_split_4383;

  $bb39:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i50 := $slt.i32(out_$i41, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb26:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i48 := $slt.i32(out_$i41, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i41, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i8.i32(out_$i40);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i8($M.0, in_$p22);
    goto corral_source_split_4346;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4345;

  $bb20:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i38, out_$i39 := out_$i28, out_$i29;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i38, out_$i39 := 0, out_$i33;
    goto $bb24;

  $bb22:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i33;
    assume true;
    goto $bb22;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i33, 0);
    goto corral_source_split_4339;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} out_$i33 := at76_dfu_get_state(in_$p0, in_$p22);
    call {:si_unique_call 759} {:cexpr "ret"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_4338;

  $bb19:
    assume out_$i32 == 1;
    goto corral_source_split_4337;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i28, 0);
    goto corral_source_split_4335;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4406;

  $bb52:
    assume !(out_$i57 == 1);
    goto corral_source_split_4405;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} out_vslice_dummy_var_275 := schedule_timeout_interruptible(out_$i81);
    goto corral_source_split_4424;

  $bb60:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i32.i64(out_$i26);
    goto corral_source_split_4423;

  $bb59:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} out_vslice_dummy_var_274 := printk.ref(.str.37);
    goto corral_source_split_4421;

  $bb58:
    assume out_$i79 == 1;
    goto corral_source_split_4420;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_4418;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    out_$i78 := $and.i32(out_$i77, 536870912);
    goto corral_source_split_4417;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i77 := $M.1;
    goto corral_source_split_4416;

  $bb56:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} out_vslice_dummy_var_273 := printk.ref(.str.36);
    goto corral_source_split_4414;

  $bb55:
    assume out_$i75 == 1;
    goto corral_source_split_4413;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i32(out_$i74, 0);
    goto corral_source_split_4376;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    out_$i74 := $and.i32(out_$i73, 536870912);
    goto corral_source_split_4375;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    out_$i73 := $M.1;
    goto corral_source_split_4374;

  $bb41:
    assume out_$i49 == 1;
    goto corral_source_split_4373;

  $bb40:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i41, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb74:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} out_vslice_dummy_var_279 := dev_err.ref.ref.i32(out_$p104, .str.41, out_$i98);
    goto corral_source_split_4457;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4456;

  $bb73:
    assume out_$i103 == 1;
    goto corral_source_split_4455;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i32(out_$i98, out_$i92);
    goto corral_source_split_4453;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    out_$i102 := $add.i32(out_$i25, 1);
    call {:si_unique_call 779} {:cexpr "blockno"} boogie_si_record_i32(out_$i102);
    goto corral_source_split_4452;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    out_$i101 := $sub.i32(out_$i30, out_$i92);
    call {:si_unique_call 778} {:cexpr "size"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_4451;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref(out_$p31, $mul.ref(out_$i99, 1));
    goto corral_source_split_4450;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    out_$i99 := $sext.i32.i64(out_$i92);
    goto corral_source_split_4449;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} out_$i98 := at76_load_int_fw_block(in_$p0, out_$i25, in_$p19, out_$i92);
    call {:si_unique_call 777} {:cexpr "ret"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_4448;

  $bb71:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} out_vslice_dummy_var_278 := printk.ref.i32.i32.i32(.str.40, out_$i30, out_$i92, out_$i25);
    goto corral_source_split_4446;

  $bb70:
    assume out_$i96 == 1;
    goto corral_source_split_4445;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    out_$i96 := $ne.i32(out_$i95, 0);
    goto corral_source_split_4443;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    out_$i95 := $and.i32(out_$i94, 536870912);
    goto corral_source_split_4442;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    out_$i94 := $M.1;
    goto corral_source_split_4441;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_122 := $M.0;
    out_cmdloc_dummy_var_123 := $M.0;
    call {:si_unique_call 774} out_cmdloc_dummy_var_124 := $memcpy.i8(out_cmdloc_dummy_var_122, out_cmdloc_dummy_var_123, in_$p19, out_$p31, out_$i93, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_124;
    goto corral_source_split_4440;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    out_$i93 := $sext.i32.i64(out_$i92);
    call {:si_unique_call 773} {:cexpr "__len"} boogie_si_record_i64(out_$i93);
    goto corral_source_split_4439;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_4438;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    out_$i92 := 1024;
    goto $bb69;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    out_$i92 := out_$i30;
    goto $bb69;

  $bb67:
    assume out_$i91 == 1;
    goto corral_source_split_4434;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i91 := $slt.i32(out_$i30, 1024);
    goto corral_source_split_4432;

  $bb65:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} out_vslice_dummy_var_277 := printk.ref(.str.39);
    goto corral_source_split_4430;

  $bb64:
    assume out_$i89 == 1;
    goto corral_source_split_4429;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i32(out_$i88, 0);
    goto corral_source_split_4390;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    out_$i88 := $and.i32(out_$i87, 536870912);
    goto corral_source_split_4389;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i87 := $M.1;
    goto corral_source_split_4388;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    assume out_$i51 == 1;
    goto $bb46;

  $bb43:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i41, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb47;

  $bb62:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} out_vslice_dummy_var_276 := printk.ref(.str.38);
    goto corral_source_split_4427;

  $bb61:
    assume out_$i85 == 1;
    goto corral_source_split_4426;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i32(out_$i84, 0);
    goto corral_source_split_4381;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    out_$i84 := $and.i32(out_$i83, 536870912);
    goto corral_source_split_4380;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    out_$i83 := $M.1;
    goto corral_source_split_4379;

  $bb42:
    assume !(out_$i49 == 1);
    goto corral_source_split_4378;

  $bb68:
    assume !(out_$i91 == 1);
    goto corral_source_split_4436;

  $bb79:
    assume out_$i111 == 1;
    goto corral_source_split_4465;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    out_$i111 := $slt.i32(out_$i110, 0);
    goto corral_source_split_4463;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} out_$i110 := at76_dfu_get_status(in_$p0, in_$p13);
    call {:si_unique_call 783} {:cexpr "ret"} boogie_si_record_i32(out_$i110);
    goto corral_source_split_4462;

  $bb77:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} out_vslice_dummy_var_280 := printk.ref(.str.42);
    goto corral_source_split_4460;

  $bb76:
    assume out_$i108 == 1;
    goto corral_source_split_4459;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i32(out_$i107, 0);
    goto corral_source_split_4366;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    out_$i107 := $and.i32(out_$i106, 536870912);
    goto corral_source_split_4365;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    out_$i106 := $M.1;
    goto corral_source_split_4364;

  $bb37:
    assume out_$i47 == 1;
    goto corral_source_split_4363;

  $bb28:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i41, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb27:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := $slt.i32(out_$i41, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} out_vslice_dummy_var_282 := schedule_timeout_interruptible(out_$i122);
    goto corral_source_split_4485;

  $bb87:
    assume {:verifier.code 0} true;
    out_$i122 := $zext.i32.i64(out_$i117);
    goto corral_source_split_4484;

  $bb86:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} out_vslice_dummy_var_281 := printk.ref(.str.43);
    goto corral_source_split_4482;

  $bb85:
    assume out_$i120 == 1;
    goto corral_source_split_4481;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    out_$i120 := $ne.i32(out_$i119, 0);
    goto corral_source_split_4479;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    out_$i119 := $and.i32(out_$i118, 536870912);
    goto corral_source_split_4478;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    out_$i118 := $M.1;
    goto corral_source_split_4477;

  $bb84:
    assume {:verifier.code 0} true;
    goto corral_source_split_4476;

  $bb83:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    out_$i117 := out_$i115;
    goto $bb84;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    out_$i117 := in_$i3;
    goto $bb84;

  $bb82:
    assume out_$i116 == 1;
    call {:si_unique_call 787} {:cexpr "at76_usbdfu_download:arg:dfu_timeout"} boogie_si_record_i32(in_$i3);
    goto corral_source_split_4474;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    out_$i116 := $sgt.i32(in_$i3, 0);
    goto corral_source_split_4472;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    out_$i115 := $trunc.i64.i32(out_$i114);
    call {:si_unique_call 786} {:cexpr "dfu_timeout"} boogie_si_record_i32(out_$i115);
    goto corral_source_split_4471;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} out_$i114 := at76_get_timeout(in_$p13);
    call {:si_unique_call 785} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i114);
    goto corral_source_split_4470;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, in_$p22, out_$i113);
    goto corral_source_split_4469;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i8($M.0, out_$p112);
    goto corral_source_split_4468;

  $bb81:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p13, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4467;

  $bb80:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb89:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} out_vslice_dummy_var_283 := printk.ref(.str.44);
    goto corral_source_split_4488;

  $bb88:
    assume out_$i126 == 1;
    goto corral_source_split_4487;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    out_$i126 := $ne.i32(out_$i125, 0);
    goto corral_source_split_4371;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    out_$i125 := $and.i32(out_$i124, 536870912);
    goto corral_source_split_4370;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    out_$i124 := $M.1;
    goto corral_source_split_4369;

  $bb38:
    assume !(out_$i47 == 1);
    goto corral_source_split_4368;

  $bb92:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} out_vslice_dummy_var_284 := printk.ref(.str.45);
    goto corral_source_split_4491;

  $bb91:
    assume out_$i130 == 1;
    goto corral_source_split_4490;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    out_$i130 := $ne.i32(out_$i129, 0);
    goto corral_source_split_4351;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    out_$i129 := $and.i32(out_$i128, 536870912);
    goto corral_source_split_4350;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    out_$i128 := $M.1;
    goto corral_source_split_4349;

  $bb30:
    assume out_$i44 == 1;
    goto corral_source_split_4348;

  $bb29:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i41, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb95:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} out_vslice_dummy_var_285 := printk.ref(.str.46);
    goto corral_source_split_4494;

  $bb94:
    assume out_$i134 == 1;
    goto corral_source_split_4493;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    out_$i134 := $ne.i32(out_$i133, 0);
    goto corral_source_split_4356;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    out_$i133 := $and.i32(out_$i132, 536870912);
    goto corral_source_split_4355;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    out_$i132 := $M.1;
    goto corral_source_split_4354;

  $bb32:
    assume out_$i45 == 1;
    goto corral_source_split_4353;

  $bb31:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i41, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb98:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} out_vslice_dummy_var_286 := printk.ref(.str.47);
    goto corral_source_split_4497;

  $bb97:
    assume out_$i138 == 1;
    goto corral_source_split_4496;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    out_$i138 := $ne.i32(out_$i137, 0);
    goto corral_source_split_4361;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    out_$i137 := $and.i32(out_$i136, 536870912);
    goto corral_source_split_4360;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    out_$i136 := $M.1;
    goto corral_source_split_4359;

  $bb34:
    assume out_$i46 == 1;
    goto corral_source_split_4358;

  $bb33:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i41, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb102:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} out_vslice_dummy_var_287 := printk.ref.i32(.str.48, out_$i144);
    goto corral_source_split_4506;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    out_$i144 := $zext.i8.i32(out_$i143);
    goto corral_source_split_4505;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    out_$i143 := $load.i8($M.0, in_$p22);
    goto corral_source_split_4504;

  $bb101:
    assume out_$i142 == 1;
    goto corral_source_split_4503;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    out_$i142 := $ne.i32(out_$i141, 0);
    goto corral_source_split_4501;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    out_$i141 := $and.i32(out_$i140, 536870912);
    goto corral_source_split_4500;

  $bb100:
    assume {:verifier.code 0} true;
    out_$i140 := $M.1;
    goto corral_source_split_4499;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i46 == 1);
    goto $bb36;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i51 == 1);
    goto $bb36;

  $bb107_dummy:
    call {:si_unique_call 1} out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p64, out_$i62, out_$i63, out_$i73, out_$i74, out_$i75, out_$i77, out_$i78, out_$i79, out_$i81, out_$i83, out_$i84, out_$i85, out_$i87, out_$i88, out_$i89, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i106, out_$i107, out_$i108, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i122, out_$i124, out_$i125, out_$i126, out_$i128, out_$i129, out_$i130, out_$i132, out_$i133, out_$i134, out_$i136, out_$i137, out_$i138, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i146, out_$i148, out_$i147, out_cmdloc_dummy_var_122, out_cmdloc_dummy_var_123, out_cmdloc_dummy_var_124, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281, out_vslice_dummy_var_282, out_vslice_dummy_var_283, out_vslice_dummy_var_284, out_vslice_dummy_var_285, out_vslice_dummy_var_286, out_vslice_dummy_var_287 := at76_usbdfu_download_loop_$bb18(in_$p0, in_$i3, in_$p13, in_$p19, in_$p22, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p64, out_$i62, out_$i63, out_$i73, out_$i74, out_$i75, out_$i77, out_$i78, out_$i79, out_$i81, out_$i83, out_$i84, out_$i85, out_$i87, out_$i88, out_$i89, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i106, out_$i107, out_$i108, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i122, out_$i124, out_$i125, out_$i126, out_$i128, out_$i129, out_$i130, out_$i132, out_$i133, out_$i134, out_$i136, out_$i137, out_$i138, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i146, out_$i148, out_$i147, out_cmdloc_dummy_var_122, out_cmdloc_dummy_var_123, out_cmdloc_dummy_var_124, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281, out_vslice_dummy_var_282, out_vslice_dummy_var_283, out_vslice_dummy_var_284, out_vslice_dummy_var_285, out_vslice_dummy_var_286, out_vslice_dummy_var_287);
    return;

  exit:
    return;
}



procedure at76_usbdfu_download_loop_$bb18(in_$p0: ref, in_$i3: i32, in_$p13: ref, in_$p19: ref, in_$p22: ref, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$p31: ref, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i38: i32, in_$i39: i32, in_$i40: i8, in_$i41: i32, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i8, in_$i60: i64, in_$i61: i32, in_$p64: ref, in_$i62: i32, in_$i63: i32, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i77: i32, in_$i78: i32, in_$i79: i1, in_$i81: i64, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$i87: i32, in_$i88: i32, in_$i89: i1, in_$i91: i1, in_$i92: i32, in_$i93: i64, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i98: i32, in_$i99: i64, in_$p100: ref, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$p104: ref, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i113: i8, in_$i114: i64, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i122: i64, in_$i124: i32, in_$i125: i32, in_$i126: i1, in_$i128: i32, in_$i129: i32, in_$i130: i1, in_$i132: i32, in_$i133: i32, in_$i134: i1, in_$i136: i32, in_$i137: i32, in_$i138: i1, in_$i140: i32, in_$i141: i32, in_$i142: i1, in_$i143: i8, in_$i144: i32, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i71: i32, in_$p72: ref, in_$i146: i1, in_$i148: i1, in_$i147: i32, in_cmdloc_dummy_var_122: [ref]i8, in_cmdloc_dummy_var_123: [ref]i8, in_cmdloc_dummy_var_124: [ref]i8, in_vslice_dummy_var_271: i32, in_vslice_dummy_var_272: i32, in_vslice_dummy_var_273: i32, in_vslice_dummy_var_274: i32, in_vslice_dummy_var_275: i64, in_vslice_dummy_var_276: i32, in_vslice_dummy_var_277: i32, in_vslice_dummy_var_278: i32, in_vslice_dummy_var_279: i32, in_vslice_dummy_var_280: i32, in_vslice_dummy_var_281: i32, in_vslice_dummy_var_282: i64, in_vslice_dummy_var_283: i32, in_vslice_dummy_var_284: i32, in_vslice_dummy_var_285: i32, in_vslice_dummy_var_286: i32, in_vslice_dummy_var_287: i32) returns (out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$p31: ref, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i38: i32, out_$i39: i32, out_$i40: i8, out_$i41: i32, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i8, out_$i60: i64, out_$i61: i32, out_$p64: ref, out_$i62: i32, out_$i63: i32, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i77: i32, out_$i78: i32, out_$i79: i1, out_$i81: i64, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$i87: i32, out_$i88: i32, out_$i89: i1, out_$i91: i1, out_$i92: i32, out_$i93: i64, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i98: i32, out_$i99: i64, out_$p100: ref, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$p104: ref, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i113: i8, out_$i114: i64, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i122: i64, out_$i124: i32, out_$i125: i32, out_$i126: i1, out_$i128: i32, out_$i129: i32, out_$i130: i1, out_$i132: i32, out_$i133: i32, out_$i134: i1, out_$i136: i32, out_$i137: i32, out_$i138: i1, out_$i140: i32, out_$i141: i32, out_$i142: i1, out_$i143: i8, out_$i144: i32, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i71: i32, out_$p72: ref, out_$i146: i1, out_$i148: i1, out_$i147: i32, out_cmdloc_dummy_var_122: [ref]i8, out_cmdloc_dummy_var_123: [ref]i8, out_cmdloc_dummy_var_124: [ref]i8, out_vslice_dummy_var_271: i32, out_vslice_dummy_var_272: i32, out_vslice_dummy_var_273: i32, out_vslice_dummy_var_274: i32, out_vslice_dummy_var_275: i64, out_vslice_dummy_var_276: i32, out_vslice_dummy_var_277: i32, out_vslice_dummy_var_278: i32, out_vslice_dummy_var_279: i32, out_vslice_dummy_var_280: i32, out_vslice_dummy_var_281: i32, out_vslice_dummy_var_282: i64, out_vslice_dummy_var_283: i32, out_vslice_dummy_var_284: i32, out_vslice_dummy_var_285: i32, out_vslice_dummy_var_286: i32, out_vslice_dummy_var_287: i32);
  modifies $M.0;



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i4: i64, in_$p6: ref, in_$p8: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$p14: ref, in_$p16: ref, in_$i17: i32, in_$p19: ref, in_$p21: ref, in_$i24: i32, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i1, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i64, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$i111: i64, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$i115: i32, in_$p116: ref, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i121: i32, in_$p122: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$p127: ref, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$p131: ref, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$p135: ref, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$p140: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$p145: ref, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$p150: ref, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$i155: i32, in_$i156: i32, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i1, in_$p165: ref, in_$p166: ref, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$p170: ref, in_vslice_dummy_var_288: i32, in_vslice_dummy_var_289: i32, in_vslice_dummy_var_290: i32, in_vslice_dummy_var_291: i32, in_vslice_dummy_var_292: i32, in_vslice_dummy_var_293: i32, in_vslice_dummy_var_294: i32, in_vslice_dummy_var_295: i32) returns (out_$i24: i32, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i1, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i64, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$i111: i64, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$i115: i32, out_$p116: ref, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i121: i32, out_$p122: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$p127: ref, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$p131: ref, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$p135: ref, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$p140: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$p145: ref, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$p150: ref, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$i155: i32, out_$i156: i32, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i1, out_$p165: ref, out_$p166: ref, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$p170: ref, out_vslice_dummy_var_288: i32, out_vslice_dummy_var_289: i32, out_vslice_dummy_var_290: i32, out_vslice_dummy_var_291: i32, out_vslice_dummy_var_292: i32, out_vslice_dummy_var_293: i32, out_vslice_dummy_var_294: i32, out_vslice_dummy_var_295: i32)
{

  entry:
    out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i100, out_$i101, out_$p102, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$p116, out_$i118, out_$i119, out_$p120, out_$i121, out_$p122, out_$i124, out_$i125, out_$p126, out_$p127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i137, out_$i138, out_$p139, out_$p140, out_$i142, out_$i143, out_$p144, out_$p145, out_$i147, out_$i148, out_$p149, out_$p150, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$p169, out_$p170, out_vslice_dummy_var_288, out_vslice_dummy_var_289, out_vslice_dummy_var_290, out_vslice_dummy_var_291, out_vslice_dummy_var_292, out_vslice_dummy_var_293, out_vslice_dummy_var_294, out_vslice_dummy_var_295 := in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$p90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$p98, in_$i100, in_$i101, in_$p102, in_$i104, in_$i105, in_$p106, in_$i107, in_$i108, in_$i109, in_$p110, in_$i111, in_$i112, in_$i113, in_$p114, in_$i115, in_$p116, in_$i118, in_$i119, in_$p120, in_$i121, in_$p122, in_$i124, in_$i125, in_$p126, in_$p127, in_$i128, in_$i129, in_$p130, in_$p131, in_$i132, in_$i133, in_$p134, in_$p135, in_$i137, in_$i138, in_$p139, in_$p140, in_$i142, in_$i143, in_$p144, in_$p145, in_$i147, in_$i148, in_$p149, in_$p150, in_$i152, in_$i153, in_$p154, in_$i155, in_$i156, in_$i157, in_$i158, in_$p159, in_$i160, in_$i161, in_$p162, in_$i163, in_$i164, in_$p165, in_$p166, in_$i167, in_$i168, in_$p169, in_$p170, in_vslice_dummy_var_288, in_vslice_dummy_var_289, in_vslice_dummy_var_290, in_vslice_dummy_var_291, in_vslice_dummy_var_292, in_vslice_dummy_var_293, in_vslice_dummy_var_294, in_vslice_dummy_var_295;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 858} out_$i24 := __VERIFIER_nondet_int();
    call {:si_unique_call 859} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i24);
    call {:si_unique_call 860} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i24);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb40_dummy;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb15:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $M.55 := out_$i43;
    call {:si_unique_call 867} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_4659;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i32(out_$i42, 1);
    goto corral_source_split_4658;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    out_$i42 := $M.55;
    goto corral_source_split_4657;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $M.54 := 2;
    call {:si_unique_call 866} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4656;

  $bb26:
    assume out_$i41 == 1;
    goto corral_source_split_4655;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 0);
    goto corral_source_split_4653;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    out_$i40 := $M.59;
    goto corral_source_split_4652;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $M.59 := out_$i39;
    call {:si_unique_call 865} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_4651;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} out_$i39 := at76_probe(out_$p38, in_$p3);
    goto corral_source_split_4650;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    out_$p38 := $M.49;
    goto corral_source_split_4649;

  $bb24:
    assume out_$i37 == 1;
    goto corral_source_split_4648;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 1);
    goto corral_source_split_4646;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    out_$i36 := $M.54;
    goto corral_source_split_4645;

  $bb22:
    assume out_$i35 == 1;
    goto corral_source_split_4644;

  $bb17:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i32, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i32, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_4638:
    assume {:verifier.code 1} true;
    call {:si_unique_call 861} out_$i32 := __VERIFIER_nondet_int();
    call {:si_unique_call 862} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i32);
    call {:si_unique_call 863} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i32);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i31 == 1;
    goto corral_source_split_4638;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_4636;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    out_$i30 := $M.54;
    goto corral_source_split_4635;

  $bb12:
    assume out_$i29 == 1;
    goto corral_source_split_4634;

  $bb10:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i24, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb3:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i24, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i24, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $M.55 := out_$i50;
    call {:si_unique_call 870} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_4671;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    out_$i50 := $sub.i32(out_$i49, 1);
    goto corral_source_split_4670;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    out_$i49 := $M.55;
    goto corral_source_split_4669;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 869} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4668;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} at76_disconnect(out_$p48);
    goto corral_source_split_4667;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    out_$p48 := $M.49;
    goto corral_source_split_4666;

  $bb34:
    assume out_$i47 == 1;
    goto corral_source_split_4665;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 0);
    goto corral_source_split_4663;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    out_$i46 := $M.60;
    goto corral_source_split_4662;

  $bb31:
    assume out_$i45 == 1;
    goto corral_source_split_4661;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 2);
    goto corral_source_split_4642;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    out_$i44 := $M.54;
    goto corral_source_split_4641;

  $bb19:
    assume out_$i34 == 1;
    goto corral_source_split_4640;

  $bb18:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i32, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i45 == 1);
    goto $bb33;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i47 == 1);
    goto $bb33;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} ldv_stop();
    goto corral_source_split_4673;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb21;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1);
    goto $bb21;

  $bb42:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb52:
    assume {:verifier.code 0} true;
    assume !(out_$i58 == 1);
    goto $bb53;

  $bb55:
    assume {:verifier.code 0} true;
    assume !(out_$i60 == 1);
    goto $bb53;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i59, 0);
    goto corral_source_split_4687;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    out_$i59 := $M.55;
    goto corral_source_split_4686;

  $bb51:
    assume out_$i58 == 1;
    goto corral_source_split_4685;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 3);
    goto corral_source_split_4683;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    out_$i57 := $M.56;
    goto corral_source_split_4682;

  $bb49:
    assume out_$i56 == 1;
    goto corral_source_split_4681;

  $bb44:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i53, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i53, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_4675:
    assume {:verifier.code 1} true;
    call {:si_unique_call 872} out_$i53 := __VERIFIER_nondet_int();
    call {:si_unique_call 873} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i53);
    call {:si_unique_call 874} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i53);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb41:
    assume out_$i52 == 1;
    goto corral_source_split_4675;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 0);
    goto corral_source_split_4632;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    out_$i51 := $M.56;
    goto corral_source_split_4631;

  $bb11:
    assume !(out_$i28 == 1);
    goto corral_source_split_4630;

  $bb60:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb65:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i66, 0);
    goto corral_source_split_4708;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i66 := $M.61;
    goto corral_source_split_4707;

  $bb62:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 883} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4705;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} ldv_initialize_ieee80211_ops_2();
    goto corral_source_split_4704;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 881} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4703;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $M.56 := 3;
    call {:si_unique_call 880} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4702;

  $bb61:
    assume out_$i65 == 1;
    goto corral_source_split_4701;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 0);
    goto corral_source_split_4699;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    out_$i64 := $M.61;
    goto corral_source_split_4698;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $M.61 := out_$i63;
    call {:si_unique_call 879} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_4697;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} out_$i63 := at76_mod_init();
    goto corral_source_split_4696;

  $bb59:
    assume out_$i62 == 1;
    goto corral_source_split_4695;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i61, 1);
    goto corral_source_split_4679;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    out_$i61 := $M.56;
    goto corral_source_split_4678;

  $bb46:
    assume out_$i55 == 1;
    goto corral_source_split_4677;

  $bb45:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i53, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} ldv_stop();
    goto corral_source_split_4713;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb48;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb48;

  $bb72:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb77:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 890} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4723;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} at76_ledtrig_tx_timerfunc(in_$i4);
    goto corral_source_split_4722;

  $bb76:
    assume out_$i73 == 1;
    goto corral_source_split_4721;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i72, 1);
    goto corral_source_split_4719;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    out_$i72 := $M.57;
    goto corral_source_split_4718;

  $bb74:
    assume out_$i71 == 1;
    goto corral_source_split_4717;

  $bb73:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_4715:
    assume {:verifier.code 1} true;
    call {:si_unique_call 886} out_$i70 := __VERIFIER_nondet_int();
    call {:si_unique_call 887} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i70);
    call {:si_unique_call 888} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i70);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb71:
    assume out_$i69 == 1;
    goto corral_source_split_4715;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_4624;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    out_$i68 := $M.57;
    goto corral_source_split_4623;

  $bb5:
    assume out_$i26 == 1;
    goto corral_source_split_4622;

  $bb4:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i24, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} ldv_stop();
    goto corral_source_split_4725;

  $bb75:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb84:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb110:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb112:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $M.55 := out_$i95;
    call {:si_unique_call 898} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_4780;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    out_$i95 := $add.i32(out_$i94, 1);
    goto corral_source_split_4779;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    out_$i94 := $M.55;
    goto corral_source_split_4778;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 897} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4777;

  $bb111:
    assume out_$i93 == 1;
    goto corral_source_split_4776;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i92, 0);
    goto corral_source_split_4774;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    out_$i92 := $M.62;
    goto corral_source_split_4773;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $M.62 := out_$i91;
    call {:si_unique_call 896} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_4772;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} out_$i91 := at76_mac80211_start(out_$p90);
    goto corral_source_split_4771;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    out_$p90 := $M.50;
    goto corral_source_split_4770;

  $bb109:
    assume out_$i89 == 1;
    goto corral_source_split_4769;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i88, 1);
    goto corral_source_split_4767;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    out_$i88 := $M.58;
    goto corral_source_split_4766;

  $bb107:
    assume out_$i87 == 1;
    goto corral_source_split_4765;

  $bb105:
    assume out_$i86 == 1;
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i76, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb99:
    assume out_$i83 == 1;
    assume {:verifier.code 0} true;
    out_$i86 := $slt.i32(out_$i76, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb86:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$i83 := $slt.i32(out_$i76, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb85:
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i32(out_$i76, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_4727:
    assume {:verifier.code 1} true;
    call {:si_unique_call 892} out_$i76 := __VERIFIER_nondet_int();
    call {:si_unique_call 893} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i76);
    call {:si_unique_call 894} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i76);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb83:
    assume out_$i75 == 1;
    goto corral_source_split_4727;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i32(out_$i74, 0);
    goto corral_source_split_4628;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    out_$i74 := $M.58;
    goto corral_source_split_4627;

  $bb7:
    assume out_$i27 == 1;
    goto corral_source_split_4626;

  $bb6:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i24, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb120:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 902} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4793;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} out_vslice_dummy_var_289 := at76_config(out_$p102, in_$i17);
    goto corral_source_split_4792;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    out_$p102 := $M.50;
    goto corral_source_split_4791;

  $bb119:
    assume out_$i101 == 1;
    goto corral_source_split_4790;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i100, 2);
    goto corral_source_split_4788;

  $bb118:
    assume {:verifier.code 0} true;
    out_$i100 := $M.58;
    goto corral_source_split_4787;

  $bb117:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 900} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4785;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} out_vslice_dummy_var_288 := at76_config(out_$p98, in_$i17);
    goto corral_source_split_4784;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    out_$p98 := $M.50;
    goto corral_source_split_4783;

  $bb116:
    assume out_$i97 == 1;
    goto corral_source_split_4782;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i96, 1);
    goto corral_source_split_4763;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    out_$i96 := $M.58;
    goto corral_source_split_4762;

  $bb106:
    assume !(out_$i86 == 1);
    goto corral_source_split_4761;

  $bb126:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 906} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4808;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} at76_configure_filter(out_$p110, in_$i11, in_$p6, out_$i111);
    goto corral_source_split_4807;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i64($M.53, in_$p1);
    goto corral_source_split_4806;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    out_$p110 := $M.50;
    goto corral_source_split_4805;

  $bb125:
    assume out_$i109 == 1;
    goto corral_source_split_4804;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i32(out_$i108, 2);
    goto corral_source_split_4802;

  $bb124:
    assume {:verifier.code 0} true;
    out_$i108 := $M.58;
    goto corral_source_split_4801;

  $bb123:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 904} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4799;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} at76_configure_filter(out_$p106, in_$i11, in_$p6, out_$i107);
    goto corral_source_split_4798;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i64($M.53, in_$p1);
    goto corral_source_split_4797;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    out_$p106 := $M.50;
    goto corral_source_split_4796;

  $bb122:
    assume out_$i105 == 1;
    goto corral_source_split_4795;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i104, 1);
    goto corral_source_split_4751;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    out_$i104 := $M.58;
    goto corral_source_split_4750;

  $bb101:
    assume out_$i84 == 1;
    goto corral_source_split_4749;

  $bb100:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    out_$i84 := $slt.i32(out_$i76, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb132:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 910} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4825;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} out_vslice_dummy_var_291 := at76_set_key(out_$p120, out_$i121, out_$p122, in_$p8, in_$p19);
    goto corral_source_split_4824;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    out_$p122 := $M.51;
    goto corral_source_split_4823;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i32($M.52, in_$p0);
    goto corral_source_split_4822;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    out_$p120 := $M.50;
    goto corral_source_split_4821;

  $bb131:
    assume out_$i119 == 1;
    goto corral_source_split_4820;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    out_$i119 := $eq.i32(out_$i118, 2);
    goto corral_source_split_4818;

  $bb130:
    assume {:verifier.code 0} true;
    out_$i118 := $M.58;
    goto corral_source_split_4817;

  $bb129:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 908} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4815;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} out_vslice_dummy_var_290 := at76_set_key(out_$p114, out_$i115, out_$p116, in_$p8, in_$p19);
    goto corral_source_split_4814;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    out_$p116 := $M.51;
    goto corral_source_split_4813;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i32($M.52, in_$p0);
    goto corral_source_split_4812;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    out_$p114 := $M.50;
    goto corral_source_split_4811;

  $bb128:
    assume out_$i113 == 1;
    goto corral_source_split_4810;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i112, 1);
    goto corral_source_split_4755;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    out_$i112 := $M.58;
    goto corral_source_split_4754;

  $bb103:
    assume out_$i85 == 1;
    goto corral_source_split_4753;

  $bb102:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    out_$i85 := $slt.i32(out_$i76, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb138:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 914} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4840;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} at76_bss_info_changed(out_$p130, out_$p131, in_$p14, in_$i12);
    goto corral_source_split_4839;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    out_$p131 := $M.51;
    goto corral_source_split_4838;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    out_$p130 := $M.50;
    goto corral_source_split_4837;

  $bb137:
    assume out_$i129 == 1;
    goto corral_source_split_4836;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i32(out_$i128, 2);
    goto corral_source_split_4834;

  $bb136:
    assume {:verifier.code 0} true;
    out_$i128 := $M.58;
    goto corral_source_split_4833;

  $bb135:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 912} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4831;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} at76_bss_info_changed(out_$p126, out_$p127, in_$p14, in_$i12);
    goto corral_source_split_4830;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    out_$p127 := $M.51;
    goto corral_source_split_4829;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    out_$p126 := $M.50;
    goto corral_source_split_4828;

  $bb134:
    assume out_$i125 == 1;
    goto corral_source_split_4827;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i124, 1);
    goto corral_source_split_4759;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    out_$i124 := $M.58;
    goto corral_source_split_4758;

  $bb104:
    assume !(out_$i85 == 1);
    goto corral_source_split_4757;

  $bb144:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 918} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4855;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} out_vslice_dummy_var_293 := at76_add_interface(out_$p139, out_$p140);
    goto corral_source_split_4854;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    out_$p140 := $M.51;
    goto corral_source_split_4853;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    out_$p139 := $M.50;
    goto corral_source_split_4852;

  $bb143:
    assume out_$i138 == 1;
    goto corral_source_split_4851;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i137, 2);
    goto corral_source_split_4849;

  $bb142:
    assume {:verifier.code 0} true;
    out_$i137 := $M.58;
    goto corral_source_split_4848;

  $bb141:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 916} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4846;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} out_vslice_dummy_var_292 := at76_add_interface(out_$p134, out_$p135);
    goto corral_source_split_4845;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    out_$p135 := $M.51;
    goto corral_source_split_4844;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    out_$p134 := $M.50;
    goto corral_source_split_4843;

  $bb140:
    assume out_$i133 == 1;
    goto corral_source_split_4842;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    out_$i133 := $eq.i32(out_$i132, 1);
    goto corral_source_split_4743;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    out_$i132 := $M.58;
    goto corral_source_split_4742;

  $bb97:
    assume out_$i82 == 1;
    goto corral_source_split_4741;

  $bb88:
    assume out_$i78 == 1;
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(out_$i76, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb87:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    out_$i78 := $slt.i32(out_$i76, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb150:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 922} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4870;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} out_vslice_dummy_var_295 := at76_hw_scan(out_$p149, out_$p150, in_$p16);
    goto corral_source_split_4869;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    out_$p150 := $M.51;
    goto corral_source_split_4868;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    out_$p149 := $M.50;
    goto corral_source_split_4867;

  $bb149:
    assume out_$i148 == 1;
    goto corral_source_split_4866;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(out_$i147, 2);
    goto corral_source_split_4864;

  $bb148:
    assume {:verifier.code 0} true;
    out_$i147 := $M.58;
    goto corral_source_split_4863;

  $bb147:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 920} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4861;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} out_vslice_dummy_var_294 := at76_hw_scan(out_$p144, out_$p145, in_$p16);
    goto corral_source_split_4860;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    out_$p145 := $M.51;
    goto corral_source_split_4859;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    out_$p144 := $M.50;
    goto corral_source_split_4858;

  $bb146:
    assume out_$i143 == 1;
    goto corral_source_split_4857;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i142, 1);
    goto corral_source_split_4747;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    out_$i142 := $M.58;
    goto corral_source_split_4746;

  $bb98:
    assume !(out_$i82 == 1);
    goto corral_source_split_4745;

  $bb153:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $M.55 := out_$i156;
    call {:si_unique_call 925} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i156);
    goto corral_source_split_4878;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    out_$i156 := $sub.i32(out_$i155, 1);
    goto corral_source_split_4877;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    out_$i155 := $M.55;
    goto corral_source_split_4876;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 924} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4875;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} at76_mac80211_stop(out_$p154);
    goto corral_source_split_4874;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    out_$p154 := $M.50;
    goto corral_source_split_4873;

  $bb152:
    assume out_$i153 == 1;
    goto corral_source_split_4872;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    out_$i153 := $eq.i32(out_$i152, 2);
    goto corral_source_split_4731;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    out_$i152 := $M.58;
    goto corral_source_split_4730;

  $bb90:
    assume out_$i79 == 1;
    goto corral_source_split_4729;

  $bb89:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i76, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb159:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 929} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4891;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} at76_mac80211_tx(out_$p162, in_$p10, in_$p21);
    goto corral_source_split_4890;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    out_$p162 := $M.50;
    goto corral_source_split_4889;

  $bb158:
    assume out_$i161 == 1;
    goto corral_source_split_4888;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i160, 2);
    goto corral_source_split_4886;

  $bb157:
    assume {:verifier.code 0} true;
    out_$i160 := $M.58;
    goto corral_source_split_4885;

  $bb156:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 927} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4883;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} at76_mac80211_tx(out_$p159, in_$p10, in_$p21);
    goto corral_source_split_4882;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    out_$p159 := $M.50;
    goto corral_source_split_4881;

  $bb155:
    assume out_$i158 == 1;
    goto corral_source_split_4880;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    out_$i158 := $eq.i32(out_$i157, 1);
    goto corral_source_split_4735;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    out_$i157 := $M.58;
    goto corral_source_split_4734;

  $bb92:
    assume out_$i80 == 1;
    goto corral_source_split_4733;

  $bb91:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    out_$i80 := $slt.i32(out_$i76, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb165:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 933} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4906;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} at76_remove_interface(out_$p169, out_$p170);
    goto corral_source_split_4905;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    out_$p170 := $M.51;
    goto corral_source_split_4904;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    out_$p169 := $M.50;
    goto corral_source_split_4903;

  $bb164:
    assume out_$i168 == 1;
    goto corral_source_split_4902;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 2);
    goto corral_source_split_4900;

  $bb163:
    assume {:verifier.code 0} true;
    out_$i167 := $M.58;
    goto corral_source_split_4899;

  $bb162:
    assume !(out_$i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 931} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4897;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} at76_remove_interface(out_$p165, out_$p166);
    goto corral_source_split_4896;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    out_$p166 := $M.51;
    goto corral_source_split_4895;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    out_$p165 := $M.50;
    goto corral_source_split_4894;

  $bb161:
    assume out_$i164 == 1;
    goto corral_source_split_4893;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    out_$i164 := $eq.i32(out_$i163, 1);
    goto corral_source_split_4739;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    out_$i163 := $M.58;
    goto corral_source_split_4738;

  $bb94:
    assume out_$i81 == 1;
    goto corral_source_split_4737;

  $bb93:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i76, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} ldv_stop();
    goto corral_source_split_4908;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb95:
    assume {:verifier.code 0} true;
    assume !(out_$i81 == 1);
    goto $bb96;

  $bb108:
    assume {:verifier.code 0} true;
    assume !(out_$i87 == 1);
    goto $bb96;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} ldv_stop();
    goto corral_source_split_4910;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i27 == 1);
    goto $bb9;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i29 == 1);
    goto $bb9;

  $bb40_dummy:
    call {:si_unique_call 1} out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i100, out_$i101, out_$p102, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$p116, out_$i118, out_$i119, out_$p120, out_$i121, out_$p122, out_$i124, out_$i125, out_$p126, out_$p127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i137, out_$i138, out_$p139, out_$p140, out_$i142, out_$i143, out_$p144, out_$p145, out_$i147, out_$i148, out_$p149, out_$p150, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$p169, out_$p170, out_vslice_dummy_var_288, out_vslice_dummy_var_289, out_vslice_dummy_var_290, out_vslice_dummy_var_291, out_vslice_dummy_var_292, out_vslice_dummy_var_293, out_vslice_dummy_var_294, out_vslice_dummy_var_295 := main_loop_$bb1(in_$p0, in_$p1, in_$p3, in_$i4, in_$p6, in_$p8, in_$p10, in_$i11, in_$i12, in_$p14, in_$p16, in_$i17, in_$p19, in_$p21, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i100, out_$i101, out_$p102, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$p116, out_$i118, out_$i119, out_$p120, out_$i121, out_$p122, out_$i124, out_$i125, out_$p126, out_$p127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i137, out_$i138, out_$p139, out_$p140, out_$i142, out_$i143, out_$p144, out_$p145, out_$i147, out_$i148, out_$p149, out_$p150, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$p169, out_$p170, out_vslice_dummy_var_288, out_vslice_dummy_var_289, out_vslice_dummy_var_290, out_vslice_dummy_var_291, out_vslice_dummy_var_292, out_vslice_dummy_var_293, out_vslice_dummy_var_294, out_vslice_dummy_var_295);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i4: i64, in_$p6: ref, in_$p8: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$p14: ref, in_$p16: ref, in_$i17: i32, in_$p19: ref, in_$p21: ref, in_$i24: i32, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i1, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i64, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$i111: i64, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$i115: i32, in_$p116: ref, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i121: i32, in_$p122: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$p127: ref, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$p131: ref, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$p135: ref, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$p140: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$p145: ref, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$p150: ref, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$i155: i32, in_$i156: i32, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i1, in_$p165: ref, in_$p166: ref, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$p170: ref, in_vslice_dummy_var_288: i32, in_vslice_dummy_var_289: i32, in_vslice_dummy_var_290: i32, in_vslice_dummy_var_291: i32, in_vslice_dummy_var_292: i32, in_vslice_dummy_var_293: i32, in_vslice_dummy_var_294: i32, in_vslice_dummy_var_295: i32) returns (out_$i24: i32, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i1, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i64, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$i111: i64, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$i115: i32, out_$p116: ref, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i121: i32, out_$p122: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$p127: ref, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$p131: ref, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$p135: ref, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$p140: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$p145: ref, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$p150: ref, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$i155: i32, out_$i156: i32, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i1, out_$p165: ref, out_$p166: ref, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$p170: ref, out_vslice_dummy_var_288: i32, out_vslice_dummy_var_289: i32, out_vslice_dummy_var_290: i32, out_vslice_dummy_var_291: i32, out_vslice_dummy_var_292: i32, out_vslice_dummy_var_293: i32, out_vslice_dummy_var_294: i32, out_vslice_dummy_var_295: i32);
  modifies $M.55, $M.54, $M.59, $M.0, $M.40, $CurrAddr, $M.34, $M.33, $M.57, $M.50, $M.51, $M.58, $M.56, $M.61, $M.60, $M.49, $M.62, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.35;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation {:SIextraRecBound 9} at76_mod_exit_loop_$bb1(in_$i2: i64, in_$p4: ref, in_$p5: ref, in_$i6: i32, in_$i7: i1, in_$i1: i32) returns (out_$i2: i64, out_$p4: ref, out_$p5: ref, out_$i6: i32, out_$i7: i1, out_$i1: i32)
{

  entry:
    out_$i2, out_$p4, out_$p5, out_$i6, out_$i7, out_$i1 := in_$i2, in_$p4, in_$p5, in_$i6, in_$i7, in_$i1;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_4922;

  $bb3:
    assume out_$i7 == 1;
    assume {:verifier.code 0} true;
    out_$i1 := out_$i6;
    goto $bb3_dummy;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    out_$i7 := $ule.i32(out_$i6, 8);
    goto corral_source_split_4929;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    out_$i6 := $add.i32(out_$i1, 1);
    call {:si_unique_call 940} {:cexpr "i"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_4928;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} release_firmware(out_$p5);
    goto corral_source_split_4927;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    out_$p5 := $load.ref($M.40, out_$p4);
    goto corral_source_split_4926;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref($add.ref(firmwares, $mul.ref(0, 504)), $mul.ref(out_$i2, 56)), $mul.ref(8, 1));
    goto corral_source_split_4925;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i2 := $sext.i32.i64(out_$i1);
    goto corral_source_split_4924;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb3_dummy:
    call {:si_unique_call 1} out_$i2, out_$p4, out_$p5, out_$i6, out_$i7, out_$i1 := at76_mod_exit_loop_$bb1(out_$i2, out_$p4, out_$p5, out_$i6, out_$i7, out_$i1);
    return;

  exit:
    return;
}



procedure at76_mod_exit_loop_$bb1(in_$i2: i64, in_$p4: ref, in_$p5: ref, in_$i6: i32, in_$i7: i1, in_$i1: i32) returns (out_$i2: i64, out_$p4: ref, out_$p5: ref, out_$i6: i32, out_$i7: i1, out_$i1: i32);


