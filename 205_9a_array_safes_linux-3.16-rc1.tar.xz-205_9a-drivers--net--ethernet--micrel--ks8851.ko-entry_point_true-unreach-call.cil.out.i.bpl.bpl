var $M.0: [ref]i8;

var $M.1: i32;

var $M.2: i32;

var $M.3: i32;

var $M.4: i32;

var $M.5: i32;

var $M.6: i32;

var $M.7: i32;

var $M.8: i32;

var $M.9: i32;

var $M.10: i32;

var $M.11: [ref]ref;

var $M.12: [ref]ref;

var $M.13: [ref]ref;

var $M.14: [ref]ref;

var $M.15: [ref]i24;

var $M.16: [ref]i8;

var $M.17: ref;

var $M.18: ref;

var $M.19: ref;

var $M.20: ref;

var $M.21: ref;

var $M.22: [ref]i8;

var $M.23: ref;

var $M.24: i32;

var $M.25: [ref]ref;

var $M.26: [ref]i8;

var $M.27: [ref]i16;

var $M.28: i32;

var $M.29: i32;

var $M.30: ref;

var $M.31: i32;

var $M.32: i32;

var $M.33: ref;

var $M.34: i32;

var $M.35: i32;

var $M.36: ref;

var $M.37: i32;

var $M.38: i32;

var $M.39: ref;

var $M.41: ref;

var $M.42: ref;

var $M.43: ref;

var $M.44: ref;

var $M.45: ref;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.52: i32;

var $M.53: i32;

var $M.54: i32;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.58: i32;

var $M.59: i32;

var $M.60: i32;

var $M.61: i32;

var $M.62: i32;

var $M.63: i32;

var $M.64: i32;

var $M.65: i32;

var $M.66: i32;

var $M.67: i32;

var $M.68: i32;

var $M.69: i32;

var $M.70: i32;

var $M.71: i32;

var $M.72: i32;

var $M.73: i32;

var $M.74: i32;

var $M.75: i32;

var $M.99: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 410014);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_irq_1_3: ref;

axiom ldv_irq_1_3 == $sub.ref(0, 1028);

const ldv_irq_1_0: ref;

axiom ldv_irq_1_0 == $sub.ref(0, 2056);

const ldv_irq_2_0: ref;

axiom ldv_irq_2_0 == $sub.ref(0, 3084);

const ldv_irq_1_2: ref;

axiom ldv_irq_1_2 == $sub.ref(0, 4112);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 5140);

const ldv_irq_1_1: ref;

axiom ldv_irq_1_1 == $sub.ref(0, 6168);

const ldv_irq_2_3: ref;

axiom ldv_irq_2_3 == $sub.ref(0, 7196);

const ldv_irq_2_2: ref;

axiom ldv_irq_2_2 == $sub.ref(0, 8224);

const ldv_irq_2_1: ref;

axiom ldv_irq_2_1 == $sub.ref(0, 9252);

const ks8851_netdev_ops_group1: ref;

axiom ks8851_netdev_ops_group1 == $sub.ref(0, 10284);

const ldv_irq_line_2_0: ref;

axiom ldv_irq_line_2_0 == $sub.ref(0, 11312);

const ldv_irq_data_2_0: ref;

axiom ldv_irq_data_2_0 == $sub.ref(0, 12344);

const ldv_irq_line_2_1: ref;

axiom ldv_irq_line_2_1 == $sub.ref(0, 13372);

const ldv_irq_data_2_1: ref;

axiom ldv_irq_data_2_1 == $sub.ref(0, 14404);

const ldv_irq_line_2_2: ref;

axiom ldv_irq_line_2_2 == $sub.ref(0, 15432);

const ldv_irq_data_2_2: ref;

axiom ldv_irq_data_2_2 == $sub.ref(0, 16464);

const ldv_irq_line_2_3: ref;

axiom ldv_irq_line_2_3 == $sub.ref(0, 17492);

const ldv_irq_data_2_3: ref;

axiom ldv_irq_data_2_3 == $sub.ref(0, 18524);

const ldv_irq_line_1_0: ref;

axiom ldv_irq_line_1_0 == $sub.ref(0, 19552);

const ldv_irq_line_1_1: ref;

axiom ldv_irq_line_1_1 == $sub.ref(0, 20580);

const ldv_irq_line_1_2: ref;

axiom ldv_irq_line_1_2 == $sub.ref(0, 21608);

const ldv_irq_line_1_3: ref;

axiom ldv_irq_line_1_3 == $sub.ref(0, 22636);

const ldv_irq_data_1_0: ref;

axiom ldv_irq_data_1_0 == $sub.ref(0, 23668);

const ldv_irq_data_1_1: ref;

axiom ldv_irq_data_1_1 == $sub.ref(0, 24700);

const ldv_irq_data_1_2: ref;

axiom ldv_irq_data_1_2 == $sub.ref(0, 25732);

const ldv_irq_data_1_3: ref;

axiom ldv_irq_data_1_3 == $sub.ref(0, 26764);

const ks8851_driver_group0: ref;

axiom ks8851_driver_group0 == $sub.ref(0, 27796);

const ks8851_pm_ops_group1: ref;

axiom ks8851_pm_ops_group1 == $sub.ref(0, 28828);

const ks8851_ethtool_ops_group0: ref;

axiom ks8851_ethtool_ops_group0 == $sub.ref(0, 29860);

const ks8851_ethtool_ops_group1: ref;

axiom ks8851_ethtool_ops_group1 == $sub.ref(0, 30892);

const ks8851_ethtool_ops_group2: ref;

axiom ks8851_ethtool_ops_group2 == $sub.ref(0, 31924);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 32952);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 33980);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 35008);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 36036);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 37064);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 38092);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 39120);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 40148);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 41176);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 42204);

const ldv_retval_20: ref;

axiom ldv_retval_20 == $sub.ref(0, 43232);

const ldv_retval_19: ref;

axiom ldv_retval_19 == $sub.ref(0, 44260);

const ldv_retval_18: ref;

axiom ldv_retval_18 == $sub.ref(0, 45288);

const ldv_retval_17: ref;

axiom ldv_retval_17 == $sub.ref(0, 46316);

const ldv_retval_16: ref;

axiom ldv_retval_16 == $sub.ref(0, 47344);

const ldv_retval_15: ref;

axiom ldv_retval_15 == $sub.ref(0, 48372);

const ldv_retval_14: ref;

axiom ldv_retval_14 == $sub.ref(0, 49400);

const ldv_retval_13: ref;

axiom ldv_retval_13 == $sub.ref(0, 50428);

const ldv_retval_12: ref;

axiom ldv_retval_12 == $sub.ref(0, 51456);

const ldv_retval_11: ref;

axiom ldv_retval_11 == $sub.ref(0, 52484);

const ldv_retval_10: ref;

axiom ldv_retval_10 == $sub.ref(0, 53512);

const ldv_retval_9: ref;

axiom ldv_retval_9 == $sub.ref(0, 54540);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 55568);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 56596);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 57624);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 58652);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 59680);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 60708);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 61736);

const ldv_retval_21: ref;

axiom ldv_retval_21 == $sub.ref(0, 62764);

const ldv_retval_22: ref;

axiom ldv_retval_22 == $sub.ref(0, 63792);

const last_index: ref;

axiom last_index == $sub.ref(0, 64820);

const LDV_SKBS: ref;

axiom LDV_SKBS == $sub.ref(0, 65852);

const {:count 15} set_impl: ref;

axiom set_impl == $sub.ref(0, 66996);

const ks8851_netdev_ops: ref;

axiom ks8851_netdev_ops == $sub.ref(0, 68500);

const ks8851_ethtool_ops: ref;

axiom ks8851_ethtool_ops == $sub.ref(0, 69900);

const msg_enable: ref;

axiom msg_enable == $sub.ref(0, 70928);

const ks8851_pm_ops: ref;

axiom ks8851_pm_ops == $sub.ref(0, 72136);

const {:count 2} ks8851_match_table: ref;

axiom ks8851_match_table == $sub.ref(0, 73560);

const ks8851_driver: ref;

axiom ks8851_driver == $sub.ref(0, 74752);

const .str: ref;

axiom .str == $sub.ref(0, 75783);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 8} .str.53: ref;

axiom .str.53 == $sub.ref(0, 76815);

const {:count 12} .str.28: ref;

axiom .str.28 == $sub.ref(0, 77851);

const {:count 13} .str.29: ref;

axiom .str.29 == $sub.ref(0, 78888);

const {:count 27} .str.30: ref;

axiom .str.30 == $sub.ref(0, 79939);

const {:count 7} .str.31: ref;

axiom .str.31 == $sub.ref(0, 80970);

const {:count 34} .str.32: ref;

axiom .str.32 == $sub.ref(0, 82028);

const {:count 4} .str.33: ref;

axiom .str.33 == $sub.ref(0, 83056);

const {:count 31} .str.34: ref;

axiom .str.34 == $sub.ref(0, 84111);

const {:count 10} .str.35: ref;

axiom .str.35 == $sub.ref(0, 85145);

const {:count 25} .str.36: ref;

axiom .str.36 == $sub.ref(0, 86194);

const {:count 15} .str.37: ref;

axiom .str.37 == $sub.ref(0, 87233);

const {:count 19} .str.38: ref;

axiom .str.38 == $sub.ref(0, 88276);

const {:count 22} .str.39: ref;

axiom .str.39 == $sub.ref(0, 89322);

const {:count 26} .str.40: ref;

axiom .str.40 == $sub.ref(0, 90372);

const {:count 19} .str.41: ref;

axiom .str.41 == $sub.ref(0, 91415);

const {:count 35} .str.42: ref;

axiom .str.42 == $sub.ref(0, 92474);

const {:count 4} .str.44: ref;

axiom .str.44 == $sub.ref(0, 93502);

const {:count 3} .str.45: ref;

axiom .str.45 == $sub.ref(0, 94529);

const {:count 41} .str.43: ref;

axiom .str.43 == $sub.ref(0, 95594);

const {:count 11} .str.1: ref;

axiom .str.1 == $sub.ref(0, 96629);

const {:count 234} .str.2: ref;

axiom .str.2 == $sub.ref(0, 97887);

const {:count 19} .str.3: ref;

axiom .str.3 == $sub.ref(0, 98930);

const {:count 16} .str.4: ref;

axiom .str.4 == $sub.ref(0, 99970);

const {:count 19} .str.5: ref;

axiom .str.5 == $sub.ref(0, 101013);

const {:count 15} .str.8: ref;

axiom .str.8 == $sub.ref(0, 102052);

const {:count 16} .str.9: ref;

axiom .str.9 == $sub.ref(0, 103092);

const {:count 29} .str.10: ref;

axiom .str.10 == $sub.ref(0, 104145);

const {:count 19} .str.14: ref;

axiom .str.14 == $sub.ref(0, 105188);

const {:count 56} .str.15: ref;

axiom .str.15 == $sub.ref(0, 106268);

const {:count 14} .str.11: ref;

axiom .str.11 == $sub.ref(0, 107306);

const {:count 11} .str.12: ref;

axiom .str.12 == $sub.ref(0, 108341);

const {:count 23} .str.13: ref;

axiom .str.13 == $sub.ref(0, 109388);

const {:count 25} .str.6: ref;

axiom .str.6 == $sub.ref(0, 110437);

const {:count 19} .str.7: ref;

axiom .str.7 == $sub.ref(0, 111480);

const {:count 30} .str.52: ref;

axiom .str.52 == $sub.ref(0, 112534);

const {:count 21} .str.21: ref;

axiom .str.21 == $sub.ref(0, 113579);

const {:count 23} .str.22: ref;

axiom .str.22 == $sub.ref(0, 114626);

const {:count 30} .str.49: ref;

axiom .str.49 == $sub.ref(0, 115680);

const {:count 25} .str.50: ref;

axiom .str.50 == $sub.ref(0, 116729);

const {:count 25} .str.51: ref;

axiom .str.51 == $sub.ref(0, 117778);

const {:count 22} .str.48: ref;

axiom .str.48 == $sub.ref(0, 118824);

const {:count 13} .str.46: ref;

axiom .str.46 == $sub.ref(0, 119861);

const {:count 27} .str.47: ref;

axiom .str.47 == $sub.ref(0, 120912);

const {:count 16} .str.23: ref;

axiom .str.23 == $sub.ref(0, 121952);

const {:count 9} .str.24: ref;

axiom .str.24 == $sub.ref(0, 122985);

const {:count 19} .str.25: ref;

axiom .str.25 == $sub.ref(0, 124028);

const {:count 15} .str.16: ref;

axiom .str.16 == $sub.ref(0, 125067);

const {:count 16} .str.17: ref;

axiom .str.17 == $sub.ref(0, 126107);

const {:count 20} .str.18: ref;

axiom .str.18 == $sub.ref(0, 127151);

const {:count 26} .str.19: ref;

axiom .str.19 == $sub.ref(0, 128201);

const {:count 71} .str.20: ref;

axiom .str.20 == $sub.ref(0, 129296);

const {:count 7} .str.54: ref;

axiom .str.54 == $sub.ref(0, 130327);

const {:count 5} .str.55: ref;

axiom .str.55 == $sub.ref(0, 131356);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 18} .str.26: ref;

axiom .str.26 == $sub.ref(0, 132398);

const {:count 19} .str.27: ref;

axiom .str.27 == $sub.ref(0, 133441);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 134473);

const {:count 3} .str.1.126: ref;

axiom .str.1.126 == $sub.ref(0, 135500);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 136538);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 137566);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 138598);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 139630);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const ks8851_probe: ref;

axiom ks8851_probe == $sub.ref(0, 140662);

procedure ks8851_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.5, $M.7, $M.9, $CurrAddr, $M.4, $M.18, $M.6, $M.19, $M.8, $M.20, $M.10, $M.21, $M.17, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation ks8851_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $i24: i1;
  var $i25: i8;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i1;
  var $i39: i8;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i1;
  var $i60: i8;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i32;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i74: i1;
  var $i75: i8;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p90: ref;
  var $p92: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p102: ref;
  var $p104: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p120: ref;
  var $p122: ref;
  var $p124: ref;
  var $p126: ref;
  var $p128: ref;
  var $p130: ref;
  var $p132: ref;
  var $p134: ref;
  var $p136: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $i142: i32;
  var $i143: i32;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i154: i32;
  var $p155: ref;
  var $i156: i32;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $i162: i32;
  var $i163: i16;
  var $p164: ref;
  var $p165: ref;
  var $i166: i16;
  var $i167: i32;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $p171: ref;
  var $p173: ref;
  var $i174: i32;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $i178: i32;
  var $i179: i1;
  var $p180: ref;
  var $i183: i32;
  var $i184: i1;
  var $p185: ref;
  var $i187: i32;
  var $i188: i32;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $i192: i32;
  var $p193: ref;
  var $i194: i16;
  var $i195: i32;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $p200: ref;
  var $i201: i32;
  var $p202: ref;
  var $i182: i32;
  var $i203: i1;
  var $i204: i8;
  var $i205: i1;
  var $i161: i32;
  var $p206: ref;
  var $p207: ref;
  var $i67: i32;
  var $p209: ref;
  var $p210: ref;
  var $i46: i32;
  var $i22: i32;
  var $i10: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: ref;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p7 := alloc_etherdev_mqs(1216, 1, 1);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(1437, 1));
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 8);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $p12 := netdev_priv($p7);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(8, 1));
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p0);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(284, 1));
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, 6144);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(0, 1)), $mul.ref(1240, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i20 := of_get_named_gpio_flags($p19, .str.28, 0, $0.ref);
    call {:si_unique_call 10} {:cexpr "gpio"} boogie_si_record_i32($i20);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, $sub.i32(0, 517));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(1136, 1));
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i20);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $i24 := gpio_is_valid($i20);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i8($i24);
    call {:si_unique_call 13} {:cexpr "tmp___0"} boogie_si_record_i8($i25);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(0, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $p33 := devm_regulator_get($p32, .str.31);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(1128, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p33);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(1128, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $i38 := IS_ERR($p37);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i8($i38);
    call {:si_unique_call 19} {:cexpr "tmp___2"} boogie_si_record_i8($i39);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(1128, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $i49 := regulator_enable($p48);
    call {:si_unique_call 24} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(0, 1));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $p54 := devm_regulator_get($p53, .str.33);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(1120, 1));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, $p54);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(1120, 1));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i59 := IS_ERR($p58);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i8($i59);
    call {:si_unique_call 28} {:cexpr "tmp___4"} boogie_si_record_i8($i60);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i8.i1($i60);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(1120, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $i70 := regulator_enable($p69);
    call {:si_unique_call 34} {:cexpr "ret"} boogie_si_record_i32($i70);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $i74 := gpio_is_valid($i20);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i75 := $zext.i1.i8($i74);
    call {:si_unique_call 37} {:cexpr "tmp___5"} boogie_si_record_i8($i75);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i8.i1($i75);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(16, 1));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} __mutex_init($p77, .str.35, $p1);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(184, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} vslice_dummy_var_34 := spinlock_check($p78);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(184, 1)), $mul.ref(0, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} __raw_spin_lock_init($p82, .str.36, $p2);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(360, 1));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} __init_work($p83, 0);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p84, 137438953408);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p4);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 44} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p87, $p88, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(360, 1)), $mul.ref(32, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} lockdep_init_map($p90, .str.37, $p3, 0);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} INIT_LIST_HEAD($p92);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(360, 1)), $mul.ref(24, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p94, ks8851_tx_work);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(440, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} __init_work($p95, 0);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p96, 137438953408);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(440, 1)), $mul.ref(0, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p6);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 48} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p99, $p100, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(440, 1)), $mul.ref(32, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} lockdep_init_map($p102, .str.38, $p5, 0);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(440, 1)), $mul.ref(8, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} INIT_LIST_HEAD($p104);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(440, 1)), $mul.ref(24, 1));
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p106, ks8851_rxctrl_work);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(616, 1));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} spi_message_init($p107);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(792, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(616, 1));
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} spi_message_add_tail($p108, $p109);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(704, 1));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} spi_message_init($p110);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(888, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(704, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} spi_message_add_tail($p112, $p113);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(888, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p115, $mul.ref(1, 96));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(704, 1));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} spi_message_add_tail($p116, $p117);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(1080, 1)), $mul.ref(0, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p120, $p12);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(1080, 1)), $mul.ref(24, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p122, 6);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(1080, 1)), $mul.ref(8, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p124, ks8851_eeprom_regread);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(1080, 1)), $mul.ref(16, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p126, ks8851_eeprom_regwrite);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(296, 1)), $mul.ref(24, 1));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p128, $p7);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p130, 1);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(296, 1)), $mul.ref(8, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p132, 1);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(296, 1)), $mul.ref(12, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p134, 15);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p136, ks8851_phy_read);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p138, ks8851_phy_write);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(0, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i140 := $M.1;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} vslice_dummy_var_35 := _dev_info.ref.ref.i32($p139, .str.39, $i140);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i142 := $M.1;
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $i143 := netif_msg_init($i142, 7);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(280, 1));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, $i143);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(520, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} skb_queue_head_init($p145);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p7, $mul.ref(0, 3176)), $mul.ref(496, 1));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p146, ks8851_ethtool_ops);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3176)), $mul.ref(1296, 1)), $mul.ref(0, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p149, $p0);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p13);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} spi_set_drvdata($p0, $p150);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p7, $mul.ref(0, 3176)), $mul.ref(534, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p151, 4);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p7, $mul.ref(0, 3176)), $mul.ref(488, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p152, ks8851_netdev_ops);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(1440, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.0, $p153);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p7, $mul.ref(0, 3176)), $mul.ref(64, 1));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p155, $i154);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} ks8851_soft_reset($p13, 1);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $i156 := ks8851_rdreg16($p13, 192);
    call {:si_unique_call 62} {:cexpr "cider"} boogie_si_record_i32($i156);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i157 := $and.i32($i156, $sub.i32(0, 15));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 34928);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i162 := ks8851_rdreg16($p13, 8);
    call {:si_unique_call 66} {:cexpr "tmp___6"} boogie_si_record_i32($i162);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i32.i16($i162);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(292, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p164, $i163);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(292, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i166 := $load.i16($M.0, $p165);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i167 := $zext.i16.i32($i166);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i168 := $and.i32($i167, 512);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i168, 0);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i169 == 1);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(294, 1));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p171, 0);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} vslice_dummy_var_38 := ks8851_read_selftest($p13);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} ks8851_init_mac($p13);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(1440, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.0, $p173);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p7, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p175);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p13);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $i178 := ldv_request_threaded_irq_16($i174, $0.ref, ks8851_irq, 8200, $p176, $p177);
    call {:si_unique_call 70} {:cexpr "ret"} boogie_si_record_i32($i178);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i179 := $slt.i32($i178, 0);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $i183 := ldv_register_netdev_17($p7);
    call {:si_unique_call 75} {:cexpr "ret"} boogie_si_record_i32($i183);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i184 := $ne.i32($i183, 0);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i187 := $lshr.i32($i156, 1);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i188 := $and.i32($i187, 7);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p7, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p7, $mul.ref(0, 3176)), $mul.ref(64, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i192 := $load.i32($M.0, $p191);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(292, 1));
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i194 := $load.i16($M.0, $p193);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i195 := $zext.i16.i32($i194);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i196 := $and.i32($i195, 512);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i197 := $ne.i32($i196, 0);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p198 := (if $i197 == 1 then .str.44 else .str.45);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} vslice_dummy_var_41 := netdev_info.ref.ref.i32.ref.i32.ref($p7, .str.43, $i188, $p190, $i192, $p198);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb43:
    assume $i184 == 1;
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(0, 1));
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} vslice_dummy_var_40 := dev_err.ref.ref($p185, .str.42);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p7, $mul.ref(0, 3176)), $mul.ref(64, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.0, $p200);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p202 := $bitcast.ref.ref($p13);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} ldv_free_irq_18($i201, $p202);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i182 := $i183;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $i203 := gpio_is_valid($i20);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i204 := $zext.i1.i8($i203);
    call {:si_unique_call 73} {:cexpr "tmp___7"} boogie_si_record_i8($i204);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i205 := $trunc.i8.i1($i204);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i161 := $i182;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(1120, 1));
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} vslice_dummy_var_37 := regulator_disable($p207);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i67 := $i161;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(1128, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.0, $p209);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} vslice_dummy_var_32 := regulator_disable($p210);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i46 := $i67;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i22 := $i46;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} ldv_free_netdev_19($p7);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i10 := $i22;
    goto $bb3;

  $bb47:
    assume $i205 == 1;
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} gpio_set_value($i20, 0);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb39:
    assume $i179 == 1;
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(0, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} vslice_dummy_var_39 := dev_err.ref.ref($p180, .str.41);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i182 := $i178;
    goto $bb41;

  $bb36:
    assume $i169 == 1;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(294, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p170, 128);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb32:
    assume $i158 == 1;
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(0, 1));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} vslice_dummy_var_36 := dev_err.ref.ref($p159, .str.40);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 19);
    goto $bb34;

  $bb29:
    assume $i76 == 1;
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} usleep_range(10000, 11000);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} gpio_set_value($i20, 1);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i71 == 1;
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(0, 1));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} vslice_dummy_var_33 := dev_err.ref.ref.i32($p72, .str.34, $i70);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i67 := $i70;
    goto $bb24;

  $bb22:
    assume $i61 == 1;
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(1120, 1));
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i65 := PTR_ERR($p64);
    call {:si_unique_call 30} {:cexpr "tmp___3"} boogie_si_record_i64($i65);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i64.i32($i65);
    call {:si_unique_call 31} {:cexpr "ret"} boogie_si_record_i32($i66);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i67 := $i66;
    goto $bb24;

  $bb19:
    assume $i50 == 1;
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(0, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} vslice_dummy_var_31 := dev_err.ref.ref.i32($p51, .str.32, $i49);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i46 := $i49;
    goto $bb17;

  $bb15:
    assume $i40 == 1;
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p13, $mul.ref(0, 1144)), $mul.ref(1128, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $i44 := PTR_ERR($p43);
    call {:si_unique_call 21} {:cexpr "tmp___1"} boogie_si_record_i64($i44);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i64.i32($i44);
    call {:si_unique_call 22} {:cexpr "ret"} boogie_si_record_i32($i45);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb17;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(0, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i28 := devm_gpio_request_one($p27, $i20, 0, .str.29);
    call {:si_unique_call 15} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(0, 1));
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} vslice_dummy_var_30 := dev_err.ref.ref($p30, .str.30);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i22 := $i28;
    goto $bb7;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;
}



const ks8851_remove: ref;

axiom ks8851_remove == $sub.ref(0, 141694);

procedure ks8851_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.5, $M.7, $M.9;



implementation ks8851_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i8;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $p1 := spi_get_drvdata($p0);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1144)), $mul.ref(280, 1));
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} ldv_unregister_netdev_20($p10);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(1440, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} ldv_free_irq_21($i12, $p13);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 1144)), $mul.ref(1136, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $i16 := gpio_is_valid($i15);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 85} {:cexpr "tmp___0"} boogie_si_record_i8($i17);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 1144)), $mul.ref(1120, 1));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} vslice_dummy_var_43 := regulator_disable($p22);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 1144)), $mul.ref(1128, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} vslice_dummy_var_44 := regulator_disable($p25);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} ldv_free_netdev_22($p28);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 1144)), $mul.ref(1136, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} gpio_set_value($i20, 0);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(0, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} vslice_dummy_var_42 := _dev_info.ref.ref($p7, .str.53);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spi_get_drvdata: ref;

axiom spi_get_drvdata == $sub.ref(0, 142726);

procedure spi_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spi_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(0, 1));
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 143758);

procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 1} true;
    call {:si_unique_call 91} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 92} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 1} true;
    call {:si_unique_call 93} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 94} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_unregister_netdev_20: ref;

axiom ldv_unregister_netdev_20 == $sub.ref(0, 144790);

procedure ldv_unregister_netdev_20($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_unregister_netdev_20($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} unregister_netdev($p0);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $M.2 := 0;
    call {:si_unique_call 96} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq_21: ref;

axiom ldv_free_irq_21 == $sub.ref(0, 145822);

procedure ldv_free_irq_21($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation ldv_free_irq_21($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} {:cexpr "ldv_free_irq_21:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} free_irq($i0, $p1);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    return;
}



const gpio_is_valid: ref;

axiom gpio_is_valid == $sub.ref(0, 146854);

procedure gpio_is_valid($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation gpio_is_valid($i0: i32) returns ($r: i1)
{
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} {:cexpr "gpio_is_valid:arg:number"} boogie_si_record_i32($i0);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, 0);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i0, 255);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const gpio_set_value: ref;

axiom gpio_set_value == $sub.ref(0, 147886);

procedure gpio_set_value($i0: i32, $i1: i32);
  free requires assertsPassed;



implementation gpio_set_value($i0: i32, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} {:cexpr "gpio_set_value:arg:gpio"} boogie_si_record_i32($i0);
    call {:si_unique_call 102} {:cexpr "gpio_set_value:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} __gpio_set_value($i0, $i1);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    return;
}



const regulator_disable: ref;

axiom regulator_disable == $sub.ref(0, 148918);

procedure regulator_disable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation regulator_disable($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 1} true;
    call {:si_unique_call 104} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 105} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_free_netdev_22: ref;

axiom ldv_free_netdev_22 == $sub.ref(0, 149950);

procedure ldv_free_netdev_22($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_free_netdev_22($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} free_netdev($p0);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $M.2 := 0;
    call {:si_unique_call 107} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    return;
}



const free_netdev: ref;

axiom free_netdev == $sub.ref(0, 150982);

procedure free_netdev($p0: ref);
  free requires assertsPassed;



implementation free_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    return;
}



const __gpio_set_value: ref;

axiom __gpio_set_value == $sub.ref(0, 152014);

procedure __gpio_set_value($i0: i32, $i1: i32);
  free requires assertsPassed;



implementation __gpio_set_value($i0: i32, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} {:cexpr "__gpio_set_value:arg:gpio"} boogie_si_record_i32($i0);
    call {:si_unique_call 109} {:cexpr "__gpio_set_value:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 153046);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    return;
}



const disable_suitable_irq_1: ref;

axiom disable_suitable_irq_1 == $sub.ref(0, 154078);

procedure disable_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation disable_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} {:cexpr "disable_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i2 := $M.3;
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.5;
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $M.7;
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $M.9;
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i16 := $M.10;
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, $i16);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb22;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 115} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i12 := $M.8;
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, $i12);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 114} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i8 := $M.6;
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, $i8);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $M.5 := 0;
    call {:si_unique_call 113} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i4 := $M.4;
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $i4);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 112} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const unregister_netdev: ref;

axiom unregister_netdev == $sub.ref(0, 155110);

procedure unregister_netdev($p0: ref);
  free requires assertsPassed;



implementation unregister_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 156142);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const alloc_etherdev_mqs: ref;

axiom alloc_etherdev_mqs == $sub.ref(0, 157174);

procedure alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} {:cexpr "alloc_etherdev_mqs:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 117} {:cexpr "alloc_etherdev_mqs:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 118} {:cexpr "alloc_etherdev_mqs:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $p3 := external_alloc();
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 158206);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(3264, 1));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const of_get_named_gpio_flags: ref;

axiom of_get_named_gpio_flags == $sub.ref(0, 159238);

procedure of_get_named_gpio_flags($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation of_get_named_gpio_flags($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} {:cexpr "of_get_named_gpio_flags:arg:index"} boogie_si_record_i32($i2);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 38);
    return;
}



const devm_gpio_request_one: ref;

axiom devm_gpio_request_one == $sub.ref(0, 160270);

procedure devm_gpio_request_one($p0: ref, $i1: i32, $i2: i64, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devm_gpio_request_one($p0: ref, $i1: i32, $i2: i64, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 121} {:cexpr "devm_gpio_request_one:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 122} {:cexpr "devm_gpio_request_one:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 1} true;
    call {:si_unique_call 123} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 124} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 161302);

procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 1} true;
    call {:si_unique_call 125} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 126} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 1} true;
    call {:si_unique_call 127} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 128} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 1} true;
    call {:si_unique_call 129} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 130} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const devm_regulator_get: ref;

axiom devm_regulator_get == $sub.ref(0, 162334);

procedure devm_regulator_get($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devm_regulator_get($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $p2 := external_alloc();
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 163366);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $i1 := ldv_is_err($p0);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 133} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 164398);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 135} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const regulator_enable: ref;

axiom regulator_enable == $sub.ref(0, 165430);

procedure regulator_enable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation regulator_enable($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 1} true;
    call {:si_unique_call 136} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 137} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usleep_range: ref;

axiom usleep_range == $sub.ref(0, 166462);

procedure usleep_range($i0: i64, $i1: i64);
  free requires assertsPassed;



implementation usleep_range($i0: i64, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} {:cexpr "usleep_range:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 139} {:cexpr "usleep_range:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 167494);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 168526);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 169558);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 170590);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 171622);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 172654);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 173686);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    return;
}



const ks8851_tx_work: ref;

axiom ks8851_tx_work == $sub.ref(0, 174718);

procedure ks8851_tx_work($p0: ref);



const ks8851_rxctrl_work: ref;

axiom ks8851_rxctrl_work == $sub.ref(0, 175750);

procedure ks8851_rxctrl_work($p0: ref);



const spi_message_init: ref;

axiom spi_message_init == $sub.ref(0, 176782);

procedure spi_message_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation spi_message_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 142} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p1, 0, 88, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} INIT_LIST_HEAD($p2);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    return;
}



const spi_message_add_tail: ref;

axiom spi_message_add_tail == $sub.ref(0, 177814);

procedure spi_message_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation spi_message_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} list_add_tail($p2, $p3);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    return;
}



const ks8851_eeprom_regread: ref;

axiom ks8851_eeprom_regread == $sub.ref(0, 178846);

procedure ks8851_eeprom_regread($p0: ref);



const ks8851_eeprom_regwrite: ref;

axiom ks8851_eeprom_regwrite == $sub.ref(0, 179878);

procedure ks8851_eeprom_regwrite($p0: ref);



const ks8851_phy_read: ref;

axiom ks8851_phy_read == $sub.ref(0, 180910);

procedure ks8851_phy_read($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const ks8851_phy_write: ref;

axiom ks8851_phy_write == $sub.ref(0, 181942);

procedure ks8851_phy_write($p0: ref, $i1: i32, $i2: i32, $i3: i32);



const netif_msg_init: ref;

axiom netif_msg_init == $sub.ref(0, 182974);

procedure netif_msg_init($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netif_msg_init($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} {:cexpr "netif_msg_init:arg:debug_value"} boogie_si_record_i32($i0);
    call {:si_unique_call 146} {:cexpr "netif_msg_init:arg:default_msg_enable_bits"} boogie_si_record_i32($i1);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 0);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i0, 31);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32(1, $i0);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, $sub.i32(0, 1));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i4 := $i7;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb8:
    assume $i5 == 1;
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i4 := $i1;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const skb_queue_head_init: ref;

axiom skb_queue_head_init == $sub.ref(0, 184006);

procedure skb_queue_head_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation skb_queue_head_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_45: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} vslice_dummy_var_45 := spinlock_check($p2);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} __raw_spin_lock_init($p6, .str.48, $p1);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} __skb_queue_head_init($p0);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    return;
}



const spi_set_drvdata: ref;

axiom spi_set_drvdata == $sub.ref(0, 185038);

procedure spi_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation spi_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1504)), $mul.ref(0, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} dev_set_drvdata($p2, $p1);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    return;
}



const ks8851_soft_reset: ref;

axiom ks8851_soft_reset == $sub.ref(0, 186070);

procedure ks8851_soft_reset($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ks8851_soft_reset($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} {:cexpr "ks8851_soft_reset:arg:op"} boogie_si_record_i32($i1);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} ks8851_wrreg16($p0, 38, $i1);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(1 == 1);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} ks8851_wrreg16($p0, 38, 0);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb7, $bb8;

  $bb8:
    assume !(1 == 1);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume 1 == 1;
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} __const_udelay(4295000);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume 1 == 1;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} __const_udelay(4295000);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ks8851_rdreg16: ref;

axiom ks8851_rdreg16 == $sub.ref(0, 187102);

procedure ks8851_rdreg16($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ks8851_rdreg16($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 160} {:cexpr "ks8851_rdreg16:arg:reg"} boogie_si_record_i32($i1);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p2, 0);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i1, 2);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then 48 else 12);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i1, 10);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i5, $i6);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i32($i1, 6);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i7, $i8);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} ks8851_rdreg($p0, $i9, $p10, 2);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p2);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const ks8851_read_selftest: ref;

axiom ks8851_read_selftest == $sub.ref(0, 188134);

procedure ks8851_read_selftest($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ks8851_read_selftest($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $i1 := ks8851_rdreg16($p0, 36);
    call {:si_unique_call 163} {:cexpr "rd"} boogie_si_record_i32($i1);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 4112);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 4112);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i1, 2048);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i1, 8);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} vslice_dummy_var_48 := netdev_err.ref.ref($p15, .str.51);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} vslice_dummy_var_47 := netdev_err.ref.ref($p10, .str.50);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} vslice_dummy_var_46 := netdev_warn.ref.ref($p5, .str.49);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ks8851_init_mac: ref;

axiom ks8851_init_mac == $sub.ref(0, 189166);

procedure ks8851_init_mac($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation ks8851_init_mac($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(292, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 512);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} eth_hw_addr_random($p2);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} vslice_dummy_var_50 := ks8851_write_mac_addr($p2);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} ks8851_read_mac_addr($p2);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $i10 := is_valid_ether_addr($p9);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 169} {:cexpr "tmp"} boogie_si_record_i8($i11);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} vslice_dummy_var_49 := netdev_err.ref.ref.ref($p14, .str.52, $p16);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ks8851_irq: ref;

axiom ks8851_irq == $sub.ref(0, 190198);

procedure ks8851_irq($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr, $M.25, $M.24;



implementation ks8851_irq($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i16;
  var $i38: i32;
  var $i39: i32;
  var $i40: i16;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i16;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i24;
  var $i66: i24;
  var $i67: i24;
  var $p68: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i64;
  var $i72: i64;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i16;
  var $i79: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i1;
  var $p100: ref;
  var $i101: i16;
  var $i102: i32;
  var $p104: ref;
  var $i105: i16;
  var $i106: i32;
  var $p108: ref;
  var $i109: i16;
  var $i110: i32;
  var $p112: ref;
  var $i113: i16;
  var $i114: i32;
  var $p115: ref;
  var $i116: i16;
  var $i117: i32;
  var $p118: ref;
  var $i119: i16;
  var $i120: i32;
  var $p121: ref;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $p128: ref;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 175} {:cexpr "ks8851_irq:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(16, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} mutex_lock_nested($p5, 0);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $i6 := ks8851_rdreg16($p4, 146);
    call {:si_unique_call 178} {:cexpr "status"} boogie_si_record_i32($i6);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(280, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 512);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i6, 32768);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i6, 8);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i44 := $i33;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i6, 256);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i48 := $i44;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i6, 16384);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i81 := $i48;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i6, 8192);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i85 := $i81;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i6, 2);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i93 := $i85;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} ks8851_wrreg16($p4, 146, $i93);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i6, 8192);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i96 := $and.i32($i6, 256);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(16, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} mutex_unlock($p121);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i122 := $and.i32($i6, 32768);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i125 := $and.i32($i6, 16384);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb40:
    assume $i126 == 1;
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} netif_wake_queue($p128);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i123 == 1;
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(296, 1));
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} mii_check_link($p124);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i97 == 1;
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(344, 1)), $mul.ref(0, 1)), $mul.ref(0, 2));
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i101 := $load.i16($M.0, $p100);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32($i101);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} ks8851_wrreg16($p4, 160, $i102);
    $p104 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(344, 1)), $mul.ref(0, 1)), $mul.ref(1, 2));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i105 := $load.i16($M.0, $p104);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i106 := $zext.i16.i32($i105);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} ks8851_wrreg16($p4, 162, $i106);
    $p108 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(344, 1)), $mul.ref(0, 1)), $mul.ref(2, 2));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i109 := $load.i16($M.0, $p108);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i109);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} ks8851_wrreg16($p4, 164, $i110);
    $p112 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(344, 1)), $mul.ref(0, 1)), $mul.ref(3, 2));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i113 := $load.i16($M.0, $p112);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i114 := $zext.i16.i32($i113);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} ks8851_wrreg16($p4, 166, $i114);
    $p115 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(344, 1)), $mul.ref(10, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i116 := $load.i16($M.0, $p115);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i117 := $zext.i16.i32($i116);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} ks8851_wrreg16($p4, 118, $i117);
    $p118 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(344, 1)), $mul.ref(8, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i119 := $load.i16($M.0, $p118);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i120 := $zext.i16.i32($i119);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} ks8851_wrreg16($p4, 116, $i120);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i95 == 1;
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} ks8851_rx_pkts($p4);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i87 == 1;
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(8, 1));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 1504)), $mul.ref(0, 1));
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} vslice_dummy_var_53 := dev_err.ref.ref.ref($p90, .str.5, .str.1);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i92 := $or.i32($i85, 2);
    call {:si_unique_call 198} {:cexpr "handled"} boogie_si_record_i32($i92);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i93 := $i92;
    goto $bb30;

  $bb25:
    assume $i83 == 1;
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i84 := $or.i32($i81, 8192);
    call {:si_unique_call 196} {:cexpr "handled"} boogie_si_record_i32($i84);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i85 := $i84;
    goto $bb27;

  $bb16:
    assume $i50 == 1;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($i48, 16384);
    call {:si_unique_call 190} {:cexpr "handled"} boogie_si_record_i32($i51);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i52 := ks8851_rdreg16($p4, 120);
    call {:si_unique_call 192} {:cexpr "tmp___1"} boogie_si_record_i32($i52);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(284, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p54, $i53);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(280, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 512);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i81 := $i51;
    goto $bb24;

  $bb18:
    assume $i58 == 1;
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p59, .str);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p60, .str.1);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p61, .str.2);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p62, .str.4);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i65 := $load.i24($M.15, $p64);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i66 := $and.i24($i65, $sub.i24(0, 262144));
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i67 := $or.i24($i66, 713);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p64, $i67);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p68, 0);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.16, $p69);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i64($i70);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i72 := $and.i64($i71, 1);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $i73 := ldv__builtin_expect($i72, 0);
    call {:si_unique_call 194} {:cexpr "tmp___2"} boogie_si_record_i64($i73);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i74 == 1;
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(284, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i78 := $load.i16($M.0, $p77);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i78);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} vslice_dummy_var_52 := __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p3, $p76, .str.4, .str.1, $i79);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb13:
    assume $i46 == 1;
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i44, 256);
    call {:si_unique_call 189} {:cexpr "handled"} boogie_si_record_i32($i47);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i48 := $i47;
    goto $bb15;

  $bb10:
    assume $i35 == 1;
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $i36 := ks8851_rdreg16($p4, 212);
    call {:si_unique_call 184} {:cexpr "tmp___0"} boogie_si_record_i32($i36);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    call {:si_unique_call 185} {:cexpr "pmecr"} boogie_si_record_i16($i37);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 65475);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    call {:si_unique_call 186} {:cexpr "pmecr"} boogie_si_record_i16($i40);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i41, 8);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} ks8851_wrreg16($p4, 212, $i42);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i33, 8);
    call {:si_unique_call 188} {:cexpr "handled"} boogie_si_record_i32($i43);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb12;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i32 := $or.i32(0, 32768);
    call {:si_unique_call 182} {:cexpr "handled"} boogie_si_record_i32($i32);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p11, .str);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p12, .str.1);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p13, .str.2);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p14, .str.3);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.15, $p16);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 687);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p16, $i19);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p20, 0);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.16, $p21);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 180} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i26 == 1;
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} vslice_dummy_var_51 := __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p2, $p28, .str.3, .str.1, $i6);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_request_threaded_irq_16: ref;

axiom ldv_request_threaded_irq_16 == $sub.ref(0, 191230);

procedure ldv_request_threaded_irq_16($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.18, $M.3, $M.6, $M.19, $M.5, $M.8, $M.20, $M.7, $M.10, $M.21, $M.9;



implementation ldv_request_threaded_irq_16($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} {:cexpr "ldv_request_threaded_irq_16:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 211} {:cexpr "ldv_request_threaded_irq_16:arg:ldv_func_arg4"} boogie_si_record_i64($i3);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $i6 := request_threaded_irq($i0, $p1, $p2, $i3, $p4, $p5);
    call {:si_unique_call 213} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $i7 := reg_check_1($p1, $p2);
    call {:si_unique_call 215} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i9 := $sge.i32($i6, 0);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} activate_suitable_irq_1($i0, $p5);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_register_netdev_17: ref;

axiom ldv_register_netdev_17 == $sub.ref(0, 192262);

procedure ldv_register_netdev_17($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.17, $M.0, $CurrAddr;



implementation ldv_register_netdev_17($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $i1 := register_netdev($p0);
    call {:si_unique_call 218} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 219} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} ldv_net_device_ops_6();
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const netdev_info: ref;

axiom netdev_info == $sub.ref(0, 193294);

procedure netdev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 1} true;
    call {:si_unique_call 221} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 222} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure netdev_info.ref.ref.i32.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_info.ref.ref.i32.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 1} true;
    call {:si_unique_call 223} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 224} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_free_irq_18: ref;

axiom ldv_free_irq_18 == $sub.ref(0, 194326);

procedure ldv_free_irq_18($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation ldv_free_irq_18($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} {:cexpr "ldv_free_irq_18:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} free_irq($i0, $p1);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_netdev_19: ref;

axiom ldv_free_netdev_19 == $sub.ref(0, 195358);

procedure ldv_free_netdev_19($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_free_netdev_19($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} free_netdev($p0);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $M.2 := 0;
    call {:si_unique_call 229} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    return;
}



const register_netdev: ref;

axiom register_netdev == $sub.ref(0, 196390);

procedure register_netdev($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_netdev($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 1} true;
    call {:si_unique_call 230} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 231} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_net_device_ops_6: ref;

axiom ldv_net_device_ops_6 == $sub.ref(0, 197422);

procedure ldv_net_device_ops_6();
  free requires assertsPassed;
  modifies $M.17, $M.0, $CurrAddr;



implementation ldv_net_device_ops_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $p0 := ldv_zalloc(3264);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $M.17 := $p0;
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 198454);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 233} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 1} true;
    call {:si_unique_call 234} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 235} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 236} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $p4 := calloc(1, $i0);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 1} true;
    call {:si_unique_call 238} __VERIFIER_assume($i7);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 199486);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 239} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 240} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 1} true;
    call {:si_unique_call 241} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 242} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const reg_check_1: ref;

axiom reg_check_1 == $sub.ref(0, 200518);

procedure reg_check_1($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reg_check_1($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, $p2i.ref.i64(ks8851_irq));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb6;
}



const activate_suitable_irq_1: ref;

axiom activate_suitable_irq_1 == $sub.ref(0, 201550);

procedure activate_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.4, $M.18, $M.3, $M.6, $M.19, $M.5, $M.8, $M.20, $M.7, $M.10, $M.21, $M.9;



implementation activate_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} {:cexpr "activate_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i2 := $M.3;
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.5;
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.7;
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.9;
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $M.10 := $i0;
    call {:si_unique_call 250} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32($i0);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $M.21 := $p1;
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 251} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $M.8 := $i0;
    call {:si_unique_call 248} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32($i0);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $M.20 := $p1;
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 249} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $M.6 := $i0;
    call {:si_unique_call 246} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32($i0);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $M.19 := $p1;
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 247} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $M.4 := $i0;
    call {:si_unique_call 244} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32($i0);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $M.18 := $p1;
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 245} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 202582);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 203614);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 254} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_netdev_dbg: ref;

axiom __dynamic_netdev_dbg == $sub.ref(0, 204646);

procedure __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 1} true;
    call {:si_unique_call 255} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 256} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 1} true;
    call {:si_unique_call 257} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 258} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 1} true;
    call {:si_unique_call 259} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 260} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: i32) returns ($r: i32);



procedure __dynamic_netdev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 1} true;
    call {:si_unique_call 261} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 262} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 1} true;
    call {:si_unique_call 263} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 264} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32, p.13: i32, p.14: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32, p.13: i32, p.14: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 1} true;
    call {:si_unique_call 265} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 266} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 1} true;
    call {:si_unique_call 267} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 268} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 1} true;
    call {:si_unique_call 269} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 270} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ks8851_wrreg16: ref;

axiom ks8851_wrreg16 == $sub.ref(0, 205678);

procedure ks8851_wrreg16($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ks8851_wrreg16($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i16;
  var $p19: ref;
  var $i20: i16;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var vslice_dummy_var_54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 272} {:cexpr "ks8851_wrreg16:arg:reg"} boogie_si_record_i32($i1);
    call {:si_unique_call 273} {:cexpr "ks8851_wrreg16:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(616, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i1, 2);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i8 := (if $i7 == 1 then 48 else 12);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i1);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i11 := $shl.i32($i10, 10);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i8, $i11);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i13 := $lshr.i32($i1, 6);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i12, $i15);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i16, 64);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 2));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p19, $i18);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i2);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(1, 2));
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, $i20);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(792, 1)), $mul.ref(0, 1));
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p3);
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(792, 1)), $mul.ref(8, 1));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $0.ref);
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(792, 1)), $mul.ref(16, 1));
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 4);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(8, 1));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $i28 := spi_sync($p27, $p5);
    call {:si_unique_call 275} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} vslice_dummy_var_54 := netdev_err.ref.ref($p31, .str.7);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ks8851_rx_pkts: ref;

axiom ks8851_rx_pkts == $sub.ref(0, 206710);

procedure ks8851_rx_pkts($p0: ref);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.0, $CurrAddr, $M.25, $M.24;



implementation ks8851_rx_pkts($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i27: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i24;
  var $i44: i24;
  var $i45: i24;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $i78: i16;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $p88: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p94: ref;
  var $i95: i64;
  var $i96: i64;
  var $i97: i64;
  var $p98: ref;
  var $p99: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i16;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $i28: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $i3 := ks8851_rdreg8($p0, 157);
    call {:si_unique_call 280} {:cexpr "rxfc"} boogie_si_record_i32($i3);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(280, 1));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 2048);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i3, 0);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i28 := $i3;
    goto $bb10;

  $bb10:
    call $i29, $i30, $i31, $i32, $p33, $i34, $i35, $i36, $p37, $p38, $p39, $p40, $p41, $p42, $i43, $i44, $i45, $p46, $p47, $i48, $i49, $i50, $i51, $i52, $p53, $p54, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $p64, $p65, $p66, $i67, $i68, $p69, $p70, $i71, $p72, $i73, $i74, $i75, $p76, $p77, $i78, $p79, $p81, $p82, $p84, $i85, $i86, $p87, $p88, $p90, $p91, $p92, $p94, $i95, $i96, $i97, $p98, $p99, $p101, $p102, $i103, $i104, $i105, $i106, $i28, vslice_dummy_var_56, vslice_dummy_var_57 := ks8851_rx_pkts_loop_$bb10($p0, $p2, $i29, $i30, $i31, $i32, $p33, $i34, $i35, $i36, $p37, $p38, $p39, $p40, $p41, $p42, $i43, $i44, $i45, $p46, $p47, $i48, $i49, $i50, $i51, $i52, $p53, $p54, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $p64, $p65, $p66, $i67, $i68, $p69, $p70, $i71, $p72, $i73, $i74, $i75, $p76, $p77, $i78, $p79, $p81, $p82, $p84, $i85, $i86, $p87, $p88, $p90, $p91, $p92, $p94, $i95, $i96, $i97, $p98, $p99, $p101, $p102, $i103, $i104, $i105, $i106, $i28, vslice_dummy_var_56, vslice_dummy_var_57);
    goto $bb10_last;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $i29 := ks8851_rdreg32($p0, 124);
    call {:si_unique_call 285} {:cexpr "rxh"} boogie_si_record_i32($i29);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 65535);
    call {:si_unique_call 286} {:cexpr "rxstat"} boogie_si_record_i32($i30);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i31 := $lshr.i32($i29, 16);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 4095);
    call {:si_unique_call 287} {:cexpr "rxlen"} boogie_si_record_i32($i32);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(280, 1));
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 2048);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} ks8851_wrreg16($p0, 134, 16384);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(290, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.0, $p56);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i58, 24);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} ks8851_wrreg16($p0, 130, $i59);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i60 := $ugt.i32($i32, 4);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(290, 1));
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i103 := $load.i16($M.0, $p102);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i104 := $zext.i16.i32($i103);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} ks8851_wrreg16($p0, 130, $i104);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i105 := $sub.i32($i28, 1);
    call {:si_unique_call 302} {:cexpr "rxfc"} boogie_si_record_i32($i105);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i106 == 1);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb27:
    assume $i106 == 1;
    assume {:verifier.code 0} true;
    $i28 := $i105;
    goto $bb27_dummy;

  $bb18:
    assume $i60 == 1;
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32($i32, 4);
    call {:si_unique_call 293} {:cexpr "rxlen"} boogie_si_record_i32($i61);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i61, 3);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, $sub.i32(0, 4));
    call {:si_unique_call 294} {:cexpr "rxalign"} boogie_si_record_i32($i63);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $p66 := netdev_alloc_skb_ip_align($p65, $i63);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb20:
    assume $i68 == 1;
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $p69 := skb_put($p66, $i61);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p69, $mul.ref($sub.ref(0, 8), 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i63, 8);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} ks8851_rdfifo($p0, $p70, $i71);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(280, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, 4096);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $i78 := eth_type_trans($p66, $p77);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p66, $mul.ref(0, 232)), $mul.ref(126, 1));
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p79, $i78);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} vslice_dummy_var_57 := ldv_netif_rx_ni_13($p66);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(0, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.0, $p84);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 1);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p88, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(0, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p90, $i86);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p92, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(16, 1));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i95 := $load.i64($M.0, $p94);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i96 := $zext.i32.i64($i61);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i97 := $add.i64($i95, $i96);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p99, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(16, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p101, $i97);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i75 == 1;
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} ks8851_dbg_dumpkkt($p0, $p70);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb12:
    assume $i36 == 1;
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p37, .str);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p38, .str.8);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p39, .str.2);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p40, .str.10);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i43 := $load.i24($M.15, $p42);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i44 := $and.i24($i43, $sub.i24(0, 262144));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i45 := $or.i24($i44, 620);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p42, $i45);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p46, 0);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.16, $p47);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i64($i48);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 1);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 289} {:cexpr "tmp___0"} boogie_si_record_i64($i51);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i52 == 1;
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} vslice_dummy_var_56 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p2, $p54, .str.10, $i30, $i32);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p8, .str);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p9, .str.8);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p10, .str.2);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p11, .str.9);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.15, $p13);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 602);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p13, $i16);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p17, 0);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.16, $p18);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 282} {:cexpr "tmp"} boogie_si_record_i64($i22);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i23 == 1;
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} vslice_dummy_var_55 := __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p1, $p25, .str.9, .str.8, $i3);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb27_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_980;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 207742);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    return;
}



const mii_check_link: ref;

axiom mii_check_link == $sub.ref(0, 208774);

procedure mii_check_link($p0: ref);
  free requires assertsPassed;



implementation mii_check_link($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    return;
}



const netif_wake_queue: ref;

axiom netif_wake_queue == $sub.ref(0, 209806);

procedure netif_wake_queue($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation netif_wake_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} netif_tx_wake_queue($p1);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    return;
}



const netdev_get_tx_queue: ref;

axiom netdev_get_tx_queue == $sub.ref(0, 210838);

procedure netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} {:cexpr "netdev_get_tx_queue:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(920, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 496));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const netif_tx_wake_queue: ref;

axiom netif_tx_wake_queue == $sub.ref(0, 211870);

procedure netif_tx_wake_queue($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation netif_tx_wake_queue($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $i2 := test_and_clear_bit(0, $p1);
    call {:si_unique_call 307} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(8, 1));
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} __netif_schedule($p5);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 212902);

procedure test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 310} {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 311} devirtbounce(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.22, $p2);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __netif_schedule: ref;

axiom __netif_schedule == $sub.ref(0, 213934);

procedure __netif_schedule($p0: ref);
  free requires assertsPassed;



implementation __netif_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    return;
}



const ks8851_rdreg8: ref;

axiom ks8851_rdreg8 == $sub.ref(0, 214966);

procedure ks8851_rdreg8($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ks8851_rdreg8($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 313} {:cexpr "ks8851_rdreg8:arg:reg"} boogie_si_record_i32($i1);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i1, 3);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32(1, $i3);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i4, 2);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i1, 10);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i5, $i6);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i32($i1, 6);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i7, $i8);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} ks8851_rdreg($p0, $i9, $p10, 1);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const ks8851_rdreg32: ref;

axiom ks8851_rdreg32 == $sub.ref(0, 215998);

procedure ks8851_rdreg32($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ks8851_rdreg32($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var vslice_dummy_var_58: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 316} {:cexpr "ks8851_rdreg32:arg:reg"} boogie_si_record_i32($i1);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i1, 3);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 317} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 319} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} vslice_dummy_var_58 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i15 := $shl.i32($i1, 10);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i16 := $lshr.i32($i1, 6);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i15, $i16);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, 60);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p2);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} ks8851_rdreg($p0, $i18, $p19, 4);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p2);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} warn_slowpath_null(.str.2, 406);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netdev_alloc_skb_ip_align: ref;

axiom netdev_alloc_skb_ip_align == $sub.ref(0, 217030);

procedure netdev_alloc_skb_ip_align($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_alloc_skb_ip_align($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} {:cexpr "netdev_alloc_skb_ip_align:arg:length"} boogie_si_record_i32($i1);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $p2 := __netdev_alloc_skb_ip_align($p0, $i1, 32);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 218062);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_put($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $p2 := external_alloc();
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ks8851_rdfifo: ref;

axiom ks8851_rdfifo == $sub.ref(0, 219094);

procedure ks8851_rdfifo($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.0, $CurrAddr;



implementation ks8851_rdfifo($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 329} {:cexpr "ks8851_rdfifo:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(888, 1));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(704, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(280, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 2048);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $sub.i8(0, 128));
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p3);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $0.ref);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 1);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(1, 96)), $mul.ref(8, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p1);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(1, 96)), $mul.ref(0, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $0.ref);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p6, $mul.ref(1, 96)), $mul.ref(16, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i2);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(8, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $i42 := spi_sync($p41, $p7);
    call {:si_unique_call 334} {:cexpr "ret"} boogie_si_record_i32($i42);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 0);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i43 == 1;
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} vslice_dummy_var_60 := netdev_err.ref.ref.ref($p45, .str.13, .str.11);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p12, .str);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p13, .str.11);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p14, .str.2);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p15, .str.12);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.15, $p17);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 547);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p17, $i20);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p21, 0);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.16, $p22);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 331} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i27 == 1;
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} vslice_dummy_var_59 := __dynamic_netdev_dbg.ref.ref.ref.ref.i32.ref($p4, $p29, .str.12, .str.11, $i2, $p1);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ks8851_dbg_dumpkkt: ref;

axiom ks8851_dbg_dumpkkt == $sub.ref(0, 220126);

procedure ks8851_dbg_dumpkkt($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation ks8851_dbg_dumpkkt($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var vslice_dummy_var_61: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p3, .str);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p4, .str.14);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p5, .str.2);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p6, .str.15);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.15, $p8);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 579);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p8, $i11);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p12, 0);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.16, $p13);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 338} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p1, $mul.ref(5, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p1, $mul.ref(6, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p1, $mul.ref(7, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p1, $mul.ref(8, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p1, $mul.ref(9, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p1, $mul.ref(10, 1));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p1, $mul.ref(11, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p1, $mul.ref(12, 1));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p1, $mul.ref(13, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p1, $mul.ref(14, 1));
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p1, $mul.ref(15, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} vslice_dummy_var_61 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32($p2, $p20, .str.15, $i23, $i26, $i29, $i32, $i35, $i38, $i41, $i44, $i47, $i50, $i53, $i56);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const eth_type_trans: ref;

axiom eth_type_trans == $sub.ref(0, 221158);

procedure eth_type_trans($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;



implementation eth_type_trans($p0: ref, $p1: ref) returns ($r: i16)
{
  var $i2: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 1} true;
    call {:si_unique_call 340} $i2 := __VERIFIER_nondet_ushort();
    call {:si_unique_call 341} {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i2);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_netif_rx_ni_13: ref;

axiom ldv_netif_rx_ni_13 == $sub.ref(0, 222190);

procedure ldv_netif_rx_ni_13($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.24;



implementation ldv_netif_rx_ni_13($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $i2 := ldv_skb_free_int($p1);
    call {:si_unique_call 343} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_skb_free_int: ref;

axiom ldv_skb_free_int == $sub.ref(0, 223222);

procedure ldv_skb_free_int($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.24;



implementation ldv_skb_free_int($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p1 := $M.23;
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} ldv_set_remove($p1, $p2);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ldv_set_remove: ref;

axiom ldv_set_remove == $sub.ref(0, 224254);

procedure ldv_set_remove($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.25, $M.24;



implementation ldv_set_remove($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i5: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i2 := $M.24;
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i5, 1);
    call {:si_unique_call 346} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i18 := $M.24;
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i17, $i18);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i30 := $M.24;
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i30, 1);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $M.24 := $i31;
    call {:si_unique_call 348} {:cexpr "last_index"} boogie_si_record_i32($i31);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i20 := $i17;
    goto $bb17;

  $bb17:
    call $i20, $i21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $i29 := ldv_set_remove_loop_$bb17($i20, $i21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $i29);
    goto $bb17_last;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i21, 8));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.25, $p22);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i20, 1);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i25, 8));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p26, $p23);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i20, 1);
    call {:si_unique_call 347} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i28 := $M.24;
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i27, $i28);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb19;

  $bb19:
    assume !($i29 == 1);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb21:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i20 := $i27;
    goto $bb21_dummy;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i4, $i6, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15 := ldv_set_remove_loop_$bb4($p1, $i4, $i6, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15);
    goto $bb4_last;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i6, 8));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.25, $p7);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i9, $i10);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i12 := $i4;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i4, 1);
    call {:si_unique_call 345} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i14 := $M.24;
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, $i14);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i13;
    goto $bb11_dummy;

  $bb8:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i5 := $i12;
    goto $bb7;

  $bb21_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1338;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1311;
}



const spi_sync: ref;

axiom spi_sync == $sub.ref(0, 225286);

procedure spi_sync($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation spi_sync($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 1} true;
    call {:si_unique_call 349} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 350} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const netdev_err: ref;

axiom netdev_err == $sub.ref(0, 226318);

procedure netdev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 1} true;
    call {:si_unique_call 351} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 352} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure netdev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 1} true;
    call {:si_unique_call 353} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 354} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 227350);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 1} true;
    call {:si_unique_call 355} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 356} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __netdev_alloc_skb_ip_align: ref;

axiom __netdev_alloc_skb_ip_align == $sub.ref(0, 228382);

procedure __netdev_alloc_skb_ip_align($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __netdev_alloc_skb_ip_align($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} {:cexpr "__netdev_alloc_skb_ip_align:arg:length"} boogie_si_record_i32($i1);
    call {:si_unique_call 358} {:cexpr "__netdev_alloc_skb_ip_align:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $p3 := __netdev_alloc_skb($p0, $i1, $i2);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __netdev_alloc_skb: ref;

axiom __netdev_alloc_skb == $sub.ref(0, 229414);

procedure __netdev_alloc_skb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __netdev_alloc_skb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} {:cexpr "__netdev_alloc_skb:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 361} {:cexpr "__netdev_alloc_skb:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $p3 := external_alloc();
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 230446);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    return;
}



const ks8851_rdreg: ref;

axiom ks8851_rdreg == $sub.ref(0, 231478);

procedure ks8851_rdreg($p0: ref, $i1: i32, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ks8851_rdreg($p0: ref, $i1: i32, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p19: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i38: i1;
  var $i39: i8;
  var $i40: i1;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} {:cexpr "ks8851_rdreg:arg:op"} boogie_si_record_i32($i1);
    call {:si_unique_call 365} {:cexpr "ks8851_rdreg:arg:rxl"} boogie_si_record_i32($i3);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(270, 1));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(262, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i1);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, $i8);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $i9 := ks8851_rx_1msg($p0);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 367} {:cexpr "tmp"} boogie_si_record_i8($i10);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(704, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(888, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p22, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p4);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p22, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $0.ref);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p22, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 2);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p22, $mul.ref(1, 96)), $mul.ref(0, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $0.ref);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p22, $mul.ref(1, 96)), $mul.ref(8, 1));
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p6);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p22, $mul.ref(1, 96)), $mul.ref(16, 1));
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i3);
    assume {:verifier.code 0} true;
    $p19 := $p20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(8, 1));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $i33 := spi_sync($p32, $p19);
    call {:si_unique_call 369} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i34 == 1);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i38 := ks8851_rx_1msg($p0);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i8($i38);
    call {:si_unique_call 372} {:cexpr "tmp___0"} boogie_si_record_i8($i39);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i40 == 1);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i3);
    call {:si_unique_call 375} {:cexpr "__len___0"} boogie_si_record_i64($i43);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 376} cmdloc_dummy_var_13 := $memcpy.i8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p2, $p7, $i43, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i40 == 1;
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i3);
    call {:si_unique_call 373} {:cexpr "__len"} boogie_si_record_i64($i41);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p7, $mul.ref(2, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 374} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p2, $p42, $i41, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i34 == 1;
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} vslice_dummy_var_62 := netdev_err.ref.ref($p36, .str.6);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(616, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(792, 1)), $mul.ref(0, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p4);
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(792, 1)), $mul.ref(8, 1));
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p6);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i3, 2);
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(792, 1)), $mul.ref(16, 1));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p19 := $p12;
    goto $bb3;
}



const ks8851_rx_1msg: ref;

axiom ks8851_rx_1msg == $sub.ref(0, 232510);

procedure ks8851_rx_1msg($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ks8851_rx_1msg($p0: ref) returns ($r: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const ks8851_read_mac_addr: ref;

axiom ks8851_read_mac_addr == $sub.ref(0, 233542);

procedure ks8851_read_mac_addr($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ks8851_read_mac_addr($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i8;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i8;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i8;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i8;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $p1 := netdev_priv($p0);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1144)), $mul.ref(16, 1));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} mutex_lock_nested($p3, 0);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $i4 := ks8851_rdreg8($p2, 21);
    call {:si_unique_call 380} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i5);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $i9 := ks8851_rdreg8($p2, 20);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(1, 1));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i10);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $i14 := ks8851_rdreg8($p2, 19);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref(2, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i15);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $i19 := ks8851_rdreg8($p2, 18);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref(3, 1));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i20);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $i24 := ks8851_rdreg8($p2, 17);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(4, 1));
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, $i25);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $i29 := ks8851_rdreg8($p2, 16);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref(5, 1));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i30);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 1144)), $mul.ref(16, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} mutex_unlock($p8);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    return;
}



const is_valid_ether_addr: ref;

axiom is_valid_ether_addr == $sub.ref(0, 234574);

procedure is_valid_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_valid_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $i1 := is_multicast_ether_addr($p0);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 388} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i6 := is_zero_ether_addr($p0);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 390} {:cexpr "tmp___1"} boogie_si_record_i8($i7);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb12;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb11;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const eth_hw_addr_random: ref;

axiom eth_hw_addr_random == $sub.ref(0, 235606);

procedure eth_hw_addr_random($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation eth_hw_addr_random($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(580, 1));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 1);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} eth_random_addr($p3);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    return;
}



const ks8851_write_mac_addr: ref;

axiom ks8851_write_mac_addr == $sub.ref(0, 236638);

procedure ks8851_write_mac_addr($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.0, $CurrAddr;



implementation ks8851_write_mac_addr($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i4: i32;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $p1 := netdev_priv($p0);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1144)), $mul.ref(16, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} mutex_lock_nested($p3, 0);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} ks8851_set_powermode($p2, 0);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb1;

  $bb1:
    call $i5, $p6, $p7, $i8, $p9, $i10, $i11, $i12, $i13, $i4 := ks8851_write_mac_addr_loop_$bb1($p0, $p2, $i5, $p6, $p7, $i8, $p9, $i10, $i11, $i12, $i13, $i4);
    goto $bb1_last;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(21, $i4);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i4);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p7, $mul.ref($i8, 1));
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} ks8851_wrreg8($p2, $i5, $i11);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i4, 1);
    call {:si_unique_call 396} {:cexpr "i"} boogie_si_record_i32($i12);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i13 := $sle.i32($i12, 5);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $i14 := netif_running($p0);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 398} {:cexpr "tmp___0"} boogie_si_record_i8($i15);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 1144)), $mul.ref(16, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} mutex_unlock($p19);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} ks8851_set_powermode($p2, 2);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb3:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i12;
    goto $bb3_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1532;
}



const ks8851_set_powermode: ref;

axiom ks8851_set_powermode == $sub.ref(0, 237670);

procedure ks8851_set_powermode($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.0, $CurrAddr;



implementation ks8851_set_powermode($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var vslice_dummy_var_63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 402} {:cexpr "ks8851_set_powermode:arg:pwrmode"} boogie_si_record_i32($i1);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(280, 1));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 8192);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $i26 := ks8851_rdreg16($p0, 212);
    call {:si_unique_call 407} {:cexpr "pmecr"} boogie_si_record_i32($i26);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, $sub.i32(0, 4));
    call {:si_unique_call 408} {:cexpr "pmecr"} boogie_si_record_i32($i27);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, $i1);
    call {:si_unique_call 409} {:cexpr "pmecr"} boogie_si_record_i32($i28);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} ks8851_wrreg16($p0, 212, $i28);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p7, .str);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p8, .str.21);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p9, .str.2);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p10, .str.22);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.15, $p12);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 444);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p12, $i15);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p16, 0);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.16, $p17);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 404} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i22 == 1;
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} vslice_dummy_var_63 := __dynamic_netdev_dbg.ref.ref.ref.i32($p2, $p24, .str.22, $i1);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ks8851_wrreg8: ref;

axiom ks8851_wrreg8 == $sub.ref(0, 238702);

procedure ks8851_wrreg8($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ks8851_wrreg8($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i16;
  var $p21: ref;
  var $i22: i16;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var vslice_dummy_var_64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 412} {:cexpr "ks8851_wrreg8:arg:reg"} boogie_si_record_i32($i1);
    call {:si_unique_call 413} {:cexpr "ks8851_wrreg8:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(616, 1));
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i1, 3);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32(1, $i6);
    call {:si_unique_call 414} {:cexpr "bit"} boogie_si_record_i32($i7);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i10 := $shl.i32($i9, 2);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i1);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i13 := $shl.i32($i12, 10);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i10, $i13);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i32($i1, 6);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i14, $i17);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, 64);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 2));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, $i20);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i2);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(1, 2));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, $i22);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(792, 1)), $mul.ref(0, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p3);
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(792, 1)), $mul.ref(8, 1));
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $0.ref);
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(792, 1)), $mul.ref(16, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 3);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(8, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i30 := spi_sync($p29, $p5);
    call {:si_unique_call 416} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i31 == 1;
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} vslice_dummy_var_64 := netdev_err.ref.ref($p33, .str.7);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netif_running: ref;

axiom netif_running == $sub.ref(0, 239734);

procedure netif_running($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_running($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(72, 1));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 419} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 240766);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const eth_random_addr: ref;

axiom eth_random_addr == $sub.ref(0, 241798);

procedure eth_random_addr($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation eth_random_addr($p0: ref)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i8;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} get_random_bytes($p0, 6);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 254);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, $i4);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p0);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 2);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, $i8);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    return;
}



const get_random_bytes: ref;

axiom get_random_bytes == $sub.ref(0, 242830);

procedure get_random_bytes($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation get_random_bytes($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} {:cexpr "get_random_bytes:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    return;
}



const is_multicast_ether_addr: ref;

axiom is_multicast_ether_addr == $sub.ref(0, 243862);

procedure is_multicast_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_multicast_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const is_zero_ether_addr: ref;

axiom is_zero_ether_addr == $sub.ref(0, 244894);

procedure is_zero_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_zero_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 2));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i2, $i6);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const netdev_warn: ref;

axiom netdev_warn == $sub.ref(0, 245926);

procedure netdev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 1} true;
    call {:si_unique_call 423} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 424} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 246958);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 247990);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    return;
}



const __skb_queue_head_init: ref;

axiom __skb_queue_head_init == $sub.ref(0, 249022);

procedure __skb_queue_head_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_queue_head_init($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p0);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    return;
}



const ks8851_phy_reg: ref;

axiom ks8851_phy_reg == $sub.ref(0, 250054);

procedure ks8851_phy_reg($i0: i32) returns ($r: i32);



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 251086);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} __list_add($p0, $p3, $p1);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 252118);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 253150);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const skb_queue_empty: ref;

axiom skb_queue_empty == $sub.ref(0, 254182);

procedure skb_queue_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_queue_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const ldv_skb_dequeue_14: ref;

axiom ldv_skb_dequeue_14 == $sub.ref(0, 255214);

procedure ldv_skb_dequeue_14($p0: ref) returns ($r: ref);



const ks8851_wrpkt: ref;

axiom ks8851_wrpkt == $sub.ref(0, 256246);

procedure ks8851_wrpkt($p0: ref, $p1: ref, $i2: i1);



const ks8851_done_tx: ref;

axiom ks8851_done_tx == $sub.ref(0, 257278);

procedure ks8851_done_tx($p0: ref, $p1: ref);



const ldv_skb_free: ref;

axiom ldv_skb_free == $sub.ref(0, 258310);

procedure ldv_skb_free($p0: ref);
  free requires assertsPassed;
  modifies $M.25, $M.24;



implementation ldv_skb_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p1 := $M.23;
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} ldv_set_remove($p1, $p2);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    return;
}



const ldv_skb_alloc: ref;

axiom ldv_skb_alloc == $sub.ref(0, 259342);

procedure ldv_skb_alloc() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.24, $CurrAddr;



implementation ldv_skb_alloc() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $p5: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $p0 := ldv_zalloc(232);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i3 := $ne.ref($p2, $0.ref);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p5 := $M.23;
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} ldv_set_add($p5, $p2);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p4 := $p0;
    goto $bb3;
}



const ldv_set_add: ref;

axiom ldv_set_add == $sub.ref(0, 260374);

procedure ldv_set_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.25, $M.24;



implementation ldv_set_add($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i2 := $M.24;
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $M.24;
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 15);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i16 := $M.24;
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i17, 8));
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p18, $p1);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i19 := $M.24;
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $M.24 := $i20;
    call {:si_unique_call 431} {:cexpr "last_index"} boogie_si_record_i32($i20);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i13 := ldv_set_add_loop_$bb4($p1, $i4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i13);
    goto $bb4_last;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i5, 8));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.25, $p6);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i8, $i9);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i4, 1);
    call {:si_unique_call 430} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i12 := $M.24;
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, $i12);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i11;
    goto $bb12_dummy;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1744;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 261406);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 262438);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ks8851_suspend: ref;

axiom ks8851_suspend == $sub.ref(0, 263470);

procedure ks8851_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.25, $M.24, $CurrAddr;



implementation ks8851_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var vslice_dummy_var_65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.26, $p3);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i5 := netif_running($p4);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 434} {:cexpr "tmp___0"} boogie_si_record_i8($i6);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} netif_device_detach($p4);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} vslice_dummy_var_65 := ks8851_net_stop($p4);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ks8851_resume: ref;

axiom ks8851_resume == $sub.ref(0, 264502);

procedure ks8851_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.0, $CurrAddr;



implementation ks8851_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.26, $p3);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $i5 := netif_running($p4);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 439} {:cexpr "tmp___0"} boogie_si_record_i8($i6);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} vslice_dummy_var_66 := ks8851_net_open($p4);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} netif_device_attach($p4);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ks8851_net_open: ref;

axiom ks8851_net_open == $sub.ref(0, 265534);

procedure ks8851_net_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.0, $CurrAddr;



implementation ks8851_net_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i24;
  var $i47: i24;
  var $i48: i24;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $p3 := netdev_priv($p0);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(16, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} mutex_lock_nested($p5, 0);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(280, 1));
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 32);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} ks8851_set_powermode($p4, 0);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} ks8851_soft_reset($p4, 2);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} ks8851_wrreg16($p4, 112, 15);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} ks8851_wrreg16($p4, 132, 16384);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} ks8851_wrreg16($p4, 116, 3233);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} ks8851_wrreg16($p4, 118, 128);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} ks8851_wrreg16($p4, 140, 1000);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} ks8851_wrreg16($p4, 142, 4096);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} ks8851_wrreg16($p4, 156, 10);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(290, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, 224);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(290, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.0, $p30);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} ks8851_wrreg16($p4, 130, $i32);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(288, 1));
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p33, $sub.i16(0, 7422));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} ks8851_wrreg16($p4, 146, 58114);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} ks8851_wrreg16($p4, 144, 58114);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} netif_start_queue($p35);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(280, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 32);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(16, 1));
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} mutex_unlock($p59);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb7:
    assume $i39 == 1;
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p40, .str);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p41, .str.23);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p42, .str.2);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p43, .str.25);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i46 := $load.i24($M.15, $p45);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i47 := $and.i24($i46, $sub.i24(0, 262144));
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i48 := $or.i24($i47, 938);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p45, $i48);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p49, 0);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.16, $p50);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i64($i51);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i52, 1);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 463} {:cexpr "tmp___1"} boogie_si_record_i64($i54);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i55 == 1;
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} vslice_dummy_var_68 := __dynamic_netdev_dbg.ref.ref.ref($p2, $p57, .str.25);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p10, .str);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p11, .str.23);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p12, .str.2);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p13, .str.24);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.15, $p15);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 882);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p15, $i18);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p19, 0);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.16, $p20);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 447} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} vslice_dummy_var_67 := __dynamic_netdev_dbg.ref.ref.ref($p1, $p27, .str.24);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const netif_device_attach: ref;

axiom netif_device_attach == $sub.ref(0, 266566);

procedure netif_device_attach($p0: ref);
  free requires assertsPassed;



implementation netif_device_attach($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    return;
}



const netif_start_queue: ref;

axiom netif_start_queue == $sub.ref(0, 267598);

procedure netif_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} netif_tx_start_queue($p1);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_start_queue: ref;

axiom netif_tx_start_queue == $sub.ref(0, 268630);

procedure netif_tx_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} clear_bit(0, $p1);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 269662);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 470} devirtbounce.1(0, $p1, $i0, $p1);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    return;
}



const netif_device_detach: ref;

axiom netif_device_detach == $sub.ref(0, 270694);

procedure netif_device_detach($p0: ref);
  free requires assertsPassed;



implementation netif_device_detach($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    return;
}



const ks8851_net_stop: ref;

axiom ks8851_net_stop == $sub.ref(0, 271726);

procedure ks8851_net_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.25, $M.24, $CurrAddr;



implementation ks8851_net_stop($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i24;
  var $i33: i24;
  var $i34: i24;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i1;
  var vslice_dummy_var_71: i1;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $p2 := netdev_priv($p0);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1144)), $mul.ref(280, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 16);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} netif_stop_queue($p0);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 1144)), $mul.ref(16, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} mutex_lock_nested($p9, 0);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} ks8851_wrreg16($p3, 144, 0);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} ks8851_wrreg16($p3, 146, 65535);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 1144)), $mul.ref(16, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} mutex_unlock($p10);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 1144)), $mul.ref(360, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} vslice_dummy_var_70 := flush_work($p11);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 1144)), $mul.ref(440, 1));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} vslice_dummy_var_71 := flush_work($p13);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 1144)), $mul.ref(16, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} mutex_lock_nested($p15, 0);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} ks8851_wrreg16($p3, 116, 0);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} ks8851_wrreg16($p3, 112, 0);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} ks8851_set_powermode($p3, 2);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 1144)), $mul.ref(16, 1));
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} mutex_unlock($p16);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 1144)), $mul.ref(520, 1));
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $i18 := skb_queue_empty($p17);
    call {:si_unique_call 487} {:cexpr "tmp___2"} boogie_si_record_i32($i18);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p20, $p21, $p22, $i23, $i24, $i25, $p26, $p27, $p28, $p29, $p30, $p31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $i39, $i40, $i41, $p42, $p43, $p45, $i46, $i47, vslice_dummy_var_72 := ks8851_net_stop_loop_$bb7($p1, $p3, $p17, $p20, $p21, $p22, $i23, $i24, $i25, $p26, $p27, $p28, $p29, $p30, $p31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $i39, $i40, $i41, $p42, $p43, $p45, $i46, $i47, vslice_dummy_var_72);
    goto $bb7_last;

  $bb8:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 1144)), $mul.ref(520, 1));
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $p21 := ldv_skb_dequeue_15($p20);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 1144)), $mul.ref(280, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 16);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p21);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} ldv_skb_free($p45);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $i46 := skb_queue_empty($p17);
    call {:si_unique_call 494} {:cexpr "tmp___2"} boogie_si_record_i32($i46);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i47 == 1);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb15_dummy;

  $bb9:
    assume $i25 == 1;
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p26, .str);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p27, .str.17);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p28, .str.2);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p29, .str.18);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i32 := $load.i24($M.15, $p31);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i33 := $and.i24($i32, $sub.i24(0, 262144));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i34 := $or.i24($i33, 986);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p31, $i34);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p35, 0);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.16, $p36);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i64($i37);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 1);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 490} {:cexpr "tmp___1"} boogie_si_record_i64($i40);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} vslice_dummy_var_72 := __dynamic_netdev_dbg.ref.ref.ref.ref.ref($p1, $p43, .str.18, .str.17, $p21);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} vslice_dummy_var_69 := netdev_info.ref.ref($p0, .str.16);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const netif_stop_queue: ref;

axiom netif_stop_queue == $sub.ref(0, 272758);

procedure netif_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_stop_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} netif_tx_stop_queue($p1);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    return;
}



const flush_work: ref;

axiom flush_work == $sub.ref(0, 273790);

procedure flush_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation flush_work($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 1} true;
    call {:si_unique_call 497} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 498} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_skb_dequeue_15: ref;

axiom ldv_skb_dequeue_15 == $sub.ref(0, 274822);

procedure ldv_skb_dequeue_15($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.24, $CurrAddr;



implementation ldv_skb_dequeue_15($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $p1 := ldv_skb_alloc();
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const netif_tx_stop_queue: ref;

axiom netif_tx_stop_queue == $sub.ref(0, 275854);

procedure netif_tx_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_stop_queue($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 500} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i3);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 502} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i3, 0);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 505} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} set_bit(0, $p15);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} vslice_dummy_var_73 := printk.ref(.str.20);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} warn_slowpath_null(.str.19, 2212);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 276886);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 1} true;
    call {:si_unique_call 508} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 509} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 277918);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 511} devirtbounce.1(0, $p1, $i0, $p1);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    return;
}



const ks8851_get_settings: ref;

axiom ks8851_get_settings == $sub.ref(0, 278950);

procedure ks8851_get_settings($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ks8851_get_settings($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $p2 := netdev_priv($p0);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1144)), $mul.ref(296, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $i5 := mii_ethtool_gset($p4, $p1);
    call {:si_unique_call 514} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ks8851_set_settings: ref;

axiom ks8851_set_settings == $sub.ref(0, 279982);

procedure ks8851_set_settings($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ks8851_set_settings($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $p2 := netdev_priv($p0);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1144)), $mul.ref(296, 1));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i5 := mii_ethtool_sset($p4, $p1);
    call {:si_unique_call 517} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ks8851_get_drvinfo: ref;

axiom ks8851_get_drvinfo == $sub.ref(0, 281014);

procedure ks8851_get_drvinfo($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ks8851_get_drvinfo($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_74: i64;
  var vslice_dummy_var_75: i64;
  var vslice_dummy_var_76: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(4, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} vslice_dummy_var_74 := strlcpy($p3, .str.54, 32);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(36, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} vslice_dummy_var_75 := strlcpy($p6, .str.55, 32);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1296, 1)), $mul.ref(0, 1));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $p11 := dev_name($p10);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(100, 1));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} vslice_dummy_var_76 := strlcpy($p13, $p11, 32);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    return;
}



const ks8851_get_msglevel: ref;

axiom ks8851_get_msglevel == $sub.ref(0, 282046);

procedure ks8851_get_msglevel($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ks8851_get_msglevel($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $p1 := netdev_priv($p0);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1144)), $mul.ref(280, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ks8851_set_msglevel: ref;

axiom ks8851_set_msglevel == $sub.ref(0, 283078);

procedure ks8851_set_msglevel($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ks8851_set_msglevel($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} {:cexpr "ks8851_set_msglevel:arg:to"} boogie_si_record_i32($i1);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $p2 := netdev_priv($p0);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1144)), $mul.ref(280, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i1);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    return;
}



const ks8851_nway_reset: ref;

axiom ks8851_nway_reset == $sub.ref(0, 284110);

procedure ks8851_nway_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ks8851_nway_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $p1 := netdev_priv($p0);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1144)), $mul.ref(296, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $i4 := mii_nway_restart($p3);
    call {:si_unique_call 527} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ks8851_get_link: ref;

axiom ks8851_get_link == $sub.ref(0, 285142);

procedure ks8851_get_link($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ks8851_get_link($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p1 := netdev_priv($p0);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1144)), $mul.ref(296, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $i4 := mii_link_ok($p3);
    call {:si_unique_call 530} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ks8851_get_eeprom_len: ref;

axiom ks8851_get_eeprom_len == $sub.ref(0, 286174);

procedure ks8851_get_eeprom_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ks8851_get_eeprom_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $p1 := netdev_priv($p0);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1144)), $mul.ref(292, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 512);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i8 := (if $i7 == 1 then 128 else 0);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const ks8851_get_eeprom: ref;

axiom ks8851_get_eeprom == $sub.ref(0, 287206);

procedure ks8851_get_eeprom($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ks8851_get_eeprom($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $i23: i32;
  var $i24: i16;
  var $i25: i32;
  var $i26: i16;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $p3 := netdev_priv($p0);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 533} {:cexpr "offset"} boogie_si_record_i32($i6);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 534} {:cexpr "len"} boogie_si_record_i32($i8);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 1);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i10 == 1);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i6, 1);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $i14 := ks8851_eeprom_claim($p4);
    call {:si_unique_call 536} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 34897);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(1080, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i18 := $sdiv.i32($i6, 2);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p2);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i23 := $sdiv.i32($i8, 2);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} eeprom_93cx6_multiread($p17, $i21, $p22, $i26);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} ks8851_eeprom_release($p4);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 2);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;
}



const ks8851_set_eeprom: ref;

axiom ks8851_set_eeprom == $sub.ref(0, 288238);

procedure ks8851_set_eeprom($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.0, $CurrAddr;



implementation ks8851_set_eeprom($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i25: i16;
  var $i26: i32;
  var $i27: i32;
  var $i28: i16;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i16;
  var $i33: i32;
  var $i34: i16;
  var $i35: i32;
  var $i36: i32;
  var $i37: i16;
  var $i38: i16;
  var $i39: i32;
  var $i40: i32;
  var $i41: i16;
  var $i42: i8;
  var $i43: i16;
  var $i44: i32;
  var $i45: i16;
  var $i46: i32;
  var $i47: i32;
  var $i48: i16;
  var $p49: ref;
  var $i50: i32;
  var $i51: i8;
  var $i52: i32;
  var $i53: i8;
  var $i54: i16;
  var $i55: i32;
  var $i56: i16;
  var $p57: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $p4 := netdev_priv($p0);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 541} {:cexpr "offset"} boogie_si_record_i32($i7);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 542} {:cexpr "len"} boogie_si_record_i32($i9);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 1);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 34897);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i15 := ks8851_eeprom_claim($p5);
    call {:si_unique_call 544} {:cexpr "tmp___1"} boogie_si_record_i32($i15);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 1144)), $mul.ref(1080, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} eeprom_93cx6_wren($p17, 1);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 1144)), $mul.ref(1080, 1));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i19 := $sdiv.i32($i7, 2);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} eeprom_93cx6_read($p18, $i22, $p3);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i7, 1);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.27, $p3);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 65280);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $M.27 := $store.i16($M.27, $p3, $i41);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p2);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i16($i42);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.27, $p3);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i44, $i46);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $M.27 := $store.i16($M.27, $p3, $i48);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 1144)), $mul.ref(1080, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i50 := $sdiv.i32($i7, 2);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.27, $p3);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i16($i55);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} eeprom_93cx6_write($p49, $i53, $i56);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 1144)), $mul.ref(1080, 1));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} eeprom_93cx6_wren($p57, 0);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} ks8851_eeprom_release($p5);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.27, $p3);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 255);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $M.27 := $store.i16($M.27, $p3, $i28);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p2);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i31 := $shl.i32($i30, 8);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i33 := $sext.i16.i32($i32);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.27, $p3);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i35 := $sext.i16.i32($i34);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i33, $i35);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $M.27 := $store.i16($M.27, $p3, $i37);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 2);
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;
}



const ks8851_eeprom_claim: ref;

axiom ks8851_eeprom_claim == $sub.ref(0, 289270);

procedure ks8851_eeprom_claim($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ks8851_eeprom_claim($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(292, 1));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 512);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(16, 1));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} mutex_lock_nested($p7, 0);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} ks8851_wrreg16($p0, 34, 17);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 2);
    goto $bb3;
}



const eeprom_93cx6_wren: ref;

axiom eeprom_93cx6_wren == $sub.ref(0, 290302);

procedure eeprom_93cx6_wren($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation eeprom_93cx6_wren($p0: ref, $i1: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} {:cexpr "eeprom_93cx6_wren:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    return;
}



const eeprom_93cx6_read: ref;

axiom eeprom_93cx6_read == $sub.ref(0, 291334);

procedure eeprom_93cx6_read($p0: ref, $i1: i8, $p2: ref);
  free requires assertsPassed;



implementation eeprom_93cx6_read($p0: ref, $i1: i8, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} {:cexpr "eeprom_93cx6_read:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    return;
}



const eeprom_93cx6_write: ref;

axiom eeprom_93cx6_write == $sub.ref(0, 292366);

procedure eeprom_93cx6_write($p0: ref, $i1: i8, $i2: i16);
  free requires assertsPassed;



implementation eeprom_93cx6_write($p0: ref, $i1: i8, $i2: i16)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} {:cexpr "eeprom_93cx6_write:arg:arg1"} boogie_si_record_i8($i1);
    call {:si_unique_call 555} {:cexpr "eeprom_93cx6_write:arg:arg2"} boogie_si_record_i16($i2);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    return;
}



const ks8851_eeprom_release: ref;

axiom ks8851_eeprom_release == $sub.ref(0, 293398);

procedure ks8851_eeprom_release($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ks8851_eeprom_release($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $i1 := ks8851_rdreg16($p0, 34);
    call {:si_unique_call 557} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, $sub.i32(0, 17));
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} ks8851_wrreg16($p0, 34, $i2);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(16, 1));
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} mutex_unlock($p3);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    return;
}



const eeprom_93cx6_multiread: ref;

axiom eeprom_93cx6_multiread == $sub.ref(0, 294430);

procedure eeprom_93cx6_multiread($p0: ref, $i1: i8, $p2: ref, $i3: i16);
  free requires assertsPassed;



implementation eeprom_93cx6_multiread($p0: ref, $i1: i8, $p2: ref, $i3: i16)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} {:cexpr "eeprom_93cx6_multiread:arg:arg1"} boogie_si_record_i8($i1);
    call {:si_unique_call 561} {:cexpr "eeprom_93cx6_multiread:arg:arg3"} boogie_si_record_i16($i3);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    return;
}



const mii_link_ok: ref;

axiom mii_link_ok == $sub.ref(0, 295462);

procedure mii_link_ok($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mii_link_ok($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 1} true;
    call {:si_unique_call 562} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 563} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mii_nway_restart: ref;

axiom mii_nway_restart == $sub.ref(0, 296494);

procedure mii_nway_restart($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mii_nway_restart($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 1} true;
    call {:si_unique_call 564} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 565} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 297526);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 566} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 1} true;
    call {:si_unique_call 567} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 568} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 298558);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $p9 := kobject_name($p8);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 299590);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const mii_ethtool_sset: ref;

axiom mii_ethtool_sset == $sub.ref(0, 300622);

procedure mii_ethtool_sset($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mii_ethtool_sset($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 1} true;
    call {:si_unique_call 570} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 571} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mii_ethtool_gset: ref;

axiom mii_ethtool_gset == $sub.ref(0, 301654);

procedure mii_ethtool_gset($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mii_ethtool_gset($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 1} true;
    call {:si_unique_call 572} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 573} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ks8851_start_xmit: ref;

axiom ks8851_start_xmit == $sub.ref(0, 302686);

procedure ks8851_start_xmit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.0, $CurrAddr;



implementation ks8851_start_xmit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $i47: i16;
  var $p48: ref;
  var $p49: ref;
  var $i40: i32;
  var $p50: ref;
  var $p51: ref;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $p3 := netdev_priv($p1);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $i7 := calc_txlen($i6);
    call {:si_unique_call 577} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(280, 1));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 256);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(184, 1));
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} spin_lock($p35);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(284, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i39 := $ult.i32($i38, $i7);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i39 == 1);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(284, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i7);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32($i43, $i45);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i16($i46);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(284, 1));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p48, $i47);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(520, 1));
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} skb_queue_tail($p49, $p0);
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(184, 1));
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} spin_unlock($p50);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(360, 1));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} vslice_dummy_var_78 := schedule_work($p51);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb7:
    assume $i39 == 1;
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} netif_stop_queue($p1);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i40 := 16;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p12, .str);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p13, .str.26);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p14, .str.2);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p15, .str.27);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.15, $p17);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 1015);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p17, $i20);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p21, 0);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.16, $p22);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 579} {:cexpr "tmp___1"} boogie_si_record_i64($i26);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i27 == 1;
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} vslice_dummy_var_77 := __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32.ref($p2, $p29, .str.27, .str.26, $p0, $i31, $p33);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ks8851_set_rx_mode: ref;

axiom ks8851_set_rx_mode == $sub.ref(0, 303718);

procedure ks8851_set_rx_mode($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ks8851_set_rx_mode($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i64;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i16;
  var $i49: i32;
  var $i50: i32;
  var $i51: i16;
  var $i52: i32;
  var $i53: i64;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p34: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i16;
  var $i67: i32;
  var $i68: i32;
  var $i69: i16;
  var $p70: ref;
  var $p71: ref;
  var $i72: i16;
  var $i73: i32;
  var $i74: i32;
  var $i75: i16;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p92: ref;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var vslice_dummy_var_79: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $p1 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $p2 := netdev_priv($p0);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 588} cmdloc_dummy_var_15 := $memset.i8(cmdloc_dummy_var_14, $p4, 0, 12, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(520, 1));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 256);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(520, 1));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 512);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(520, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 4096);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p64, 2048);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.0, $p65);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i68 := $or.i32($i67, 1185);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p70, $i69);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i72 := $load.i16($M.0, $p71);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i72);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i73, 128);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i16($i74);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p76, $i75);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 1144)), $mul.ref(184, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} spin_lock($p77);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p1);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 1144)), $mul.ref(344, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $i81 := memcmp($p78, $p80, 12);
    call {:si_unique_call 591} {:cexpr "tmp___1"} boogie_si_record_i32($i81);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 1144)), $mul.ref(184, 1));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} spin_unlock($p92);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i82 == 1;
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i83 := $ugt.i64(12, 63);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i83 == 1);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 1144)), $mul.ref(344, 1));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p1);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.0;
    cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 598} cmdloc_dummy_var_21 := $memcpy.i8(cmdloc_dummy_var_19, cmdloc_dummy_var_20, $p88, $p89, 12, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_21;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 1144)), $mul.ref(440, 1));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} vslice_dummy_var_79 := schedule_work($p90);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i83 == 1;
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 1144)), $mul.ref(344, 1));
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p1);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 597} cmdloc_dummy_var_18 := $memcpy.i8(cmdloc_dummy_var_16, cmdloc_dummy_var_17, $p85, $p86, 12, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_18;
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(16, 1));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb9;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(0, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i29, $i32);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p63, 2112);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p34 := $p26;
    goto $bb15;

  $bb15:
    call $p35, $p36, $i37, $i38, $i39, $i40, $i41, $p43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $p55, $p57, $p58, $p59, $p60, $i61, $i62, $p34 := ks8851_set_rx_mode_loop_$bb15($p1, $i32, $p35, $p36, $i37, $i38, $i39, $i40, $i41, $p43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $p55, $p57, $p58, $p59, $p60, $i61, $i62, $p34);
    goto $bb15_last;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $i37 := crc32_le($sub.i32(0, 1), $p36, 6);
    call {:si_unique_call 593} {:cexpr "tmp___0"} boogie_si_record_i32($i37);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $i38 := bitrev32($i37);
    call {:si_unique_call 595} {:cexpr "crc"} boogie_si_record_i32($i38);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i39 := $lshr.i32($i38, 26);
    call {:si_unique_call 596} {:cexpr "crc"} boogie_si_record_i32($i39);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i40 := $lshr.i32($i39, 4);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i40);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref($i41, 2));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i45 := $sext.i16.i32($i44);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i39, 15);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i47 := $shl.i32(1, $i46);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i49 := $sext.i16.i32($i48);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i45, $i49);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i52 := $lshr.i32($i39, 4);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i53 := $zext.i32.i64($i52);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref($i53, 2));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p55, $i51);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, $i32);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i62 == 1);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb17:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $p34 := $p58;
    goto $bb17_dummy;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, 2384);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, 18);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2420;
}



const ks8851_set_mac_address: ref;

axiom ks8851_set_mac_address == $sub.ref(0, 304750);

procedure ks8851_set_mac_address($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation ks8851_set_mac_address($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i6: i32;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $i3 := netif_running($p0);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 602} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $i9 := is_valid_ether_addr($p8);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 604} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i64(6, 63);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.0;
    cmdloc_dummy_var_26 := $M.0;
    call {:si_unique_call 606} cmdloc_dummy_var_27 := $memcpy.i8(cmdloc_dummy_var_25, cmdloc_dummy_var_26, $p20, $p22, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_27;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $i23 := ks8851_write_mac_addr($p0);
    call {:si_unique_call 608} {:cexpr "tmp___2"} boogie_si_record_i32($i23);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i6 := $i23;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.0;
    cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 605} cmdloc_dummy_var_24 := $memcpy.i8(cmdloc_dummy_var_22, cmdloc_dummy_var_23, $p16, $p18, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_24;
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 99);
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 16);
    goto $bb3;
}



const eth_validate_addr: ref;

axiom eth_validate_addr == $sub.ref(0, 305782);

procedure eth_validate_addr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation eth_validate_addr($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 1} true;
    call {:si_unique_call 609} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 610} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ks8851_net_ioctl: ref;

axiom ks8851_net_ioctl == $sub.ref(0, 306814);

procedure ks8851_net_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ks8851_net_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} {:cexpr "ks8851_net_ioctl:arg:cmd"} boogie_si_record_i32($i2);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $p3 := netdev_priv($p0);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $i5 := netif_running($p0);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 614} {:cexpr "tmp___0"} boogie_si_record_i8($i6);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $p11 := if_mii($p1);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 1144)), $mul.ref(296, 1));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $i13 := generic_mii_ioctl($p12, $p11, $i2, $0.ref);
    call {:si_unique_call 617} {:cexpr "tmp___3"} boogie_si_record_i32($i13);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i10 := $i13;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const eth_change_mtu: ref;

axiom eth_change_mtu == $sub.ref(0, 307846);

procedure eth_change_mtu($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation eth_change_mtu($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 618} {:cexpr "eth_change_mtu:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 1} true;
    call {:si_unique_call 619} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 620} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const if_mii: ref;

axiom if_mii == $sub.ref(0, 308878);

procedure if_mii($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation if_mii($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const generic_mii_ioctl: ref;

axiom generic_mii_ioctl == $sub.ref(0, 309910);

procedure generic_mii_ioctl($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation generic_mii_ioctl($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 621} {:cexpr "generic_mii_ioctl:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 1} true;
    call {:si_unique_call 622} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 623} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const crc32_le: ref;

axiom crc32_le == $sub.ref(0, 310942);

procedure crc32_le($i0: i32, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation crc32_le($i0: i32, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 624} {:cexpr "crc32_le:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 625} {:cexpr "crc32_le:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 1} true;
    call {:si_unique_call 626} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 627} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const bitrev32: ref;

axiom bitrev32 == $sub.ref(0, 311974);

procedure bitrev32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation bitrev32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 628} {:cexpr "bitrev32:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 1} true;
    call {:si_unique_call 629} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 630} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 313006);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} _raw_spin_lock($p2);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    return;
}



const memcmp: ref;

axiom memcmp == $sub.ref(0, 314038);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 315070);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, system_wq);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i2 := queue_work($p1, $p0);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 633} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 316102);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} _raw_spin_unlock($p2);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 317134);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 318166);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $i2 := queue_work_on(8192, $p0, $p1);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 636} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 319198);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 637} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 1} true;
    call {:si_unique_call 638} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 639} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 320230);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    return;
}



const calc_txlen: ref;

axiom calc_txlen == $sub.ref(0, 321262);

procedure calc_txlen($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation calc_txlen($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} {:cexpr "calc_txlen:arg:len"} boogie_si_record_i32($i0);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i1 := $add.i32($i0, 7);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, $sub.i32(0, 4));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const skb_queue_tail: ref;

axiom skb_queue_tail == $sub.ref(0, 322294);

procedure skb_queue_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation skb_queue_tail($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 323326);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 641} __VERIFIER_error();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const choose_interrupt_2: ref;

axiom choose_interrupt_2 == $sub.ref(0, 324358);

procedure choose_interrupt_2();
  free requires assertsPassed;
  modifies $M.28, $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr, $M.25, $M.24;



implementation choose_interrupt_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 1} true;
    call {:si_unique_call 642} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 643} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 644} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} ldv_stop();
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i18 := $M.37;
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i19 := $M.38;
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p20 := $M.39;
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $i21 := ldv_irq_2($i18, $i19, $p20);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $M.28 := $i21;
    call {:si_unique_call 648} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i21);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i14 := $M.34;
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i15 := $M.35;
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p16 := $M.36;
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $i17 := ldv_irq_2($i14, $i15, $p16);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $M.28 := $i17;
    call {:si_unique_call 646} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i17);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i10 := $M.31;
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i11 := $M.32;
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p12 := $M.33;
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} $i13 := ldv_irq_2($i10, $i11, $p12);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $M.28 := $i13;
    call {:si_unique_call 650} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i13);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i6 := $M.28;
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i7 := $M.29;
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p8 := $M.30;
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i9 := ldv_irq_2($i6, $i7, $p8);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $M.28 := $i9;
    call {:si_unique_call 652} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i9);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const ldv_irq_2: ref;

axiom ldv_irq_2 == $sub.ref(0, 325390);

procedure ldv_irq_2($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr, $M.25, $M.24;



implementation ldv_irq_2($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i13: i1;
  var $i14: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} {:cexpr "ldv_irq_2:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 655} {:cexpr "ldv_irq_2:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i12 := $i0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 1} true;
    call {:si_unique_call 656} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 657} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 658} {:cexpr "tmp"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} ldv_stop();
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, 2);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19:
    assume $i13 == 1;
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $i14 := ks8851_irq($i1, $p2);
    call {:si_unique_call 664} {:cexpr "irq_retval"} boogie_si_record_i32($i14);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb16;

  $bb4:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i0, 1);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i8 == 1;
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $i9 := ldv_handler1_2($i1, $p2);
    call {:si_unique_call 661} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb16;

  $bb13:
    assume $i10 == 1;
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i11 := 2;
    goto $bb15;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 326422);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_handler1_2: ref;

axiom ldv_handler1_2 == $sub.ref(0, 327454);

procedure ldv_handler1_2($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_handler1_2($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 666} {:cexpr "ldv_handler1_2:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 1} true;
    call {:si_unique_call 667} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 668} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_irq_1: ref;

axiom ldv_irq_1 == $sub.ref(0, 328486);

procedure ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr, $M.25, $M.24;



implementation ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i13: i1;
  var $i14: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} {:cexpr "ldv_irq_1:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 670} {:cexpr "ldv_irq_1:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i12 := $i0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 1} true;
    call {:si_unique_call 671} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 672} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 673} {:cexpr "tmp"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} ldv_stop();
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, 2);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19:
    assume $i13 == 1;
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $i14 := ks8851_irq($i1, $p2);
    call {:si_unique_call 679} {:cexpr "irq_retval"} boogie_si_record_i32($i14);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb16;

  $bb4:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i0, 1);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i8 == 1;
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $i9 := ldv_handler1_1($i1, $p2);
    call {:si_unique_call 676} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb16;

  $bb13:
    assume $i10 == 1;
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i11 := 2;
    goto $bb15;
}



const ldv_handler1_1: ref;

axiom ldv_handler1_1 == $sub.ref(0, 329518);

procedure ldv_handler1_1($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_handler1_1($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 681} {:cexpr "ldv_handler1_1:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 1} true;
    call {:si_unique_call 682} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 683} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_initialize_spi_driver_3: ref;

axiom ldv_initialize_spi_driver_3 == $sub.ref(0, 330550);

procedure ldv_initialize_spi_driver_3();
  free requires assertsPassed;
  modifies $M.41, $M.0, $CurrAddr;



implementation ldv_initialize_spi_driver_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $p0 := ldv_zalloc(1496);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $M.41 := $p0;
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dev_pm_ops_4: ref;

axiom ldv_dev_pm_ops_4 == $sub.ref(0, 331582);

procedure ldv_dev_pm_ops_4();
  free requires assertsPassed;
  modifies $M.42, $M.0, $CurrAddr;



implementation ldv_dev_pm_ops_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $p0 := ldv_zalloc(1416);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $M.42 := $p0;
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_ethtool_ops_5: ref;

axiom ldv_initialize_ethtool_ops_5 == $sub.ref(0, 332614);

procedure ldv_initialize_ethtool_ops_5();
  free requires assertsPassed;
  modifies $M.43, $M.44, $M.45, $M.0, $CurrAddr;



implementation ldv_initialize_ethtool_ops_5()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $p0 := ldv_zalloc(44);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $M.43 := $p0;
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p2 := ldv_zalloc(16);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $M.44 := $p2;
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $p4 := ldv_zalloc(3264);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $M.45 := $p4;
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    return;
}



const choose_interrupt_1: ref;

axiom choose_interrupt_1 == $sub.ref(0, 333646);

procedure choose_interrupt_1();
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.3, $CurrAddr, $M.25, $M.24;



implementation choose_interrupt_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 1} true;
    call {:si_unique_call 689} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 690} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 691} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} ldv_stop();
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i18 := $M.9;
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i19 := $M.10;
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p20 := $M.21;
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $i21 := ldv_irq_1($i18, $i19, $p20);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $M.3 := $i21;
    call {:si_unique_call 695} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i21);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i14 := $M.7;
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i15 := $M.8;
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p16 := $M.20;
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $i17 := ldv_irq_1($i14, $i15, $p16);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $M.3 := $i17;
    call {:si_unique_call 693} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i17);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i10 := $M.5;
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i11 := $M.6;
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p12 := $M.19;
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $i13 := ldv_irq_1($i10, $i11, $p12);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $M.3 := $i13;
    call {:si_unique_call 697} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i13);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i6 := $M.3;
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i7 := $M.4;
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p8 := $M.18;
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $i9 := ldv_irq_1($i6, $i7, $p8);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $M.3 := $i9;
    call {:si_unique_call 699} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i9);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const main: ref;

axiom main == $sub.ref(0, 334678);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.25, $M.24, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.3, $M.74, $M.43, $M.44, $M.45, $M.41, $M.42, $M.75, $M.28, $M.27, $M.9, $M.7, $M.5, $M.37, $M.34, $M.31, $M.17, $M.29, $M.30, $M.32, $M.33, $M.35, $M.36, $M.38, $M.39, $M.4, $M.6, $M.8, $M.10, $M.18, $M.19, $M.20, $M.21, $M.23, $M.1, $M.99, $CurrAddr, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $i102: i32;
  var $i103: i1;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i1;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i1;
  var $i133: i1;
  var $i134: i1;
  var $i135: i1;
  var $i136: i1;
  var $i137: i1;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $i141: i32;
  var $i142: i32;
  var $i143: i1;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $i153: i32;
  var $i154: i32;
  var $i155: i1;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $i159: i32;
  var $i160: i32;
  var $i161: i1;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $i165: i32;
  var $i166: i32;
  var $i167: i1;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $i171: i32;
  var $i172: i32;
  var $i173: i1;
  var $i174: i32;
  var $i175: i1;
  var $i176: i32;
  var $i177: i32;
  var $i178: i1;
  var $i179: i32;
  var $i180: i1;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $i184: i32;
  var $i185: i1;
  var $i186: i32;
  var $i187: i32;
  var $i188: i1;
  var $i189: i32;
  var $i190: i1;
  var $i191: i32;
  var $i192: i32;
  var $i193: i1;
  var $i194: i32;
  var $i195: i1;
  var $i196: i32;
  var $i197: i32;
  var $i198: i1;
  var $i199: i32;
  var $i200: i1;
  var $i201: i32;
  var $i202: i32;
  var $i203: i1;
  var $i204: i32;
  var $i205: i1;
  var $i206: i32;
  var $i207: i32;
  var $i208: i1;
  var $i209: i32;
  var $i210: i32;
  var $i211: i32;
  var $i212: i1;
  var $i213: i32;
  var $i214: i32;
  var $i215: i1;
  var $i216: i32;
  var $i217: i1;
  var $i218: i32;
  var $i219: i32;
  var $i220: i1;
  var $i221: i32;
  var $i222: i1;
  var $i223: i32;
  var $i224: i32;
  var $i225: i1;
  var $i226: i32;
  var $i227: i1;
  var $i228: i32;
  var $i229: i32;
  var $i230: i1;
  var $i231: i32;
  var $i232: i1;
  var $i233: i32;
  var $i234: i32;
  var $i235: i1;
  var $i236: i32;
  var $i237: i1;
  var $i238: i32;
  var $i239: i32;
  var $i240: i1;
  var $i241: i32;
  var $i242: i1;
  var $i244: i32;
  var $i245: i32;
  var $i246: i32;
  var $i247: i1;
  var $i248: i32;
  var $i249: i1;
  var $i250: i32;
  var $i251: i1;
  var $i252: i1;
  var $i253: i1;
  var $i254: i32;
  var $i255: i1;
  var $i256: i32;
  var $i257: i1;
  var $i258: i32;
  var $i259: i1;
  var $i260: i32;
  var $i261: i32;
  var $i262: i1;
  var $i263: i32;
  var $i264: i1;
  var $i265: i32;
  var $i266: i1;
  var $i267: i32;
  var $i268: i1;
  var $i269: i1;
  var $i270: i1;
  var $i271: i32;
  var $i272: i1;
  var $p273: ref;
  var $i274: i32;
  var $i275: i32;
  var $i276: i1;
  var $i277: i32;
  var $i278: i32;
  var $i279: i32;
  var $i280: i1;
  var $p281: ref;
  var $i283: i32;
  var $i284: i32;
  var $i285: i32;
  var $i286: i1;
  var $i287: i32;
  var $i288: i1;
  var $i289: i32;
  var $i290: i1;
  var $i291: i1;
  var $i292: i1;
  var $i293: i1;
  var $i294: i1;
  var $i295: i1;
  var $i296: i1;
  var $i297: i1;
  var $i298: i1;
  var $i299: i1;
  var $i300: i1;
  var $i301: i32;
  var $i302: i1;
  var $p303: ref;
  var $p304: ref;
  var $i306: i32;
  var $i307: i1;
  var $p308: ref;
  var $i309: i32;
  var $i310: i1;
  var $p311: ref;
  var $i312: i32;
  var $i313: i1;
  var $p314: ref;
  var $i316: i32;
  var $i317: i1;
  var $p318: ref;
  var $p319: ref;
  var $i321: i32;
  var $i322: i1;
  var $p323: ref;
  var $p324: ref;
  var $i326: i32;
  var $i327: i1;
  var $p328: ref;
  var $i330: i32;
  var $i331: i1;
  var $p332: ref;
  var $p333: ref;
  var $i335: i32;
  var $i336: i1;
  var $p337: ref;
  var $i339: i32;
  var $i340: i1;
  var $p341: ref;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;

  $bb0:
    call {:si_unique_call 701} $initialize();
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $p0 := ldv_zalloc(232);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $p2 := ldv_zalloc(40);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 1} true;
    call {:si_unique_call 705} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 706} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 707} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $p5 := ldv_zalloc(1);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 1} true;
    call {:si_unique_call 709} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 710} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    call {:si_unique_call 711} {:cexpr "tmp___3"} boogie_si_record_i32($i6);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $p7 := ldv_zalloc(196);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 1} true;
    call {:si_unique_call 713} $i9 := __VERIFIER_nondet_u32();
    call {:si_unique_call 714} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i9);
    call {:si_unique_call 715} {:cexpr "tmp___5"} boogie_si_record_i32($i9);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $p10 := ldv_zalloc(1);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $p11 := ldv_zalloc(1);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} ldv_initialize();
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $M.2 := 0;
    call {:si_unique_call 719} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $M.46 := 0;
    call {:si_unique_call 720} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 721} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $M.48 := 0;
    call {:si_unique_call 722} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 723} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $M.50 := 0;
    call {:si_unique_call 724} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 725} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $M.52 := 0;
    call {:si_unique_call 726} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $p37, $i39, $i40, $p41, $i43, $i44, $p45, $i47, $i48, $p49, $i50, $i51, $p52, $i53, $i54, $p55, $i56, $i57, $p58, $i60, $i61, $p62, $i64, $i65, $p66, $i68, $i69, $p70, $i72, $i73, $p74, $i76, $i77, $p78, $i80, $i81, $p82, $i83, $i84, $i85, $i86, $i87, $p88, $i90, $i91, $p92, $i94, $i95, $p96, $i98, $i99, $p100, $i102, $i103, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $p140, $i141, $i142, $i143, $i144, $i145, $p146, $i147, $i148, $i149, $i150, $i151, $p152, $i153, $i154, $i155, $i156, $i157, $p158, $i159, $i160, $i161, $i162, $i163, $p164, $i165, $i166, $i167, $i168, $i169, $p170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $p273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $p281, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $i300, $i301, $i302, $p303, $p304, $i306, $i307, $p308, $i309, $i310, $p311, $i312, $i313, $p314, $i316, $i317, $p318, $p319, $i321, $i322, $p323, $p324, $i326, $i327, $p328, $i330, $i331, $p332, $p333, $i335, $i336, $p337, $i339, $i340, $p341, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103 := main_loop_$bb1($p1, $p3, $i4, $p5, $i6, $p8, $i9, $p10, $p11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $p37, $i39, $i40, $p41, $i43, $i44, $p45, $i47, $i48, $p49, $i50, $i51, $p52, $i53, $i54, $p55, $i56, $i57, $p58, $i60, $i61, $p62, $i64, $i65, $p66, $i68, $i69, $p70, $i72, $i73, $p74, $i76, $i77, $p78, $i80, $i81, $p82, $i83, $i84, $i85, $i86, $i87, $p88, $i90, $i91, $p92, $i94, $i95, $p96, $i98, $i99, $p100, $i102, $i103, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $p140, $i141, $i142, $i143, $i144, $i145, $p146, $i147, $i148, $i149, $i150, $i151, $p152, $i153, $i154, $i155, $i156, $i157, $p158, $i159, $i160, $i161, $i162, $i163, $p164, $i165, $i166, $i167, $i168, $i169, $p170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $p273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $p281, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $i300, $i301, $i302, $p303, $p304, $i306, $i307, $p308, $i309, $i310, $p311, $i312, $i313, $p314, $i316, $i317, $p318, $p319, $i321, $i322, $p323, $p324, $i326, $i327, $p328, $i330, $i331, $p332, $p333, $i335, $i336, $p337, $i339, $i340, $p341, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i12, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i12, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} ldv_stop();
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb113_dummy;

  $bb9:
    assume $i16 == 1;
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i287 := $M.52;
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i288 := $ne.i32($i287, 0);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  $bb341:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb340:
    assume $i288 == 1;
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 1} true;
    call {:si_unique_call 871} $i289 := __VERIFIER_nondet_int();
    call {:si_unique_call 872} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i289);
    call {:si_unique_call 873} {:cexpr "tmp___13"} boogie_si_record_i32($i289);
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    $i290 := $slt.i32($i289, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb343, $bb344;

  $bb344:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    $i291 := $slt.i32($i289, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb345, $bb346;

  $bb346:
    assume !($i291 == 1);
    assume {:verifier.code 0} true;
    $i292 := $slt.i32($i289, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  $bb348:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    $i293 := $slt.i32($i289, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb349, $bb350;

  $bb350:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i289, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb351, $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    assume !($i294 == 1);
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} ldv_stop();
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb351:
    assume $i294 == 1;
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i339 := $M.52;
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i340 := $eq.i32($i339, 1);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb394, $bb395;

  $bb395:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb394:
    assume $i340 == 1;
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p341 := $M.45;
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} vslice_dummy_var_103 := ks8851_get_link($p341);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 893} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb349:
    assume $i293 == 1;
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i335 := $M.52;
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i336 := $eq.i32($i335, 1);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  $bb392:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb391:
    assume $i336 == 1;
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p337 := $M.45;
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} vslice_dummy_var_102 := ks8851_get_msglevel($p337);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 891} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb347:
    assume $i292 == 1;
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i330 := $M.52;
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i331 := $eq.i32($i330, 1);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb388, $bb389;

  $bb389:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb388:
    assume $i331 == 1;
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p332 := $M.45;
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p333 := $M.44;
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} vslice_dummy_var_101 := ks8851_set_eeprom($p332, $p333, $p10);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 889} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb345:
    assume $i291 == 1;
    assume {:verifier.code 0} true;
    $i295 := $slt.i32($i289, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb354, $bb355;

  $bb355:
    assume !($i295 == 1);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i326 := $M.52;
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i327 := $eq.i32($i326, 1);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb385, $bb386;

  $bb386:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb385:
    assume $i327 == 1;
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p328 := $M.45;
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} vslice_dummy_var_100 := ks8851_nway_reset($p328);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 887} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb354:
    assume $i295 == 1;
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i321 := $M.52;
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i322 := $eq.i32($i321, 1);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  $bb383:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb382:
    assume $i322 == 1;
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p323 := $M.45;
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p324 := $M.44;
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} vslice_dummy_var_99 := ks8851_get_eeprom($p323, $p324, $p11);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 885} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb343:
    assume $i290 == 1;
    assume {:verifier.code 0} true;
    $i296 := $slt.i32($i289, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    $i297 := $slt.i32($i289, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  $bb359:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    $i298 := $slt.i32($i289, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb360, $bb361;

  $bb361:
    assume !($i298 == 1);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i316 := $M.52;
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i316, 1);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  $bb380:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb379:
    assume $i317 == 1;
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p318 := $M.45;
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p319 := $M.43;
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} vslice_dummy_var_98 := ks8851_set_settings($p318, $p319);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 883} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb360:
    assume $i298 == 1;
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i312 := $M.52;
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i313 := $eq.i32($i312, 1);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  $bb377:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb376:
    assume $i313 == 1;
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $p314 := $M.45;
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} vslice_dummy_var_97 := ks8851_get_eeprom_len($p314);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 881} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb358:
    assume $i297 == 1;
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i309 := $M.52;
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i310 := $eq.i32($i309, 1);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  $bb374:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb373:
    assume $i310 == 1;
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p311 := $M.45;
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} ks8851_set_msglevel($p311, $i9);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 879} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb356:
    assume $i296 == 1;
    assume {:verifier.code 0} true;
    $i299 := $slt.i32($i289, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  $bb363:
    assume !($i299 == 1);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i306 := $M.52;
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i307 := $eq.i32($i306, 1);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  $bb371:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb370:
    assume $i307 == 1;
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p308 := $M.45;
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} ks8851_get_drvinfo($p308, $p8);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 877} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb362:
    assume $i299 == 1;
    assume {:verifier.code 0} true;
    $i300 := $eq.i32($i289, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    assume !($i300 == 1);
    goto $bb353;

  $bb364:
    assume $i300 == 1;
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i301 := $M.52;
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i301, 1);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb366, $bb367;

  $bb367:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb366:
    assume $i302 == 1;
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p303 := $M.45;
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p304 := $M.43;
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} vslice_dummy_var_96 := ks8851_get_settings($p303, $p304);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 875} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i285 := $M.51;
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i286 := $ne.i32($i285, 0);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  $bb338:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb337:
    assume $i286 == 1;
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} choose_interrupt_2();
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb5:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i12, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i17 == 1);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i265 := $M.50;
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i266 := $ne.i32($i265, 0);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb314:
    assume $i266 == 1;
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 1} true;
    call {:si_unique_call 859} $i267 := __VERIFIER_nondet_int();
    call {:si_unique_call 860} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i267);
    call {:si_unique_call 861} {:cexpr "tmp___12"} boogie_si_record_i32($i267);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    $i268 := $slt.i32($i267, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i267, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    assume !($i269 == 1);
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} ldv_stop();
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb319:
    assume $i269 == 1;
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i279 := $M.50;
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i280 := $eq.i32($i279, 2);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  $bb332:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb331:
    assume $i280 == 1;
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p281 := $M.41;
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} vslice_dummy_var_95 := ks8851_remove($p281);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 867} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i283 := $M.48;
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i284 := $sub.i32($i283, 1);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $M.48 := $i284;
    call {:si_unique_call 868} {:cexpr "ref_cnt"} boogie_si_record_i32($i284);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb317:
    assume $i268 == 1;
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i267, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    assume !($i270 == 1);
    goto $bb321;

  $bb322:
    assume $i270 == 1;
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i271 := $M.50;
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i272 := $eq.i32($i271, 1);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb324:
    assume $i272 == 1;
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p273 := $M.41;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $i274 := ks8851_probe($p273);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $M.75 := $i274;
    call {:si_unique_call 863} {:cexpr "ldv_retval_22"} boogie_si_record_i32($i274);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i275 := $M.75;
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i276 := $eq.i32($i275, 0);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb327:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb326:
    assume $i276 == 1;
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 864} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i277 := $M.48;
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i278 := $add.i32($i277, 1);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $M.48 := $i278;
    call {:si_unique_call 865} {:cexpr "ref_cnt"} boogie_si_record_i32($i278);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb12:
    assume $i17 == 1;
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i248 := $M.49;
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i249 := $ne.i32($i248, 0);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb284:
    assume $i249 == 1;
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 1} true;
    call {:si_unique_call 842} $i250 := __VERIFIER_nondet_int();
    call {:si_unique_call 843} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i250);
    call {:si_unique_call 844} {:cexpr "tmp___11"} boogie_si_record_i32($i250);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    $i251 := $slt.i32($i250, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    $i252 := $eq.i32($i250, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    assume !($i252 == 1);
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} ldv_stop();
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb289:
    assume $i252 == 1;
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i258 := $M.49;
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i258, 1);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb302:
    assume $i259 == 1;
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $i260 := ks8851_driver_init();
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $M.74 := $i260;
    call {:si_unique_call 849} {:cexpr "ldv_retval_21"} boogie_si_record_i32($i260);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i261 := $M.74;
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i262 := $eq.i32($i261, 0);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    $i263 := $M.74;
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i264 := $ne.i32($i263, 0);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb307:
    assume $i264 == 1;
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 857} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} ldv_check_final_state();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb304:
    assume $i262 == 1;
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 850} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 851} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} ldv_initialize_ethtool_ops_5();
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 853} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} ldv_initialize_spi_driver_3();
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 855} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} ldv_dev_pm_ops_4();
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb287:
    assume $i251 == 1;
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i250, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    assume !($i253 == 1);
    goto $bb291;

  $bb292:
    assume $i253 == 1;
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i254 := $M.49;
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i254, 3);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    assume !($i255 == 1);
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb294:
    assume $i255 == 1;
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i256 := $M.48;
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i256, 0);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    assume !($i257 == 1);
    goto $bb296;

  $bb297:
    assume $i257 == 1;
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} ks8851_driver_exit();
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 846} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb3:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i19 == 1);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i246 := $M.47;
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i247 := $ne.i32($i246, 0);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb281:
    assume $i247 == 1;
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} choose_interrupt_1();
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb16:
    assume $i19 == 1;
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i114 := $M.46;
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb114:
    assume $i115 == 1;
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 1} true;
    call {:si_unique_call 776} $i116 := __VERIFIER_nondet_int();
    call {:si_unique_call 777} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i116);
    call {:si_unique_call 778} {:cexpr "tmp___10"} boogie_si_record_i32($i116);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $i117 := $slt.i32($i116, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i116, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    $i119 := $slt.i32($i116, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    $i120 := $slt.i32($i116, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    $i121 := $slt.i32($i116, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i116, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    assume !($i122 == 1);
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} ldv_stop();
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb127:
    assume $i122 == 1;
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i241 := $M.46;
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i241, 15);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb275:
    assume $i242 == 1;
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} vslice_dummy_var_94 := ldv_complete_4();
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 838} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i244 := $M.48;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i245 := $sub.i32($i244, 1);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $M.48 := $i245;
    call {:si_unique_call 839} {:cexpr "ref_cnt"} boogie_si_record_i32($i245);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb125:
    assume $i121 == 1;
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i236 := $M.46;
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i236, 3);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb269:
    assume $i237 == 1;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $i238 := ldv_suspend_noirq_4();
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $M.73 := $i238;
    call {:si_unique_call 835} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i238);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i239 := $M.73;
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i239, 0);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb271:
    assume $i240 == 1;
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $M.46 := 7;
    call {:si_unique_call 836} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(7);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb123:
    assume $i120 == 1;
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i231 := $M.46;
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i232 := $eq.i32($i231, 8);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb263:
    assume $i232 == 1;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $i233 := ldv_restore_noirq_4();
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $M.72 := $i233;
    call {:si_unique_call 832} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i233);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i234 := $M.72;
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 0);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  $bb266:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb265:
    assume $i235 == 1;
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $M.46 := 13;
    call {:si_unique_call 833} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(13);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb121:
    assume $i119 == 1;
    assume {:verifier.code 0} true;
    $i123 := $slt.i32($i116, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i123 == 1);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i226 := $M.46;
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i226, 4);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb257:
    assume $i227 == 1;
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $i228 := ldv_poweroff_late_4();
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $M.71 := $i228;
    call {:si_unique_call 829} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i228);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i229 := $M.71;
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, 0);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb259:
    assume $i230 == 1;
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $M.46 := 9;
    call {:si_unique_call 830} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(9);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb130:
    assume $i123 == 1;
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i221 := $M.46;
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, 4);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb251:
    assume $i222 == 1;
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $i223 := ldv_poweroff_noirq_4();
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $M.70 := $i223;
    call {:si_unique_call 826} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i223);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i224 := $M.70;
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i224, 0);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb253:
    assume $i225 == 1;
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $M.46 := 8;
    call {:si_unique_call 827} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(8);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb119:
    assume $i118 == 1;
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i116, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    $i125 := $slt.i32($i116, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    $i126 := $slt.i32($i116, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i126 == 1);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i216 := $M.46;
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i216, 10);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb245:
    assume $i217 == 1;
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $i218 := ldv_thaw_noirq_4();
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $M.69 := $i218;
    call {:si_unique_call 823} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i218);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i219 := $M.69;
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i220 := $eq.i32($i219, 0);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb247:
    assume $i220 == 1;
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $M.46 := 14;
    call {:si_unique_call 824} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(14);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb136:
    assume $i126 == 1;
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i211 := $M.46;
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i211, 5);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb239:
    assume $i212 == 1;
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $i213 := ldv_freeze_late_4();
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $M.68 := $i213;
    call {:si_unique_call 820} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i213);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i214 := $M.68;
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i214, 0);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb241:
    assume $i215 == 1;
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $M.46 := 11;
    call {:si_unique_call 821} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(11);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb134:
    assume $i125 == 1;
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i204 := $M.46;
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i204, 1);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb233:
    assume $i205 == 1;
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $i206 := ldv_prepare_4();
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $M.67 := $i206;
    call {:si_unique_call 816} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i206);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i207 := $M.67;
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i207, 0);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb235:
    assume $i208 == 1;
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 817} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i209 := $M.48;
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i210 := $add.i32($i209, 1);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $M.48 := $i210;
    call {:si_unique_call 818} {:cexpr "ref_cnt"} boogie_si_record_i32($i210);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb132:
    assume $i124 == 1;
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i116, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i127 == 1);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i199 := $M.46;
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 5);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb227:
    assume $i200 == 1;
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $i201 := ldv_freeze_noirq_4();
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $M.66 := $i201;
    call {:si_unique_call 813} {:cexpr "ldv_retval_9"} boogie_si_record_i32($i201);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i202 := $M.66;
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i202, 0);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb229:
    assume $i203 == 1;
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $M.46 := 10;
    call {:si_unique_call 814} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(10);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb138:
    assume $i127 == 1;
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i194 := $M.46;
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 7);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb221:
    assume $i195 == 1;
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $i196 := ldv_resume_noirq_4();
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $M.65 := $i196;
    call {:si_unique_call 810} {:cexpr "ldv_retval_10"} boogie_si_record_i32($i196);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i197 := $M.65;
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i198 := $eq.i32($i197, 0);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb223:
    assume $i198 == 1;
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $M.46 := 12;
    call {:si_unique_call 811} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(12);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb117:
    assume $i117 == 1;
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i116, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i116, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    $i130 := $slt.i32($i116, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    $i131 := $slt.i32($i116, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i131 == 1);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i189 := $M.46;
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i189, 11);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb215:
    assume $i190 == 1;
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $i191 := ldv_thaw_early_4();
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $M.64 := $i191;
    call {:si_unique_call 807} {:cexpr "ldv_retval_11"} boogie_si_record_i32($i191);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i192 := $M.64;
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i193 := $eq.i32($i192, 0);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb217:
    assume $i193 == 1;
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $M.46 := 14;
    call {:si_unique_call 808} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(14);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb146:
    assume $i131 == 1;
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i184 := $M.46;
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 6);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb209:
    assume $i185 == 1;
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $i186 := ldv_resume_early_4();
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $M.63 := $i186;
    call {:si_unique_call 804} {:cexpr "ldv_retval_12"} boogie_si_record_i32($i186);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i187 := $M.63;
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 0);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb211:
    assume $i188 == 1;
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $M.46 := 12;
    call {:si_unique_call 805} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(12);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb144:
    assume $i130 == 1;
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i179 := $M.46;
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 9);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb203:
    assume $i180 == 1;
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $i181 := ldv_restore_early_4();
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $M.62 := $i181;
    call {:si_unique_call 801} {:cexpr "ldv_retval_13"} boogie_si_record_i32($i181);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i182 := $M.62;
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, 0);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb205:
    assume $i183 == 1;
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $M.46 := 13;
    call {:si_unique_call 802} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(13);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb142:
    assume $i129 == 1;
    assume {:verifier.code 0} true;
    $i132 := $slt.i32($i116, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i132 == 1);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i174 := $M.46;
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i174, 3);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb197:
    assume $i175 == 1;
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $i176 := ldv_suspend_late_4();
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $M.61 := $i176;
    call {:si_unique_call 798} {:cexpr "ldv_retval_14"} boogie_si_record_i32($i176);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i177 := $M.61;
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, 0);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb199:
    assume $i178 == 1;
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $M.46 := 6;
    call {:si_unique_call 799} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(6);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb148:
    assume $i132 == 1;
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i168 := $M.46;
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i168, 12);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb191:
    assume $i169 == 1;
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p170 := $M.42;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $i171 := ks8851_resume($p170);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $M.60 := $i171;
    call {:si_unique_call 795} {:cexpr "ldv_retval_15"} boogie_si_record_i32($i171);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i172 := $M.60;
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 0);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb193:
    assume $i173 == 1;
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $M.46 := 15;
    call {:si_unique_call 796} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(15);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb140:
    assume $i128 == 1;
    assume {:verifier.code 0} true;
    $i133 := $slt.i32($i116, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    $i134 := $slt.i32($i116, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    $i135 := $slt.i32($i116, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i135 == 1);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i162 := $M.46;
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 2);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb185:
    assume $i163 == 1;
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $p164 := $M.42;
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $i165 := ks8851_suspend($p164);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $M.59 := $i165;
    call {:si_unique_call 792} {:cexpr "ldv_retval_16"} boogie_si_record_i32($i165);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i166 := $M.59;
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 0);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb187:
    assume $i167 == 1;
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $M.46 := 5;
    call {:si_unique_call 793} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(5);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb154:
    assume $i135 == 1;
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i156 := $M.46;
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 2);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb179:
    assume $i157 == 1;
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p158 := $M.42;
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $i159 := ks8851_suspend($p158);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $M.58 := $i159;
    call {:si_unique_call 789} {:cexpr "ldv_retval_17"} boogie_si_record_i32($i159);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i160 := $M.58;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 0);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb181:
    assume $i161 == 1;
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 790} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb152:
    assume $i134 == 1;
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i150 := $M.46;
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 13);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb173:
    assume $i151 == 1;
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p152 := $M.42;
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $i153 := ks8851_resume($p152);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $M.57 := $i153;
    call {:si_unique_call 786} {:cexpr "ldv_retval_18"} boogie_si_record_i32($i153);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i154 := $M.57;
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 0);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb175:
    assume $i155 == 1;
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $M.46 := 15;
    call {:si_unique_call 787} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(15);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb150:
    assume $i133 == 1;
    assume {:verifier.code 0} true;
    $i136 := $slt.i32($i116, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i136 == 1);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i144 := $M.46;
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 2);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb167:
    assume $i145 == 1;
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p146 := $M.42;
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $i147 := ks8851_suspend($p146);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $M.56 := $i147;
    call {:si_unique_call 783} {:cexpr "ldv_retval_19"} boogie_si_record_i32($i147);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i148 := $M.56;
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 0);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb169:
    assume $i149 == 1;
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 784} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb156:
    assume $i136 == 1;
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i116, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    assume !($i137 == 1);
    goto $bb129;

  $bb158:
    assume $i137 == 1;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i138 := $M.46;
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 14);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb160:
    assume $i139 == 1;
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p140 := $M.42;
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i141 := ks8851_resume($p140);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $M.55 := $i141;
    call {:si_unique_call 780} {:cexpr "ldv_retval_20"} boogie_si_record_i32($i141);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i142 := $M.55;
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 0);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb162:
    assume $i143 == 1;
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $M.46 := 15;
    call {:si_unique_call 781} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(15);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb14:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb11;

  $bb18:
    assume $i20 == 1;
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i21 := $M.2;
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb20:
    assume $i22 == 1;
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 1} true;
    call {:si_unique_call 730} $i23 := __VERIFIER_nondet_int();
    call {:si_unique_call 731} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i23);
    call {:si_unique_call 732} {:cexpr "tmp___9"} boogie_si_record_i32($i23);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i23, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i23, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i23, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i23, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} ldv_stop();
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb31:
    assume $i28 == 1;
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i107 := $M.2;
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 1);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb104:
    assume $i108 == 1;
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $i109 := ldv_ndo_init_6();
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $M.54 := $i109;
    call {:si_unique_call 772} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i109);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i110 := $M.54;
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 0);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb106:
    assume $i111 == 1;
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $M.2 := 2;
    call {:si_unique_call 773} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i112 := $M.48;
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i112, 1);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $M.48 := $i113;
    call {:si_unique_call 774} {:cexpr "ref_cnt"} boogie_si_record_i32($i113);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb29:
    assume $i27 == 1;
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i102 := $M.2;
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 2);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb101:
    assume $i103 == 1;
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} vslice_dummy_var_93 := ldv_ndo_uninit_6();
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 769} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i105 := $M.48;
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32($i105, 1);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $M.48 := $i106;
    call {:si_unique_call 770} {:cexpr "ref_cnt"} boogie_si_record_i32($i106);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb27:
    assume $i26 == 1;
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i90 := $M.2;
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 1);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i94 := $M.2;
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 3);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i98 := $M.2;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 2);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb98:
    assume $i99 == 1;
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p100 := $M.17;
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} vslice_dummy_var_92 := ks8851_set_mac_address($p100, $p5);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $M.2 := 2;
    call {:si_unique_call 767} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb95:
    assume $i95 == 1;
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $p96 := $M.17;
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} vslice_dummy_var_91 := ks8851_set_mac_address($p96, $p5);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $M.2 := 3;
    call {:si_unique_call 765} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb92:
    assume $i91 == 1;
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p92 := $M.17;
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} vslice_dummy_var_90 := ks8851_set_mac_address($p92, $p5);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 763} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb25:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i23, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i29 == 1);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i86 := $M.2;
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 3);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb89:
    assume $i87 == 1;
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p88 := $M.17;
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} vslice_dummy_var_89 := ks8851_start_xmit($p1, $p88);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $M.2 := 3;
    call {:si_unique_call 761} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb34:
    assume $i29 == 1;
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i80 := $M.2;
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 2);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb83:
    assume $i81 == 1;
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p82 := $M.17;
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $i83 := ks8851_net_open($p82);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $M.53 := $i83;
    call {:si_unique_call 758} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i83);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i84 := $M.53;
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 0);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb85:
    assume $i85 == 1;
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $M.2 := 3;
    call {:si_unique_call 759} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb23:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i23, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i23, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i23, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i32 == 1);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i72 := $M.2;
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 3);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i76 := $M.2;
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 2);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb80:
    assume $i77 == 1;
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p78 := $M.17;
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} vslice_dummy_var_88 := eth_change_mtu($p78, $i6);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $M.2 := 2;
    call {:si_unique_call 756} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb77:
    assume $i73 == 1;
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p74 := $M.17;
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} vslice_dummy_var_87 := eth_change_mtu($p74, $i6);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $M.2 := 3;
    call {:si_unique_call 754} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb40:
    assume $i32 == 1;
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i60 := $M.2;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 1);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i64 := $M.2;
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 3);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i68 := $M.2;
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 2);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb74:
    assume $i69 == 1;
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p70 := $M.17;
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} vslice_dummy_var_86 := ks8851_net_ioctl($p70, $p3, $i4);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $M.2 := 2;
    call {:si_unique_call 752} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb71:
    assume $i65 == 1;
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p66 := $M.17;
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} vslice_dummy_var_85 := ks8851_net_ioctl($p66, $p3, $i4);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $M.2 := 3;
    call {:si_unique_call 750} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb68:
    assume $i61 == 1;
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p62 := $M.17;
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} vslice_dummy_var_84 := ks8851_net_ioctl($p62, $p3, $i4);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 748} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb38:
    assume $i31 == 1;
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i56 := $M.2;
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 3);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb65:
    assume $i57 == 1;
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p58 := $M.17;
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} vslice_dummy_var_83 := ks8851_net_stop($p58);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $M.2 := 2;
    call {:si_unique_call 746} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb36:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i23, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i33 == 1);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i47 := $M.2;
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 1);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i50 := $M.2;
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 3);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i53 := $M.2;
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 2);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb62:
    assume $i54 == 1;
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p55 := $M.17;
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} ks8851_set_rx_mode($p55);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $M.2 := 2;
    call {:si_unique_call 744} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb59:
    assume $i51 == 1;
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p52 := $M.17;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} ks8851_set_rx_mode($p52);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $M.2 := 3;
    call {:si_unique_call 742} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb56:
    assume $i48 == 1;
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p49 := $M.17;
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} ks8851_set_rx_mode($p49);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 740} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb42:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i23, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb33;

  $bb44:
    assume $i34 == 1;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i35 := $M.2;
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 1);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i39 := $M.2;
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 3);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i43 := $M.2;
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 2);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb52:
    assume $i44 == 1;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p45 := $M.17;
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} vslice_dummy_var_82 := eth_validate_addr($p45);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $M.2 := 2;
    call {:si_unique_call 738} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume $i40 == 1;
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p41 := $M.17;
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} vslice_dummy_var_81 := eth_validate_addr($p41);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $M.2 := 3;
    call {:si_unique_call 736} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i36 == 1;
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p37 := $M.17;
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} vslice_dummy_var_80 := eth_validate_addr($p37);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 734} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb113_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 727} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 728} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 729} {:cexpr "tmp___8"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const __VERIFIER_nondet_u32: ref;

axiom __VERIFIER_nondet_u32 == $sub.ref(0, 335710);

procedure __VERIFIER_nondet_u32() returns ($r: i32);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 336742);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.24;



implementation ldv_initialize()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p0 := $M.23;
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} ldv_set_init($p0);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    return;
}



const ldv_ndo_uninit_6: ref;

axiom ldv_ndo_uninit_6 == $sub.ref(0, 337774);

procedure ldv_ndo_uninit_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_uninit_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 1} true;
    call {:si_unique_call 897} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 898} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_init_6: ref;

axiom ldv_ndo_init_6 == $sub.ref(0, 338806);

procedure ldv_ndo_init_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_init_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 1} true;
    call {:si_unique_call 899} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 900} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_suspend_late_4: ref;

axiom ldv_suspend_late_4 == $sub.ref(0, 339838);

procedure ldv_suspend_late_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_late_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 1} true;
    call {:si_unique_call 901} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 902} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_restore_early_4: ref;

axiom ldv_restore_early_4 == $sub.ref(0, 340870);

procedure ldv_restore_early_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_restore_early_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 1} true;
    call {:si_unique_call 903} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 904} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_early_4: ref;

axiom ldv_resume_early_4 == $sub.ref(0, 341902);

procedure ldv_resume_early_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_early_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 1} true;
    call {:si_unique_call 905} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 906} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_thaw_early_4: ref;

axiom ldv_thaw_early_4 == $sub.ref(0, 342934);

procedure ldv_thaw_early_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_thaw_early_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 1} true;
    call {:si_unique_call 907} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 908} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_noirq_4: ref;

axiom ldv_resume_noirq_4 == $sub.ref(0, 343966);

procedure ldv_resume_noirq_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_noirq_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 1} true;
    call {:si_unique_call 909} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 910} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_freeze_noirq_4: ref;

axiom ldv_freeze_noirq_4 == $sub.ref(0, 344998);

procedure ldv_freeze_noirq_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_freeze_noirq_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 1} true;
    call {:si_unique_call 911} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 912} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_prepare_4: ref;

axiom ldv_prepare_4 == $sub.ref(0, 346030);

procedure ldv_prepare_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_prepare_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 1} true;
    call {:si_unique_call 913} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 914} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_freeze_late_4: ref;

axiom ldv_freeze_late_4 == $sub.ref(0, 347062);

procedure ldv_freeze_late_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_freeze_late_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 1} true;
    call {:si_unique_call 915} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 916} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_thaw_noirq_4: ref;

axiom ldv_thaw_noirq_4 == $sub.ref(0, 348094);

procedure ldv_thaw_noirq_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_thaw_noirq_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 1} true;
    call {:si_unique_call 917} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 918} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_poweroff_noirq_4: ref;

axiom ldv_poweroff_noirq_4 == $sub.ref(0, 349126);

procedure ldv_poweroff_noirq_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_poweroff_noirq_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 1} true;
    call {:si_unique_call 919} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 920} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_poweroff_late_4: ref;

axiom ldv_poweroff_late_4 == $sub.ref(0, 350158);

procedure ldv_poweroff_late_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_poweroff_late_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 1} true;
    call {:si_unique_call 921} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 922} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_restore_noirq_4: ref;

axiom ldv_restore_noirq_4 == $sub.ref(0, 351190);

procedure ldv_restore_noirq_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_restore_noirq_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 1} true;
    call {:si_unique_call 923} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 924} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_suspend_noirq_4: ref;

axiom ldv_suspend_noirq_4 == $sub.ref(0, 352222);

procedure ldv_suspend_noirq_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_noirq_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 1} true;
    call {:si_unique_call 925} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 926} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_complete_4: ref;

axiom ldv_complete_4 == $sub.ref(0, 353254);

procedure ldv_complete_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_complete_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 1} true;
    call {:si_unique_call 927} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 928} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ks8851_driver_exit: ref;

axiom ks8851_driver_exit == $sub.ref(0, 354286);

procedure ks8851_driver_exit();
  free requires assertsPassed;



implementation ks8851_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} spi_unregister_driver(ks8851_driver);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    return;
}



const ks8851_driver_init: ref;

axiom ks8851_driver_init == $sub.ref(0, 355318);

procedure ks8851_driver_init() returns ($r: i32);
  free requires assertsPassed;



implementation ks8851_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $i0 := spi_register_driver(ks8851_driver);
    call {:si_unique_call 931} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 356350);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p0 := $M.23;
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $i1 := ldv_set_is_empty($p0);
    call {:si_unique_call 933} {:cexpr "tmp___7"} boogie_si_record_i32($i1);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_set_is_empty: ref;

axiom ldv_set_is_empty == $sub.ref(0, 357382);

procedure ldv_set_is_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_set_is_empty($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i1 := $M.24;
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const spi_register_driver: ref;

axiom spi_register_driver == $sub.ref(0, 358414);

procedure spi_register_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation spi_register_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 1} true;
    call {:si_unique_call 935} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 936} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spi_unregister_driver: ref;

axiom spi_unregister_driver == $sub.ref(0, 359446);

procedure spi_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation spi_unregister_driver($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(48, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} driver_unregister($p3);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const driver_unregister: ref;

axiom driver_unregister == $sub.ref(0, 360478);

procedure driver_unregister($p0: ref);
  free requires assertsPassed;



implementation driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    return;
}



const ldv_set_init: ref;

axiom ldv_set_init == $sub.ref(0, 361510);

procedure ldv_set_init($p0: ref);
  free requires assertsPassed;
  modifies $M.24;



implementation ldv_set_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 938} {:cexpr "last_index"} boogie_si_record_i32(0);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 362542);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 939} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 1} true;
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 363574);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 364606);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 365638);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 366670);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 367702);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 368734);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 369766);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 370798);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 371830);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 372862);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __VERIFIER_nondet_unsigned_short: ref;

axiom __VERIFIER_nondet_unsigned_short == $sub.ref(0, 373894);

procedure __VERIFIER_nondet_unsigned_short() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_short() returns ($r: i16)
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 1} true;
    call {:si_unique_call 940} $i0 := __SMACK_nondet_unsigned_short();
    call {:si_unique_call 941} {:cexpr "smack:ext:__SMACK_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 942} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 1} true;
    call {:si_unique_call 943} __VERIFIER_assume($i6);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 1} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 65535);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 374926);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 375958);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 376990);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 1} true;
    call {:si_unique_call 944} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 945} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 946} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 1} true;
    call {:si_unique_call 947} __VERIFIER_assume($i4);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 378022);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 379054);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 380086);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 381118);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 1} true;
    call {:si_unique_call 948} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 949} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 950} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 1} true;
    call {:si_unique_call 951} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 952} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 953} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 1} true;
    call {:si_unique_call 954} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 955} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 956} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 1} true;
    call {:si_unique_call 957} __VERIFIER_assume($i7);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 1} true;
    call {:si_unique_call 958} __VERIFIER_assume($i11);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 382150);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 383182);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 384214);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 385246);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 386278);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 387310);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 1} true;
    call {:si_unique_call 959} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 960} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 961} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 1} true;
    call {:si_unique_call 962} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 963} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 964} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 1} true;
    call {:si_unique_call 965} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 966} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 967} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 1} true;
    call {:si_unique_call 968} __VERIFIER_assume($i7);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 1} true;
    call {:si_unique_call 969} __VERIFIER_assume($i11);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 388342);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 389374);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 390406);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 391438);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 392470);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 393502);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 394534);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 395566);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 396598);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 1} true;
    call {:si_unique_call 970} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 971} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 972} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 1} true;
    call {:si_unique_call 973} __VERIFIER_assume($i10);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ushort: ref;

axiom __VERIFIER_nondet_ushort == $sub.ref(0, 397630);

procedure __VERIFIER_nondet_ushort() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ushort() returns ($r: i16)
{
  var $i0: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 1} true;
    call {:si_unique_call 974} $i0 := __VERIFIER_nondet_unsigned_short();
    call {:si_unique_call 975} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 976} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 398662);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 1} true;
    call {:si_unique_call 977} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 978} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 979} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 399694);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 1} true;
    call {:si_unique_call 980} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 981} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 982} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 400726);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 1} true;
    call {:si_unique_call 983} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 984} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 401758);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 402790);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 985} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 986} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 403822);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 404854);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 405886);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 987} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 988} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 1} true;
    call {:si_unique_call 989} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 990} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $p6 := malloc($i5);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 992} cmdloc_dummy_var_29 := $memset.i8(cmdloc_dummy_var_28, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 406918);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 407950);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.9, $M.3, $M.28, $M.7, $M.5, $M.37, $M.34, $M.31, $M.17, $M.29, $M.30, $M.32, $M.33, $M.35, $M.36, $M.38, $M.39, $M.4, $M.6, $M.8, $M.10, $M.18, $M.19, $M.20, $M.21, $M.41, $M.42, $M.43, $M.44, $M.45, $M.2, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.24, $M.23, $M.25, $M.0, $M.1, $M.99;



implementation __SMACK_static_init()
{

  $bb0:
    $M.9 := 0;
    call {:si_unique_call 993} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    $M.3 := 0;
    call {:si_unique_call 994} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    $M.28 := 0;
    call {:si_unique_call 995} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32(0);
    $M.7 := 0;
    call {:si_unique_call 996} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 997} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.5 := 0;
    call {:si_unique_call 998} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    $M.37 := 0;
    call {:si_unique_call 999} {:cexpr "ldv_irq_2_3"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 1000} {:cexpr "ldv_irq_2_2"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 1001} {:cexpr "ldv_irq_2_1"} boogie_si_record_i32(0);
    $M.17 := $0.ref;
    $M.29 := 0;
    call {:si_unique_call 1002} {:cexpr "ldv_irq_line_2_0"} boogie_si_record_i32(0);
    $M.30 := $0.ref;
    $M.32 := 0;
    call {:si_unique_call 1003} {:cexpr "ldv_irq_line_2_1"} boogie_si_record_i32(0);
    $M.33 := $0.ref;
    $M.35 := 0;
    call {:si_unique_call 1004} {:cexpr "ldv_irq_line_2_2"} boogie_si_record_i32(0);
    $M.36 := $0.ref;
    $M.38 := 0;
    call {:si_unique_call 1005} {:cexpr "ldv_irq_line_2_3"} boogie_si_record_i32(0);
    $M.39 := $0.ref;
    $M.4 := 0;
    call {:si_unique_call 1006} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
    $M.6 := 0;
    call {:si_unique_call 1007} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
    $M.8 := 0;
    call {:si_unique_call 1008} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
    $M.10 := 0;
    call {:si_unique_call 1009} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
    $M.18 := $0.ref;
    $M.19 := $0.ref;
    $M.20 := $0.ref;
    $M.21 := $0.ref;
    $M.41 := $0.ref;
    $M.42 := $0.ref;
    $M.43 := $0.ref;
    $M.44 := $0.ref;
    $M.45 := $0.ref;
    $M.2 := 0;
    call {:si_unique_call 1010} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1011} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 1012} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1013} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1014} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 1015} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 1016} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 1017} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 1018} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.54 := 0;
    call {:si_unique_call 1019} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 1020} {:cexpr "ldv_retval_20"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 1021} {:cexpr "ldv_retval_19"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 1022} {:cexpr "ldv_retval_18"} boogie_si_record_i32(0);
    $M.58 := 0;
    call {:si_unique_call 1023} {:cexpr "ldv_retval_17"} boogie_si_record_i32(0);
    $M.59 := 0;
    call {:si_unique_call 1024} {:cexpr "ldv_retval_16"} boogie_si_record_i32(0);
    $M.60 := 0;
    call {:si_unique_call 1025} {:cexpr "ldv_retval_15"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 1026} {:cexpr "ldv_retval_14"} boogie_si_record_i32(0);
    $M.62 := 0;
    call {:si_unique_call 1027} {:cexpr "ldv_retval_13"} boogie_si_record_i32(0);
    $M.63 := 0;
    call {:si_unique_call 1028} {:cexpr "ldv_retval_12"} boogie_si_record_i32(0);
    $M.64 := 0;
    call {:si_unique_call 1029} {:cexpr "ldv_retval_11"} boogie_si_record_i32(0);
    $M.65 := 0;
    call {:si_unique_call 1030} {:cexpr "ldv_retval_10"} boogie_si_record_i32(0);
    $M.66 := 0;
    call {:si_unique_call 1031} {:cexpr "ldv_retval_9"} boogie_si_record_i32(0);
    $M.67 := 0;
    call {:si_unique_call 1032} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.68 := 0;
    call {:si_unique_call 1033} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.69 := 0;
    call {:si_unique_call 1034} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.70 := 0;
    call {:si_unique_call 1035} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.71 := 0;
    call {:si_unique_call 1036} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.72 := 0;
    call {:si_unique_call 1037} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.73 := 0;
    call {:si_unique_call 1038} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.74 := 0;
    call {:si_unique_call 1039} {:cexpr "ldv_retval_21"} boogie_si_record_i32(0);
    $M.75 := 0;
    call {:si_unique_call 1040} {:cexpr "ldv_retval_22"} boogie_si_record_i32(0);
    $M.24 := 0;
    call {:si_unique_call 1041} {:cexpr "last_index"} boogie_si_record_i32(0);
    $M.23 := $0.ref;
    $M.25 := $store.ref($M.25, set_impl, $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(1, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(2, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(3, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(4, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(5, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(6, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(7, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(8, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(9, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(10, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(11, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(12, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(13, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(14, 8)), $0.ref);
    $M.0 := $store.ref($M.0, ks8851_netdev_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(16, 1)), ks8851_net_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(24, 1)), ks8851_net_stop);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(32, 1)), ks8851_start_xmit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(56, 1)), ks8851_set_rx_mode);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(64, 1)), ks8851_set_mac_address);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(72, 1)), eth_validate_addr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(80, 1)), ks8851_net_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(96, 1)), eth_change_mtu);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_netdev_ops, $mul.ref(0, 480)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, ks8851_ethtool_ops, ks8851_get_settings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(8, 1)), ks8851_set_settings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(16, 1)), ks8851_get_drvinfo);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(56, 1)), ks8851_get_msglevel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(64, 1)), ks8851_set_msglevel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(72, 1)), ks8851_nway_reset);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(80, 1)), ks8851_get_link);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(88, 1)), ks8851_get_eeprom_len);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(96, 1)), ks8851_get_eeprom);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(104, 1)), ks8851_set_eeprom);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ks8851_ethtool_ops, $mul.ref(0, 376)), $mul.ref(368, 1)), $0.ref);
    $M.1 := 0;
    call {:si_unique_call 1042} {:cexpr "msg_enable"} boogie_si_record_i32(0);
    $M.99 := $store.i8($M.99, ks8851_match_table, 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(1, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(2, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(3, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(4, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(5, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(6, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(7, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(8, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(9, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(10, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(11, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(12, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(13, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(14, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(15, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(16, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(17, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(18, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(19, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(20, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(21, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(22, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(23, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(24, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(25, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(26, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(27, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(28, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(29, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(30, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(31, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(0, 1)), 109);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(1, 1)), 105);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(2, 1)), 99);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(3, 1)), 114);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(4, 1)), 101);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(5, 1)), 108);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(6, 1)), 44);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(7, 1)), 107);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(8, 1)), 115);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(9, 1)), 56);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(10, 1)), 56);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(11, 1)), 53);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(12, 1)), 49);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(16, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(17, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(18, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(19, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(20, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(21, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(22, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(23, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(24, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(25, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(26, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(27, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(28, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(29, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(30, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(31, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(32, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(33, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(34, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(35, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(36, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(37, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(38, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(39, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(40, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(41, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(42, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(43, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(44, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(45, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(46, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(47, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(48, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(49, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(50, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(51, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(52, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(53, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(54, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(55, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(56, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(57, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(58, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(59, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(60, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(61, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(62, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(63, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(64, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(65, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(66, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(67, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(68, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(69, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(70, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(71, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(72, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(73, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(74, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(75, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(76, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(77, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(78, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(79, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(80, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(81, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(82, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(83, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(84, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(85, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(86, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(87, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(88, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(89, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(90, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(91, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(92, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(93, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(94, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(95, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(96, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(97, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(98, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(99, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(100, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(101, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(102, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(103, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(104, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(105, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(106, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(107, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(108, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(109, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(110, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(111, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(112, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(113, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(114, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(115, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(116, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(117, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(118, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(119, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(120, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(121, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(122, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(123, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(124, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(125, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(126, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(127, 1)), 0);
    $M.99 := $store.ref($M.99, $add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(192, 1)), $0.ref);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(1, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(2, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(3, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(4, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(5, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(6, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(7, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(8, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(9, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(10, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(11, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(12, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(13, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(14, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(15, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(16, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(17, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(18, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(19, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(20, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(21, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(22, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(23, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(24, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(25, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(26, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(27, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(28, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(29, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(30, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(31, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(16, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(17, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(18, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(19, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(20, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(21, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(22, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(23, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(24, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(25, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(26, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(27, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(28, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(29, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(30, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(31, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(32, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(33, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(34, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(35, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(36, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(37, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(38, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(39, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(40, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(41, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(42, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(43, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(44, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(45, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(46, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(47, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(48, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(49, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(50, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(51, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(52, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(53, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(54, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(55, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(56, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(57, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(58, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(59, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(60, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(61, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(62, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(63, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(64, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(65, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(66, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(67, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(68, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(69, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(70, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(71, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(72, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(73, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(74, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(75, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(76, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(77, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(78, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(79, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(80, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(81, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(82, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(83, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(84, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(85, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(86, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(87, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(88, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(89, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(90, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(91, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(92, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(93, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(94, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(95, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(96, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(97, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(98, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(99, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(100, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(101, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(102, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(103, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(104, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(105, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(106, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(107, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(108, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(109, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(110, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(111, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(112, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(113, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(114, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(115, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(116, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(117, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(118, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(119, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(120, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(121, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(122, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(123, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(124, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(125, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(126, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(127, 1)), 0);
    $M.99 := $store.ref($M.99, $add.ref($add.ref($add.ref(ks8851_match_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.i8($M.0, .str.44, 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 4)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 4)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.45, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 3)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, .str.1, 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 11)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 11)), $mul.ref(2, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 11)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 11)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 11)), $mul.ref(5, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 11)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 11)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 11)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 11)), $mul.ref(9, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.8, 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 15)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 15)), $mul.ref(2, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 15)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 15)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 15)), $mul.ref(5, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 15)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 15)), $mul.ref(8, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 15)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 15)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 15)), $mul.ref(11, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 15)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 15)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.14, 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(2, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(5, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(8, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(15, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(16, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.11, 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 14)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 14)), $mul.ref(2, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 14)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 14)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 14)), $mul.ref(5, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 14)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 14)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 14)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 14)), $mul.ref(9, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 14)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 14)), $mul.ref(11, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 14)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.21, 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(2, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(5, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(13, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(16, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.46, 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(2, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(5, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(7, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(10, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.23, 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 16)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 16)), $mul.ref(2, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 16)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 16)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 16)), $mul.ref(5, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 16)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 16)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 16)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 16)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 16)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 16)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 16)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 16)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.17, 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 16)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 16)), $mul.ref(2, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 16)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 16)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 16)), $mul.ref(5, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 16)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 16)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 16)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 16)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 16)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 16)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 16)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 16)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.54, 75);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 7)), $mul.ref(1, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 7)), $mul.ref(2, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 7)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 7)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 7)), $mul.ref(5, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.55, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 5)), $mul.ref(1, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 5)), $mul.ref(2, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 5)), $mul.ref(3, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.26, 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(2, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(5, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(13, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    call {:si_unique_call 1043} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 408982);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 410014);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.9, $M.3, $M.28, $M.7, $M.5, $M.37, $M.34, $M.31, $M.17, $M.29, $M.30, $M.32, $M.33, $M.35, $M.36, $M.38, $M.39, $M.4, $M.6, $M.8, $M.10, $M.18, $M.19, $M.20, $M.21, $M.41, $M.42, $M.43, $M.44, $M.45, $M.2, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.24, $M.23, $M.25, $M.0, $M.1, $M.99, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1044} __SMACK_static_init();
    call {:si_unique_call 1045} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.2, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.25, $M.24, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.3, $M.74, $M.43, $M.44, $M.45, $M.41, $M.42, $M.75, $M.28, $M.27, $M.9, $M.7, $M.5, $M.37, $M.34, $M.31, $M.17, $M.29, $M.30, $M.32, $M.33, $M.35, $M.36, $M.38, $M.39, $M.4, $M.6, $M.8, $M.10, $M.18, $M.19, $M.20, $M.21, $M.23, $M.1, $M.99, $CurrAddr;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation ks8851_rx_pkts_loop_$bb10(in_$p0: ref, in_$p2: ref, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i24, in_$i44: i24, in_$i45: i24, in_$p46: ref, in_$p47: ref, in_$i48: i8, in_$i49: i64, in_$i50: i64, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p56: ref, in_$i57: i16, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i32, in_$i63: i32, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i1, in_$p69: ref, in_$p70: ref, in_$i71: i32, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$p77: ref, in_$i78: i16, in_$p79: ref, in_$p81: ref, in_$p82: ref, in_$p84: ref, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$p88: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p94: ref, in_$i95: i64, in_$i96: i64, in_$i97: i64, in_$p98: ref, in_$p99: ref, in_$p101: ref, in_$p102: ref, in_$i103: i16, in_$i104: i32, in_$i105: i32, in_$i106: i1, in_$i28: i32, in_vslice_dummy_var_56: i32, in_vslice_dummy_var_57: i32) returns (out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i24, out_$i44: i24, out_$i45: i24, out_$p46: ref, out_$p47: ref, out_$i48: i8, out_$i49: i64, out_$i50: i64, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p56: ref, out_$i57: i16, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i32, out_$i63: i32, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i1, out_$p69: ref, out_$p70: ref, out_$i71: i32, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$p77: ref, out_$i78: i16, out_$p79: ref, out_$p81: ref, out_$p82: ref, out_$p84: ref, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$p88: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p94: ref, out_$i95: i64, out_$i96: i64, out_$i97: i64, out_$p98: ref, out_$p99: ref, out_$p101: ref, out_$p102: ref, out_$i103: i16, out_$i104: i32, out_$i105: i32, out_$i106: i1, out_$i28: i32, out_vslice_dummy_var_56: i32, out_vslice_dummy_var_57: i32)
{

  entry:
    out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p79, out_$p81, out_$p82, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$p90, out_$p91, out_$p92, out_$p94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p101, out_$p102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i28, out_vslice_dummy_var_56, out_vslice_dummy_var_57 := in_$i29, in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$i43, in_$i44, in_$i45, in_$p46, in_$p47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p53, in_$p54, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$p64, in_$p65, in_$p66, in_$i67, in_$i68, in_$p69, in_$p70, in_$i71, in_$p72, in_$i73, in_$i74, in_$i75, in_$p76, in_$p77, in_$i78, in_$p79, in_$p81, in_$p82, in_$p84, in_$i85, in_$i86, in_$p87, in_$p88, in_$p90, in_$p91, in_$p92, in_$p94, in_$i95, in_$i96, in_$i97, in_$p98, in_$p99, in_$p101, in_$p102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i28, in_vslice_dummy_var_56, in_vslice_dummy_var_57;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_980;

  $bb27:
    assume out_$i106 == 1;
    assume {:verifier.code 0} true;
    out_$i28 := out_$i105;
    goto $bb27_dummy;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    out_$i106 := $ne.i32(out_$i105, 0);
    goto corral_source_split_1082;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    out_$i105 := $sub.i32(out_$i28, 1);
    call {:si_unique_call 302} {:cexpr "rxfc"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_1081;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} ks8851_wrreg16(in_$p0, 130, out_$i104);
    goto corral_source_split_1080;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i16.i32(out_$i103);
    goto corral_source_split_1079;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i16($M.0, out_$p102);
    goto corral_source_split_1078;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1144)), $mul.ref(290, 1));
    goto corral_source_split_1077;

  $bb19:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p101, out_$i97);
    goto corral_source_split_1075;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref($add.ref(out_$p99, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(16, 1));
    goto corral_source_split_1074;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.0, out_$p98);
    goto corral_source_split_1073;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1072;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    out_$i97 := $add.i64(out_$i95, out_$i96);
    goto corral_source_split_1071;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i32.i64(out_$i61);
    goto corral_source_split_1070;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i64($M.0, out_$p94);
    goto corral_source_split_1069;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref($add.ref(out_$p92, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(16, 1));
    goto corral_source_split_1068;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.0, out_$p91);
    goto corral_source_split_1067;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1066;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p90, out_$i86);
    goto corral_source_split_1065;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref($add.ref(out_$p88, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(0, 1));
    goto corral_source_split_1064;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_1063;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1062;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i64(out_$i85, 1);
    goto corral_source_split_1061;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i64($M.0, out_$p84);
    goto corral_source_split_1060;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref($add.ref(out_$p82, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(0, 1));
    goto corral_source_split_1059;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, out_$p81);
    goto corral_source_split_1058;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1057;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} out_vslice_dummy_var_57 := ldv_netif_rx_ni_13(out_$p66);
    goto corral_source_split_1056;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p79, out_$i78);
    goto corral_source_split_1055;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p66, $mul.ref(0, 232)), $mul.ref(126, 1));
    goto corral_source_split_1054;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} out_$i78 := eth_type_trans(out_$p66, out_$p77);
    goto corral_source_split_1053;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.0, out_$p76);
    goto corral_source_split_1052;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1051;

  $bb23:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} ks8851_dbg_dumpkkt(in_$p0, out_$p70);
    goto corral_source_split_1049;

  $bb22:
    assume out_$i75 == 1;
    goto corral_source_split_1048;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i32(out_$i74, 0);
    goto corral_source_split_1046;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    out_$i74 := $and.i32(out_$i73, 4096);
    goto corral_source_split_1045;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.0, out_$p72);
    goto corral_source_split_1044;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1144)), $mul.ref(280, 1));
    goto corral_source_split_1043;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} ks8851_rdfifo(in_$p0, out_$p70, out_$i71);
    goto corral_source_split_1042;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i32(out_$i63, 8);
    goto corral_source_split_1041;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref(out_$p69, $mul.ref($sub.ref(0, 8), 1));
    goto corral_source_split_1040;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} out_$p69 := skb_put(out_$p66, out_$i61);
    goto corral_source_split_1039;

  $bb20:
    assume out_$i68 == 1;
    goto corral_source_split_1038;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i64(out_$i67, 0);
    goto corral_source_split_1036;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    out_$i67 := $p2i.ref.i64(out_$p66);
    goto corral_source_split_1035;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} out_$p66 := netdev_alloc_skb_ip_align(out_$p65, out_$i63);
    goto corral_source_split_1034;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_1033;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1032;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    out_$i63 := $and.i32(out_$i62, $sub.i32(0, 4));
    call {:si_unique_call 294} {:cexpr "rxalign"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_1031;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i61, 3);
    goto corral_source_split_1030;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    out_$i61 := $sub.i32(out_$i32, 4);
    call {:si_unique_call 293} {:cexpr "rxlen"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_1029;

  $bb18:
    assume out_$i60 == 1;
    goto corral_source_split_1028;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    out_$i60 := $ugt.i32(out_$i32, 4);
    goto corral_source_split_1026;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} ks8851_wrreg16(in_$p0, 130, out_$i59);
    goto corral_source_split_1025;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    out_$i59 := $or.i32(out_$i58, 24);
    goto corral_source_split_1024;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i16.i32(out_$i57);
    goto corral_source_split_1023;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i16($M.0, out_$p56);
    goto corral_source_split_1022;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1144)), $mul.ref(290, 1));
    goto corral_source_split_1021;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} ks8851_wrreg16(in_$p0, 134, 16384);
    goto corral_source_split_1020;

  $bb13:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} out_vslice_dummy_var_56 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32(in_$p2, out_$p54, .str.10, out_$i30, out_$i32);
    goto corral_source_split_1018;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_1017;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1016;

  $bb14:
    assume out_$i52 == 1;
    goto corral_source_split_1015;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_1013;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} out_$i51 := ldv__builtin_expect(out_$i50, 0);
    call {:si_unique_call 289} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i51);
    goto corral_source_split_1012;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    out_$i50 := $and.i64(out_$i49, 1);
    goto corral_source_split_1011;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i8.i64(out_$i48);
    goto corral_source_split_1010;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i8($M.16, out_$p47);
    goto corral_source_split_1009;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1008;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, out_$p46, 0);
    goto corral_source_split_1007;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1006;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, out_$p42, out_$i45);
    goto corral_source_split_1005;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    out_$i45 := $or.i24(out_$i44, 620);
    goto corral_source_split_1004;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    out_$i44 := $and.i24(out_$i43, $sub.i24(0, 262144));
    goto corral_source_split_1003;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i24($M.15, out_$p42);
    goto corral_source_split_1002;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(out_$p41);
    goto corral_source_split_1001;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1000;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, out_$p40, .str.10);
    goto corral_source_split_999;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_998;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, out_$p39, .str.2);
    goto corral_source_split_997;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_996;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, out_$p38, .str.8);
    goto corral_source_split_995;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_994;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p37, .str);
    goto corral_source_split_993;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_992;

  $bb12:
    assume out_$i36 == 1;
    goto corral_source_split_991;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_989;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    out_$i35 := $and.i32(out_$i34, 2048);
    goto corral_source_split_988;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_987;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1144)), $mul.ref(280, 1));
    goto corral_source_split_986;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    out_$i32 := $and.i32(out_$i31, 4095);
    call {:si_unique_call 287} {:cexpr "rxlen"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_985;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    out_$i31 := $lshr.i32(out_$i29, 16);
    goto corral_source_split_984;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    out_$i30 := $and.i32(out_$i29, 65535);
    call {:si_unique_call 286} {:cexpr "rxstat"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_983;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} out_$i29 := ks8851_rdreg32(in_$p0, 124);
    call {:si_unique_call 285} {:cexpr "rxh"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_982;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p79, out_$p81, out_$p82, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$p90, out_$p91, out_$p92, out_$p94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p101, out_$p102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i28, out_vslice_dummy_var_56, out_vslice_dummy_var_57 := ks8851_rx_pkts_loop_$bb10(in_$p0, in_$p2, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$p79, out_$p81, out_$p82, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$p90, out_$p91, out_$p92, out_$p94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p101, out_$p102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i28, out_vslice_dummy_var_56, out_vslice_dummy_var_57);
    return;

  exit:
    return;
}



procedure ks8851_rx_pkts_loop_$bb10(in_$p0: ref, in_$p2: ref, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i24, in_$i44: i24, in_$i45: i24, in_$p46: ref, in_$p47: ref, in_$i48: i8, in_$i49: i64, in_$i50: i64, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p56: ref, in_$i57: i16, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i32, in_$i63: i32, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i1, in_$p69: ref, in_$p70: ref, in_$i71: i32, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$p77: ref, in_$i78: i16, in_$p79: ref, in_$p81: ref, in_$p82: ref, in_$p84: ref, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$p88: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p94: ref, in_$i95: i64, in_$i96: i64, in_$i97: i64, in_$p98: ref, in_$p99: ref, in_$p101: ref, in_$p102: ref, in_$i103: i16, in_$i104: i32, in_$i105: i32, in_$i106: i1, in_$i28: i32, in_vslice_dummy_var_56: i32, in_vslice_dummy_var_57: i32) returns (out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i24, out_$i44: i24, out_$i45: i24, out_$p46: ref, out_$p47: ref, out_$i48: i8, out_$i49: i64, out_$i50: i64, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p56: ref, out_$i57: i16, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i32, out_$i63: i32, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i1, out_$p69: ref, out_$p70: ref, out_$i71: i32, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$p77: ref, out_$i78: i16, out_$p79: ref, out_$p81: ref, out_$p82: ref, out_$p84: ref, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$p88: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p94: ref, out_$i95: i64, out_$i96: i64, out_$i97: i64, out_$p98: ref, out_$p99: ref, out_$p101: ref, out_$p102: ref, out_$i103: i16, out_$i104: i32, out_$i105: i32, out_$i106: i1, out_$i28: i32, out_vslice_dummy_var_56: i32, out_vslice_dummy_var_57: i32);
  modifies $M.0, $CurrAddr, $M.25, $M.24, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation ldv_set_remove_loop_$bb17(in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1) returns (out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1)
{

  entry:
    out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29 := in_$i20, in_$i21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1338;

  $bb21:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := out_$i27;
    goto $bb21_dummy;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i27, out_$i28);
    goto corral_source_split_1349;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    out_$i28 := $M.24;
    goto corral_source_split_1348;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i20, 1);
    call {:si_unique_call 347} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_1347;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, out_$p26, out_$p23);
    goto corral_source_split_1346;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i25, 8));
    goto corral_source_split_1345;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    goto corral_source_split_1344;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i20, 1);
    goto corral_source_split_1343;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.25, out_$p22);
    goto corral_source_split_1342;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i21, 8));
    goto corral_source_split_1341;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i20);
    goto corral_source_split_1340;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29 := ldv_set_remove_loop_$bb17(out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29);
    return;

  exit:
    return;
}



procedure ldv_set_remove_loop_$bb17(in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1) returns (out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1);
  modifies $M.25;



implementation ldv_set_remove_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i6: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1) returns (out_$i4: i32, out_$i6: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1)
{

  entry:
    out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15 := in_$i4, in_$i6, in_$p7, in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1311;

  $bb11:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i13;
    goto $bb11_dummy;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i13, out_$i14);
    goto corral_source_split_1329;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    out_$i14 := $M.24;
    goto corral_source_split_1328;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i4, 1);
    call {:si_unique_call 345} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_1327;

  $bb9:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i4;
    assume true;
    goto $bb9;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i64(out_$i9, out_$i10);
    goto corral_source_split_1318;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_1317;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_1316;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.25, out_$p7);
    goto corral_source_split_1315;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i6, 8));
    goto corral_source_split_1314;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i4);
    goto corral_source_split_1313;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15 := ldv_set_remove_loop_$bb4(in_$p1, out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure ldv_set_remove_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i6: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1) returns (out_$i4: i32, out_$i6: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1);



implementation {:SIextraRecBound 6} ks8851_write_mac_addr_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$i5: i32, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p9: ref, in_$i10: i8, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$i4: i32) returns (out_$i5: i32, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p9: ref, out_$i10: i8, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$i4: i32)
{

  entry:
    out_$i5, out_$p6, out_$p7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i4 := in_$i5, in_$p6, in_$p7, in_$i8, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i4;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1532;

  $bb3:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i12;
    goto $bb3_dummy;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    out_$i13 := $sle.i32(out_$i12, 5);
    goto corral_source_split_1543;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i4, 1);
    call {:si_unique_call 396} {:cexpr "i"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_1542;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} ks8851_wrreg8(in_$p2, out_$i5, out_$i11);
    goto corral_source_split_1541;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i8.i32(out_$i10);
    goto corral_source_split_1540;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i8($M.0, out_$p9);
    goto corral_source_split_1539;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref(out_$p7, $mul.ref(out_$i8, 1));
    goto corral_source_split_1538;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i4);
    goto corral_source_split_1537;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.0, out_$p6);
    goto corral_source_split_1536;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_1535;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i5 := $sub.i32(21, out_$i4);
    goto corral_source_split_1534;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb3_dummy:
    call {:si_unique_call 1} out_$i5, out_$p6, out_$p7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i4 := ks8851_write_mac_addr_loop_$bb1(in_$p0, in_$p2, out_$i5, out_$p6, out_$p7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i4);
    return;

  exit:
    return;
}



procedure ks8851_write_mac_addr_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$i5: i32, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p9: ref, in_$i10: i8, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$i4: i32) returns (out_$i5: i32, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p9: ref, out_$i10: i8, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$i4: i32);
  modifies $M.0, $CurrAddr;



implementation ldv_set_add_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$i11: i32, in_$i12: i32, in_$i13: i1) returns (out_$i4: i32, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$i11: i32, out_$i12: i32, out_$i13: i1)
{

  entry:
    out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13 := in_$i4, in_$i5, in_$p6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1744;

  $bb12:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i11;
    goto $bb12_dummy;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i11, out_$i12);
    goto corral_source_split_1762;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    out_$i12 := $M.24;
    goto corral_source_split_1761;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i4, 1);
    call {:si_unique_call 430} {:cexpr "i"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_1760;

  $bb9:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i64(out_$i8, out_$i9);
    goto corral_source_split_1751;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_1750;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_1749;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.25, out_$p6);
    goto corral_source_split_1748;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i5, 8));
    goto corral_source_split_1747;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i4);
    goto corral_source_split_1746;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13 := ldv_set_add_loop_$bb4(in_$p1, out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13);
    return;

  exit:
    return;
}



procedure ldv_set_add_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$i11: i32, in_$i12: i32, in_$i13: i1) returns (out_$i4: i32, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$i11: i32, out_$i12: i32, out_$i13: i1);



implementation ks8851_net_stop_loop_$bb7(in_$p1: ref, in_$p3: ref, in_$p17: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i24, in_$i33: i24, in_$i34: i24, in_$p35: ref, in_$p36: ref, in_$i37: i8, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_vslice_dummy_var_72: i32) returns (out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i24, out_$i33: i24, out_$i34: i24, out_$p35: ref, out_$p36: ref, out_$i37: i8, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_vslice_dummy_var_72: i32)
{

  entry:
    out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p45, out_$i46, out_$i47, out_vslice_dummy_var_72 := in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p42, in_$p43, in_$p45, in_$i46, in_$i47, in_vslice_dummy_var_72;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb15:
    assume {:verifier.code 0} true;
    assume out_$i47 == 1;
    goto $bb15_dummy;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 0);
    goto corral_source_split_1993;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} out_$i46 := skb_queue_empty(in_$p17);
    call {:si_unique_call 494} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_1992;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} ldv_skb_free(out_$p45);
    goto corral_source_split_1991;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_1990;

  $bb10:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} out_vslice_dummy_var_72 := __dynamic_netdev_dbg.ref.ref.ref.ref.ref(in_$p1, out_$p43, .str.18, .str.17, out_$p21);
    goto corral_source_split_1988;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_1987;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1144)), $mul.ref(0, 1));
    goto corral_source_split_1986;

  $bb11:
    assume out_$i41 == 1;
    goto corral_source_split_1985;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i64(out_$i40, 0);
    goto corral_source_split_1983;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} out_$i40 := ldv__builtin_expect(out_$i39, 0);
    call {:si_unique_call 490} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i40);
    goto corral_source_split_1982;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    out_$i39 := $and.i64(out_$i38, 1);
    goto corral_source_split_1981;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i8.i64(out_$i37);
    goto corral_source_split_1980;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i8($M.16, out_$p36);
    goto corral_source_split_1979;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1978;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, out_$p35, 0);
    goto corral_source_split_1977;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1976;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, out_$p31, out_$i34);
    goto corral_source_split_1975;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    out_$i34 := $or.i24(out_$i33, 986);
    goto corral_source_split_1974;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    out_$i33 := $and.i24(out_$i32, $sub.i24(0, 262144));
    goto corral_source_split_1973;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i24($M.15, out_$p31);
    goto corral_source_split_1972;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_1971;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1970;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, out_$p29, .str.18);
    goto corral_source_split_1969;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1968;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, out_$p28, .str.2);
    goto corral_source_split_1967;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1966;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, out_$p27, .str.17);
    goto corral_source_split_1965;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1964;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p26, .str);
    goto corral_source_split_1963;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1962;

  $bb9:
    assume out_$i25 == 1;
    goto corral_source_split_1961;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_1959;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    out_$i24 := $and.i32(out_$i23, 16);
    goto corral_source_split_1958;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, out_$p22);
    goto corral_source_split_1957;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1144)), $mul.ref(280, 1));
    goto corral_source_split_1956;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} out_$p21 := ldv_skb_dequeue_15(out_$p20);
    goto corral_source_split_1955;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1144)), $mul.ref(520, 1));
    goto corral_source_split_1954;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p45, out_$i46, out_$i47, out_vslice_dummy_var_72 := ks8851_net_stop_loop_$bb7(in_$p1, in_$p3, in_$p17, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p45, out_$i46, out_$i47, out_vslice_dummy_var_72);
    return;

  exit:
    return;
}



procedure ks8851_net_stop_loop_$bb7(in_$p1: ref, in_$p3: ref, in_$p17: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i24, in_$i33: i24, in_$i34: i24, in_$p35: ref, in_$p36: ref, in_$i37: i8, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_vslice_dummy_var_72: i32) returns (out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i24, out_$i33: i24, out_$i34: i24, out_$p35: ref, out_$p36: ref, out_$i37: i8, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_vslice_dummy_var_72: i32);
  modifies $M.25, $M.24, $M.16, $M.15, $M.14, $M.13, $M.12, $M.11, $M.0, $CurrAddr;



implementation ks8851_set_rx_mode_loop_$bb15(in_$p1: ref, in_$i32: i64, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i64, in_$p43: ref, in_$i44: i16, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$i48: i16, in_$i49: i32, in_$i50: i32, in_$i51: i16, in_$i52: i32, in_$i53: i64, in_$p55: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$p34: ref) returns (out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i64, out_$p43: ref, out_$i44: i16, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$i48: i16, out_$i49: i32, out_$i50: i32, out_$i51: i16, out_$i52: i32, out_$i53: i64, out_$p55: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$p34: ref)
{

  entry:
    out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p55, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p34 := in_$p35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p55, in_$p57, in_$p58, in_$p59, in_$p60, in_$i61, in_$i62, in_$p34;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2420;

  $bb17:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$p34 := out_$p58;
    goto $bb17_dummy;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i64(out_$i61, in_$i32);
    goto corral_source_split_2447;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    out_$i61 := $p2i.ref.i64(out_$p60);
    goto corral_source_split_2446;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p59, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_2445;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(out_$p58);
    goto corral_source_split_2444;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_2443;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($add.ref(out_$p34, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2442;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p55, out_$i51);
    goto corral_source_split_2441;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(out_$i53, 2));
    goto corral_source_split_2440;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i32.i64(out_$i52);
    goto corral_source_split_2439;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    out_$i52 := $lshr.i32(out_$i39, 4);
    goto corral_source_split_2438;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i32.i16(out_$i50);
    goto corral_source_split_2437;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    out_$i50 := $or.i32(out_$i45, out_$i49);
    goto corral_source_split_2436;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i16.i32(out_$i48);
    goto corral_source_split_2435;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    out_$i48 := $trunc.i32.i16(out_$i47);
    goto corral_source_split_2434;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    out_$i47 := $shl.i32(1, out_$i46);
    goto corral_source_split_2433;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    out_$i46 := $and.i32(out_$i39, 15);
    goto corral_source_split_2432;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i16.i32(out_$i44);
    goto corral_source_split_2431;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i16($M.0, out_$p43);
    goto corral_source_split_2430;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 12)), $mul.ref(0, 1)), $mul.ref(out_$i41, 2));
    goto corral_source_split_2429;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i32.i64(out_$i40);
    goto corral_source_split_2428;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    out_$i40 := $lshr.i32(out_$i39, 4);
    goto corral_source_split_2427;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    out_$i39 := $lshr.i32(out_$i38, 26);
    call {:si_unique_call 596} {:cexpr "crc"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_2426;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} out_$i38 := bitrev32(out_$i37);
    call {:si_unique_call 595} {:cexpr "crc"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_2425;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} out_$i37 := crc32_le($sub.i32(0, 1), out_$p36, 6);
    call {:si_unique_call 593} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_2424;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p35);
    goto corral_source_split_2423;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p34, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_2422;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p55, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p34 := ks8851_set_rx_mode_loop_$bb15(in_$p1, in_$i32, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p55, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p34);
    return;

  exit:
    return;
}



procedure ks8851_set_rx_mode_loop_$bb15(in_$p1: ref, in_$i32: i64, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i64, in_$p43: ref, in_$i44: i16, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$i48: i16, in_$i49: i32, in_$i50: i32, in_$i51: i16, in_$i52: i32, in_$i53: i64, in_$p55: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$p34: ref) returns (out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i64, out_$p43: ref, out_$i44: i16, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$i48: i16, out_$i49: i32, out_$i50: i32, out_$i51: i16, out_$i52: i32, out_$i53: i64, out_$p55: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$p34: ref);
  modifies $M.0;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p1: ref, in_$p3: ref, in_$i4: i32, in_$p5: ref, in_$i6: i32, in_$p8: ref, in_$i9: i32, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i90: i32, in_$i91: i1, in_$p92: ref, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i98: i32, in_$i99: i1, in_$p100: ref, in_$i102: i32, in_$i103: i1, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i32, in_$i111: i1, in_$i112: i32, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$i118: i1, in_$i119: i1, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$i141: i32, in_$i142: i32, in_$i143: i1, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$i147: i32, in_$i148: i32, in_$i149: i1, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i153: i32, in_$i154: i32, in_$i155: i1, in_$i156: i32, in_$i157: i1, in_$p158: ref, in_$i159: i32, in_$i160: i32, in_$i161: i1, in_$i162: i32, in_$i163: i1, in_$p164: ref, in_$i165: i32, in_$i166: i32, in_$i167: i1, in_$i168: i32, in_$i169: i1, in_$p170: ref, in_$i171: i32, in_$i172: i32, in_$i173: i1, in_$i174: i32, in_$i175: i1, in_$i176: i32, in_$i177: i32, in_$i178: i1, in_$i179: i32, in_$i180: i1, in_$i181: i32, in_$i182: i32, in_$i183: i1, in_$i184: i32, in_$i185: i1, in_$i186: i32, in_$i187: i32, in_$i188: i1, in_$i189: i32, in_$i190: i1, in_$i191: i32, in_$i192: i32, in_$i193: i1, in_$i194: i32, in_$i195: i1, in_$i196: i32, in_$i197: i32, in_$i198: i1, in_$i199: i32, in_$i200: i1, in_$i201: i32, in_$i202: i32, in_$i203: i1, in_$i204: i32, in_$i205: i1, in_$i206: i32, in_$i207: i32, in_$i208: i1, in_$i209: i32, in_$i210: i32, in_$i211: i32, in_$i212: i1, in_$i213: i32, in_$i214: i32, in_$i215: i1, in_$i216: i32, in_$i217: i1, in_$i218: i32, in_$i219: i32, in_$i220: i1, in_$i221: i32, in_$i222: i1, in_$i223: i32, in_$i224: i32, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$i228: i32, in_$i229: i32, in_$i230: i1, in_$i231: i32, in_$i232: i1, in_$i233: i32, in_$i234: i32, in_$i235: i1, in_$i236: i32, in_$i237: i1, in_$i238: i32, in_$i239: i32, in_$i240: i1, in_$i241: i32, in_$i242: i1, in_$i244: i32, in_$i245: i32, in_$i246: i32, in_$i247: i1, in_$i248: i32, in_$i249: i1, in_$i250: i32, in_$i251: i1, in_$i252: i1, in_$i253: i1, in_$i254: i32, in_$i255: i1, in_$i256: i32, in_$i257: i1, in_$i258: i32, in_$i259: i1, in_$i260: i32, in_$i261: i32, in_$i262: i1, in_$i263: i32, in_$i264: i1, in_$i265: i32, in_$i266: i1, in_$i267: i32, in_$i268: i1, in_$i269: i1, in_$i270: i1, in_$i271: i32, in_$i272: i1, in_$p273: ref, in_$i274: i32, in_$i275: i32, in_$i276: i1, in_$i277: i32, in_$i278: i32, in_$i279: i32, in_$i280: i1, in_$p281: ref, in_$i283: i32, in_$i284: i32, in_$i285: i32, in_$i286: i1, in_$i287: i32, in_$i288: i1, in_$i289: i32, in_$i290: i1, in_$i291: i1, in_$i292: i1, in_$i293: i1, in_$i294: i1, in_$i295: i1, in_$i296: i1, in_$i297: i1, in_$i298: i1, in_$i299: i1, in_$i300: i1, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$p304: ref, in_$i306: i32, in_$i307: i1, in_$p308: ref, in_$i309: i32, in_$i310: i1, in_$p311: ref, in_$i312: i32, in_$i313: i1, in_$p314: ref, in_$i316: i32, in_$i317: i1, in_$p318: ref, in_$p319: ref, in_$i321: i32, in_$i322: i1, in_$p323: ref, in_$p324: ref, in_$i326: i32, in_$i327: i1, in_$p328: ref, in_$i330: i32, in_$i331: i1, in_$p332: ref, in_$p333: ref, in_$i335: i32, in_$i336: i1, in_$p337: ref, in_$i339: i32, in_$i340: i1, in_$p341: ref, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32) returns (out_$i12: i32, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i90: i32, out_$i91: i1, out_$p92: ref, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i98: i32, out_$i99: i1, out_$p100: ref, out_$i102: i32, out_$i103: i1, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i32, out_$i111: i1, out_$i112: i32, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$i118: i1, out_$i119: i1, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$i141: i32, out_$i142: i32, out_$i143: i1, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$i147: i32, out_$i148: i32, out_$i149: i1, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i153: i32, out_$i154: i32, out_$i155: i1, out_$i156: i32, out_$i157: i1, out_$p158: ref, out_$i159: i32, out_$i160: i32, out_$i161: i1, out_$i162: i32, out_$i163: i1, out_$p164: ref, out_$i165: i32, out_$i166: i32, out_$i167: i1, out_$i168: i32, out_$i169: i1, out_$p170: ref, out_$i171: i32, out_$i172: i32, out_$i173: i1, out_$i174: i32, out_$i175: i1, out_$i176: i32, out_$i177: i32, out_$i178: i1, out_$i179: i32, out_$i180: i1, out_$i181: i32, out_$i182: i32, out_$i183: i1, out_$i184: i32, out_$i185: i1, out_$i186: i32, out_$i187: i32, out_$i188: i1, out_$i189: i32, out_$i190: i1, out_$i191: i32, out_$i192: i32, out_$i193: i1, out_$i194: i32, out_$i195: i1, out_$i196: i32, out_$i197: i32, out_$i198: i1, out_$i199: i32, out_$i200: i1, out_$i201: i32, out_$i202: i32, out_$i203: i1, out_$i204: i32, out_$i205: i1, out_$i206: i32, out_$i207: i32, out_$i208: i1, out_$i209: i32, out_$i210: i32, out_$i211: i32, out_$i212: i1, out_$i213: i32, out_$i214: i32, out_$i215: i1, out_$i216: i32, out_$i217: i1, out_$i218: i32, out_$i219: i32, out_$i220: i1, out_$i221: i32, out_$i222: i1, out_$i223: i32, out_$i224: i32, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$i228: i32, out_$i229: i32, out_$i230: i1, out_$i231: i32, out_$i232: i1, out_$i233: i32, out_$i234: i32, out_$i235: i1, out_$i236: i32, out_$i237: i1, out_$i238: i32, out_$i239: i32, out_$i240: i1, out_$i241: i32, out_$i242: i1, out_$i244: i32, out_$i245: i32, out_$i246: i32, out_$i247: i1, out_$i248: i32, out_$i249: i1, out_$i250: i32, out_$i251: i1, out_$i252: i1, out_$i253: i1, out_$i254: i32, out_$i255: i1, out_$i256: i32, out_$i257: i1, out_$i258: i32, out_$i259: i1, out_$i260: i32, out_$i261: i32, out_$i262: i1, out_$i263: i32, out_$i264: i1, out_$i265: i32, out_$i266: i1, out_$i267: i32, out_$i268: i1, out_$i269: i1, out_$i270: i1, out_$i271: i32, out_$i272: i1, out_$p273: ref, out_$i274: i32, out_$i275: i32, out_$i276: i1, out_$i277: i32, out_$i278: i32, out_$i279: i32, out_$i280: i1, out_$p281: ref, out_$i283: i32, out_$i284: i32, out_$i285: i32, out_$i286: i1, out_$i287: i32, out_$i288: i1, out_$i289: i32, out_$i290: i1, out_$i291: i1, out_$i292: i1, out_$i293: i1, out_$i294: i1, out_$i295: i1, out_$i296: i1, out_$i297: i1, out_$i298: i1, out_$i299: i1, out_$i300: i1, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$p304: ref, out_$i306: i32, out_$i307: i1, out_$p308: ref, out_$i309: i32, out_$i310: i1, out_$p311: ref, out_$i312: i32, out_$i313: i1, out_$p314: ref, out_$i316: i32, out_$i317: i1, out_$p318: ref, out_$p319: ref, out_$i321: i32, out_$i322: i1, out_$p323: ref, out_$p324: ref, out_$i326: i32, out_$i327: i1, out_$p328: ref, out_$i330: i32, out_$i331: i1, out_$p332: ref, out_$p333: ref, out_$i335: i32, out_$i336: i1, out_$p337: ref, out_$i339: i32, out_$i340: i1, out_$p341: ref, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32)
{

  entry:
    out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i39, out_$i40, out_$p41, out_$i43, out_$i44, out_$p45, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i60, out_$i61, out_$p62, out_$i64, out_$i65, out_$p66, out_$i68, out_$i69, out_$p70, out_$i72, out_$i73, out_$p74, out_$i76, out_$i77, out_$p78, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i90, out_$i91, out_$p92, out_$i94, out_$i95, out_$p96, out_$i98, out_$i99, out_$p100, out_$i102, out_$i103, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$p152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$p164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$p273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$p281, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$p303, out_$p304, out_$i306, out_$i307, out_$p308, out_$i309, out_$i310, out_$p311, out_$i312, out_$i313, out_$p314, out_$i316, out_$i317, out_$p318, out_$p319, out_$i321, out_$i322, out_$p323, out_$p324, out_$i326, out_$i327, out_$p328, out_$i330, out_$i331, out_$p332, out_$p333, out_$i335, out_$i336, out_$p337, out_$i339, out_$i340, out_$p341, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103 := in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p37, in_$i39, in_$i40, in_$p41, in_$i43, in_$i44, in_$p45, in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$p52, in_$i53, in_$i54, in_$p55, in_$i56, in_$i57, in_$p58, in_$i60, in_$i61, in_$p62, in_$i64, in_$i65, in_$p66, in_$i68, in_$i69, in_$p70, in_$i72, in_$i73, in_$p74, in_$i76, in_$i77, in_$p78, in_$i80, in_$i81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$p88, in_$i90, in_$i91, in_$p92, in_$i94, in_$i95, in_$p96, in_$i98, in_$i99, in_$p100, in_$i102, in_$i103, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$p140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$p146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$p152, in_$i153, in_$i154, in_$i155, in_$i156, in_$i157, in_$p158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$p164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$p170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$i241, in_$i242, in_$i244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i253, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$i272, in_$p273, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$i279, in_$i280, in_$p281, in_$i283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$i289, in_$i290, in_$i291, in_$i292, in_$i293, in_$i294, in_$i295, in_$i296, in_$i297, in_$i298, in_$i299, in_$i300, in_$i301, in_$i302, in_$p303, in_$p304, in_$i306, in_$i307, in_$p308, in_$i309, in_$i310, in_$p311, in_$i312, in_$i313, in_$p314, in_$i316, in_$i317, in_$p318, in_$p319, in_$i321, in_$i322, in_$p323, in_$p324, in_$i326, in_$i327, in_$p328, in_$i330, in_$i331, in_$p332, in_$p333, in_$i335, in_$i336, in_$p337, in_$i339, in_$i340, in_$p341, in_vslice_dummy_var_80, in_vslice_dummy_var_81, in_vslice_dummy_var_82, in_vslice_dummy_var_83, in_vslice_dummy_var_84, in_vslice_dummy_var_85, in_vslice_dummy_var_86, in_vslice_dummy_var_87, in_vslice_dummy_var_88, in_vslice_dummy_var_89, in_vslice_dummy_var_90, in_vslice_dummy_var_91, in_vslice_dummy_var_92, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95, in_vslice_dummy_var_96, in_vslice_dummy_var_97, in_vslice_dummy_var_98, in_vslice_dummy_var_99, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 727} out_$i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 728} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i12);
    call {:si_unique_call 729} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i12);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb113_dummy;

  $bb401:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb21:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb53:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $M.2 := 2;
    call {:si_unique_call 738} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_2853;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} out_vslice_dummy_var_82 := eth_validate_addr(out_$p45);
    goto corral_source_split_2852;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    out_$p45 := $M.17;
    goto corral_source_split_2851;

  $bb52:
    assume out_$i44 == 1;
    goto corral_source_split_2850;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i43, 2);
    goto corral_source_split_2848;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i43 := $M.2;
    goto corral_source_split_2847;

  $bb50:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $M.2 := 3;
    call {:si_unique_call 736} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_2845;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} out_vslice_dummy_var_81 := eth_validate_addr(out_$p41);
    goto corral_source_split_2844;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    out_$p41 := $M.17;
    goto corral_source_split_2843;

  $bb49:
    assume out_$i40 == 1;
    goto corral_source_split_2842;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 3);
    goto corral_source_split_2840;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i39 := $M.2;
    goto corral_source_split_2839;

  $bb47:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 734} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_2837;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} out_vslice_dummy_var_80 := eth_validate_addr(out_$p37);
    goto corral_source_split_2836;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    out_$p37 := $M.17;
    goto corral_source_split_2835;

  $bb46:
    assume out_$i36 == 1;
    goto corral_source_split_2834;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 1);
    goto corral_source_split_2832;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    out_$i35 := $M.2;
    goto corral_source_split_2831;

  $bb44:
    assume out_$i34 == 1;
    goto corral_source_split_2830;

  $bb42:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i23, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb36:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i23, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb23:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := $slt.i32(out_$i23, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i32(out_$i23, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_2792:
    assume {:verifier.code 1} true;
    call {:si_unique_call 730} out_$i23 := __VERIFIER_nondet_int();
    call {:si_unique_call 731} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i23);
    call {:si_unique_call 732} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i23);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i22 == 1;
    goto corral_source_split_2792;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_2790;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    out_$i21 := $M.2;
    goto corral_source_split_2789;

  $bb18:
    assume out_$i20 == 1;
    goto corral_source_split_2788;

  $bb14:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i12, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i12, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb63:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $M.2 := 2;
    call {:si_unique_call 744} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_2874;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} ks8851_set_rx_mode(out_$p55);
    goto corral_source_split_2873;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    out_$p55 := $M.17;
    goto corral_source_split_2872;

  $bb62:
    assume out_$i54 == 1;
    goto corral_source_split_2871;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i53, 2);
    goto corral_source_split_2869;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i53 := $M.2;
    goto corral_source_split_2868;

  $bb60:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $M.2 := 3;
    call {:si_unique_call 742} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_2866;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} ks8851_set_rx_mode(out_$p52);
    goto corral_source_split_2865;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    out_$p52 := $M.17;
    goto corral_source_split_2864;

  $bb59:
    assume out_$i51 == 1;
    goto corral_source_split_2863;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i50, 3);
    goto corral_source_split_2861;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i50 := $M.2;
    goto corral_source_split_2860;

  $bb57:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 740} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_2858;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} ks8851_set_rx_mode(out_$p49);
    goto corral_source_split_2857;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    out_$p49 := $M.17;
    goto corral_source_split_2856;

  $bb56:
    assume out_$i48 == 1;
    goto corral_source_split_2855;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, 1);
    goto corral_source_split_2828;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    out_$i47 := $M.2;
    goto corral_source_split_2827;

  $bb43:
    assume !(out_$i33 == 1);
    goto corral_source_split_2826;

  $bb66:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $M.2 := 2;
    call {:si_unique_call 746} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_2879;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} out_vslice_dummy_var_83 := ks8851_net_stop(out_$p58);
    goto corral_source_split_2878;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    out_$p58 := $M.17;
    goto corral_source_split_2877;

  $bb65:
    assume out_$i57 == 1;
    goto corral_source_split_2876;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, 3);
    goto corral_source_split_2816;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    out_$i56 := $M.2;
    goto corral_source_split_2815;

  $bb38:
    assume out_$i31 == 1;
    goto corral_source_split_2814;

  $bb37:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i23, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb75:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $M.2 := 2;
    call {:si_unique_call 752} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_2900;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} out_vslice_dummy_var_86 := ks8851_net_ioctl(out_$p70, in_$p3, in_$i4);
    goto corral_source_split_2899;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    out_$p70 := $M.17;
    goto corral_source_split_2898;

  $bb74:
    assume out_$i69 == 1;
    goto corral_source_split_2897;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 2);
    goto corral_source_split_2895;

  $bb73:
    assume {:verifier.code 0} true;
    out_$i68 := $M.2;
    goto corral_source_split_2894;

  $bb72:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $M.2 := 3;
    call {:si_unique_call 750} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_2892;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} out_vslice_dummy_var_85 := ks8851_net_ioctl(out_$p66, in_$p3, in_$i4);
    goto corral_source_split_2891;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    out_$p66 := $M.17;
    goto corral_source_split_2890;

  $bb71:
    assume out_$i65 == 1;
    goto corral_source_split_2889;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 3);
    goto corral_source_split_2887;

  $bb70:
    assume {:verifier.code 0} true;
    out_$i64 := $M.2;
    goto corral_source_split_2886;

  $bb69:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 748} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_2884;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} out_vslice_dummy_var_84 := ks8851_net_ioctl(out_$p62, in_$p3, in_$i4);
    goto corral_source_split_2883;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    out_$p62 := $M.17;
    goto corral_source_split_2882;

  $bb68:
    assume out_$i61 == 1;
    goto corral_source_split_2881;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, 1);
    goto corral_source_split_2820;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    out_$i60 := $M.2;
    goto corral_source_split_2819;

  $bb40:
    assume out_$i32 == 1;
    goto corral_source_split_2818;

  $bb39:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i23, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb81:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $M.2 := 2;
    call {:si_unique_call 756} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_2913;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} out_vslice_dummy_var_88 := eth_change_mtu(out_$p78, in_$i6);
    goto corral_source_split_2912;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    out_$p78 := $M.17;
    goto corral_source_split_2911;

  $bb80:
    assume out_$i77 == 1;
    goto corral_source_split_2910;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i76, 2);
    goto corral_source_split_2908;

  $bb79:
    assume {:verifier.code 0} true;
    out_$i76 := $M.2;
    goto corral_source_split_2907;

  $bb78:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $M.2 := 3;
    call {:si_unique_call 754} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_2905;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} out_vslice_dummy_var_87 := eth_change_mtu(out_$p74, in_$i6);
    goto corral_source_split_2904;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    out_$p74 := $M.17;
    goto corral_source_split_2903;

  $bb77:
    assume out_$i73 == 1;
    goto corral_source_split_2902;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i72, 3);
    goto corral_source_split_2824;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    out_$i72 := $M.2;
    goto corral_source_split_2823;

  $bb41:
    assume !(out_$i32 == 1);
    goto corral_source_split_2822;

  $bb84:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb86:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $M.2 := 3;
    call {:si_unique_call 759} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_2923;

  $bb85:
    assume out_$i85 == 1;
    goto corral_source_split_2922;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i84, 0);
    goto corral_source_split_2920;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    out_$i84 := $M.53;
    goto corral_source_split_2919;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $M.53 := out_$i83;
    call {:si_unique_call 758} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i83);
    goto corral_source_split_2918;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} out_$i83 := ks8851_net_open(out_$p82);
    goto corral_source_split_2917;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    out_$p82 := $M.17;
    goto corral_source_split_2916;

  $bb83:
    assume out_$i81 == 1;
    goto corral_source_split_2915;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i80, 2);
    goto corral_source_split_2808;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    out_$i80 := $M.2;
    goto corral_source_split_2807;

  $bb34:
    assume out_$i29 == 1;
    goto corral_source_split_2806;

  $bb25:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i23, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb24:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i23, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb90:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $M.2 := 3;
    call {:si_unique_call 761} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_2928;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} out_vslice_dummy_var_89 := ks8851_start_xmit(in_$p1, out_$p88);
    goto corral_source_split_2927;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    out_$p88 := $M.17;
    goto corral_source_split_2926;

  $bb89:
    assume out_$i87 == 1;
    goto corral_source_split_2925;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i86, 3);
    goto corral_source_split_2812;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    out_$i86 := $M.2;
    goto corral_source_split_2811;

  $bb35:
    assume !(out_$i29 == 1);
    goto corral_source_split_2810;

  $bb99:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $M.2 := 2;
    call {:si_unique_call 767} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_2949;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} out_vslice_dummy_var_92 := ks8851_set_mac_address(out_$p100, in_$p5);
    goto corral_source_split_2948;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    out_$p100 := $M.17;
    goto corral_source_split_2947;

  $bb98:
    assume out_$i99 == 1;
    goto corral_source_split_2946;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    out_$i99 := $eq.i32(out_$i98, 2);
    goto corral_source_split_2944;

  $bb97:
    assume {:verifier.code 0} true;
    out_$i98 := $M.2;
    goto corral_source_split_2943;

  $bb96:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $M.2 := 3;
    call {:si_unique_call 765} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_2941;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} out_vslice_dummy_var_91 := ks8851_set_mac_address(out_$p96, in_$p5);
    goto corral_source_split_2940;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    out_$p96 := $M.17;
    goto corral_source_split_2939;

  $bb95:
    assume out_$i95 == 1;
    goto corral_source_split_2938;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i94, 3);
    goto corral_source_split_2936;

  $bb94:
    assume {:verifier.code 0} true;
    out_$i94 := $M.2;
    goto corral_source_split_2935;

  $bb93:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 763} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_2933;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} out_vslice_dummy_var_90 := ks8851_set_mac_address(out_$p92, in_$p5);
    goto corral_source_split_2932;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    out_$p92 := $M.17;
    goto corral_source_split_2931;

  $bb92:
    assume out_$i91 == 1;
    goto corral_source_split_2930;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i90, 1);
    goto corral_source_split_2796;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    out_$i90 := $M.2;
    goto corral_source_split_2795;

  $bb27:
    assume out_$i26 == 1;
    goto corral_source_split_2794;

  $bb26:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i23, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb102:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $M.48 := out_$i106;
    call {:si_unique_call 770} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_2956;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    out_$i106 := $sub.i32(out_$i105, 1);
    goto corral_source_split_2955;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    out_$i105 := $M.48;
    goto corral_source_split_2954;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 769} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_2953;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} out_vslice_dummy_var_93 := ldv_ndo_uninit_6();
    goto corral_source_split_2952;

  $bb101:
    assume out_$i103 == 1;
    goto corral_source_split_2951;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i102, 2);
    goto corral_source_split_2800;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    out_$i102 := $M.2;
    goto corral_source_split_2799;

  $bb29:
    assume out_$i27 == 1;
    goto corral_source_split_2798;

  $bb28:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i23, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb105:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb107:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $M.48 := out_$i113;
    call {:si_unique_call 774} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i113);
    goto corral_source_split_2968;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    out_$i113 := $add.i32(out_$i112, 1);
    goto corral_source_split_2967;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    out_$i112 := $M.48;
    goto corral_source_split_2966;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $M.2 := 2;
    call {:si_unique_call 773} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_2965;

  $bb106:
    assume out_$i111 == 1;
    goto corral_source_split_2964;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 0);
    goto corral_source_split_2962;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    out_$i110 := $M.54;
    goto corral_source_split_2961;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $M.54 := out_$i109;
    call {:si_unique_call 772} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_2960;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} out_$i109 := ldv_ndo_init_6();
    goto corral_source_split_2959;

  $bb104:
    assume out_$i108 == 1;
    goto corral_source_split_2958;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    out_$i108 := $eq.i32(out_$i107, 1);
    goto corral_source_split_2804;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    out_$i107 := $M.2;
    goto corral_source_split_2803;

  $bb31:
    assume out_$i28 == 1;
    goto corral_source_split_2802;

  $bb30:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i23, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} ldv_stop();
    goto corral_source_split_2970;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb33;

  $bb45:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb33;

  $bb115:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb161:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb163:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $M.46 := 15;
    call {:si_unique_call 781} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(15);
    goto corral_source_split_3062;

  $bb162:
    assume out_$i143 == 1;
    goto corral_source_split_3061;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i142, 0);
    goto corral_source_split_3059;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    out_$i142 := $M.55;
    goto corral_source_split_3058;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $M.55 := out_$i141;
    call {:si_unique_call 780} {:cexpr "ldv_retval_20"} boogie_si_record_i32(out_$i141);
    goto corral_source_split_3057;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} out_$i141 := ks8851_resume(out_$p140);
    goto corral_source_split_3056;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    out_$p140 := $M.42;
    goto corral_source_split_3055;

  $bb160:
    assume out_$i139 == 1;
    goto corral_source_split_3054;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i138, 14);
    goto corral_source_split_3052;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    out_$i138 := $M.46;
    goto corral_source_split_3051;

  $bb158:
    assume out_$i137 == 1;
    goto corral_source_split_3050;

  $bb156:
    assume out_$i136 == 1;
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i32(out_$i116, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb150:
    assume out_$i133 == 1;
    assume {:verifier.code 0} true;
    out_$i136 := $slt.i32(out_$i116, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb140:
    assume out_$i128 == 1;
    assume {:verifier.code 0} true;
    out_$i133 := $slt.i32(out_$i116, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb117:
    assume out_$i117 == 1;
    assume {:verifier.code 0} true;
    out_$i128 := $slt.i32(out_$i116, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb116:
    assume {:verifier.code 0} true;
    out_$i117 := $slt.i32(out_$i116, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_2972:
    assume {:verifier.code 1} true;
    call {:si_unique_call 776} out_$i116 := __VERIFIER_nondet_int();
    call {:si_unique_call 777} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i116);
    call {:si_unique_call 778} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i116);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb114:
    assume out_$i115 == 1;
    goto corral_source_split_2972;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i32(out_$i114, 0);
    goto corral_source_split_2782;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    out_$i114 := $M.46;
    goto corral_source_split_2781;

  $bb16:
    assume out_$i19 == 1;
    goto corral_source_split_2780;

  $bb15:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i12, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb168:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb170:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 784} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_3072;

  $bb169:
    assume out_$i149 == 1;
    goto corral_source_split_3071;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    out_$i149 := $eq.i32(out_$i148, 0);
    goto corral_source_split_3069;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    out_$i148 := $M.56;
    goto corral_source_split_3068;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $M.56 := out_$i147;
    call {:si_unique_call 783} {:cexpr "ldv_retval_19"} boogie_si_record_i32(out_$i147);
    goto corral_source_split_3067;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} out_$i147 := ks8851_suspend(out_$p146);
    goto corral_source_split_3066;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    out_$p146 := $M.42;
    goto corral_source_split_3065;

  $bb167:
    assume out_$i145 == 1;
    goto corral_source_split_3064;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i144, 2);
    goto corral_source_split_3048;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    out_$i144 := $M.46;
    goto corral_source_split_3047;

  $bb157:
    assume !(out_$i136 == 1);
    goto corral_source_split_3046;

  $bb174:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb176:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $M.46 := 15;
    call {:si_unique_call 787} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(15);
    goto corral_source_split_3082;

  $bb175:
    assume out_$i155 == 1;
    goto corral_source_split_3081;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    out_$i155 := $eq.i32(out_$i154, 0);
    goto corral_source_split_3079;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    out_$i154 := $M.57;
    goto corral_source_split_3078;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $M.57 := out_$i153;
    call {:si_unique_call 786} {:cexpr "ldv_retval_18"} boogie_si_record_i32(out_$i153);
    goto corral_source_split_3077;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} out_$i153 := ks8851_resume(out_$p152);
    goto corral_source_split_3076;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    out_$p152 := $M.42;
    goto corral_source_split_3075;

  $bb173:
    assume out_$i151 == 1;
    goto corral_source_split_3074;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i150, 13);
    goto corral_source_split_3036;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    out_$i150 := $M.46;
    goto corral_source_split_3035;

  $bb152:
    assume out_$i134 == 1;
    goto corral_source_split_3034;

  $bb151:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    out_$i134 := $slt.i32(out_$i116, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb180:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb182:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 790} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_3092;

  $bb181:
    assume out_$i161 == 1;
    goto corral_source_split_3091;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i160, 0);
    goto corral_source_split_3089;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    out_$i160 := $M.58;
    goto corral_source_split_3088;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $M.58 := out_$i159;
    call {:si_unique_call 789} {:cexpr "ldv_retval_17"} boogie_si_record_i32(out_$i159);
    goto corral_source_split_3087;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} out_$i159 := ks8851_suspend(out_$p158);
    goto corral_source_split_3086;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    out_$p158 := $M.42;
    goto corral_source_split_3085;

  $bb179:
    assume out_$i157 == 1;
    goto corral_source_split_3084;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    out_$i157 := $eq.i32(out_$i156, 2);
    goto corral_source_split_3040;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    out_$i156 := $M.46;
    goto corral_source_split_3039;

  $bb154:
    assume out_$i135 == 1;
    goto corral_source_split_3038;

  $bb153:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    out_$i135 := $slt.i32(out_$i116, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb186:
    assume !(out_$i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb188:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $M.46 := 5;
    call {:si_unique_call 793} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(5);
    goto corral_source_split_3102;

  $bb187:
    assume out_$i167 == 1;
    goto corral_source_split_3101;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i32(out_$i166, 0);
    goto corral_source_split_3099;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    out_$i166 := $M.59;
    goto corral_source_split_3098;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $M.59 := out_$i165;
    call {:si_unique_call 792} {:cexpr "ldv_retval_16"} boogie_si_record_i32(out_$i165);
    goto corral_source_split_3097;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} out_$i165 := ks8851_suspend(out_$p164);
    goto corral_source_split_3096;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    out_$p164 := $M.42;
    goto corral_source_split_3095;

  $bb185:
    assume out_$i163 == 1;
    goto corral_source_split_3094;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i32(out_$i162, 2);
    goto corral_source_split_3044;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    out_$i162 := $M.46;
    goto corral_source_split_3043;

  $bb155:
    assume !(out_$i135 == 1);
    goto corral_source_split_3042;

  $bb192:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb194:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $M.46 := 15;
    call {:si_unique_call 796} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(15);
    goto corral_source_split_3112;

  $bb193:
    assume out_$i173 == 1;
    goto corral_source_split_3111;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    out_$i173 := $eq.i32(out_$i172, 0);
    goto corral_source_split_3109;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    out_$i172 := $M.60;
    goto corral_source_split_3108;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $M.60 := out_$i171;
    call {:si_unique_call 795} {:cexpr "ldv_retval_15"} boogie_si_record_i32(out_$i171);
    goto corral_source_split_3107;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} out_$i171 := ks8851_resume(out_$p170);
    goto corral_source_split_3106;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    out_$p170 := $M.42;
    goto corral_source_split_3105;

  $bb191:
    assume out_$i169 == 1;
    goto corral_source_split_3104;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i32(out_$i168, 12);
    goto corral_source_split_3028;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    out_$i168 := $M.46;
    goto corral_source_split_3027;

  $bb148:
    assume out_$i132 == 1;
    goto corral_source_split_3026;

  $bb142:
    assume out_$i129 == 1;
    assume {:verifier.code 0} true;
    out_$i132 := $slt.i32(out_$i116, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb141:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(out_$i116, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb198:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb200:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $M.46 := 6;
    call {:si_unique_call 799} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(6);
    goto corral_source_split_3121;

  $bb199:
    assume out_$i178 == 1;
    goto corral_source_split_3120;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    out_$i178 := $eq.i32(out_$i177, 0);
    goto corral_source_split_3118;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    out_$i177 := $M.61;
    goto corral_source_split_3117;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $M.61 := out_$i176;
    call {:si_unique_call 798} {:cexpr "ldv_retval_14"} boogie_si_record_i32(out_$i176);
    goto corral_source_split_3116;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} out_$i176 := ldv_suspend_late_4();
    goto corral_source_split_3115;

  $bb197:
    assume out_$i175 == 1;
    goto corral_source_split_3114;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    out_$i175 := $eq.i32(out_$i174, 3);
    goto corral_source_split_3032;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    out_$i174 := $M.46;
    goto corral_source_split_3031;

  $bb149:
    assume !(out_$i132 == 1);
    goto corral_source_split_3030;

  $bb204:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb206:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $M.46 := 13;
    call {:si_unique_call 802} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(13);
    goto corral_source_split_3130;

  $bb205:
    assume out_$i183 == 1;
    goto corral_source_split_3129;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i182, 0);
    goto corral_source_split_3127;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    out_$i182 := $M.62;
    goto corral_source_split_3126;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $M.62 := out_$i181;
    call {:si_unique_call 801} {:cexpr "ldv_retval_13"} boogie_si_record_i32(out_$i181);
    goto corral_source_split_3125;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} out_$i181 := ldv_restore_early_4();
    goto corral_source_split_3124;

  $bb203:
    assume out_$i180 == 1;
    goto corral_source_split_3123;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    out_$i180 := $eq.i32(out_$i179, 9);
    goto corral_source_split_3016;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    out_$i179 := $M.46;
    goto corral_source_split_3015;

  $bb144:
    assume out_$i130 == 1;
    goto corral_source_split_3014;

  $bb143:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    out_$i130 := $slt.i32(out_$i116, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb210:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb212:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $M.46 := 12;
    call {:si_unique_call 805} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(12);
    goto corral_source_split_3139;

  $bb211:
    assume out_$i188 == 1;
    goto corral_source_split_3138;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i187, 0);
    goto corral_source_split_3136;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    out_$i187 := $M.63;
    goto corral_source_split_3135;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $M.63 := out_$i186;
    call {:si_unique_call 804} {:cexpr "ldv_retval_12"} boogie_si_record_i32(out_$i186);
    goto corral_source_split_3134;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} out_$i186 := ldv_resume_early_4();
    goto corral_source_split_3133;

  $bb209:
    assume out_$i185 == 1;
    goto corral_source_split_3132;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    out_$i185 := $eq.i32(out_$i184, 6);
    goto corral_source_split_3020;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    out_$i184 := $M.46;
    goto corral_source_split_3019;

  $bb146:
    assume out_$i131 == 1;
    goto corral_source_split_3018;

  $bb145:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    out_$i131 := $slt.i32(out_$i116, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb216:
    assume !(out_$i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb218:
    assume !(out_$i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $M.46 := 14;
    call {:si_unique_call 808} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(14);
    goto corral_source_split_3148;

  $bb217:
    assume out_$i193 == 1;
    goto corral_source_split_3147;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    out_$i193 := $eq.i32(out_$i192, 0);
    goto corral_source_split_3145;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    out_$i192 := $M.64;
    goto corral_source_split_3144;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $M.64 := out_$i191;
    call {:si_unique_call 807} {:cexpr "ldv_retval_11"} boogie_si_record_i32(out_$i191);
    goto corral_source_split_3143;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} out_$i191 := ldv_thaw_early_4();
    goto corral_source_split_3142;

  $bb215:
    assume out_$i190 == 1;
    goto corral_source_split_3141;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    out_$i190 := $eq.i32(out_$i189, 11);
    goto corral_source_split_3024;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    out_$i189 := $M.46;
    goto corral_source_split_3023;

  $bb147:
    assume !(out_$i131 == 1);
    goto corral_source_split_3022;

  $bb222:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb224:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    goto $bb225;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $M.46 := 12;
    call {:si_unique_call 811} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(12);
    goto corral_source_split_3157;

  $bb223:
    assume out_$i198 == 1;
    goto corral_source_split_3156;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    out_$i198 := $eq.i32(out_$i197, 0);
    goto corral_source_split_3154;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    out_$i197 := $M.65;
    goto corral_source_split_3153;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $M.65 := out_$i196;
    call {:si_unique_call 810} {:cexpr "ldv_retval_10"} boogie_si_record_i32(out_$i196);
    goto corral_source_split_3152;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} out_$i196 := ldv_resume_noirq_4();
    goto corral_source_split_3151;

  $bb221:
    assume out_$i195 == 1;
    goto corral_source_split_3150;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i32(out_$i194, 7);
    goto corral_source_split_3008;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    out_$i194 := $M.46;
    goto corral_source_split_3007;

  $bb138:
    assume out_$i127 == 1;
    goto corral_source_split_3006;

  $bb132:
    assume out_$i124 == 1;
    assume {:verifier.code 0} true;
    out_$i127 := $slt.i32(out_$i116, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb119:
    assume out_$i118 == 1;
    assume {:verifier.code 0} true;
    out_$i124 := $slt.i32(out_$i116, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb118:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    out_$i118 := $slt.i32(out_$i116, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb228:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb230:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $M.46 := 10;
    call {:si_unique_call 814} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(10);
    goto corral_source_split_3166;

  $bb229:
    assume out_$i203 == 1;
    goto corral_source_split_3165;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    out_$i203 := $eq.i32(out_$i202, 0);
    goto corral_source_split_3163;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    out_$i202 := $M.66;
    goto corral_source_split_3162;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $M.66 := out_$i201;
    call {:si_unique_call 813} {:cexpr "ldv_retval_9"} boogie_si_record_i32(out_$i201);
    goto corral_source_split_3161;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} out_$i201 := ldv_freeze_noirq_4();
    goto corral_source_split_3160;

  $bb227:
    assume out_$i200 == 1;
    goto corral_source_split_3159;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    out_$i200 := $eq.i32(out_$i199, 5);
    goto corral_source_split_3012;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    out_$i199 := $M.46;
    goto corral_source_split_3011;

  $bb139:
    assume !(out_$i127 == 1);
    goto corral_source_split_3010;

  $bb234:
    assume !(out_$i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb236:
    assume !(out_$i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    goto $bb237;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $M.48 := out_$i210;
    call {:si_unique_call 818} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i210);
    goto corral_source_split_3178;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    out_$i210 := $add.i32(out_$i209, 1);
    goto corral_source_split_3177;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    out_$i209 := $M.48;
    goto corral_source_split_3176;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 817} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3175;

  $bb235:
    assume out_$i208 == 1;
    goto corral_source_split_3174;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    out_$i208 := $eq.i32(out_$i207, 0);
    goto corral_source_split_3172;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    out_$i207 := $M.67;
    goto corral_source_split_3171;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $M.67 := out_$i206;
    call {:si_unique_call 816} {:cexpr "ldv_retval_8"} boogie_si_record_i32(out_$i206);
    goto corral_source_split_3170;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} out_$i206 := ldv_prepare_4();
    goto corral_source_split_3169;

  $bb233:
    assume out_$i205 == 1;
    goto corral_source_split_3168;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    out_$i205 := $eq.i32(out_$i204, 1);
    goto corral_source_split_2996;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    out_$i204 := $M.46;
    goto corral_source_split_2995;

  $bb134:
    assume out_$i125 == 1;
    goto corral_source_split_2994;

  $bb133:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    out_$i125 := $slt.i32(out_$i116, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb240:
    assume !(out_$i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb242:
    assume !(out_$i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    goto $bb243;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $M.46 := 11;
    call {:si_unique_call 821} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(11);
    goto corral_source_split_3187;

  $bb241:
    assume out_$i215 == 1;
    goto corral_source_split_3186;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    out_$i215 := $eq.i32(out_$i214, 0);
    goto corral_source_split_3184;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    out_$i214 := $M.68;
    goto corral_source_split_3183;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $M.68 := out_$i213;
    call {:si_unique_call 820} {:cexpr "ldv_retval_7"} boogie_si_record_i32(out_$i213);
    goto corral_source_split_3182;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} out_$i213 := ldv_freeze_late_4();
    goto corral_source_split_3181;

  $bb239:
    assume out_$i212 == 1;
    goto corral_source_split_3180;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    out_$i212 := $eq.i32(out_$i211, 5);
    goto corral_source_split_3000;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    out_$i211 := $M.46;
    goto corral_source_split_2999;

  $bb136:
    assume out_$i126 == 1;
    goto corral_source_split_2998;

  $bb135:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    out_$i126 := $slt.i32(out_$i116, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb246:
    assume !(out_$i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb248:
    assume !(out_$i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    goto $bb249;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $M.46 := 14;
    call {:si_unique_call 824} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(14);
    goto corral_source_split_3196;

  $bb247:
    assume out_$i220 == 1;
    goto corral_source_split_3195;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    out_$i220 := $eq.i32(out_$i219, 0);
    goto corral_source_split_3193;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    out_$i219 := $M.69;
    goto corral_source_split_3192;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $M.69 := out_$i218;
    call {:si_unique_call 823} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i218);
    goto corral_source_split_3191;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} out_$i218 := ldv_thaw_noirq_4();
    goto corral_source_split_3190;

  $bb245:
    assume out_$i217 == 1;
    goto corral_source_split_3189;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    out_$i217 := $eq.i32(out_$i216, 10);
    goto corral_source_split_3004;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    out_$i216 := $M.46;
    goto corral_source_split_3003;

  $bb137:
    assume !(out_$i126 == 1);
    goto corral_source_split_3002;

  $bb252:
    assume !(out_$i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb254:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    goto $bb255;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $M.46 := 8;
    call {:si_unique_call 827} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(8);
    goto corral_source_split_3205;

  $bb253:
    assume out_$i225 == 1;
    goto corral_source_split_3204;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    out_$i225 := $eq.i32(out_$i224, 0);
    goto corral_source_split_3202;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    out_$i224 := $M.70;
    goto corral_source_split_3201;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $M.70 := out_$i223;
    call {:si_unique_call 826} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i223);
    goto corral_source_split_3200;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} out_$i223 := ldv_poweroff_noirq_4();
    goto corral_source_split_3199;

  $bb251:
    assume out_$i222 == 1;
    goto corral_source_split_3198;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    out_$i222 := $eq.i32(out_$i221, 4);
    goto corral_source_split_2988;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    out_$i221 := $M.46;
    goto corral_source_split_2987;

  $bb130:
    assume out_$i123 == 1;
    goto corral_source_split_2986;

  $bb121:
    assume out_$i119 == 1;
    assume {:verifier.code 0} true;
    out_$i123 := $slt.i32(out_$i116, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb120:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    out_$i119 := $slt.i32(out_$i116, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb258:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb260:
    assume !(out_$i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $M.46 := 9;
    call {:si_unique_call 830} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(9);
    goto corral_source_split_3214;

  $bb259:
    assume out_$i230 == 1;
    goto corral_source_split_3213;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i229, 0);
    goto corral_source_split_3211;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    out_$i229 := $M.71;
    goto corral_source_split_3210;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $M.71 := out_$i228;
    call {:si_unique_call 829} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i228);
    goto corral_source_split_3209;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} out_$i228 := ldv_poweroff_late_4();
    goto corral_source_split_3208;

  $bb257:
    assume out_$i227 == 1;
    goto corral_source_split_3207;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    out_$i227 := $eq.i32(out_$i226, 4);
    goto corral_source_split_2992;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    out_$i226 := $M.46;
    goto corral_source_split_2991;

  $bb131:
    assume !(out_$i123 == 1);
    goto corral_source_split_2990;

  $bb264:
    assume !(out_$i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb266:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    goto $bb267;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $M.46 := 13;
    call {:si_unique_call 833} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(13);
    goto corral_source_split_3223;

  $bb265:
    assume out_$i235 == 1;
    goto corral_source_split_3222;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    out_$i235 := $eq.i32(out_$i234, 0);
    goto corral_source_split_3220;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    out_$i234 := $M.72;
    goto corral_source_split_3219;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $M.72 := out_$i233;
    call {:si_unique_call 832} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i233);
    goto corral_source_split_3218;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} out_$i233 := ldv_restore_noirq_4();
    goto corral_source_split_3217;

  $bb263:
    assume out_$i232 == 1;
    goto corral_source_split_3216;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    out_$i232 := $eq.i32(out_$i231, 8);
    goto corral_source_split_2976;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    out_$i231 := $M.46;
    goto corral_source_split_2975;

  $bb123:
    assume out_$i120 == 1;
    goto corral_source_split_2974;

  $bb122:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    out_$i120 := $slt.i32(out_$i116, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb270:
    assume !(out_$i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb272:
    assume !(out_$i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    goto $bb273;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $M.46 := 7;
    call {:si_unique_call 836} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(7);
    goto corral_source_split_3232;

  $bb271:
    assume out_$i240 == 1;
    goto corral_source_split_3231;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    out_$i240 := $eq.i32(out_$i239, 0);
    goto corral_source_split_3229;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    out_$i239 := $M.73;
    goto corral_source_split_3228;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $M.73 := out_$i238;
    call {:si_unique_call 835} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i238);
    goto corral_source_split_3227;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} out_$i238 := ldv_suspend_noirq_4();
    goto corral_source_split_3226;

  $bb269:
    assume out_$i237 == 1;
    goto corral_source_split_3225;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    out_$i237 := $eq.i32(out_$i236, 3);
    goto corral_source_split_2980;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    out_$i236 := $M.46;
    goto corral_source_split_2979;

  $bb125:
    assume out_$i121 == 1;
    goto corral_source_split_2978;

  $bb124:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    out_$i121 := $slt.i32(out_$i116, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb276:
    assume !(out_$i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $M.48 := out_$i245;
    call {:si_unique_call 839} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i245);
    goto corral_source_split_3239;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    out_$i245 := $sub.i32(out_$i244, 1);
    goto corral_source_split_3238;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    out_$i244 := $M.48;
    goto corral_source_split_3237;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 838} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3236;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} out_vslice_dummy_var_94 := ldv_complete_4();
    goto corral_source_split_3235;

  $bb275:
    assume out_$i242 == 1;
    goto corral_source_split_3234;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    out_$i242 := $eq.i32(out_$i241, 15);
    goto corral_source_split_2984;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    out_$i241 := $M.46;
    goto corral_source_split_2983;

  $bb127:
    assume out_$i122 == 1;
    goto corral_source_split_2982;

  $bb126:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i116, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} ldv_stop();
    goto corral_source_split_3241;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb128:
    assume {:verifier.code 0} true;
    assume !(out_$i122 == 1);
    goto $bb129;

  $bb159:
    assume {:verifier.code 0} true;
    assume !(out_$i137 == 1);
    goto $bb129;

  $bb282:
    assume !(out_$i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} choose_interrupt_1();
    goto corral_source_split_3244;

  $bb281:
    assume out_$i247 == 1;
    goto corral_source_split_3243;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    out_$i247 := $ne.i32(out_$i246, 0);
    goto corral_source_split_2786;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    out_$i246 := $M.47;
    goto corral_source_split_2785;

  $bb17:
    assume !(out_$i19 == 1);
    goto corral_source_split_2784;

  $bb285:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb296:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb295:
    assume {:verifier.code 0} true;
    assume !(out_$i255 == 1);
    goto $bb296;

  $bb298:
    assume {:verifier.code 0} true;
    assume !(out_$i257 == 1);
    goto $bb296;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    out_$i257 := $eq.i32(out_$i256, 0);
    goto corral_source_split_3258;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    out_$i256 := $M.48;
    goto corral_source_split_3257;

  $bb294:
    assume out_$i255 == 1;
    goto corral_source_split_3256;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    out_$i255 := $eq.i32(out_$i254, 3);
    goto corral_source_split_3254;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    out_$i254 := $M.49;
    goto corral_source_split_3253;

  $bb292:
    assume out_$i253 == 1;
    goto corral_source_split_3252;

  $bb287:
    assume out_$i251 == 1;
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i250, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  $bb286:
    assume {:verifier.code 0} true;
    out_$i251 := $slt.i32(out_$i250, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  corral_source_split_3246:
    assume {:verifier.code 1} true;
    call {:si_unique_call 842} out_$i250 := __VERIFIER_nondet_int();
    call {:si_unique_call 843} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i250);
    call {:si_unique_call 844} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i250);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb284:
    assume out_$i249 == 1;
    goto corral_source_split_3246;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    out_$i249 := $ne.i32(out_$i248, 0);
    goto corral_source_split_2774;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    out_$i248 := $M.49;
    goto corral_source_split_2773;

  $bb12:
    assume out_$i17 == 1;
    goto corral_source_split_2772;

  $bb5:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i12, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i12, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb303:
    assume !(out_$i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb308:
    assume !(out_$i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    out_$i264 := $ne.i32(out_$i263, 0);
    goto corral_source_split_3282;

  $bb306:
    assume {:verifier.code 0} true;
    out_$i263 := $M.74;
    goto corral_source_split_3281;

  $bb305:
    assume !(out_$i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    goto $bb306;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} ldv_dev_pm_ops_4();
    goto corral_source_split_3279;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 855} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3278;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} ldv_initialize_spi_driver_3();
    goto corral_source_split_3277;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 853} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3276;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} ldv_initialize_ethtool_ops_5();
    goto corral_source_split_3275;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 851} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3274;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 850} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_3273;

  $bb304:
    assume out_$i262 == 1;
    goto corral_source_split_3272;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    out_$i262 := $eq.i32(out_$i261, 0);
    goto corral_source_split_3270;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    out_$i261 := $M.74;
    goto corral_source_split_3269;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $M.74 := out_$i260;
    call {:si_unique_call 849} {:cexpr "ldv_retval_21"} boogie_si_record_i32(out_$i260);
    goto corral_source_split_3268;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} out_$i260 := ks8851_driver_init();
    goto corral_source_split_3267;

  $bb302:
    assume out_$i259 == 1;
    goto corral_source_split_3266;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    out_$i259 := $eq.i32(out_$i258, 1);
    goto corral_source_split_3250;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    out_$i258 := $M.49;
    goto corral_source_split_3249;

  $bb289:
    assume out_$i252 == 1;
    goto corral_source_split_3248;

  $bb288:
    assume !(out_$i251 == 1);
    assume {:verifier.code 0} true;
    out_$i252 := $eq.i32(out_$i250, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} ldv_stop();
    goto corral_source_split_3287;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb290:
    assume {:verifier.code 0} true;
    assume !(out_$i252 == 1);
    goto $bb291;

  $bb293:
    assume {:verifier.code 0} true;
    assume !(out_$i253 == 1);
    goto $bb291;

  $bb315:
    assume !(out_$i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb325:
    assume !(out_$i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb327:
    assume !(out_$i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $M.48 := out_$i278;
    call {:si_unique_call 865} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i278);
    goto corral_source_split_3310;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    out_$i278 := $add.i32(out_$i277, 1);
    goto corral_source_split_3309;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    out_$i277 := $M.48;
    goto corral_source_split_3308;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 864} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_3307;

  $bb326:
    assume out_$i276 == 1;
    goto corral_source_split_3306;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    out_$i276 := $eq.i32(out_$i275, 0);
    goto corral_source_split_3304;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    out_$i275 := $M.75;
    goto corral_source_split_3303;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $M.75 := out_$i274;
    call {:si_unique_call 863} {:cexpr "ldv_retval_22"} boogie_si_record_i32(out_$i274);
    goto corral_source_split_3302;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} out_$i274 := ks8851_probe(out_$p273);
    goto corral_source_split_3301;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    out_$p273 := $M.41;
    goto corral_source_split_3300;

  $bb324:
    assume out_$i272 == 1;
    goto corral_source_split_3299;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    out_$i272 := $eq.i32(out_$i271, 1);
    goto corral_source_split_3297;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    out_$i271 := $M.50;
    goto corral_source_split_3296;

  $bb322:
    assume out_$i270 == 1;
    goto corral_source_split_3295;

  $bb317:
    assume out_$i268 == 1;
    assume {:verifier.code 0} true;
    out_$i270 := $eq.i32(out_$i267, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  $bb316:
    assume {:verifier.code 0} true;
    out_$i268 := $slt.i32(out_$i267, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  corral_source_split_3289:
    assume {:verifier.code 1} true;
    call {:si_unique_call 859} out_$i267 := __VERIFIER_nondet_int();
    call {:si_unique_call 860} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i267);
    call {:si_unique_call 861} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i267);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb314:
    assume out_$i266 == 1;
    goto corral_source_split_3289;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    out_$i266 := $ne.i32(out_$i265, 0);
    goto corral_source_split_2778;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    out_$i265 := $M.50;
    goto corral_source_split_2777;

  $bb13:
    assume !(out_$i17 == 1);
    goto corral_source_split_2776;

  $bb332:
    assume !(out_$i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    goto $bb333;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $M.48 := out_$i284;
    call {:si_unique_call 868} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i284);
    goto corral_source_split_3318;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    out_$i284 := $sub.i32(out_$i283, 1);
    goto corral_source_split_3317;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    out_$i283 := $M.48;
    goto corral_source_split_3316;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 867} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_3315;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} out_vslice_dummy_var_95 := ks8851_remove(out_$p281);
    goto corral_source_split_3314;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    out_$p281 := $M.41;
    goto corral_source_split_3313;

  $bb331:
    assume out_$i280 == 1;
    goto corral_source_split_3312;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    out_$i280 := $eq.i32(out_$i279, 2);
    goto corral_source_split_3293;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    out_$i279 := $M.50;
    goto corral_source_split_3292;

  $bb319:
    assume out_$i269 == 1;
    goto corral_source_split_3291;

  $bb318:
    assume !(out_$i268 == 1);
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i32(out_$i267, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} ldv_stop();
    goto corral_source_split_3320;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb320:
    assume {:verifier.code 0} true;
    assume !(out_$i269 == 1);
    goto $bb321;

  $bb323:
    assume {:verifier.code 0} true;
    assume !(out_$i270 == 1);
    goto $bb321;

  $bb338:
    assume !(out_$i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb339;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    goto $bb339;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} choose_interrupt_2();
    goto corral_source_split_3323;

  $bb337:
    assume out_$i286 == 1;
    goto corral_source_split_3322;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    out_$i286 := $ne.i32(out_$i285, 0);
    goto corral_source_split_2766;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    out_$i285 := $M.51;
    goto corral_source_split_2765;

  $bb7:
    assume out_$i15 == 1;
    goto corral_source_split_2764;

  $bb6:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i12, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb341:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb398:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb372:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb367:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb368;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    goto $bb368;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 875} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3371;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} out_vslice_dummy_var_96 := ks8851_get_settings(out_$p303, out_$p304);
    goto corral_source_split_3370;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    out_$p304 := $M.43;
    goto corral_source_split_3369;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    out_$p303 := $M.45;
    goto corral_source_split_3368;

  $bb366:
    assume out_$i302 == 1;
    goto corral_source_split_3367;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb366, $bb367;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    out_$i302 := $eq.i32(out_$i301, 1);
    goto corral_source_split_3365;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    out_$i301 := $M.52;
    goto corral_source_split_3364;

  $bb364:
    assume out_$i300 == 1;
    goto corral_source_split_3363;

  $bb362:
    assume out_$i299 == 1;
    assume {:verifier.code 0} true;
    out_$i300 := $eq.i32(out_$i289, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  $bb356:
    assume out_$i296 == 1;
    assume {:verifier.code 0} true;
    out_$i299 := $slt.i32(out_$i289, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  $bb343:
    assume out_$i290 == 1;
    assume {:verifier.code 0} true;
    out_$i296 := $slt.i32(out_$i289, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb342:
    assume {:verifier.code 0} true;
    out_$i290 := $slt.i32(out_$i289, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb343, $bb344;

  corral_source_split_3325:
    assume {:verifier.code 1} true;
    call {:si_unique_call 871} out_$i289 := __VERIFIER_nondet_int();
    call {:si_unique_call 872} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i289);
    call {:si_unique_call 873} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i289);
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb340:
    assume out_$i288 == 1;
    goto corral_source_split_3325;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    out_$i288 := $ne.i32(out_$i287, 0);
    goto corral_source_split_2770;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    out_$i287 := $M.52;
    goto corral_source_split_2769;

  $bb9:
    assume out_$i16 == 1;
    goto corral_source_split_2768;

  $bb8:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i12, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb371:
    assume !(out_$i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    goto $bb372;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 877} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3376;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} ks8851_get_drvinfo(out_$p308, in_$p8);
    goto corral_source_split_3375;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    out_$p308 := $M.45;
    goto corral_source_split_3374;

  $bb370:
    assume out_$i307 == 1;
    goto corral_source_split_3373;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    out_$i307 := $eq.i32(out_$i306, 1);
    goto corral_source_split_3361;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    out_$i306 := $M.52;
    goto corral_source_split_3360;

  $bb363:
    assume !(out_$i299 == 1);
    goto corral_source_split_3359;

  $bb374:
    assume !(out_$i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    goto $bb375;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 879} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3381;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} ks8851_set_msglevel(out_$p311, in_$i9);
    goto corral_source_split_3380;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    out_$p311 := $M.45;
    goto corral_source_split_3379;

  $bb373:
    assume out_$i310 == 1;
    goto corral_source_split_3378;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    out_$i310 := $eq.i32(out_$i309, 1);
    goto corral_source_split_3349;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    out_$i309 := $M.52;
    goto corral_source_split_3348;

  $bb358:
    assume out_$i297 == 1;
    goto corral_source_split_3347;

  $bb357:
    assume !(out_$i296 == 1);
    assume {:verifier.code 0} true;
    out_$i297 := $slt.i32(out_$i289, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  $bb377:
    assume !(out_$i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb378;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    goto $bb378;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 881} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3386;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} out_vslice_dummy_var_97 := ks8851_get_eeprom_len(out_$p314);
    goto corral_source_split_3385;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    out_$p314 := $M.45;
    goto corral_source_split_3384;

  $bb376:
    assume out_$i313 == 1;
    goto corral_source_split_3383;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    out_$i313 := $eq.i32(out_$i312, 1);
    goto corral_source_split_3353;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    out_$i312 := $M.52;
    goto corral_source_split_3352;

  $bb360:
    assume out_$i298 == 1;
    goto corral_source_split_3351;

  $bb359:
    assume !(out_$i297 == 1);
    assume {:verifier.code 0} true;
    out_$i298 := $slt.i32(out_$i289, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb360, $bb361;

  $bb380:
    assume !(out_$i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    goto $bb381;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 883} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3392;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} out_vslice_dummy_var_98 := ks8851_set_settings(out_$p318, out_$p319);
    goto corral_source_split_3391;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    out_$p319 := $M.43;
    goto corral_source_split_3390;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    out_$p318 := $M.45;
    goto corral_source_split_3389;

  $bb379:
    assume out_$i317 == 1;
    goto corral_source_split_3388;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    out_$i317 := $eq.i32(out_$i316, 1);
    goto corral_source_split_3357;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    out_$i316 := $M.52;
    goto corral_source_split_3356;

  $bb361:
    assume !(out_$i298 == 1);
    goto corral_source_split_3355;

  $bb383:
    assume !(out_$i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb384;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    goto $bb384;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 885} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3398;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} out_vslice_dummy_var_99 := ks8851_get_eeprom(out_$p323, out_$p324, in_$p11);
    goto corral_source_split_3397;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    out_$p324 := $M.44;
    goto corral_source_split_3396;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    out_$p323 := $M.45;
    goto corral_source_split_3395;

  $bb382:
    assume out_$i322 == 1;
    goto corral_source_split_3394;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    out_$i322 := $eq.i32(out_$i321, 1);
    goto corral_source_split_3341;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    out_$i321 := $M.52;
    goto corral_source_split_3340;

  $bb354:
    assume out_$i295 == 1;
    goto corral_source_split_3339;

  $bb345:
    assume out_$i291 == 1;
    assume {:verifier.code 0} true;
    out_$i295 := $slt.i32(out_$i289, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb354, $bb355;

  $bb344:
    assume !(out_$i290 == 1);
    assume {:verifier.code 0} true;
    out_$i291 := $slt.i32(out_$i289, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb345, $bb346;

  $bb386:
    assume !(out_$i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    goto $bb387;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 887} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3403;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} out_vslice_dummy_var_100 := ks8851_nway_reset(out_$p328);
    goto corral_source_split_3402;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    out_$p328 := $M.45;
    goto corral_source_split_3401;

  $bb385:
    assume out_$i327 == 1;
    goto corral_source_split_3400;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb385, $bb386;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    out_$i327 := $eq.i32(out_$i326, 1);
    goto corral_source_split_3345;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    out_$i326 := $M.52;
    goto corral_source_split_3344;

  $bb355:
    assume !(out_$i295 == 1);
    goto corral_source_split_3343;

  $bb389:
    assume !(out_$i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb390;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    goto $bb390;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 889} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3409;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} out_vslice_dummy_var_101 := ks8851_set_eeprom(out_$p332, out_$p333, in_$p10);
    goto corral_source_split_3408;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    out_$p333 := $M.44;
    goto corral_source_split_3407;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    out_$p332 := $M.45;
    goto corral_source_split_3406;

  $bb388:
    assume out_$i331 == 1;
    goto corral_source_split_3405;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb388, $bb389;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    out_$i331 := $eq.i32(out_$i330, 1);
    goto corral_source_split_3329;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    out_$i330 := $M.52;
    goto corral_source_split_3328;

  $bb347:
    assume out_$i292 == 1;
    goto corral_source_split_3327;

  $bb346:
    assume !(out_$i291 == 1);
    assume {:verifier.code 0} true;
    out_$i292 := $slt.i32(out_$i289, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  $bb392:
    assume !(out_$i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb393;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    goto $bb393;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 891} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3414;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} out_vslice_dummy_var_102 := ks8851_get_msglevel(out_$p337);
    goto corral_source_split_3413;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    out_$p337 := $M.45;
    goto corral_source_split_3412;

  $bb391:
    assume out_$i336 == 1;
    goto corral_source_split_3411;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    out_$i336 := $eq.i32(out_$i335, 1);
    goto corral_source_split_3333;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    out_$i335 := $M.52;
    goto corral_source_split_3332;

  $bb349:
    assume out_$i293 == 1;
    goto corral_source_split_3331;

  $bb348:
    assume !(out_$i292 == 1);
    assume {:verifier.code 0} true;
    out_$i293 := $slt.i32(out_$i289, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb349, $bb350;

  $bb395:
    assume !(out_$i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb396;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    goto $bb396;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 893} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_3419;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} out_vslice_dummy_var_103 := ks8851_get_link(out_$p341);
    goto corral_source_split_3418;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    out_$p341 := $M.45;
    goto corral_source_split_3417;

  $bb394:
    assume out_$i340 == 1;
    goto corral_source_split_3416;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb394, $bb395;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    out_$i340 := $eq.i32(out_$i339, 1);
    goto corral_source_split_3337;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    out_$i339 := $M.52;
    goto corral_source_split_3336;

  $bb351:
    assume out_$i294 == 1;
    goto corral_source_split_3335;

  $bb350:
    assume !(out_$i293 == 1);
    assume {:verifier.code 0} true;
    out_$i294 := $eq.i32(out_$i289, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb351, $bb352;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} ldv_stop();
    goto corral_source_split_3421;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb352:
    assume {:verifier.code 0} true;
    assume !(out_$i294 == 1);
    goto $bb353;

  $bb365:
    assume {:verifier.code 0} true;
    assume !(out_$i300 == 1);
    goto $bb353;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} ldv_stop();
    goto corral_source_split_3423;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i16 == 1);
    goto $bb11;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb11;

  $bb113_dummy:
    call {:si_unique_call 1} out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i39, out_$i40, out_$p41, out_$i43, out_$i44, out_$p45, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i60, out_$i61, out_$p62, out_$i64, out_$i65, out_$p66, out_$i68, out_$i69, out_$p70, out_$i72, out_$i73, out_$p74, out_$i76, out_$i77, out_$p78, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i90, out_$i91, out_$p92, out_$i94, out_$i95, out_$p96, out_$i98, out_$i99, out_$p100, out_$i102, out_$i103, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$p152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$p164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$p273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$p281, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$p303, out_$p304, out_$i306, out_$i307, out_$p308, out_$i309, out_$i310, out_$p311, out_$i312, out_$i313, out_$p314, out_$i316, out_$i317, out_$p318, out_$p319, out_$i321, out_$i322, out_$p323, out_$p324, out_$i326, out_$i327, out_$p328, out_$i330, out_$i331, out_$p332, out_$p333, out_$i335, out_$i336, out_$p337, out_$i339, out_$i340, out_$p341, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103 := main_loop_$bb1(in_$p1, in_$p3, in_$i4, in_$p5, in_$i6, in_$p8, in_$i9, in_$p10, in_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i39, out_$i40, out_$p41, out_$i43, out_$i44, out_$p45, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i60, out_$i61, out_$p62, out_$i64, out_$i65, out_$p66, out_$i68, out_$i69, out_$p70, out_$i72, out_$i73, out_$p74, out_$i76, out_$i77, out_$p78, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i90, out_$i91, out_$p92, out_$i94, out_$i95, out_$p96, out_$i98, out_$i99, out_$p100, out_$i102, out_$i103, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$p152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$p164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$p273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$p281, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$p303, out_$p304, out_$i306, out_$i307, out_$p308, out_$i309, out_$i310, out_$p311, out_$i312, out_$i313, out_$p314, out_$i316, out_$i317, out_$p318, out_$p319, out_$i321, out_$i322, out_$p323, out_$p324, out_$i326, out_$i327, out_$p328, out_$i330, out_$i331, out_$p332, out_$p333, out_$i335, out_$i336, out_$p337, out_$i339, out_$i340, out_$p341, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p1: ref, in_$p3: ref, in_$i4: i32, in_$p5: ref, in_$i6: i32, in_$p8: ref, in_$i9: i32, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i90: i32, in_$i91: i1, in_$p92: ref, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i98: i32, in_$i99: i1, in_$p100: ref, in_$i102: i32, in_$i103: i1, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i32, in_$i111: i1, in_$i112: i32, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$i118: i1, in_$i119: i1, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$i141: i32, in_$i142: i32, in_$i143: i1, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$i147: i32, in_$i148: i32, in_$i149: i1, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i153: i32, in_$i154: i32, in_$i155: i1, in_$i156: i32, in_$i157: i1, in_$p158: ref, in_$i159: i32, in_$i160: i32, in_$i161: i1, in_$i162: i32, in_$i163: i1, in_$p164: ref, in_$i165: i32, in_$i166: i32, in_$i167: i1, in_$i168: i32, in_$i169: i1, in_$p170: ref, in_$i171: i32, in_$i172: i32, in_$i173: i1, in_$i174: i32, in_$i175: i1, in_$i176: i32, in_$i177: i32, in_$i178: i1, in_$i179: i32, in_$i180: i1, in_$i181: i32, in_$i182: i32, in_$i183: i1, in_$i184: i32, in_$i185: i1, in_$i186: i32, in_$i187: i32, in_$i188: i1, in_$i189: i32, in_$i190: i1, in_$i191: i32, in_$i192: i32, in_$i193: i1, in_$i194: i32, in_$i195: i1, in_$i196: i32, in_$i197: i32, in_$i198: i1, in_$i199: i32, in_$i200: i1, in_$i201: i32, in_$i202: i32, in_$i203: i1, in_$i204: i32, in_$i205: i1, in_$i206: i32, in_$i207: i32, in_$i208: i1, in_$i209: i32, in_$i210: i32, in_$i211: i32, in_$i212: i1, in_$i213: i32, in_$i214: i32, in_$i215: i1, in_$i216: i32, in_$i217: i1, in_$i218: i32, in_$i219: i32, in_$i220: i1, in_$i221: i32, in_$i222: i1, in_$i223: i32, in_$i224: i32, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$i228: i32, in_$i229: i32, in_$i230: i1, in_$i231: i32, in_$i232: i1, in_$i233: i32, in_$i234: i32, in_$i235: i1, in_$i236: i32, in_$i237: i1, in_$i238: i32, in_$i239: i32, in_$i240: i1, in_$i241: i32, in_$i242: i1, in_$i244: i32, in_$i245: i32, in_$i246: i32, in_$i247: i1, in_$i248: i32, in_$i249: i1, in_$i250: i32, in_$i251: i1, in_$i252: i1, in_$i253: i1, in_$i254: i32, in_$i255: i1, in_$i256: i32, in_$i257: i1, in_$i258: i32, in_$i259: i1, in_$i260: i32, in_$i261: i32, in_$i262: i1, in_$i263: i32, in_$i264: i1, in_$i265: i32, in_$i266: i1, in_$i267: i32, in_$i268: i1, in_$i269: i1, in_$i270: i1, in_$i271: i32, in_$i272: i1, in_$p273: ref, in_$i274: i32, in_$i275: i32, in_$i276: i1, in_$i277: i32, in_$i278: i32, in_$i279: i32, in_$i280: i1, in_$p281: ref, in_$i283: i32, in_$i284: i32, in_$i285: i32, in_$i286: i1, in_$i287: i32, in_$i288: i1, in_$i289: i32, in_$i290: i1, in_$i291: i1, in_$i292: i1, in_$i293: i1, in_$i294: i1, in_$i295: i1, in_$i296: i1, in_$i297: i1, in_$i298: i1, in_$i299: i1, in_$i300: i1, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$p304: ref, in_$i306: i32, in_$i307: i1, in_$p308: ref, in_$i309: i32, in_$i310: i1, in_$p311: ref, in_$i312: i32, in_$i313: i1, in_$p314: ref, in_$i316: i32, in_$i317: i1, in_$p318: ref, in_$p319: ref, in_$i321: i32, in_$i322: i1, in_$p323: ref, in_$p324: ref, in_$i326: i32, in_$i327: i1, in_$p328: ref, in_$i330: i32, in_$i331: i1, in_$p332: ref, in_$p333: ref, in_$i335: i32, in_$i336: i1, in_$p337: ref, in_$i339: i32, in_$i340: i1, in_$p341: ref, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32) returns (out_$i12: i32, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i90: i32, out_$i91: i1, out_$p92: ref, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i98: i32, out_$i99: i1, out_$p100: ref, out_$i102: i32, out_$i103: i1, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i32, out_$i111: i1, out_$i112: i32, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$i118: i1, out_$i119: i1, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$i141: i32, out_$i142: i32, out_$i143: i1, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$i147: i32, out_$i148: i32, out_$i149: i1, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i153: i32, out_$i154: i32, out_$i155: i1, out_$i156: i32, out_$i157: i1, out_$p158: ref, out_$i159: i32, out_$i160: i32, out_$i161: i1, out_$i162: i32, out_$i163: i1, out_$p164: ref, out_$i165: i32, out_$i166: i32, out_$i167: i1, out_$i168: i32, out_$i169: i1, out_$p170: ref, out_$i171: i32, out_$i172: i32, out_$i173: i1, out_$i174: i32, out_$i175: i1, out_$i176: i32, out_$i177: i32, out_$i178: i1, out_$i179: i32, out_$i180: i1, out_$i181: i32, out_$i182: i32, out_$i183: i1, out_$i184: i32, out_$i185: i1, out_$i186: i32, out_$i187: i32, out_$i188: i1, out_$i189: i32, out_$i190: i1, out_$i191: i32, out_$i192: i32, out_$i193: i1, out_$i194: i32, out_$i195: i1, out_$i196: i32, out_$i197: i32, out_$i198: i1, out_$i199: i32, out_$i200: i1, out_$i201: i32, out_$i202: i32, out_$i203: i1, out_$i204: i32, out_$i205: i1, out_$i206: i32, out_$i207: i32, out_$i208: i1, out_$i209: i32, out_$i210: i32, out_$i211: i32, out_$i212: i1, out_$i213: i32, out_$i214: i32, out_$i215: i1, out_$i216: i32, out_$i217: i1, out_$i218: i32, out_$i219: i32, out_$i220: i1, out_$i221: i32, out_$i222: i1, out_$i223: i32, out_$i224: i32, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$i228: i32, out_$i229: i32, out_$i230: i1, out_$i231: i32, out_$i232: i1, out_$i233: i32, out_$i234: i32, out_$i235: i1, out_$i236: i32, out_$i237: i1, out_$i238: i32, out_$i239: i32, out_$i240: i1, out_$i241: i32, out_$i242: i1, out_$i244: i32, out_$i245: i32, out_$i246: i32, out_$i247: i1, out_$i248: i32, out_$i249: i1, out_$i250: i32, out_$i251: i1, out_$i252: i1, out_$i253: i1, out_$i254: i32, out_$i255: i1, out_$i256: i32, out_$i257: i1, out_$i258: i32, out_$i259: i1, out_$i260: i32, out_$i261: i32, out_$i262: i1, out_$i263: i32, out_$i264: i1, out_$i265: i32, out_$i266: i1, out_$i267: i32, out_$i268: i1, out_$i269: i1, out_$i270: i1, out_$i271: i32, out_$i272: i1, out_$p273: ref, out_$i274: i32, out_$i275: i32, out_$i276: i1, out_$i277: i32, out_$i278: i32, out_$i279: i32, out_$i280: i1, out_$p281: ref, out_$i283: i32, out_$i284: i32, out_$i285: i32, out_$i286: i1, out_$i287: i32, out_$i288: i1, out_$i289: i32, out_$i290: i1, out_$i291: i1, out_$i292: i1, out_$i293: i1, out_$i294: i1, out_$i295: i1, out_$i296: i1, out_$i297: i1, out_$i298: i1, out_$i299: i1, out_$i300: i1, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$p304: ref, out_$i306: i32, out_$i307: i1, out_$p308: ref, out_$i309: i32, out_$i310: i1, out_$p311: ref, out_$i312: i32, out_$i313: i1, out_$p314: ref, out_$i316: i32, out_$i317: i1, out_$p318: ref, out_$p319: ref, out_$i321: i32, out_$i322: i1, out_$p323: ref, out_$p324: ref, out_$i326: i32, out_$i327: i1, out_$p328: ref, out_$i330: i32, out_$i331: i1, out_$p332: ref, out_$p333: ref, out_$i335: i32, out_$i336: i1, out_$p337: ref, out_$i339: i32, out_$i340: i1, out_$p341: ref, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32);
  modifies $M.2, $M.0, $CurrAddr, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.25, $M.24, $M.53, $M.48, $M.54, $M.46, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.3, $M.42, $M.41, $M.50, $M.43, $M.44, $M.45, $M.52, $M.49, $M.74, $M.75, $M.5, $M.7, $M.9, $M.4, $M.18, $M.6, $M.19, $M.8, $M.20, $M.10, $M.21, $M.17, $M.28, $M.27;


