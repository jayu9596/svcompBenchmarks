var $M.0: [ref]i8;

var $M.1: [ref]i32;

var $M.2: [ref]i32;

var $M.3: [ref]i8;

var $M.4: i32;

var $M.5: [ref]i32;

var $M.6: i32;

var $M.7: i32;

var $M.8: i32;

var $M.9: ref;

var $M.10: [ref]i8;

var $M.12: [ref]i8;

var $M.13: ref;

var $M.14: ref;

var $M.15: ref;

var $M.16: ref;

var $M.17: ref;

var $M.18: ref;

var $M.19: ref;

var $M.20: ref;

var $M.21: i32;

var $M.22: i32;

var $M.23: i32;

var $M.24: i32;

var $M.25: i32;

var $M.26: i32;

var $M.27: i32;

var $M.28: i32;

var $M.29: i32;

var $M.30: i32;

var $M.31: i32;

var $M.32: i32;

var $M.33: i32;

var $M.34: i32;

var $M.35: i32;

var $M.36: i32;

var $M.37: i32;

var $M.38: i32;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.59: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 544338);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const jme_netdev_ops_group1: ref;

axiom jme_netdev_ops_group1 == $sub.ref(0, 2060);

const jme_driver_group1: ref;

axiom jme_driver_group1 == $sub.ref(0, 3092);

const jme_ethtool_ops_group3: ref;

axiom jme_ethtool_ops_group3 == $sub.ref(0, 4124);

const jme_ethtool_ops_group4: ref;

axiom jme_ethtool_ops_group4 == $sub.ref(0, 5156);

const jme_ethtool_ops_group1: ref;

axiom jme_ethtool_ops_group1 == $sub.ref(0, 6188);

const jme_ethtool_ops_group0: ref;

axiom jme_ethtool_ops_group0 == $sub.ref(0, 7220);

const jme_ethtool_ops_group5: ref;

axiom jme_ethtool_ops_group5 == $sub.ref(0, 8252);

const jme_ethtool_ops_group2: ref;

axiom jme_ethtool_ops_group2 == $sub.ref(0, 9284);

const jme_pm_ops_group1: ref;

axiom jme_pm_ops_group1 == $sub.ref(0, 10316);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 11344);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 12372);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 13400);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 14428);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 15456);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 16484);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 17512);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 18540);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 19568);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 20596);

const ldv_retval_22: ref;

axiom ldv_retval_22 == $sub.ref(0, 21624);

const ldv_retval_21: ref;

axiom ldv_retval_21 == $sub.ref(0, 22652);

const ldv_retval_20: ref;

axiom ldv_retval_20 == $sub.ref(0, 23680);

const ldv_retval_19: ref;

axiom ldv_retval_19 == $sub.ref(0, 24708);

const ldv_retval_18: ref;

axiom ldv_retval_18 == $sub.ref(0, 25736);

const ldv_retval_17: ref;

axiom ldv_retval_17 == $sub.ref(0, 26764);

const ldv_retval_16: ref;

axiom ldv_retval_16 == $sub.ref(0, 27792);

const ldv_retval_15: ref;

axiom ldv_retval_15 == $sub.ref(0, 28820);

const ldv_retval_14: ref;

axiom ldv_retval_14 == $sub.ref(0, 29848);

const ldv_retval_13: ref;

axiom ldv_retval_13 == $sub.ref(0, 30876);

const ldv_retval_12: ref;

axiom ldv_retval_12 == $sub.ref(0, 31904);

const ldv_retval_11: ref;

axiom ldv_retval_11 == $sub.ref(0, 32932);

const ldv_retval_10: ref;

axiom ldv_retval_10 == $sub.ref(0, 33960);

const ldv_retval_9: ref;

axiom ldv_retval_9 == $sub.ref(0, 34988);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 36016);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 37044);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 38072);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 39100);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 40128);

const LDV_PCI_DMA_PAGE_BUFS: ref;

axiom LDV_PCI_DMA_PAGE_BUFS == $sub.ref(0, 41156);

const LDV_PCI_DMA_BUFS: ref;

axiom LDV_PCI_DMA_BUFS == $sub.ref(0, 42184);

const pci_counter: ref;

axiom pci_counter == $sub.ref(0, 43212);

const __mod_pci_device_table: ref;

axiom __mod_pci_device_table == $sub.ref(0, 44268);

const jme_pm_ops: ref;

axiom jme_pm_ops == $sub.ref(0, 45428);

const {:count 3} jme_pci_tbl: ref;

axiom jme_pci_tbl == $sub.ref(0, 46548);

const jme_driver: ref;

axiom jme_driver == $sub.ref(0, 47868);

const no_extplug: ref;

axiom no_extplug == $sub.ref(0, 48896);

const force_pseudohp: ref;

axiom force_pseudohp == $sub.ref(0, 49924);

const no_pseudohp: ref;

axiom no_pseudohp == $sub.ref(0, 50952);

const jme_ethtool_ops: ref;

axiom jme_ethtool_ops == $sub.ref(0, 52408);

const jme_netdev_ops: ref;

axiom jme_netdev_ops == $sub.ref(0, 53768);

const {:count 10} .str.2: ref;

axiom .str.2 == $sub.ref(0, 54802);

const {:count 16} .str.3: ref;

axiom .str.3 == $sub.ref(0, 55842);

const {:count 21} .str.6: ref;

axiom .str.6 == $sub.ref(0, 56887);

const {:count 26} .str.47: ref;

axiom .str.47 == $sub.ref(0, 57937);

const {:count 35} .str.4: ref;

axiom .str.4 == $sub.ref(0, 58996);

const {:count 36} .str.5: ref;

axiom .str.5 == $sub.ref(0, 60056);

const {:count 37} .str.60: ref;

axiom .str.60 == $sub.ref(0, 61117);

const {:count 17} .str.62: ref;

axiom .str.62 == $sub.ref(0, 62158);

const {:count 21} .str.63: ref;

axiom .str.63 == $sub.ref(0, 63203);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 25} .str.64: ref;

axiom .str.64 == $sub.ref(0, 64252);

const {:count 41} .str.26: ref;

axiom .str.26 == $sub.ref(0, 65317);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 28} .str.61: ref;

axiom .str.61 == $sub.ref(0, 66369);

const {:count 70} .str.48: ref;

axiom .str.48 == $sub.ref(0, 67463);

const {:count 170} .str.51: ref;

axiom .str.51 == $sub.ref(0, 68657);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 167} .str.52: ref;

axiom .str.52 == $sub.ref(0, 69848);

const {:count 16} .str.30: ref;

axiom .str.30 == $sub.ref(0, 70888);

const {:count 35} .str.50: ref;

axiom .str.50 == $sub.ref(0, 71947);

const {:count 35} .str.49: ref;

axiom .str.49 == $sub.ref(0, 73006);

const {:count 4} .str.58: ref;

axiom .str.58 == $sub.ref(0, 74034);

const {:count 5} .str.59: ref;

axiom .str.59 == $sub.ref(0, 75063);

const {:count 45} .str.57: ref;

axiom .str.57 == $sub.ref(0, 76132);

const {:count 14} .str.7: ref;

axiom .str.7 == $sub.ref(0, 77170);

const .str: ref;

axiom .str == $sub.ref(0, 78198);

const {:count 6} .str.1: ref;

axiom .str.1 == $sub.ref(0, 79228);

const {:count 34} .str.8: ref;

axiom .str.8 == $sub.ref(0, 80286);

const {:count 33} .str.9: ref;

axiom .str.9 == $sub.ref(0, 81343);

const {:count 38} .str.10: ref;

axiom .str.10 == $sub.ref(0, 82405);

const {:count 43} .str.11: ref;

axiom .str.11 == $sub.ref(0, 83472);

const {:count 42} .str.12: ref;

axiom .str.12 == $sub.ref(0, 84538);

const {:count 43} .str.13: ref;

axiom .str.13 == $sub.ref(0, 85605);

const {:count 25} .str.14: ref;

axiom .str.14 == $sub.ref(0, 86654);

const {:count 29} .str.15: ref;

axiom .str.15 == $sub.ref(0, 87707);

const {:count 27} .str.16: ref;

axiom .str.16 == $sub.ref(0, 88758);

const {:count 29} .str.17: ref;

axiom .str.17 == $sub.ref(0, 89811);

const {:count 53} .str.18: ref;

axiom .str.18 == $sub.ref(0, 90888);

const {:count 36} .str.19: ref;

axiom .str.19 == $sub.ref(0, 91948);

const {:count 21} .str.21: ref;

axiom .str.21 == $sub.ref(0, 92993);

const {:count 8} .str.22: ref;

axiom .str.22 == $sub.ref(0, 94025);

const {:count 24} .str.23: ref;

axiom .str.23 == $sub.ref(0, 95073);

const {:count 8} .str.24: ref;

axiom .str.24 == $sub.ref(0, 96105);

const .str.25: ref;

axiom .str.25 == $sub.ref(0, 97130);

const {:count 39} .str.20: ref;

axiom .str.20 == $sub.ref(0, 98193);

const {:count 31} .str.55: ref;

axiom .str.55 == $sub.ref(0, 99248);

const {:count 16} .str.54: ref;

axiom .str.54 == $sub.ref(0, 100288);

const {:count 20} .str.27: ref;

axiom .str.27 == $sub.ref(0, 101332);

const {:count 20} .str.28: ref;

axiom .str.28 == $sub.ref(0, 102376);

const {:count 21} .str.29: ref;

axiom .str.29 == $sub.ref(0, 103421);

const {:count 16} .str.53: ref;

axiom .str.53 == $sub.ref(0, 104461);

const {:count 29} .str.31: ref;

axiom .str.31 == $sub.ref(0, 105514);

const {:count 26} .str.32: ref;

axiom .str.32 == $sub.ref(0, 106564);

const {:count 60} .str.33: ref;

axiom .str.33 == $sub.ref(0, 107648);

const {:count 60} .str.34: ref;

axiom .str.34 == $sub.ref(0, 108732);

const x86_dma_fallback_dev: ref;

axiom x86_dma_fallback_dev == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 9} .str.35: ref;

axiom .str.35 == $sub.ref(0, 109765);

const {:count 39} .str.36: ref;

axiom .str.36 == $sub.ref(0, 110828);

const {:count 7} .str.37: ref;

axiom .str.37 == $sub.ref(0, 111859);

const {:count 10} .str.38: ref;

axiom .str.38 == $sub.ref(0, 112893);

const {:count 11} .str.39: ref;

axiom .str.39 == $sub.ref(0, 113928);

const {:count 12} .str.40: ref;

axiom .str.40 == $sub.ref(0, 114964);

const {:count 14} .str.41: ref;

axiom .str.41 == $sub.ref(0, 116002);

const {:count 14} .str.42: ref;

axiom .str.42 == $sub.ref(0, 117040);

const {:count 6} .str.43: ref;

axiom .str.43 == $sub.ref(0, 118070);

const {:count 4} .str.44: ref;

axiom .str.44 == $sub.ref(0, 119098);

const {:count 18} .str.45: ref;

axiom .str.45 == $sub.ref(0, 120140);

const {:count 14} .str.46: ref;

axiom .str.46 == $sub.ref(0, 121178);

const {:count 51} .str.56: ref;

axiom .str.56 == $sub.ref(0, 122253);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 123285);

const {:count 3} .str.1.142: ref;

axiom .str.1.142 == $sub.ref(0, 124312);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 125350);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 126378);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 127410);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 128442);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 129474);

procedure ldv_malloc($i0: i64) returns ($r: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 130506);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const jme_open: ref;

axiom jme_open == $sub.ref(0, 131538);

procedure jme_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i15: i32;
  var vslice_dummy_var_18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p1 := netdev_priv($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} jme_clear_pm($p2);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1528)), $mul.ref(1368, 1));
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} napi_enable($p3);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 1528)), $mul.ref(1080, 1));
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} tasklet_enable($p4);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 1528)), $mul.ref(1040, 1));
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} tasklet_enable($p5);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 1528)), $mul.ref(1000, 1));
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} tasklet_enable($p6);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 1528)), $mul.ref(960, 1));
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} tasklet_enable($p7);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $i8 := jme_request_irq($p2);
    call {:si_unique_call 9} {:cexpr "rc"} boogie_si_record_i32($i8);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} jme_start_irq($p2);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} jme_phy_on($p2);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 1528)), $mul.ref(1160, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i11 := constant_test_bit(2, $p10);
    call {:si_unique_call 15} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} jme_reset_phy_processor($p2);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} jme_reset_link($p2);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 1528)), $mul.ref(1236, 1));
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} vslice_dummy_var_18 := jme_set_settings($p0, $p13);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} netif_stop_queue($p0);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} netif_carrier_off($p0);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i15 := $i8;
    goto $bb8;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const jme_close: ref;

axiom jme_close == $sub.ref(0, 132570);

procedure jme_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $p1 := netdev_priv($p0);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} netif_stop_queue($p0);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} netif_carrier_off($p0);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} jme_stop_irq($p2);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} jme_free_irq($p2);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1528)), $mul.ref(1368, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i4 := napi_disable_pending($p3);
    call {:si_unique_call 25} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 1528)), $mul.ref(1080, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} tasklet_disable($p7);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 1528)), $mul.ref(1040, 1));
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} tasklet_disable($p8);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 1528)), $mul.ref(1000, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} tasklet_disable($p9);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 1528)), $mul.ref(960, 1));
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} tasklet_disable($p10);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} jme_disable_rx_engine($p2);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} jme_disable_tx_engine($p2);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} jme_reset_mac_processor($p2);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} jme_free_rx_resources($p2);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} jme_free_tx_resources($p2);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 1528)), $mul.ref(1196, 1));
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} jme_phy_off($p2);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 1528)), $mul.ref(1368, 1));
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} napi_disable($p6);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const jme_start_xmit: ref;

axiom jme_start_xmit == $sub.ref(0, 133602);

procedure jme_start_xmit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, $M.5, $M.4, assertsPassed;



implementation jme_start_xmit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i20: i32;
  var vslice_dummy_var_19: i32;
  var vslice_dummy_var_20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $p2 := netdev_priv($p1);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $i4 := jme_expand_header($p3, $p0);
    call {:si_unique_call 39} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 41} {:cexpr "tmp___1"} boogie_si_record_i64($i8);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $i21 := jme_alloc_txdesc($p3, $p0);
    call {:si_unique_call 43} {:cexpr "idx"} boogie_si_record_i32($i21);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 0);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 45} {:cexpr "tmp___2"} boogie_si_record_i64($i25);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} vslice_dummy_var_20 := jme_fill_tx_desc($p3, $p0, $i21);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1168, 1));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i36, 257);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} jwrite32($p3, 0, $i37);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} jme_stop_queue_if_full($p3);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} netif_stop_queue($p1);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1232, 1));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 128);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := 16;
    goto $bb3;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} vslice_dummy_var_19 := netdev_err.ref.ref($p32, .str.60);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 2496)), $mul.ref(200, 1)), $mul.ref(56, 1));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 1);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 2496)), $mul.ref(200, 1)), $mul.ref(56, 1));
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i15);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb3;
}



const jme_set_multi: ref;

axiom jme_set_multi == $sub.ref(0, 134634);

procedure jme_set_multi($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $CurrAddr, $M.5, $M.4, assertsPassed;



implementation jme_set_multi($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i64;
  var $p61: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p46: ref;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $p2 := netdev_priv($p0);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p4, 0);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p5, 0);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(888, 1));
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} spin_lock_bh($p6);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, 1280);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(432, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 256);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(432, 1));
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 512);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(432, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 4096);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call {:si_unique_call 54} devirtbounce(0);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} jwrite32($p3, 52, $i74);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(888, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} spin_unlock_bh($p75);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i32, 576);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(592, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(592, 1)), $mul.ref(0, 1));
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i41, $i44);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.1, $p69);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} jwrite32($p3, 64, $i70);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.1, $p71);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} jwrite32($p3, 68, $i72);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i45 == 1;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p46 := $p38;
    goto $bb12;

  $bb12:
    call $p47, $p48, $i49, $i50, $i51, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $i59, $i60, $p61, $p63, $p64, $p65, $p66, $i67, $i68, $p46 := jme_set_multi_loop_$bb12($p1, $i44, $p47, $p48, $i49, $i50, $i51, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $i59, $i60, $p61, $p63, $p64, $p65, $p66, $i67, $i68, $p46);
    goto $bb12_last;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $i49 := crc32_le($sub.i32(0, 1), $p48, 6);
    call {:si_unique_call 58} {:cexpr "tmp___0"} boogie_si_record_i32($i49);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i50 := bitrev32($i49);
    call {:si_unique_call 60} {:cexpr "tmp___1"} boogie_si_record_i32($i50);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 63);
    call {:si_unique_call 61} {:cexpr "bit_nr"} boogie_si_record_i32($i51);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i52 := $ashr.i32($i51, 5);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i52);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref($i53, 4));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.1, $p54);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i51, 31);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i57 := $shl.i32(1, $i56);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i58 := $or.i32($i55, $i57);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i59 := $ashr.i32($i51, 5);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i59);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref($i60, 4));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p61, $i58);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, $i44);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i68 == 1);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $p46 := $p64;
    goto $bb14_dummy;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, 128);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i16, 2048);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_189;
}



const jme_set_macaddr: ref;

axiom jme_set_macaddr == $sub.ref(0, 135666);

procedure jme_set_macaddr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_set_macaddr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i7: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $p2 := netdev_priv($p0);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i5 := netif_running($p0);
    call {:si_unique_call 66} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(816, 1));
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} spin_lock_bh($p8);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(493, 1));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i64($i10);
    call {:si_unique_call 68} {:cexpr "__len"} boogie_si_record_i64($i11);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(720, 1));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 69} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p13, $p15, $i11, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} jme_set_unicastaddr($p0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(816, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} spin_unlock_bh($p16);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;
}



const eth_validate_addr: ref;

axiom eth_validate_addr == $sub.ref(0, 136698);

procedure eth_validate_addr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation eth_validate_addr($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 1} true;
    call {:si_unique_call 72} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 73} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const jme_ioctl: ref;

axiom jme_ioctl == $sub.ref(0, 137730);

procedure jme_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr, $M.0, $M.5, $M.4, assertsPassed;



implementation jme_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p27: ref;
  var $i16: i32;
  var vslice_dummy_var_21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 75} {:cexpr "jme_ioctl:arg:cmd"} boogie_si_record_i32($i2);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $p4 := netdev_priv($p0);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $p6 := if_mii($p1);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 35145);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 1528)), $mul.ref(744, 1));
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} spin_lock_bh($p17);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 1528)), $mul.ref(24, 1));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i19 := generic_mii_ioctl($p18, $p6, $i2, $p3);
    call {:si_unique_call 81} {:cexpr "rc"} boogie_si_record_i32($i19);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 1528)), $mul.ref(744, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} spin_unlock_bh($p20);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i19, 0);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i16 := $i19;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i2, 35145);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb13;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.2, $p3);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 1528)), $mul.ref(1236, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} vslice_dummy_var_21 := jme_get_settings($p0, $p25);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 1528)), $mul.ref(1160, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} set_bit(2, $p27);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i24 == 1;
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} jme_reset_link($p5);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    call {:si_unique_call 78} {:cexpr "val"} boogie_si_record_i16($i9);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 36864);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i9);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 64);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb5;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb8;
}



const jme_change_mtu: ref;

axiom jme_change_mtu == $sub.ref(0, 138762);

procedure jme_change_mtu($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_change_mtu($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} {:cexpr "jme_change_mtu:arg:new_mtu"} boogie_si_record_i32($i1);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $p2 := netdev_priv($p0);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1280, 1));
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, $i5);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i1, 14);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 9216);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i9 == 1);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i10 := $sle.i32($i1, 1279);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i1, 4000);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1176, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, $sub.i32(0, 201326593));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1176, 1));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1176, 1));
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i25, 201326592);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1176, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} jme_restart_rx_engine($p3);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(448, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i1);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} netdev_update_features($p0);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} jme_reset_link($p3);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1176, 1));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, $sub.i32(0, 201326593));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1176, 1));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1176, 1));
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, 134217728);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1176, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} jme_restart_rx_engine($p3);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const jme_tx_timeout: ref;

axiom jme_tx_timeout == $sub.ref(0, 139794);

procedure jme_tx_timeout($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_tx_timeout($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var vslice_dummy_var_22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $p1 := netdev_priv($p0);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1528)), $mul.ref(1196, 1));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} jme_reset_phy_processor($p2);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 1528)), $mul.ref(1160, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $i5 := constant_test_bit(2, $p4);
    call {:si_unique_call 95} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} jme_reset_link($p2);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 1528)), $mul.ref(1236, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} vslice_dummy_var_22 := jme_set_settings($p0, $p7);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const jme_vlan_rx_register: ref;

axiom jme_vlan_rx_register == $sub.ref(0, 140826);

procedure jme_vlan_rx_register($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_vlan_rx_register($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $p2 := netdev_priv($p0);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} jme_pause_rx($p3);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1288, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p1);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} jme_resume_rx($p3);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const jme_fix_features: ref;

axiom jme_fix_features == $sub.ref(0, 141858);

procedure jme_fix_features($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation jme_fix_features($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} {:cexpr "jme_fix_features:arg:features"} boogie_si_record_i32($i1);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(448, 1));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i32($i3, 1900);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i6 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, $sub.i32(0, 1638431));
    call {:si_unique_call 102} {:cexpr "features"} boogie_si_record_i32($i5);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const jme_set_features: ref;

axiom jme_set_features == $sub.ref(0, 142890);

procedure jme_set_features($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_set_features($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} {:cexpr "jme_set_features:arg:features"} boogie_si_record_i32($i1);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $p2 := netdev_priv($p0);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(888, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} spin_lock_bh($p4);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, 536870912);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, $sub.i32(0, 2));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} jwrite32($p3, 52, $i16);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(888, 1));
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} spin_unlock_bh($p17);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, 1);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 143922);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(2560, 1));
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const spin_lock_bh: ref;

axiom spin_lock_bh == $sub.ref(0, 144954);

procedure spin_lock_bh($p0: ref);
  free requires assertsPassed;



implementation spin_lock_bh($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} _raw_spin_lock_bh($p2);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    return;
}



const jwrite32: ref;

axiom jwrite32 == $sub.ref(0, 145986);

procedure jwrite32($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jwrite32($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} {:cexpr "jwrite32:arg:reg"} boogie_si_record_i32($i1);
    call {:si_unique_call 110} {:cexpr "jwrite32:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} reg_dbg($p0, .str.2, $i2, $i1);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(16, 1));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i1);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 1));
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} writel($i2, $p6);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(16, 1));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i1);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p8, $mul.ref($i9, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $i11 := readl($p10);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 114} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} reg_dbg($p0, .str.3, $i11, $i1);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const spin_unlock_bh: ref;

axiom spin_unlock_bh == $sub.ref(0, 147018);

procedure spin_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_bh($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} _raw_spin_unlock_bh($p2);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_bh: ref;

axiom _raw_spin_unlock_bh == $sub.ref(0, 148050);

procedure _raw_spin_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    return;
}



const reg_dbg: ref;

axiom reg_dbg == $sub.ref(0, 149082);

procedure reg_dbg($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;



implementation reg_dbg($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} {:cexpr "reg_dbg:arg:val"} boogie_si_record_i32($i2);
    call {:si_unique_call 118} {:cexpr "reg_dbg:arg:reg"} boogie_si_record_i32($i3);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    return;
}



const writel: ref;

axiom writel == $sub.ref(0, 150114);

procedure writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} {:cexpr "writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 120} devirtbounce.1(0, $i0, $p2);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    return;
}



const readl: ref;

axiom readl == $sub.ref(0, 151146);

procedure readl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation readl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 121} $i2 := devirtbounce.2(0, $p1);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    call {:si_unique_call 122} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const _raw_spin_lock_bh: ref;

axiom _raw_spin_lock_bh == $sub.ref(0, 152178);

procedure _raw_spin_lock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    return;
}



const jme_pause_rx: ref;

axiom jme_pause_rx == $sub.ref(0, 153210);

procedure jme_pause_rx($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_pause_rx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1332, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} atomic_dec($p1);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} jme_set_rx_pcc($p0, 0);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1160, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i3 := constant_test_bit(5, $p2);
    call {:si_unique_call 126} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1000, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} tasklet_disable($p9);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(960, 1));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} tasklet_disable($p10);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1368, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i6 := napi_disable_pending($p5);
    call {:si_unique_call 128} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1368, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} napi_disable($p8);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const jme_resume_rx: ref;

axiom jme_resume_rx == $sub.ref(0, 154242);

procedure jme_resume_rx($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_resume_rx($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1160, 1));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $i3 := constant_test_bit(5, $p2);
    call {:si_unique_call 133} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1000, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} tasklet_enable($p6);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(960, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} tasklet_enable($p7);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1296, 1)), $mul.ref(24, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 1);
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1296, 1)), $mul.ref(25, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 1);
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1296, 1)), $mul.ref(26, 1));
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} jme_set_rx_pcc($p0, 1);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1332, 1));
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} atomic_inc($p11);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1368, 1));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} napi_enable($p5);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 155274);

procedure constant_test_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i32($i0);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i2 := $udiv.i32($i0, 64);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p1, $mul.ref($i3, 8));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i0, 63);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i5, $i7);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const napi_enable: ref;

axiom napi_enable == $sub.ref(0, 156306);

procedure napi_enable($p0: ref);
  free requires assertsPassed;



implementation napi_enable($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 141} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 143} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 145} devirtbounce(0);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} clear_bit(0, $p8);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 144} devirtbounce.3(0, .str.47, 521, 12);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call napi_enable_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const tasklet_enable: ref;

axiom tasklet_enable == $sub.ref(0, 157338);

procedure tasklet_enable($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation tasklet_enable($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} devirtbounce(0);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} atomic_dec($p1);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const jme_set_rx_pcc: ref;

axiom jme_set_rx_pcc == $sub.ref(0, 158370);

procedure jme_set_rx_pcc($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_set_rx_pcc($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var vslice_dummy_var_23: i32;

  $bb0:
    call {:si_unique_call 149} {:cexpr "jme_set_rx_pcc:arg:p"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call {:si_unique_call 154} devirtbounce(0);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1160, 1));
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $i8 := constant_test_bit(5, $p7);
    call {:si_unique_call 156} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1232, 1));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 2048);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} vslice_dummy_var_23 := netdev_info.ref.ref.i32($p15, .str.6, $i1);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb6:
    assume $i4 == 1;
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} jwrite32($p0, 2096, 8396800);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} jwrite32($p0, 2096, 4198400);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i5 == 1);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} jwrite32($p0, 2096, 65792);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb11:
    assume $i6 == 1;
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} jwrite32($p0, 2096, 0);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 159402);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 158} devirtbounce.4(0, $p1, $p1);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const netdev_info: ref;

axiom netdev_info == $sub.ref(0, 160434);

procedure netdev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 1} true;
    call {:si_unique_call 159} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 160} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure netdev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



procedure netdev_info.ref.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_info.ref.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 1} true;
    call {:si_unique_call 161} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 162} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure netdev_info.ref.ref.i32.i64($p0: ref, $p1: ref, p.2: i32, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_info.ref.ref.i32.i64($p0: ref, $p1: ref, p.2: i32, p.3: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 1} true;
    call {:si_unique_call 163} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 164} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure netdev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 1} true;
    call {:si_unique_call 165} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 166} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const atomic_dec: ref;

axiom atomic_dec == $sub.ref(0, 161466);

procedure atomic_dec($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation atomic_dec($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 167} devirtbounce.4(0, $p1, $p1);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 162498);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 169} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 163530);

procedure clear_bit($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 171} devirtbounce.5(0, $p1, $i0, $p1);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    return;
}



const napi_disable_pending: ref;

axiom napi_disable_pending == $sub.ref(0, 164562);

procedure napi_disable_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation napi_disable_pending($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i2 := constant_test_bit(1, $p1);
    call {:si_unique_call 173} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const napi_disable: ref;

axiom napi_disable == $sub.ref(0, 165594);

procedure napi_disable($p0: ref);
  free requires assertsPassed;



implementation napi_disable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} set_bit(1, $p1);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $i3 := test_and_set_bit(0, $p2);
    call {:si_unique_call 176} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} clear_bit(1, $p7);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i5, $i6 := napi_disable_loop_$bb4($p2, $i5, $i6);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} msleep(1);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $i5 := test_and_set_bit(0, $p2);
    call {:si_unique_call 179} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const tasklet_disable: ref;

axiom tasklet_disable == $sub.ref(0, 166626);

procedure tasklet_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation tasklet_disable($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} tasklet_disable_nosync($p0);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} tasklet_unlock_wait($p0);
    call {:si_unique_call 183} devirtbounce(0);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const tasklet_disable_nosync: ref;

axiom tasklet_disable_nosync == $sub.ref(0, 167658);

procedure tasklet_disable_nosync($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation tasklet_disable_nosync($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} atomic_inc($p1);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    call {:si_unique_call 185} devirtbounce(0);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;
}



const tasklet_unlock_wait: ref;

axiom tasklet_unlock_wait == $sub.ref(0, 168690);

procedure tasklet_unlock_wait($p0: ref);
  free requires assertsPassed;



implementation tasklet_unlock_wait($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $i2 := constant_test_bit(1, $p1);
    call {:si_unique_call 187} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i4, $i5 := tasklet_unlock_wait_loop_$bb4($p1, $i4, $i5);
    goto $bb4_last;

  $bb5:
    call {:si_unique_call 188} devirtbounce(0);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $i4 := constant_test_bit(1, $p1);
    call {:si_unique_call 190} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 169722);

procedure set_bit($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} {:cexpr "set_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 192} devirtbounce.5(0, $p1, $i0, $p1);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 170754);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 171786);

procedure test_and_set_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation test_and_set_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 195} $i2 := devirtbounce.6(0, $p1, $i0, $p1);
    call {:si_unique_call 196} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const jme_reset_phy_processor: ref;

axiom jme_reset_phy_processor == $sub.ref(0, 172818);

procedure jme_reset_phy_processor($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_reset_phy_processor($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} jme_mdio_write($p2, $i5, 4, 3552);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2848)), $mul.ref(62, 1));
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 592);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i22 := jme_mdio_read($p18, $i21, 0);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    call {:si_unique_call 200} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i22, 32768);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} jme_mdio_write($p24, $i27, 0, $i28);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} jme_mdio_write($p13, $i16, 9, 768);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;
}



const jme_set_settings: ref;

axiom jme_set_settings == $sub.ref(0, 173850);

procedure jme_set_settings($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_set_settings($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i8;
  var $i24: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i1;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i10: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $p2 := netdev_priv($p0);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i4 := ethtool_cmd_speed($p1);
    call {:si_unique_call 204} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1000);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p3);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(40, 1));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(744, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} spin_lock_bh($p30);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(24, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i32 := mii_ethtool_sset($p31, $p1);
    call {:si_unique_call 207} {:cexpr "rc"} boogie_si_record_i32($i32);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(744, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} spin_unlock_bh($p33);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i32, 0);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i10 := $i32;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i29, 0);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1236, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p1);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 210} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p37, $p38, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1160, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} set_bit(2, $p39);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i35 == 1;
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} jme_reset_link($p3);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(18, 1));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 1);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb10;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(16, 1));
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i23 := $and.i8($i22, 1);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i24, $i27);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb10;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i29 := 1;
    goto $bb15;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(18, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 1);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb6;
}



const jme_reset_link: ref;

axiom jme_reset_link == $sub.ref(0, 174882);

procedure jme_reset_link($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_reset_link($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} jwrite32($p0, 2048, $sub.i32(0, 2147483648));
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const ethtool_cmd_speed: ref;

axiom ethtool_cmd_speed == $sub.ref(0, 175914);

procedure ethtool_cmd_speed($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ethtool_cmd_speed($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(28, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 16);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i4, $i7);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const mii_ethtool_sset: ref;

axiom mii_ethtool_sset == $sub.ref(0, 176946);

procedure mii_ethtool_sset($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mii_ethtool_sset($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 1} true;
    call {:si_unique_call 213} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 214} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 177978);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const jme_mdio_write: ref;

axiom jme_mdio_write == $sub.ref(0, 179010);

procedure jme_mdio_write($p0: ref, $i1: i32, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_mdio_write($p0: ref, $i1: i32, $i2: i32, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i18: i32;
  var $i19: i1;
  var $i12: i32;
  var $i20: i32;
  var $i17: i32;
  var $i21: i1;
  var vslice_dummy_var_24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} {:cexpr "jme_mdio_write:arg:phy"} boogie_si_record_i32($i1);
    call {:si_unique_call 216} {:cexpr "jme_mdio_write:arg:reg"} boogie_si_record_i32($i2);
    call {:si_unique_call 217} {:cexpr "jme_mdio_write:arg:val"} boogie_si_record_i32($i3);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $p4 := netdev_priv($p0);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i6 := smi_phy_addr($i1);
    call {:si_unique_call 220} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $i7 := smi_reg_addr($i2);
    call {:si_unique_call 222} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i3, 16);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, $i6);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, $i7);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 48);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} jwrite32($p5, 80, $i11);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    call {:si_unique_call 224} devirtbounce(0);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i12 := 5000;
    goto $bb1;

  $bb1:
    call $i13, $i14, $i15, $i16, $i18, $i19, $i12, $i20 := jme_mdio_write_loop_$bb1($p5, $i13, $i14, $i15, $i16, $i18, $i19, $i12, $i20);
    goto $bb1_last;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} __const_udelay(85900);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $i13 := jread32($p5, 80);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    call {:si_unique_call 227} {:cexpr "tmp___2"} boogie_si_record_i32($i13);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 16);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i16 := $i12;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i12, 1);
    call {:si_unique_call 228} {:cexpr "i"} boogie_si_record_i32($i18);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, 0);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i17 := $i20;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i17, 0);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} vslice_dummy_var_24 := printk.ref.i32.i32(.str.5, $i1, $i2);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i12 := $i18;
    goto $bb7_dummy;

  $bb3:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb5;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb7_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_741;
}



const jme_mdio_read: ref;

axiom jme_mdio_read == $sub.ref(0, 180042);

procedure jme_mdio_read($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_mdio_read($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i20: i32;
  var $i21: i1;
  var $i12: i32;
  var $i22: i32;
  var $i23: i32;
  var $i18: i32;
  var $i19: i32;
  var $i24: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i26: i32;
  var vslice_dummy_var_25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} {:cexpr "jme_mdio_read:arg:phy"} boogie_si_record_i32($i1);
    call {:si_unique_call 231} {:cexpr "jme_mdio_read:arg:reg"} boogie_si_record_i32($i2);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $p3 := netdev_priv($p0);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 1);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 233} {:cexpr "again"} boogie_si_record_i32($i6);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb1;

  $bb1:
    call $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i20, $i21, $i12, $i22, $i23, $i18, $i19, $i24, $i27, $i28, $i29 := jme_mdio_read_loop_$bb1($i1, $i2, $p4, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i20, $i21, $i12, $i22, $i23, $i18, $i19, $i24, $i27, $i28, $i29);
    goto $bb1_last;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $i8 := smi_phy_addr($i1);
    call {:si_unique_call 235} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i9 := smi_reg_addr($i2);
    call {:si_unique_call 237} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i8, $i9);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 16);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} jwrite32($p4, 80, $i11);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    call {:si_unique_call 239} devirtbounce(0);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i12 := 5000;
    goto $bb2;

  $bb2:
    call $i13, $i14, $i15, $i16, $i17, $i20, $i21, $i12, $i22, $i23 := jme_mdio_read_loop_$bb2($p4, $i13, $i14, $i15, $i16, $i17, $i20, $i21, $i12, $i22, $i23);
    goto $bb2_last;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} __const_udelay(85900);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $i13 := jread32($p4, 80);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    call {:si_unique_call 242} {:cexpr "tmp___2"} boogie_si_record_i32($i13);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 16);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i16, $i17 := $i12, $i13;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i12, 1);
    call {:si_unique_call 243} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i21 := $sgt.i32($i20, 0);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i22, $i23 := $i20, $i13;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i22, $i23;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i18, 0);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32($i7, 1);
    call {:si_unique_call 245} {:cexpr "again"} boogie_si_record_i32($i27);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i7, 0);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i29 := $i19;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i30 := $lshr.i32($i29, 16);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i26 := $i30;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb15:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i27;
    goto $bb15_dummy;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} vslice_dummy_var_25 := printk.ref.i32.i32(.str.4, $i1, $i2);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb13;

  $bb8:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i12 := $i20;
    goto $bb8_dummy;

  $bb4:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i16, $i17;
    goto $bb6;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb2_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_772;

  $bb15_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_765;
}



const smi_phy_addr: ref;

axiom smi_phy_addr == $sub.ref(0, 181074);

procedure smi_phy_addr($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation smi_phy_addr($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} {:cexpr "smi_phy_addr:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i1 := $shl.i32($i0, 6);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 1984);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const smi_reg_addr: ref;

axiom smi_reg_addr == $sub.ref(0, 182106);

procedure smi_reg_addr($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation smi_reg_addr($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} {:cexpr "smi_reg_addr:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i1 := $shl.i32($i0, 11);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 65535);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 183138);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    return;
}



const jread32: ref;

axiom jread32 == $sub.ref(0, 184170);

procedure jread32($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jread32($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} {:cexpr "jread32:arg:reg"} boogie_si_record_i32($i1);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(16, 1));
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 1));
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $i6 := readl($p5);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    call {:si_unique_call 251} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 185202);

procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 1} true;
    call {:si_unique_call 252} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 253} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 1} true;
    call {:si_unique_call 254} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 255} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 1} true;
    call {:si_unique_call 256} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 257} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const jme_restart_rx_engine: ref;

axiom jme_restart_rx_engine == $sub.ref(0, 186234);

procedure jme_restart_rx_engine($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_restart_rx_engine($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1176, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 5);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} jwrite32($p0, 32, $i3);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;
}



const netdev_update_features: ref;

axiom netdev_update_features == $sub.ref(0, 187266);

procedure netdev_update_features($p0: ref);
  free requires assertsPassed;



implementation netdev_update_features($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    return;
}



const if_mii: ref;

axiom if_mii == $sub.ref(0, 188298);

procedure if_mii($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation if_mii($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const generic_mii_ioctl: ref;

axiom generic_mii_ioctl == $sub.ref(0, 189330);

procedure generic_mii_ioctl($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation generic_mii_ioctl($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 259} {:cexpr "generic_mii_ioctl:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 1} true;
    call {:si_unique_call 260} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 261} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const jme_get_settings: ref;

axiom jme_get_settings == $sub.ref(0, 190362);

procedure jme_get_settings($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation jme_get_settings($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $p2 := netdev_priv($p0);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(744, 1));
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} spin_lock_bh($p4);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(24, 1));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $i6 := mii_ethtool_gset($p5, $p1);
    call {:si_unique_call 265} {:cexpr "rc"} boogie_si_record_i32($i6);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(744, 1));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} spin_unlock_bh($p7);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const mii_ethtool_gset: ref;

axiom mii_ethtool_gset == $sub.ref(0, 191394);

procedure mii_ethtool_gset($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mii_ethtool_gset($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 1} true;
    call {:si_unique_call 267} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 268} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const netif_running: ref;

axiom netif_running == $sub.ref(0, 192426);

procedure netif_running($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netif_running($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(120, 1));
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 270} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const jme_set_unicastaddr: ref;

axiom jme_set_unicastaddr == $sub.ref(0, 193458);

procedure jme_set_unicastaddr($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_set_unicastaddr($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $p1 := netdev_priv($p0);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(720, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(3, 1));
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i7, 24);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(720, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(2, 1));
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i14 := $shl.i32($i13, 16);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i8, $i14);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(720, 1));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref(1, 1));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i21 := $shl.i32($i20, 8);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i15, $i21);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(720, 1));
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i22, $i26);
    call {:si_unique_call 272} {:cexpr "val"} boogie_si_record_i32($i27);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} jwrite32($p2, 56, $i27);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(720, 1));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref(5, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i33 := $shl.i32($i32, 8);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(720, 1));
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref(4, 1));
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i33, $i38);
    call {:si_unique_call 274} {:cexpr "val"} boogie_si_record_i32($i39);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} jwrite32($p2, 60, $i39);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;
}



const crc32_le: ref;

axiom crc32_le == $sub.ref(0, 194490);

procedure crc32_le($i0: i32, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation crc32_le($i0: i32, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 276} {:cexpr "crc32_le:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 277} {:cexpr "crc32_le:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 1} true;
    call {:si_unique_call 278} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 279} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const bitrev32: ref;

axiom bitrev32 == $sub.ref(0, 195522);

procedure bitrev32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation bitrev32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 280} {:cexpr "bitrev32:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 1} true;
    call {:si_unique_call 281} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 282} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const jme_expand_header: ref;

axiom jme_expand_header == $sub.ref(0, 196554);

procedure jme_expand_header($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation jme_expand_header($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $p2 := skb_end_pointer($p1);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 344)), $mul.ref(2, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 289} {:cexpr "tmp___3"} boogie_si_record_i64($i16);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} consume_skb($p1);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 1);
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $i8 := skb_header_cloned($p1);
    call {:si_unique_call 285} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb9;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i10 := pskb_expand_head($p1, 0, 0, 32);
    call {:si_unique_call 287} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb8;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb7;
}



const jme_alloc_txdesc: ref;

axiom jme_alloc_txdesc == $sub.ref(0, 197586);

procedure jme_alloc_txdesc($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation jme_alloc_txdesc($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(296, 1));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1204, 1));
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 291} {:cexpr "mask"} boogie_si_record_i32($i5);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 292} {:cexpr "idx"} boogie_si_record_i32($i7);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $p8 := skb_end_pointer($p1);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 344)), $mul.ref(0, 1));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 2);
    call {:si_unique_call 294} {:cexpr "nr_alloc"} boogie_si_record_i32($i13);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $i15 := atomic_read($p14);
    call {:si_unique_call 296} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, $i13);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 298} {:cexpr "tmp___1"} boogie_si_record_i64($i19);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} atomic_sub($i13, $p22);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, $i13);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, $i5);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i21 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 1);
    goto $bb3;
}



const netif_stop_queue: ref;

axiom netif_stop_queue == $sub.ref(0, 198618);

procedure netif_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_stop_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} netif_tx_stop_queue($p1);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    return;
}



const netdev_err: ref;

axiom netdev_err == $sub.ref(0, 199650);

procedure netdev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 1} true;
    call {:si_unique_call 302} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 303} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure netdev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 1} true;
    call {:si_unique_call 304} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 305} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const jme_fill_tx_desc: ref;

axiom jme_fill_tx_desc == $sub.ref(0, 200682);

procedure jme_fill_tx_desc($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, $M.4;



implementation jme_fill_tx_desc($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i16;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 307} {:cexpr "jme_fill_tx_desc:arg:idx"} boogie_si_record_i32($i2);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(296, 1));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i2);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i2);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref($i9, 16)), $mul.ref(0, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p8, $mul.ref($i9, 16)), $mul.ref(0, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 0);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p8, $mul.ref($i9, 16)), $mul.ref(0, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 16)), $mul.ref(2, 4));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p8, $mul.ref($i9, 16)), $mul.ref(0, 1));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 16)), $mul.ref(3, 4));
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 0);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p8, $mul.ref($i9, 16)), $mul.ref(0, 1));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, $i29);
    call {:si_unique_call 308} devirtbounce(0);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p3, $sub.i8(0, 64));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p8, $mul.ref($i9, 16)), $mul.ref(0, 1));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 16)), $mul.ref(6, 1));
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $i36 := jme_tx_tso($p1, $p35, $p3);
    call {:si_unique_call 310} {:cexpr "tmp"} boogie_si_record_i32($i36);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p8, $mul.ref($i9, 16)), $mul.ref(0, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} jme_tx_vlan($p1, $p40, $p3);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} jme_map_tx_skb($p0, $p1, $i2);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.3, $p3);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p8, $mul.ref($i9, 16)), $mul.ref(0, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, $i41);
    call {:si_unique_call 314} devirtbounce(0);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $p45 := skb_end_pointer($p1);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 344)), $mul.ref(0, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.0, $p47);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, 2);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p12, $mul.ref($i13, 32)), $mul.ref(20, 1));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i50);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p12, $mul.ref($i13, 32)), $mul.ref(0, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, $p1);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p12, $mul.ref($i13, 32)), $mul.ref(16, 1));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i54);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, jiffies);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p12, $mul.ref($i13, 32)), $mul.ref(24, 1));
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p57, $i56);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p12, $mul.ref($i13, 32)), $mul.ref(24, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.0, $p58);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i59, 0);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i60 == 1;
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p12, $mul.ref($i13, 32)), $mul.ref(24, 1));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p61, $sub.i64(0, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i37 == 1;
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} jme_tx_csum($p0, $p1, $p3);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const jme_stop_queue_if_full: ref;

axiom jme_stop_queue_if_full == $sub.ref(0, 201714);

procedure jme_stop_queue_if_full($p0: ref);
  free requires assertsPassed;



implementation jme_stop_queue_if_full($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i43: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $i42: i1;
  var $i52: i32;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(296, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(44, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i6 := atomic_read($p5);
    call {:si_unique_call 317} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} devirtbounce(0);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $i10 := atomic_read($p9);
    call {:si_unique_call 320} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i11 := $ule.i32($i10, 19);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 322} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref($i7, 32)), $mul.ref(24, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i42 := 0;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i42);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i52);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 331} {:cexpr "tmp___3"} boogie_si_record_i64($i54);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb18:
    assume $i55 == 1;
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} netif_stop_queue($p57);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1232, 1));
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 256);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i61 == 1;
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.0, jiffies);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} vslice_dummy_var_28 := netdev_info.ref.ref.i32.i64($p63, .str.64, $i6, $i64);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb13:
    assume $i41 == 1;
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, jiffies);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref($i7, 32)), $mul.ref(24, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i46 := $sub.i64($i43, $i45);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i47 := $ugt.i64($i46, 1249);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i42 := 0;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb15;

  $bb16:
    assume $i47 == 1;
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref($i7, 32)), $mul.ref(0, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    assume {:verifier.code 0} true;
    $i42 := $i51;
    goto $bb15;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} netif_stop_queue($p17);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1232, 1));
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 256);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    call {:si_unique_call 325} devirtbounce(0);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i26 := atomic_read($p25);
    call {:si_unique_call 327} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1208, 1));
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i29 := $uge.i32($i26, $i28);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i29 == 1;
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} netif_wake_queue($p31);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1232, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 256);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i35 == 1;
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} vslice_dummy_var_27 := netdev_info.ref.ref($p37, .str.63);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i21 == 1;
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} vslice_dummy_var_26 := netdev_info.ref.ref($p23, .str.62);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 202746);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const netif_wake_queue: ref;

axiom netif_wake_queue == $sub.ref(0, 203778);

procedure netif_wake_queue($p0: ref);
  free requires assertsPassed;



implementation netif_wake_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} netif_tx_wake_queue($p1);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    return;
}



const netdev_get_tx_queue: ref;

axiom netdev_get_tx_queue == $sub.ref(0, 204810);

procedure netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} {:cexpr "netdev_get_tx_queue:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(840, 1));
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 192));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const netif_tx_wake_queue: ref;

axiom netif_tx_wake_queue == $sub.ref(0, 205842);

procedure netif_tx_wake_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_wake_queue($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $i1 := netpoll_trap();
    call {:si_unique_call 338} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(16, 1));
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $i4 := test_and_clear_bit(0, $p3);
    call {:si_unique_call 341} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} __netif_schedule($p7);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} netif_tx_start_queue($p0);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netpoll_trap: ref;

axiom netpoll_trap == $sub.ref(0, 206874);

procedure netpoll_trap() returns ($r: i32);
  free requires assertsPassed;



implementation netpoll_trap() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 1} true;
    call {:si_unique_call 343} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 344} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const netif_tx_start_queue: ref;

axiom netif_tx_start_queue == $sub.ref(0, 207906);

procedure netif_tx_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(16, 1));
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} clear_bit(0, $p1);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    return;
}



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 208938);

procedure test_and_clear_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation test_and_clear_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 347} $i2 := devirtbounce.6(0, $p1, $i0, $p1);
    call {:si_unique_call 348} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __netif_schedule: ref;

axiom __netif_schedule == $sub.ref(0, 209970);

procedure __netif_schedule($p0: ref);
  free requires assertsPassed;



implementation __netif_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    return;
}



const jme_tx_tso: ref;

axiom jme_tx_tso == $sub.ref(0, 211002);

procedure jme_tx_tso($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3;



implementation jme_tx_tso($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i16;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i16;
  var $i29: i32;
  var $i30: i32;
  var $i31: i16;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i32;
  var $i40: i16;
  var $p41: ref;
  var $i42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $p3 := skb_end_pointer($p0);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 344)), $mul.ref(2, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i7, 2);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p1, $i9);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p1);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i42 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.3, $p2);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i14, 2);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i16);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(126, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 8);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i20 == 1);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $p33 := ipv6_hdr($p0);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $p34 := tcp_hdr($p0);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p33, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p33, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $i37 := csum_ipv6_magic($p35, $p36, 0, 6, 0);
    call {:si_unique_call 357} {:cexpr "tmp___5"} boogie_si_record_i16($i37);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i39 := $xor.i32($i38, $sub.i32(0, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p34, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p41, $i40);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb6;

  $bb3:
    assume $i20 == 1;
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $p21 := ip_hdr($p0);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 20)), $mul.ref(10, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p22, 0);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $p23 := tcp_hdr($p0);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p21, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p21, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $i28 := csum_tcpudp_magic($i25, $i27, 0, 6, 0);
    call {:si_unique_call 353} {:cexpr "tmp___2"} boogie_si_record_i16($i28);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i30 := $xor.i32($i29, $sub.i32(0, 1));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p23, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, $i31);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const jme_tx_csum: ref;

axiom jme_tx_csum == $sub.ref(0, 212034);

procedure jme_tx_csum($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.3;



implementation jme_tx_csum($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i17: i8;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i8;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var vslice_dummy_var_29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(124, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 12);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(126, 1));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 56710);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i10, 56710);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i17);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i21, 17);
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1232, 1));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 128);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i36 == 1;
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} vslice_dummy_var_29 := netdev_err.ref.ref($p38, .str.61);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb16:
    assume $i23 == 1;
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.3, $p2);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i30, 8);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i32);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb14:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i21, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb18;

  $bb19:
    assume $i24 == 1;
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.3, $p2);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, 16);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i28);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $p18 := ipv6_hdr($p1);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(6, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    call {:si_unique_call 359} {:cexpr "ip_proto"} boogie_si_record_i8($i20);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i17 := $i20;
    goto $bb11;

  $bb4:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb8;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $p14 := ip_hdr($p1);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 20)), $mul.ref(9, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    call {:si_unique_call 361} {:cexpr "ip_proto"} boogie_si_record_i8($i16);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb11;
}



const jme_tx_vlan: ref;

axiom jme_tx_vlan == $sub.ref(0, 213066);

procedure jme_tx_vlan($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0;



implementation jme_tx_vlan($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(188, 1));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 4096);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.3, $p2);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 1);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i11);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(188, 1));
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 61439);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p1, $i16);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const jme_map_tx_skb: ref;

axiom jme_map_tx_skb == $sub.ref(0, 214098);

procedure jme_map_tx_skb($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4;



implementation jme_map_tx_skb($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $i26: i32;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $p59: ref;
  var $i60: i32;
  var $i58: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i64;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i64;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} {:cexpr "jme_map_tx_skb:arg:idx"} boogie_si_record_i32($i2);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(296, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2496)), $mul.ref(176, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 32);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    call {:si_unique_call 364} {:cexpr "hidma"} boogie_si_record_i8($i17);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $p18 := skb_end_pointer($p1);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 344)), $mul.ref(0, 1));
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    call {:si_unique_call 366} {:cexpr "nr_frags"} boogie_si_record_i32($i22);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1204, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    call {:si_unique_call 367} {:cexpr "mask"} boogie_si_record_i32($i24);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32(0, $i22);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i55 := skb_is_nonlinear($p1);
    call {:si_unique_call 372} {:cexpr "tmp___3"} boogie_si_record_i32($i55);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i56 == 1);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    call {:si_unique_call 375} {:cexpr "len"} boogie_si_record_i32($i60);
    assume {:verifier.code 0} true;
    $i58 := $i60;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i2, 1);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, $i24);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p7, $mul.ref($i63, 16));
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i2, 1);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, $i24);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i66);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p9, $mul.ref($i67, 32));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i72 := __phys_addr($i71);
    call {:si_unique_call 377} {:cexpr "tmp___4"} boogie_si_record_i64($i72);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i75 := $lshr.i64($i72, 12);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i75, 56));
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i64.i32($i79);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, 4095);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i17);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i8($i82);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} jme_fill_tx_map($p74, $p64, $p68, $p76, $i81, $i58, $i83);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i56 == 1;
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $i57 := skb_headlen($p1);
    call {:si_unique_call 374} {:cexpr "tmp___2"} boogie_si_record_i32($i57);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb11;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb4;

  $bb4:
    call $p27, $p28, $p29, $p30, $i31, $i33, $i34, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $p42, $p43, $p44, $p45, $p46, $p47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $i26 := jme_map_tx_skb_loop_$bb4($p0, $p1, $i2, $p7, $p9, $i17, $i22, $i24, $p27, $p28, $p29, $p30, $i31, $i33, $i34, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $p42, $p43, $p44, $p45, $p46, $p47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $i26);
    goto $bb4_last;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $p27 := skb_end_pointer($p1);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 344)), $mul.ref(56, 1));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i26);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i2, $i26);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, 2);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, $i24);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p7, $mul.ref($i36, 16));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i2, $i26);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, 2);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, $i24);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p9, $mul.ref($i41, 32));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p30, $mul.ref($i31, 16)), $mul.ref(0, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p30, $mul.ref($i31, 16)), $mul.ref(8, 1));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p30, $mul.ref($i31, 16)), $mul.ref(12, 1));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i17);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} jme_fill_tx_map($p44, $p37, $p42, $p46, $i48, $i50, $i52);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i26, 1);
    call {:si_unique_call 370} {:cexpr "i"} boogie_si_record_i32($i53);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, $i22);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i54 == 1);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i26 := $i53;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1337;
}



const skb_end_pointer: ref;

axiom skb_end_pointer == $sub.ref(0, 215130);

procedure skb_end_pointer($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_end_pointer($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(208, 1));
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const jme_fill_tx_map: ref;

axiom jme_fill_tx_map == $sub.ref(0, 216162);

procedure jme_fill_tx_map($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i8);
  free requires assertsPassed;
  modifies $M.0, $M.4;



implementation jme_fill_tx_map($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i8)
{
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} {:cexpr "jme_fill_tx_map:arg:page_offset"} boogie_si_record_i32($i4);
    call {:si_unique_call 380} {:cexpr "jme_fill_tx_map:arg:len"} boogie_si_record_i32($i5);
    call {:si_unique_call 381} {:cexpr "jme_fill_tx_map:arg:hidma"} boogie_si_record_i8($i6);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i4);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i5);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $i9 := ldv_pci_map_page_1($p0, $p3, $i7, $i8, 1);
    call {:si_unique_call 383} {:cexpr "dmaaddr"} boogie_si_record_i64($i9);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i5);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} pci_dma_sync_single_for_device($p0, $i9, $i10, 1);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 0);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $sub.i8(0, 128));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i24 := $sext.i8.i32($i23);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i6);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i27 := (if $i26 == 1 then 32 else 0);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i24, $i27);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $i29);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i5);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p36, $i33);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i37 := $lshr.i64($i9, 32);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i37);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i38);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i64.i32($i9);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i42);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p46, $i9);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i5);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    return;
}



const skb_is_nonlinear: ref;

axiom skb_is_nonlinear == $sub.ref(0, 217194);

procedure skb_is_nonlinear($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_is_nonlinear($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(108, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const skb_headlen: ref;

axiom skb_headlen == $sub.ref(0, 218226);

procedure skb_headlen($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_headlen($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(104, 1));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(108, 1));
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i2, $i4);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 219258);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 385} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 1} true;
    call {:si_unique_call 386} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 387} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_pci_map_page_1: ref;

axiom ldv_pci_map_page_1 == $sub.ref(0, 220290);

procedure ldv_pci_map_page_1($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.4;



implementation ldv_pci_map_page_1($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64)
{
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} {:cexpr "ldv_pci_map_page_1:arg:offset"} boogie_si_record_i64($i2);
    call {:si_unique_call 389} {:cexpr "ldv_pci_map_page_1:arg:size"} boogie_si_record_i64($i3);
    call {:si_unique_call 390} {:cexpr "ldv_pci_map_page_1:arg:direction"} boogie_si_record_i32($i4);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $i5 := ldv_pci_dma_map_page($p0, $p1, $i2, $i3, $i4);
    call {:si_unique_call 392} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const pci_dma_sync_single_for_device: ref;

axiom pci_dma_sync_single_for_device == $sub.ref(0, 221322);

procedure pci_dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation pci_dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} {:cexpr "pci_dma_sync_single_for_device:arg:dma_handle"} boogie_si_record_i64($i1);
    call {:si_unique_call 394} {:cexpr "pci_dma_sync_single_for_device:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 395} {:cexpr "pci_dma_sync_single_for_device:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} dma_sync_single_for_device($p7, $i1, $i2, $i3);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(144, 1));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const dma_sync_single_for_device: ref;

axiom dma_sync_single_for_device == $sub.ref(0, 222354);

procedure dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} {:cexpr "dma_sync_single_for_device:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 398} {:cexpr "dma_sync_single_for_device:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 399} {:cexpr "dma_sync_single_for_device:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $p4 := get_dma_ops($p0);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i5 := valid_dma_direction($i3);
    call {:si_unique_call 402} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 404} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(56, 1));
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} debug_dma_sync_single_for_device($p0, $i1, $i2, $i3);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(56, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 406} devirtbounce.7($p16, $p0, $i1, $i2, $i3);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 405} devirtbounce.3(0, .str.26, 114, 12);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_sync_single_for_device_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 223386);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 409} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(928, 1)), $mul.ref(8, 1));
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(928, 1)), $mul.ref(8, 1));
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 224418);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 2);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const debug_dma_sync_single_for_device: ref;

axiom debug_dma_sync_single_for_device == $sub.ref(0, 225450);

procedure debug_dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation debug_dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} {:cexpr "debug_dma_sync_single_for_device:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 412} {:cexpr "debug_dma_sync_single_for_device:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 413} {:cexpr "debug_dma_sync_single_for_device:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_dma_map_page: ref;

axiom ldv_pci_dma_map_page == $sub.ref(0, 226482);

procedure ldv_pci_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.4;



implementation ldv_pci_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} {:cexpr "ldv_pci_dma_map_page:arg:offset"} boogie_si_record_i64($i2);
    call {:si_unique_call 415} {:cexpr "ldv_pci_dma_map_page:arg:size"} boogie_si_record_i64($i3);
    call {:si_unique_call 416} {:cexpr "ldv_pci_dma_map_page:arg:direction"} boogie_si_record_i32($i4);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $p5 := ldv_undef_ptr();
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    call {:si_unique_call 418} {:cexpr "nonedetermined"} boogie_si_record_i32($i7);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $M.4;
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $M.4 := $i11;
    call {:si_unique_call 419} {:cexpr "LDV_PCI_DMA_PAGE_BUFS"} boogie_si_record_i32($i11);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i7);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i9 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 227514);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 1} true;
    call {:si_unique_call 420} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 421} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ip_hdr: ref;

axiom ip_hdr == $sub.ref(0, 228546);

procedure ip_hdr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ip_hdr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $p1 := skb_network_header($p0);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ipv6_hdr: ref;

axiom ipv6_hdr == $sub.ref(0, 229578);

procedure ipv6_hdr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ipv6_hdr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $p1 := skb_network_header($p0);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_network_header: ref;

axiom skb_network_header == $sub.ref(0, 230610);

procedure skb_network_header($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_network_header($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(196, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const tcp_hdr: ref;

axiom tcp_hdr == $sub.ref(0, 231642);

procedure tcp_hdr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tcp_hdr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $p1 := skb_transport_header($p0);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const csum_tcpudp_magic: ref;

axiom csum_tcpudp_magic == $sub.ref(0, 232674);

procedure csum_tcpudp_magic($i0: i32, $i1: i32, $i2: i16, $i3: i16, $i4: i32) returns ($r: i16);
  free requires assertsPassed;



implementation csum_tcpudp_magic($i0: i32, $i1: i32, $i2: i16, $i3: i16, $i4: i32) returns ($r: i16)
{
  var $i5: i32;
  var $i6: i16;
  var $i7: i32;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} {:cexpr "csum_tcpudp_magic:arg:saddr"} boogie_si_record_i32($i0);
    call {:si_unique_call 426} {:cexpr "csum_tcpudp_magic:arg:daddr"} boogie_si_record_i32($i1);
    call {:si_unique_call 427} {:cexpr "csum_tcpudp_magic:arg:len"} boogie_si_record_i16($i2);
    call {:si_unique_call 428} {:cexpr "csum_tcpudp_magic:arg:proto"} boogie_si_record_i16($i3);
    call {:si_unique_call 429} {:cexpr "csum_tcpudp_magic:arg:sum"} boogie_si_record_i32($i4);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i2);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i3);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i9 := csum_tcpudp_nofold($i0, $i1, $i6, $i8, $i4);
    call {:si_unique_call 431} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $i10 := csum_fold($i9);
    call {:si_unique_call 433} {:cexpr "tmp___0"} boogie_si_record_i16($i10);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const csum_ipv6_magic: ref;

axiom csum_ipv6_magic == $sub.ref(0, 233706);

procedure csum_ipv6_magic($p0: ref, $p1: ref, $i2: i32, $i3: i16, $i4: i32) returns ($r: i16);
  free requires assertsPassed;



implementation csum_ipv6_magic($p0: ref, $p1: ref, $i2: i32, $i3: i16, $i4: i32) returns ($r: i16)
{
  var $i5: i16;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 434} {:cexpr "csum_ipv6_magic:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 435} {:cexpr "csum_ipv6_magic:arg:arg3"} boogie_si_record_i16($i3);
    call {:si_unique_call 436} {:cexpr "csum_ipv6_magic:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 1} true;
    call {:si_unique_call 437} $i5 := __VERIFIER_nondet_ushort();
    call {:si_unique_call 438} {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i5);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const csum_tcpudp_nofold: ref;

axiom csum_tcpudp_nofold == $sub.ref(0, 234738);

procedure csum_tcpudp_nofold($i0: i32, $i1: i32, $i2: i16, $i3: i16, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation csum_tcpudp_nofold($i0: i32, $i1: i32, $i2: i16, $i3: i16, $i4: i32) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} {:cexpr "csum_tcpudp_nofold:arg:saddr"} boogie_si_record_i32($i0);
    call {:si_unique_call 440} {:cexpr "csum_tcpudp_nofold:arg:daddr"} boogie_si_record_i32($i1);
    call {:si_unique_call 441} {:cexpr "csum_tcpudp_nofold:arg:len"} boogie_si_record_i16($i2);
    call {:si_unique_call 442} {:cexpr "csum_tcpudp_nofold:arg:proto"} boogie_si_record_i16($i3);
    call {:si_unique_call 443} {:cexpr "csum_tcpudp_nofold:arg:sum"} boogie_si_record_i32($i4);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i2);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i3);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i5, $i6);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i7, 8);
    call {:si_unique_call 444} $i9 := devirtbounce.8(0, $i1, $i0, $i8, $i4);
    call {:si_unique_call 445} {:cexpr "sum"} boogie_si_record_i32($i9);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const csum_fold: ref;

axiom csum_fold == $sub.ref(0, 235770);

procedure csum_fold($i0: i32) returns ($r: i16);
  free requires assertsPassed;



implementation csum_fold($i0: i32) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} {:cexpr "csum_fold:arg:sum"} boogie_si_record_i32($i0);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i1 := $shl.i32($i0, 16);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i0, $sub.i32(0, 65536));
    call {:si_unique_call 447} $i3 := devirtbounce.9(0, $i1, $i2);
    call {:si_unique_call 448} {:cexpr "sum"} boogie_si_record_i32($i3);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i4 := $xor.i32($i3, $sub.i32(0, 1));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i4, 16);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const skb_transport_header: ref;

axiom skb_transport_header == $sub.ref(0, 236802);

procedure skb_transport_header($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_transport_header($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(192, 1));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const netif_tx_stop_queue: ref;

axiom netif_tx_stop_queue == $sub.ref(0, 237834);

procedure netif_tx_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_stop_queue($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var vslice_dummy_var_30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 449} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i3);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 451} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i3, 0);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 454} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(16, 1));
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} set_bit(0, $p15);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} vslice_dummy_var_30 := printk.ref(.str.48);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} warn_slowpath_null(.str.47, 1866);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 238866);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    return;
}



const atomic_sub: ref;

axiom atomic_sub == $sub.ref(0, 239898);

procedure atomic_sub($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation atomic_sub($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} {:cexpr "atomic_sub:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 459} devirtbounce.10(0, $p2, $i0, $p2);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    return;
}



const skb_header_cloned: ref;

axiom skb_header_cloned == $sub.ref(0, 240930);

procedure skb_header_cloned($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_header_cloned($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(124, 1));
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $p7 := skb_end_pointer($p0);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 344)), $mul.ref(40, 1));
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i10 := atomic_read($p9);
    call {:si_unique_call 462} {:cexpr "dataref"} boogie_si_record_i32($i10);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 65535);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i12 := $ashr.i32($i10, 16);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32($i11, $i12);
    call {:si_unique_call 463} {:cexpr "dataref"} boogie_si_record_i32($i13);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 1);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i6 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const pskb_expand_head: ref;

axiom pskb_expand_head == $sub.ref(0, 241962);

procedure pskb_expand_head($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pskb_expand_head($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 464} {:cexpr "pskb_expand_head:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 465} {:cexpr "pskb_expand_head:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 466} {:cexpr "pskb_expand_head:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 1} true;
    call {:si_unique_call 467} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 468} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const consume_skb: ref;

axiom consume_skb == $sub.ref(0, 242994);

procedure consume_skb($p0: ref);
  free requires assertsPassed;



implementation consume_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    return;
}



const netif_carrier_off: ref;

axiom netif_carrier_off == $sub.ref(0, 244026);

procedure netif_carrier_off($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_off($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    return;
}



const jme_stop_irq: ref;

axiom jme_stop_irq == $sub.ref(0, 245058);

procedure jme_stop_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_stop_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} jwrite32f($p0, 2092, $sub.i32(0, 500101120));
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;
}



const jme_free_irq: ref;

axiom jme_free_irq == $sub.ref(0, 246090);

procedure jme_free_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation jme_free_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2848)), $mul.ref(1260, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} free_irq($i4, $p7);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1160, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $i9 := constant_test_bit(1, $p8);
    call {:si_unique_call 472} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} pci_disable_msi($p12);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1160, 1));
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} clear_bit(1, $p13);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2848)), $mul.ref(1260, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 2496)), $mul.ref(112, 1));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i17);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const jme_disable_rx_engine: ref;

axiom jme_disable_rx_engine == $sub.ref(0, 247122);

procedure jme_disable_rx_engine($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_disable_rx_engine($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i7: i32;
  var $i14: i32;
  var $i6: i32;
  var $i15: i1;
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1176, 1));
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} jwrite32($p0, 32, $i2);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    call {:si_unique_call 476} devirtbounce(0);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $i3 := jread32($p0, 32);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    call {:si_unique_call 478} {:cexpr "val"} boogie_si_record_i32($i3);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i6 := 10;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i6, 0);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} jme_mac_rxclk_off($p0);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i15 == 1;
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} vslice_dummy_var_31 := printk.ref(.str.49);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i7 := 10;
    goto $bb4;

  $bb4:
    call $i8, $i9, $i10, $i11, $i12, $i13, $i7, $i14 := jme_disable_rx_engine_loop_$bb4($p0, $i8, $i9, $i10, $i11, $i12, $i13, $i7, $i14);
    goto $bb4_last;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb6, $bb7;

  $bb7:
    assume !(1 == 1);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i8 := jread32($p0, 32);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    call {:si_unique_call 481} {:cexpr "val"} boogie_si_record_i32($i8);
    call {:si_unique_call 482} devirtbounce(0);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i7, 1);
    call {:si_unique_call 483} {:cexpr "i"} boogie_si_record_i32($i9);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i8, 1);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i9, 0);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i13 := $and.i1($i11, $i12);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i14 := $i9;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i6 := $i14;
    goto $bb3;

  $bb12:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb12_dummy;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb6:
    assume 1 == 1;
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} __const_udelay(4295000);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1723;
}



const jme_disable_tx_engine: ref;

axiom jme_disable_tx_engine == $sub.ref(0, 248154);

procedure jme_disable_tx_engine($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_disable_tx_engine($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i7: i32;
  var $i14: i32;
  var $i6: i32;
  var $i15: i1;
  var vslice_dummy_var_32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1168, 1));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} jwrite32($p0, 0, $i2);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    call {:si_unique_call 488} devirtbounce(0);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $i3 := jread32($p0, 0);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    call {:si_unique_call 490} {:cexpr "val"} boogie_si_record_i32($i3);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i6 := 10;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i6, 0);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} jme_mac_txclk_off($p0);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i15 == 1;
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} vslice_dummy_var_32 := printk.ref(.str.50);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i7 := 10;
    goto $bb4;

  $bb4:
    call $i8, $i9, $i10, $i11, $i12, $i13, $i7, $i14 := jme_disable_tx_engine_loop_$bb4($p0, $i8, $i9, $i10, $i11, $i12, $i13, $i7, $i14);
    goto $bb4_last;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb6, $bb7;

  $bb7:
    assume !(1 == 1);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i8 := jread32($p0, 0);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    call {:si_unique_call 493} {:cexpr "val"} boogie_si_record_i32($i8);
    call {:si_unique_call 494} devirtbounce(0);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i7, 1);
    call {:si_unique_call 495} {:cexpr "i"} boogie_si_record_i32($i9);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i8, 1);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i9, 0);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i13 := $and.i1($i11, $i12);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i14 := $i9;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i6 := $i14;
    goto $bb3;

  $bb12:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb12_dummy;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb6:
    assume 1 == 1;
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} __const_udelay(4295000);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1756;
}



const jme_reset_mac_processor: ref;

axiom jme_reset_mac_processor == $sub.ref(0, 249186);

procedure jme_reset_mac_processor($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.5, $M.4, assertsPassed;



implementation jme_reset_mac_processor($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i6: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 4));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(3, 4));
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} jme_reset_ghc_speed($p0);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} jme_reset_250A2_workaround($p0);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} jme_mac_rxclk_on($p0);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} jme_mac_txclk_on($p0);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} __const_udelay(4295);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} jme_assert_ghc_reset($p0);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} __const_udelay(4295);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} jme_mac_rxclk_off($p0);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} jme_mac_txclk_off($p0);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} __const_udelay(4295);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} jme_clear_ghc_reset($p0);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} __const_udelay(4295);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} jme_mac_rxclk_on($p0);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} jme_mac_txclk_on($p0);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} __const_udelay(4295);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} jme_mac_rxclk_off($p0);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} jme_mac_txclk_off($p0);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} jwrite32($p0, 36, 0);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} jwrite32($p0, 40, 0);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} jwrite32($p0, 44, 0);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} jwrite32($p0, 48, 0);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} jwrite32($p0, 4, 0);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} jwrite32($p0, 8, 0);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} jwrite32($p0, 12, 0);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} jwrite32($p0, 16, 0);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} jwrite32($p0, 64, 0);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} jwrite32($p0, 68, 0);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb1;

  $bb1:
    call $p7, $i8, $i9, $i6 := jme_reset_mac_processor_loop_$bb1($p0, $p1, $p7, $i8, $i9, $i6);
    goto $bb1_last;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} jme_setup_wakeup_frame($p0, $p7, $sub.i32(0, 842150451), $i6);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i6, 1);
    call {:si_unique_call 528} {:cexpr "i"} boogie_si_record_i32($i8);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i9 := $sle.i32($i8, 7);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1224, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := 3146241;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} jwrite32($p0, 2056, $i13);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i13 := 3150337;
    goto $bb8;

  $bb3:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i8;
    goto $bb3_dummy;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb3_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1816;
}



const jme_free_rx_resources: ref;

axiom jme_free_rx_resources == $sub.ref(0, 250218);

procedure jme_free_rx_resources($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, assertsPassed;



implementation jme_free_rx_resources($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i14: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(72, 1));
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 0);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(44, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} atomic_set($p39, 0);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2848)), $mul.ref(144, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1212, 1));
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i27 := $mul.i32($i26, 16);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} dma_free_coherent($p23, $i28, $p30, $i32);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $0.ref);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $0.ref);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p35, 0);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p36, 0);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $0.ref);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1212, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i13 := $ult.i32(0, $i12);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} kfree($p20);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb8;

  $bb8:
    call $i15, $i16, $i17, $i14 := jme_free_rx_resources_loop_$bb8($p0, $p11, $i15, $i16, $i17, $i14);
    goto $bb8_last;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} jme_free_rx_buf($p0, $i14);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 1);
    call {:si_unique_call 531} {:cexpr "i"} boogie_si_record_i32($i15);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p11);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i17 := $ult.i32($i15, $i16);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb10_dummy;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1853;
}



const jme_free_tx_resources: ref;

axiom jme_free_tx_resources == $sub.ref(0, 251250);

procedure jme_free_tx_resources($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation jme_free_tx_resources($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i14: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(296, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 0);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(44, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} atomic_set($p54, 0);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} atomic_set($p55, 0);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 2848)), $mul.ref(144, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1200, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 1);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i42 := $mul.i32($i41, 16);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} dma_free_coherent($p38, $i43, $p45, $i47);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $0.ref);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, $0.ref);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p50, 0);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p51, 0);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, $0.ref);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1200, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i13 := $ult.i32(0, $i12);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} kfree($p35);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb8;

  $bb8:
    call $p15, $p16, $i17, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $p27, $p28, $p29, $i30, $i31, $i32, $i14 := jme_free_tx_resources_loop_$bb8($p2, $p11, $p15, $p16, $i17, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $p27, $p28, $p29, $i30, $i31, $i32, $i14);
    goto $bb8_last;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i14);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref($i17, 32)), $mul.ref(0, 1));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p16, $mul.ref($i17, 32)), $mul.ref(8, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p26, 0);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p16, $mul.ref($i17, 32)), $mul.ref(16, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 0);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p16, $mul.ref($i17, 32)), $mul.ref(20, 1));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 0);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p16, $mul.ref($i17, 32)), $mul.ref(24, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, 0);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i14, 1);
    call {:si_unique_call 536} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p11);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i32 := $ult.i32($i30, $i31);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i30;
    goto $bb13_dummy;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p16, $mul.ref($i17, 32)), $mul.ref(0, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} consume_skb($p24);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p16, $mul.ref($i17, 32)), $mul.ref(0, 1));
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $0.ref);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1917;
}



const jme_phy_off: ref;

axiom jme_phy_off == $sub.ref(0, 252282);

procedure jme_phy_off($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.0, $CurrAddr, $M.4, assertsPassed;



implementation jme_phy_off($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $i6 := jme_mdio_read($p2, $i5, 0);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    call {:si_unique_call 542} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 2048);
    call {:si_unique_call 543} {:cexpr "bmcr"} boogie_si_record_i32($i7);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} jme_mdio_write($p9, $i12, 0, $i7);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1229, 1));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $i17 := new_phy_power_ctrl($i16);
    call {:si_unique_call 546} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} jme_new_phy_off($p0);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;
}



const new_phy_power_ctrl: ref;

axiom new_phy_power_ctrl == $sub.ref(0, 253314);

procedure new_phy_power_ctrl($i0: i8) returns ($r: i32);
  free requires assertsPassed;



implementation new_phy_power_ctrl($i0: i8) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} {:cexpr "new_phy_power_ctrl:arg:chip_main_rev"} boogie_si_record_i8($i0);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i32($i1, 4);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const jme_new_phy_off: ref;

axiom jme_new_phy_off == $sub.ref(0, 254346);

procedure jme_new_phy_off($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.0, $CurrAddr, $M.4, assertsPassed;



implementation jme_new_phy_off($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i2 := jread32($p0, 1060);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p1, $i2);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.5, $p1);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i3, 251658240);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p1, $i4);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.5, $p1);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} jwrite32($p0, 1060, $i5);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} vslice_dummy_var_33 := pci_read_config_dword($p7, 228, $p1);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.5, $p1);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, $sub.i32(0, 49153));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p1, $i10);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.5, $p1);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 16384);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p1, $i12);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.5, $p1);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} vslice_dummy_var_34 := pci_write_config_dword($p14, 228, $i15);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;
}



const pci_read_config_dword: ref;

axiom pci_read_config_dword == $sub.ref(0, 255378);

procedure pci_read_config_dword($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_dword($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} {:cexpr "pci_read_config_dword:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(16, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(56, 1));
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $i7 := pci_bus_read_config_dword($p4, $i6, $i1, $p2);
    call {:si_unique_call 556} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_write_config_dword: ref;

axiom pci_write_config_dword == $sub.ref(0, 256410);

procedure pci_write_config_dword($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_write_config_dword($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} {:cexpr "pci_write_config_dword:arg:where"} boogie_si_record_i32($i1);
    call {:si_unique_call 558} {:cexpr "pci_write_config_dword:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(16, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(56, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $i7 := pci_bus_write_config_dword($p4, $i6, $i1, $i2);
    call {:si_unique_call 560} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_bus_write_config_dword: ref;

axiom pci_bus_write_config_dword == $sub.ref(0, 257442);

procedure pci_bus_write_config_dword($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_write_config_dword($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 561} {:cexpr "pci_bus_write_config_dword:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 562} {:cexpr "pci_bus_write_config_dword:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 563} {:cexpr "pci_bus_write_config_dword:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 1} true;
    call {:si_unique_call 564} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 565} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_bus_read_config_dword: ref;

axiom pci_bus_read_config_dword == $sub.ref(0, 258474);

procedure pci_bus_read_config_dword($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_dword($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 566} {:cexpr "pci_bus_read_config_dword:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 567} {:cexpr "pci_bus_read_config_dword:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 1} true;
    call {:si_unique_call 568} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 569} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 259506);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} free_($p0);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    return;
}



const dma_free_coherent: ref;

axiom dma_free_coherent == $sub.ref(0, 260538);

procedure dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var vslice_dummy_var_35: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} {:cexpr "dma_free_coherent:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 572} {:cexpr "dma_free_coherent:arg:bus"} boogie_si_record_i64($i3);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $p4 := get_dma_ops($p0);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i5 := arch_local_save_flags();
    call {:si_unique_call 575} {:cexpr "_flags"} boogie_si_record_i64($i5);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $i6 := arch_irqs_disabled_flags($i5);
    call {:si_unique_call 577} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 578} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i8);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 580} {:cexpr "tmp___1"} boogie_si_record_i64($i12);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} vslice_dummy_var_35 := ldv__builtin_expect($i16, 0);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} debug_dma_free_coherent($p0, $i1, $p2, $i3);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    call {:si_unique_call 584} devirtbounce.11($p23, $p0, $i1, $p2, $i3);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} warn_slowpath_null(.str.51, 147);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 261570);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    return;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 262602);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, pv_irq_ops);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 587} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 589} $i7 := devirtbounce.12(0, 46, pv_irq_ops, 1);
    call {:si_unique_call 590} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 588} devirtbounce.3(0, .str.52, 853, 12);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_save_flags_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 263634);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const debug_dma_free_coherent: ref;

axiom debug_dma_free_coherent == $sub.ref(0, 264666);

procedure debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} {:cexpr "debug_dma_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 593} {:cexpr "debug_dma_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 265698);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 594} $free($p0);
    return;
}



const jme_free_rx_buf: ref;

axiom jme_free_rx_buf == $sub.ref(0, 266730);

procedure jme_free_rx_buf($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, assertsPassed;



implementation jme_free_rx_buf($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} {:cexpr "jme_free_rx_buf:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(72, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i1);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref($i6, 32)), $mul.ref(0, 1));
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref($i6, 32)), $mul.ref(8, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref($i6, 32)), $mul.ref(16, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} ldv_pci_unmap_page_2($p13, $i15, $i18, 2);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref($i6, 32)), $mul.ref(0, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} consume_skb($p20);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref($i6, 32)), $mul.ref(0, 1));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $0.ref);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref($i6, 32)), $mul.ref(8, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p22, 0);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref($i6, 32)), $mul.ref(16, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_322:
    assume !assertsPassed;
    return;
}



const ldv_pci_unmap_page_2: ref;

axiom ldv_pci_unmap_page_2 == $sub.ref(0, 267762);

procedure ldv_pci_unmap_page_2($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_pci_unmap_page_2($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} {:cexpr "ldv_pci_unmap_page_2:arg:dma_address"} boogie_si_record_i64($i1);
    call {:si_unique_call 599} {:cexpr "ldv_pci_unmap_page_2:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 600} {:cexpr "ldv_pci_unmap_page_2:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} ldv_pci_dma_unmap_page($p0, $i1, $i2, $i3);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;
}



const ldv_pci_dma_unmap_page: ref;

axiom ldv_pci_dma_unmap_page == $sub.ref(0, 268794);

procedure ldv_pci_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;
  modifies $M.4, assertsPassed;



implementation ldv_pci_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} {:cexpr "ldv_pci_dma_unmap_page:arg:dma_address"} boogie_si_record_i64($i1);
    call {:si_unique_call 603} {:cexpr "ldv_pci_dma_unmap_page:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 604} {:cexpr "ldv_pci_dma_unmap_page:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i4 := $M.4;
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $M.4;
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i6, 1);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $M.4 := $i7;
    call {:si_unique_call 606} {:cexpr "LDV_PCI_DMA_PAGE_BUFS"} boogie_si_record_i32($i7);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} ldv_error();
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_328:
    assume !assertsPassed;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 269826);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 607} __VERIFIER_error();
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;
}



const jme_reset_ghc_speed: ref;

axiom jme_reset_ghc_speed == $sub.ref(0, 270858);

procedure jme_reset_ghc_speed($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_reset_ghc_speed($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1184, 1));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $sub.i32(0, 113));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1184, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1184, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} jwrite32f($p0, 84, $i6);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;
}



const jme_reset_250A2_workaround: ref;

axiom jme_reset_250A2_workaround == $sub.ref(0, 271890);

procedure jme_reset_250A2_workaround($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_reset_250A2_workaround($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1192, 1));
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $sub.i32(0, 97));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1192, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1192, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} jwrite32($p0, 2060, $i6);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;
}



const jme_mac_rxclk_on: ref;

axiom jme_mac_rxclk_on == $sub.ref(0, 272922);

procedure jme_mac_rxclk_on($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_mac_rxclk_on($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1192, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $sub.i32(0, 67108865));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1192, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1192, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} jwrite32f($p0, 2060, $i6);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;
}



const jme_mac_txclk_on: ref;

axiom jme_mac_txclk_on == $sub.ref(0, 273954);

procedure jme_mac_txclk_on($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_mac_txclk_on($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1184, 1));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 48);
    call {:si_unique_call 611} {:cexpr "speed"} boogie_si_record_i32($i3);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 48);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1184, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 10485760);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1184, 1));
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1184, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} jwrite32f($p0, 84, $i14);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1184, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 5242880);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1184, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const jme_assert_ghc_reset: ref;

axiom jme_assert_ghc_reset == $sub.ref(0, 274986);

procedure jme_assert_ghc_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_assert_ghc_reset($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1184, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 1073741824);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1184, 1));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1184, 1));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} jwrite32f($p0, 84, $i6);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;
}



const jme_mac_rxclk_off: ref;

axiom jme_mac_rxclk_off == $sub.ref(0, 276018);

procedure jme_mac_rxclk_off($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_mac_rxclk_off($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1192, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 67108864);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1192, 1));
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1192, 1));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} jwrite32f($p0, 2060, $i6);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;
}



const jme_mac_txclk_off: ref;

axiom jme_mac_txclk_off == $sub.ref(0, 277050);

procedure jme_mac_txclk_off($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_mac_txclk_off($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1184, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $sub.i32(0, 15728641));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1184, 1));
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1184, 1));
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} jwrite32f($p0, 84, $i6);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;
}



const jme_clear_ghc_reset: ref;

axiom jme_clear_ghc_reset == $sub.ref(0, 278082);

procedure jme_clear_ghc_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_clear_ghc_reset($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1184, 1));
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $sub.i32(0, 1073741825));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1184, 1));
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1184, 1));
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} jwrite32f($p0, 84, $i6);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;
}



const jme_setup_wakeup_frame: ref;

axiom jme_setup_wakeup_frame == $sub.ref(0, 279114);

procedure jme_setup_wakeup_frame($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_setup_wakeup_frame($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} {:cexpr "jme_setup_wakeup_frame:arg:crc"} boogie_si_record_i32($i2);
    call {:si_unique_call 618} {:cexpr "jme_setup_wakeup_frame:arg:fnr"} boogie_si_record_i32($i3);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 7);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 8);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} jwrite32($p0, 76, $i5);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    call {:si_unique_call 620} devirtbounce(0);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} jwrite32($p0, 72, $i2);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    call {:si_unique_call 622} devirtbounce(0);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i3, 7);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} jwrite32($p0, 76, $i6);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    call {:si_unique_call 624} devirtbounce(0);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p1);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} jwrite32($p0, 72, $i7);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    call {:si_unique_call 626} devirtbounce(0);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i3, 7);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i9 := $or.i32(16, $i8);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} jwrite32($p0, 76, $i9);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    call {:si_unique_call 628} devirtbounce(0);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p1, $mul.ref(1, 4));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} jwrite32($p0, 72, $i11);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    call {:si_unique_call 630} devirtbounce(0);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i3, 7);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i13 := $or.i32(32, $i12);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} jwrite32($p0, 76, $i13);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    call {:si_unique_call 632} devirtbounce(0);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p1, $mul.ref(2, 4));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} jwrite32($p0, 72, $i15);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    call {:si_unique_call 634} devirtbounce(0);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i3, 7);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i17 := $or.i32(48, $i16);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} jwrite32($p0, 76, $i17);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    call {:si_unique_call 636} devirtbounce(0);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p1, $mul.ref(3, 4));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} jwrite32($p0, 72, $i19);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    call {:si_unique_call 638} devirtbounce(0);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;
}



const jwrite32f: ref;

axiom jwrite32f == $sub.ref(0, 280146);

procedure jwrite32f($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jwrite32f($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var vslice_dummy_var_36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} {:cexpr "jwrite32f:arg:reg"} boogie_si_record_i32($i1);
    call {:si_unique_call 640} {:cexpr "jwrite32f:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} reg_dbg($p0, .str.30, $i2, $i1);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(16, 1));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i1);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} writel($i2, $p6);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(16, 1));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i1);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p8, $mul.ref($i9, 1));
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} vslice_dummy_var_36 := readl($p10);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(16, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i1);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p13, $mul.ref($i14, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $i16 := readl($p15);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    call {:si_unique_call 645} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} reg_dbg($p0, .str.3, $i16, $i1);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 281178);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_msi: ref;

axiom pci_disable_msi == $sub.ref(0, 282210);

procedure pci_disable_msi($p0: ref);
  free requires assertsPassed;



implementation pci_disable_msi($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    return;
}



const jme_clear_pm: ref;

axiom jme_clear_pm == $sub.ref(0, 283242);

procedure jme_clear_pm($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_clear_pm($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1188, 1));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, $sub.i32(0, 65536));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} jwrite32($p0, 96, $i3);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} vslice_dummy_var_37 := pci_set_power_state($p5, 0);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2848)), $mul.ref(144, 1));
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} vslice_dummy_var_38 := device_set_wakeup_enable($p9, 0);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;
}



const jme_request_irq: ref;

axiom jme_request_irq == $sub.ref(0, 284274);

procedure jme_request_irq($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation jme_request_irq($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var vslice_dummy_var_39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i5 := pci_enable_msi_block($p4, 1);
    call {:si_unique_call 652} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $p8, $i9 := jme_intr, 128;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2848)), $mul.ref(1260, 1));
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i9);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 2496)), $mul.ref(0, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p2);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i18 := request_irq($i13, $p8, $i14, $p16, $p17);
    call {:si_unique_call 655} {:cexpr "rc"} boogie_si_record_i32($i18);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 2848)), $mul.ref(1260, 1));
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 2496)), $mul.ref(112, 1));
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1160, 1));
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $i21 := constant_test_bit(1, $p20);
    call {:si_unique_call 657} {:cexpr "tmp___0"} boogie_si_record_i32($i21);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p23 := (if $i22 == 1 then .str.58 else .str.59);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} vslice_dummy_var_39 := netdev_err.ref.ref.ref.i32($p2, .str.57, $p23, $i18);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1160, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $i26 := constant_test_bit(1, $p25);
    call {:si_unique_call 660} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i27 == 1;
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} pci_disable_msi($p29);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1160, 1));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} clear_bit(1, $p30);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1160, 1));
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} set_bit(1, $p7);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p8, $i9 := jme_msi, 0;
    goto $bb3;
}



const jme_start_irq: ref;

axiom jme_start_irq == $sub.ref(0, 285306);

procedure jme_start_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_start_irq($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} jme_set_rx_pcc($p0, 1);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1296, 1)), $mul.ref(24, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 1);
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1296, 1)), $mul.ref(25, 1));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 1);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1296, 1)), $mul.ref(26, 1));
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 0);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} jwrite32($p0, 2112, 65538049);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} jwrite32($p0, 2088, $sub.i32(0, 500101120));
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;
}



const jme_phy_on: ref;

axiom jme_phy_on == $sub.ref(0, 286338);

procedure jme_phy_on($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.0, $CurrAddr, $M.4, assertsPassed;



implementation jme_phy_on($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i6 := jme_mdio_read($p2, $i5, 0);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    call {:si_unique_call 667} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, $sub.i32(0, 2049));
    call {:si_unique_call 668} {:cexpr "bmcr"} boogie_si_record_i32($i7);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} jme_mdio_write($p9, $i12, 0, $i7);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1229, 1));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i17 := new_phy_power_ctrl($i16);
    call {:si_unique_call 671} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} jme_new_phy_on($p0);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;
}



const jme_new_phy_on: ref;

axiom jme_new_phy_on == $sub.ref(0, 287370);

procedure jme_new_phy_on($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.0, $CurrAddr, $M.4, assertsPassed;



implementation jme_new_phy_on($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $i2 := jread32($p0, 1060);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p1, $i2);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.5, $p1);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, $sub.i32(0, 251658241));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p1, $i4);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.5, $p1);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} jwrite32($p0, 1060, $i5);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} vslice_dummy_var_40 := pci_read_config_dword($p7, 228, $p1);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.5, $p1);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, $sub.i32(0, 49153));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p1, $i10);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.5, $p1);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p1, $i11);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.5, $p1);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} vslice_dummy_var_41 := pci_write_config_dword($p13, 228, $i14);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;
}



const jme_intr: ref;

axiom jme_intr == $sub.ref(0, 288402);

procedure jme_intr($i0: i32, $p1: ref) returns ($r: i32);



const pci_enable_msi_block: ref;

axiom pci_enable_msi_block == $sub.ref(0, 289434);

procedure pci_enable_msi_block($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_msi_block($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 678} {:cexpr "pci_enable_msi_block:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 1} true;
    call {:si_unique_call 679} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 680} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const jme_msi: ref;

axiom jme_msi == $sub.ref(0, 290466);

procedure jme_msi($i0: i32, $p1: ref) returns ($r: i32);



const request_irq: ref;

axiom request_irq == $sub.ref(0, 291498);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 682} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 684} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 292530);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 685} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 686} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 1} true;
    call {:si_unique_call 687} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 688} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const jme_intr_msi: ref;

axiom jme_intr_msi == $sub.ref(0, 293562);

procedure jme_intr_msi($p0: ref, $i1: i32);



const tasklet_schedule: ref;

axiom tasklet_schedule == $sub.ref(0, 294594);

procedure tasklet_schedule($p0: ref);



const napi_schedule_prep: ref;

axiom napi_schedule_prep == $sub.ref(0, 295626);

procedure napi_schedule_prep($p0: ref) returns ($r: i32);



const jme_polling_mode: ref;

axiom jme_polling_mode == $sub.ref(0, 296658);

procedure jme_polling_mode($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_polling_mode($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} jme_set_rx_pcc($p0, 0);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_421:
    assume !assertsPassed;
    return;
}



const __napi_schedule: ref;

axiom __napi_schedule == $sub.ref(0, 297690);

procedure __napi_schedule($p0: ref);



const tasklet_hi_schedule: ref;

axiom tasklet_hi_schedule == $sub.ref(0, 298722);

procedure tasklet_hi_schedule($p0: ref);



const __tasklet_hi_schedule: ref;

axiom __tasklet_hi_schedule == $sub.ref(0, 299754);

procedure __tasklet_hi_schedule($p0: ref);



const __tasklet_schedule: ref;

axiom __tasklet_schedule == $sub.ref(0, 300786);

procedure __tasklet_schedule($p0: ref);



const pci_set_power_state: ref;

axiom pci_set_power_state == $sub.ref(0, 301818);

procedure pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 690} {:cexpr "pci_set_power_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 1} true;
    call {:si_unique_call 691} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 692} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const device_set_wakeup_enable: ref;

axiom device_set_wakeup_enable == $sub.ref(0, 302850);

procedure device_set_wakeup_enable($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;



implementation device_set_wakeup_enable($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 693} {:cexpr "device_set_wakeup_enable:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 1} true;
    call {:si_unique_call 694} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 695} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const jme_get_drvinfo: ref;

axiom jme_get_drvinfo == $sub.ref(0, 303882);

procedure jme_get_drvinfo($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation jme_get_drvinfo($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $p2 := netdev_priv($p0);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(4, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $p6 := strcpy($p5, .str);
    assume $isExternal($p6);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(36, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $p9 := strcpy($p8, .str.1);
    assume $isExternal($p9);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $p12 := pci_name($p11);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(100, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $p15 := strcpy($p14, $p12);
    assume $isExternal($p15);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    return;
}



const jme_get_regs_len: ref;

axiom jme_get_regs_len == $sub.ref(0, 304914);

procedure jme_get_regs_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation jme_get_regs_len($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $r := 1280;
    return;
}



const jme_get_regs: ref;

axiom jme_get_regs == $sub.ref(0, 305946);

procedure jme_get_regs($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_get_regs($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $p3 := netdev_priv($p0);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 702} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p2, $sub.i8(0, 1), 1280, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 1);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} mmapio_memcpy($p4, $p5, 0, 128);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p5, $mul.ref(64, 4));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} mmapio_memcpy($p4, $p7, 1024, 88);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    $i8 := $add.i64(64, 64);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p5, $mul.ref($i8, 4));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} mmapio_memcpy($p4, $p9, 2048, 152);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    $i10 := $add.i64($i8, 64);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p5, $mul.ref($i10, 4));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} mmapio_memcpy($p4, $p11, 3072, 255);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    $i12 := $add.i64($i10, 64);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p5, $mul.ref($i12, 4));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} mdio_memcpy($p4, $p13, 32);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;
}



const jme_get_wol: ref;

axiom jme_get_wol == $sub.ref(0, 306978);

procedure jme_get_wol($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation jme_get_wol($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $p2 := netdev_priv($p0);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 33);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1188, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 6);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1188, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 1);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i19, 32);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 1);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const jme_set_wol: ref;

axiom jme_set_wol == $sub.ref(0, 308010);

procedure jme_set_wol($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_set_wol($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i8: i32;
  var vslice_dummy_var_42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $p2 := netdev_priv($p0);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 94);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1188, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 32);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1188, 1));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} jwrite32($p3, 96, $i27);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 2848)), $mul.ref(144, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1188, 1));
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} vslice_dummy_var_42 := device_set_wakeup_enable($p30, $i33);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1188, 1));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, 1);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1188, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1188, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 6);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1188, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 95);
    goto $bb3;
}



const jme_get_msglevel: ref;

axiom jme_get_msglevel == $sub.ref(0, 309042);

procedure jme_get_msglevel($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation jme_get_msglevel($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $p1 := netdev_priv($p0);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1528)), $mul.ref(1232, 1));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const jme_set_msglevel: ref;

axiom jme_set_msglevel == $sub.ref(0, 310074);

procedure jme_set_msglevel($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation jme_set_msglevel($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} {:cexpr "jme_set_msglevel:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $p2 := netdev_priv($p0);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1232, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i1);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    return;
}



const jme_nway_reset: ref;

axiom jme_nway_reset == $sub.ref(0, 311106);

procedure jme_nway_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_nway_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $p1 := netdev_priv($p0);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} jme_restart_an($p2);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;
}



const jme_get_link: ref;

axiom jme_get_link == $sub.ref(0, 312138);

procedure jme_get_link($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_get_link($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $p1 := netdev_priv($p0);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $i3 := jread32($p2, 1072);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    call {:si_unique_call 719} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1024);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_445:
    assume !assertsPassed;
    return;
}



const jme_get_eeprom_len: ref;

axiom jme_get_eeprom_len == $sub.ref(0, 313170);

procedure jme_get_eeprom_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_get_eeprom_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $p1 := netdev_priv($p0);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i3 := jread32($p2, 1088);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    call {:si_unique_call 722} {:cexpr "val"} boogie_si_record_i32($i3);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 32);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i6 := (if $i5 == 1 then 256 else 0);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_448:
    assume !assertsPassed;
    return;
}



const jme_get_eeprom: ref;

axiom jme_get_eeprom == $sub.ref(0, 314202);

procedure jme_get_eeprom($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_get_eeprom($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i1;
  var $i12: i32;
  var $i13: i8;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $p3 := netdev_priv($p0);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 724} {:cexpr "offset"} boogie_si_record_i32($i6);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 725} {:cexpr "len"} boogie_si_record_i32($i8);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 592);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32(0, $i8);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb4;

  $bb4:
    call $i12, $i13, $i14, $p15, $i16, $i17, $i11 := jme_get_eeprom_loop_$bb4($p2, $p4, $i6, $i8, $i12, $i13, $i14, $p15, $i16, $i17, $i11);
    goto $bb4_last;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, $i6);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i13 := jme_smb_read($p4, $i12);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i11);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p2, $mul.ref($i14, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i13);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i11, 1);
    call {:si_unique_call 727} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, $i8);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb6_dummy;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2596;
}



const jme_set_eeprom: ref;

axiom jme_set_eeprom == $sub.ref(0, 315234);

procedure jme_set_eeprom($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_set_eeprom($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i14: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $p3 := netdev_priv($p0);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 729} {:cexpr "offset"} boogie_si_record_i32($i6);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 730} {:cexpr "len"} boogie_si_record_i32($i8);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 592);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32(0, $i8);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb8;

  $bb8:
    call $i15, $i16, $p17, $i18, $i19, $i20, $i21, $i22, $i14 := jme_set_eeprom_loop_$bb8($p2, $p4, $i6, $i8, $i15, $i16, $p17, $i18, $i19, $i20, $i21, $i22, $i14);
    goto $bb8_last;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, $i6);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i14);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p2, $mul.ref($i16, 1));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} jme_smb_write($p4, $i15, $i20);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i14, 1);
    call {:si_unique_call 732} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, $i8);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i21;
    goto $bb10_dummy;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2627;
}



const jme_get_coalesce: ref;

axiom jme_get_coalesce == $sub.ref(0, 316266);

procedure jme_get_coalesce($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation jme_get_coalesce($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $p2 := netdev_priv($p0);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(20, 1));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 1000);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(24, 1));
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 8);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1160, 1));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} $i7 := constant_test_bit(5, $p6);
    call {:si_unique_call 735} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(40, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 1);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1296, 1)), $mul.ref(24, 1));
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i16, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i16, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 128);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(8, 1));
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 32);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 64);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(8, 1));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 16);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i16, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb12;

  $bb13:
    assume $i20 == 1;
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 1);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(8, 1));
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 1);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(40, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(8, 1));
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const jme_set_coalesce: ref;

axiom jme_set_coalesce == $sub.ref(0, 317298);

procedure jme_set_coalesce($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_set_coalesce($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $p2 := netdev_priv($p0);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $i5 := netif_running($p0);
    call {:si_unique_call 738} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(40, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(40, 1));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1160, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $i24 := constant_test_bit(5, $p23);
    call {:si_unique_call 745} {:cexpr "tmp___1"} boogie_si_record_i32($i24);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i25 == 1;
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1160, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} set_bit(5, $p26);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1352, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, netif_receive_skb);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1360, 1));
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, vlan_hwaccel_receive_skb);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} jme_interrupt_mode($p3);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1160, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $i12 := constant_test_bit(5, $p11);
    call {:si_unique_call 740} {:cexpr "tmp___2"} boogie_si_record_i32($i12);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1160, 1));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} clear_bit(5, $p14);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1352, 1));
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, netif_rx);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1360, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, vlan_hwaccel_rx);
    $p17 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1296, 1)), $mul.ref(24, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 1);
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1296, 1)), $mul.ref(25, 1));
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 1);
    $p19 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1296, 1)), $mul.ref(26, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 0);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} jme_set_rx_pcc($p3, 1);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} jme_interrupt_mode($p3);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;
}



const jme_get_pauseparam: ref;

axiom jme_get_pauseparam == $sub.ref(0, 318330);

procedure jme_get_pauseparam($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_get_pauseparam($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $p2 := netdev_priv($p0);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1172, 1));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 8);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(744, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} spin_lock_bh($p14);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $i20 := jme_mdio_read($p16, $i19, 4);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    call {:si_unique_call 751} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(744, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} spin_unlock_bh($p21);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i20, 3072);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_466:
    assume !assertsPassed;
    return;
}



const jme_set_pauseparam: ref;

axiom jme_set_pauseparam == $sub.ref(0, 319362);

procedure jme_set_pauseparam($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_set_pauseparam($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i75: i32;
  var $i74: i32;
  var $p76: ref;
  var $p77: ref;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $p2 := netdev_priv($p0);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1172, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i13 := $xor.i32($i8, $i12);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(888, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} spin_lock_bh($p28);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 8);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i38 := $xor.i32($i33, $i37);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(888, 1));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} spin_unlock_bh($p53);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(744, 1));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} spin_lock_bh($p54);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $i60 := jme_mdio_read($p56, $i59, 4);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    call {:si_unique_call 760} {:cexpr "tmp___0"} boogie_si_record_i32($i60);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 3072);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i63 := $zext.i1.i32($i62);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i66);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i68 := $xor.i32($i63, $i67);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(744, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} spin_unlock_bh($p81);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb13:
    assume $i69 == 1;
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i72 == 1);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i60, $sub.i32(0, 3073));
    call {:si_unique_call 762} {:cexpr "val"} boogie_si_record_i32($i75);
    assume {:verifier.code 0} true;
    $i74 := $i75;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} jme_mdio_write($p77, $i80, 4, $i74);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i72 == 1;
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i73 := $or.i32($i60, 3072);
    call {:si_unique_call 761} {:cexpr "val"} boogie_si_record_i32($i73);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i74 := $i73;
    goto $bb17;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i39 == 1;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i42 == 1);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, $sub.i32(0, 9));
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, $i49);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} jwrite32($p3, 52, $i52);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i42 == 1;
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i44, 8);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1172, 1));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, $sub.i32(0, 2));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1172, 1));
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1172, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} jwrite32($p3, 24, $i27);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1172, 1));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i19, 1);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(1172, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const netif_rx: ref;

axiom netif_rx == $sub.ref(0, 320394);

procedure netif_rx($p0: ref) returns ($r: i32);



const vlan_hwaccel_rx: ref;

axiom vlan_hwaccel_rx == $sub.ref(0, 321426);

procedure vlan_hwaccel_rx($p0: ref, $p1: ref, $i2: i16) returns ($r: i32);



const jme_interrupt_mode: ref;

axiom jme_interrupt_mode == $sub.ref(0, 322458);

procedure jme_interrupt_mode($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_interrupt_mode($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} jme_set_rx_pcc($p0, 1);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_481:
    assume !assertsPassed;
    return;
}



const netif_receive_skb: ref;

axiom netif_receive_skb == $sub.ref(0, 323490);

procedure netif_receive_skb($p0: ref) returns ($r: i32);



const vlan_hwaccel_receive_skb: ref;

axiom vlan_hwaccel_receive_skb == $sub.ref(0, 324522);

procedure vlan_hwaccel_receive_skb($p0: ref, $p1: ref, $i2: i16) returns ($r: i32);



const __vlan_hwaccel_rx: ref;

axiom __vlan_hwaccel_rx == $sub.ref(0, 325554);

procedure __vlan_hwaccel_rx($p0: ref, $p1: ref, $i2: i16, $i3: i32) returns ($r: i32);



const jme_smb_write: ref;

axiom jme_smb_write == $sub.ref(0, 326586);

procedure jme_smb_write($p0: ref, $i1: i32, $i2: i8);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_smb_write($p0: ref, $i1: i32, $i2: i8)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i7: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i11: i32;
  var $i6: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i35: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i39: i32;
  var $i34: i32;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} {:cexpr "jme_smb_write:arg:addr"} boogie_si_record_i32($i1);
    call {:si_unique_call 767} {:cexpr "jme_smb_write:arg:data"} boogie_si_record_i8($i2);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $i3 := jread32($p0, 1088);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    call {:si_unique_call 769} {:cexpr "val"} boogie_si_record_i32($i3);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 15);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i6 := 20;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i15 := $i6;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i2);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32($i24, 16);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 16711680);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i27 := $shl.i32($i1, 8);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 65535);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i26, $i28);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i29, 16);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} jwrite32($p0, 1092, $i30);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} $i31 := jread32($p0, 1092);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    call {:si_unique_call 777} {:cexpr "val"} boogie_si_record_i32($i31);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 16);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i34 := 20;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i43 := $i34;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb36, $bb37;

  $bb37:
    assume !(1 == 1);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} __const_udelay(4295000);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb36:
    assume 1 == 1;
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} __const_udelay(8590000);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb30:
    assume $i44 == 1;
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1232, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 8192);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb32:
    assume $i48 == 1;
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} vslice_dummy_var_44 := netdev_err.ref.ref($p50, .str.7);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb19:
    assume $i33 == 1;
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i35 := 20;
    goto $bb22;

  $bb22:
    call $i36, $i37, $i38, $i35, $i40, $i41, $i42, $i39 := jme_smb_write_loop_$bb22($p0, $i36, $i37, $i38, $i35, $i40, $i41, $i42, $i39);
    goto $bb22_last;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i35, 1);
    call {:si_unique_call 778} {:cexpr "to"} boogie_si_record_i32($i40);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i42 := $i40;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb28;

  $bb26:
    assume $i41 == 1;
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} msleep(1);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i36 := jread32($p0, 1092);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    call {:si_unique_call 781} {:cexpr "val"} boogie_si_record_i32($i36);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 16);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i39 := $i40;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i34 := $i39;
    goto $bb21;

  $bb24:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i35 := $i40;
    goto $bb24_dummy;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1232, 1));
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 8192);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} vslice_dummy_var_43 := netdev_err.ref.ref($p22, .str.7);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i7 := 20;
    goto $bb4;

  $bb4:
    call $i8, $i9, $i10, $i7, $i12, $i13, $i14, $i11 := jme_smb_write_loop_$bb4($p0, $i8, $i9, $i10, $i7, $i12, $i13, $i14, $i11);
    goto $bb4_last;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32($i7, 1);
    call {:si_unique_call 770} {:cexpr "to"} boogie_si_record_i32($i12);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb10;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} msleep(1);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $i8 := jread32($p0, 1088);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    call {:si_unique_call 773} {:cexpr "val"} boogie_si_record_i32($i8);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 15);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i11 := $i12;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb3;

  $bb6:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb6_dummy;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  $bb24_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2933;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2890;
}



const jme_smb_read: ref;

axiom jme_smb_read == $sub.ref(0, 327618);

procedure jme_smb_read($p0: ref, $i1: i32) returns ($r: i8);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_smb_read($p0: ref, $i1: i32) returns ($r: i8)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i6: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i10: i32;
  var $i5: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i32: i32;
  var $i33: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $i37: i32;
  var $i38: i32;
  var $i30: i32;
  var $i31: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i53: i32;
  var $i54: i8;
  var $i23: i8;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} {:cexpr "jme_smb_read:arg:addr"} boogie_si_record_i32($i1);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $i2 := jread32($p0, 1088);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    call {:si_unique_call 788} {:cexpr "val"} boogie_si_record_i32($i2);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 15);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i5 := 20;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i14 := $i5;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i24 := $shl.i32($i1, 8);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 65535);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i25, 48);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} jwrite32($p0, 1092, $i26);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i27 := jread32($p0, 1092);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    call {:si_unique_call 796} {:cexpr "val"} boogie_si_record_i32($i27);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 16);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i30, $i31 := $i27, 20;
    assume {:branchcond $i29} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i43, $i44 := $i30, $i31;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i53 := $lshr.i32($i43, 24);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i23 := $i54;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb30:
    assume $i45 == 1;
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1232, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 8192);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i23 := $sub.i8(0, 1);
    goto $bb17;

  $bb32:
    assume $i49 == 1;
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} vslice_dummy_var_46 := netdev_err.ref.ref($p51, .str.7);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb19:
    assume $i29 == 1;
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i32, $i33 := 20, $i27;
    goto $bb22;

  $bb22:
    call $i34, $i35, $i36, $i32, $i33, $i39, $i40, $i41, $i42, $i37, $i38 := jme_smb_read_loop_$bb22($p0, $i34, $i35, $i36, $i32, $i33, $i39, $i40, $i41, $i42, $i37, $i38);
    goto $bb22_last;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i32, 1);
    call {:si_unique_call 797} {:cexpr "to"} boogie_si_record_i32($i39);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i41, $i42 := $i33, $i39;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i43, $i44 := $i41, $i42;
    goto $bb28;

  $bb26:
    assume $i40 == 1;
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} msleep(1);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $i34 := jread32($p0, 1092);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    call {:si_unique_call 800} {:cexpr "val"} boogie_si_record_i32($i34);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 16);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i37, $i38 := $i34, $i39;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i30, $i31 := $i37, $i38;
    goto $bb21;

  $bb24:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i32, $i33 := $i39, $i34;
    goto $bb24_dummy;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i15 == 1;
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1232, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 8192);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i23 := $sub.i8(0, 1);
    goto $bb17;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} vslice_dummy_var_45 := netdev_err.ref.ref($p21, .str.7);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i6 := 20;
    goto $bb4;

  $bb4:
    call $i7, $i8, $i9, $i6, $i11, $i12, $i13, $i10 := jme_smb_read_loop_$bb4($p0, $i7, $i8, $i9, $i6, $i11, $i12, $i13, $i10);
    goto $bb4_last;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i6, 1);
    call {:si_unique_call 789} {:cexpr "to"} boogie_si_record_i32($i11);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb10;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} msleep(1);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $i7 := jread32($p0, 1088);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    call {:si_unique_call 792} {:cexpr "val"} boogie_si_record_i32($i7);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 15);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i10 := $i11;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb3;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb6_dummy;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb24_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3017;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2976;
}



const jme_restart_an: ref;

axiom jme_restart_an == $sub.ref(0, 328650);

procedure jme_restart_an($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_restart_an($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(744, 1));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} spin_lock_bh($p1);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $i7 := jme_mdio_read($p3, $i6, 0);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    call {:si_unique_call 804} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 4608);
    call {:si_unique_call 805} {:cexpr "bmcr"} boogie_si_record_i32($i8);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} jme_mdio_write($p10, $i13, 0, $i8);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(744, 1));
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} spin_unlock_bh($p14);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  SeqInstr_514:
    assume !assertsPassed;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 329682);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const mmapio_memcpy: ref;

axiom mmapio_memcpy == $sub.ref(0, 330714);

procedure mmapio_memcpy($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation mmapio_memcpy($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $i4: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} {:cexpr "mmapio_memcpy:arg:reg"} boogie_si_record_i32($i2);
    call {:si_unique_call 809} {:cexpr "mmapio_memcpy:arg:len"} boogie_si_record_i32($i3);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32(0, $i3);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i6, $i7, $i8, $i9, $p10, $i11, $i12, $i5 := mmapio_memcpy_loop_$bb4($p0, $p1, $i2, $i3, $i6, $i7, $i8, $i9, $p10, $i11, $i12, $i5);
    goto $bb4_last;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i2, $i5);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $i7 := jread32($p0, $i6);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i8 := $ashr.i32($i5, 2);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p1, $mul.ref($i9, 4));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i7);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i5, 4);
    call {:si_unique_call 811} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, $i3);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i11;
    goto $bb6_dummy;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3071;
}



const mdio_memcpy: ref;

axiom mdio_memcpy == $sub.ref(0, 331746);

procedure mdio_memcpy($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation mdio_memcpy($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i16;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} {:cexpr "mdio_memcpy:arg:reg_nr"} boogie_si_record_i32($i2);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32(0, $i2);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p6, $p7, $p9, $i10, $i11, $i12, $i13, $p14, $i15, $i16, $i5 := mdio_memcpy_loop_$bb4($p0, $i2, $p3, $p6, $p7, $p9, $i10, $i11, $i12, $i13, $p14, $i15, $i16, $i5);
    goto $bb4_last;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $i11 := jme_mdio_read($p7, $i10, $i5);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    call {:si_unique_call 814} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i5);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p3, $mul.ref($i13, 2));
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, $i12);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i5, 1);
    call {:si_unique_call 815} {:cexpr "i"} boogie_si_record_i32($i15);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, $i2);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i15;
    goto $bb6_dummy;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3090;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 332778);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const pci_name: ref;

axiom pci_name == $sub.ref(0, 333810);

procedure pci_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(144, 1));
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $p2 := dev_name($p1);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 334842);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(80, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(16, 1));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $p9 := kobject_name($p8);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(80, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 335874);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const jme_init_one: ref;

axiom jme_init_one == $sub.ref(0, 336906);

procedure jme_init_one($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.5, $CurrAddr, $M.9, $M.4, assertsPassed;



implementation jme_init_one($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i9: i32;
  var $i10: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p65: ref;
  var $i66: i64;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p74: ref;
  var $i75: i64;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $p83: ref;
  var $i84: i64;
  var $p87: ref;
  var $i88: i64;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $i97: i1;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $i103: i32;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $p112: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $p133: ref;
  var $i134: i64;
  var $p135: ref;
  var $i136: i64;
  var $p137: ref;
  var $i138: i64;
  var $p139: ref;
  var $i140: i64;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i154: i32;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $i158: i32;
  var $i159: i32;
  var $p160: ref;
  var $p161: ref;
  var $p163: ref;
  var $i164: i8;
  var $i165: i32;
  var $i166: i32;
  var $i167: i8;
  var $p168: ref;
  var $p169: ref;
  var $i170: i8;
  var $i171: i32;
  var $i172: i1;
  var $i173: i1;
  var $i174: i1;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p179: ref;
  var $p180: ref;
  var $i181: i32;
  var $i182: i1;
  var $p184: ref;
  var $i185: i32;
  var $i186: i16;
  var $i187: i32;
  var $i188: i16;
  var $i189: i32;
  var $i190: i1;
  var $i191: i32;
  var $i192: i1;
  var $i194: i32;
  var $i195: i1;
  var $i193: i32;
  var $p197: ref;
  var $p199: ref;
  var $i200: i32;
  var $i201: i1;
  var $p204: ref;
  var $i205: i32;
  var $i206: i32;
  var $p207: ref;
  var $p209: ref;
  var $p210: ref;
  var $i211: i16;
  var $i212: i32;
  var $i213: i1;
  var $p215: ref;
  var $i216: i8;
  var $i217: i8;
  var $i218: i8;
  var $p220: ref;
  var $i221: i8;
  var $i222: i8;
  var $p224: ref;
  var $p226: ref;
  var $p228: ref;
  var $p230: ref;
  var $p231: ref;
  var $i232: i8;
  var $p233: ref;
  var $p234: ref;
  var $i235: i32;
  var $i236: i1;
  var $i237: i32;
  var $i238: i1;
  var $i240: i32;
  var $i241: i1;
  var $p243: ref;
  var $i244: i32;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $i252: i16;
  var $i253: i32;
  var $i254: i1;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $i258: i16;
  var $i259: i32;
  var $i260: i1;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $i264: i32;
  var $i265: i1;
  var $p266: ref;
  var $p267: ref;
  var $i268: i32;
  var $i269: i1;
  var $p270: ref;
  var $i271: i32;
  var $p273: ref;
  var $i274: i8;
  var $i275: i32;
  var $i272: i32;
  var $p276: ref;
  var $i277: i8;
  var $i278: i32;
  var $p279: ref;
  var $p280: ref;
  var $i203: i32;
  var $p283: ref;
  var $p284: ref;
  var $i99: i32;
  var $i27: i32;
  var $i12: i32;
  var $i8: i32;
  var $i282: i32;
  var $i285: i32;
  var $i286: i16;
  var $i287: i32;
  var $i288: i16;
  var $i289: i32;
  var $i290: i1;
  var $i291: i32;
  var $i292: i1;
  var $i293: i32;
  var $i294: i1;
  var $i295: i32;
  var $i296: i16;
  var $i297: i32;
  var $i298: i16;
  var $i299: i32;
  var $i300: i1;
  var $i301: i32;
  var $i302: i1;
  var $i303: i32;
  var $i304: i1;
  var $i305: i32;
  var $i306: i16;
  var $i307: i32;
  var $i308: i16;
  var $i309: i32;
  var $i310: i1;
  var $i311: i32;
  var $i312: i1;
  var $i313: i32;
  var $i314: i1;
  var $i315: i32;
  var $i316: i16;
  var $i317: i32;
  var $i318: i16;
  var $i319: i32;
  var $i320: i1;
  var $i321: i32;
  var $i322: i1;
  var $i323: i32;
  var $i324: i1;
  var $i325: i32;
  var $i326: i16;
  var $i327: i32;
  var $i328: i16;
  var $i329: i32;
  var $i330: i1;
  var $i331: i32;
  var $i332: i1;
  var $i333: i32;
  var $i334: i1;
  var $i335: i32;
  var $i336: i16;
  var $i337: i32;
  var $i338: i16;
  var $i339: i32;
  var $i340: i1;
  var $i341: i32;
  var $i342: i1;
  var $i343: i32;
  var $i344: i1;
  var $i345: i32;
  var $i346: i16;
  var $i347: i32;
  var $i348: i16;
  var $i349: i32;
  var $i350: i1;
  var $i351: i32;
  var $i352: i1;
  var $i353: i32;
  var $i354: i1;
  var $i355: i32;
  var $i356: i16;
  var $i357: i32;
  var $i358: i16;
  var $i359: i32;
  var $i360: i1;
  var $i361: i32;
  var $i362: i1;
  var $i363: i32;
  var $i364: i1;
  var $i365: i32;
  var $i366: i16;
  var $i367: i32;
  var $i368: i16;
  var $i369: i32;
  var $i370: i1;
  var $i371: i32;
  var $i372: i1;
  var $i373: i32;
  var $i374: i1;
  var $i375: i32;
  var $i376: i16;
  var $i377: i32;
  var $i378: i16;
  var $i379: i32;
  var $i380: i1;
  var $i381: i32;
  var $i382: i1;
  var $i383: i32;
  var $i384: i1;
  var $i385: i32;
  var $i386: i16;
  var $i387: i32;
  var $i388: i16;
  var $i389: i32;
  var $i390: i1;
  var $i391: i32;
  var $i392: i1;
  var $i393: i32;
  var $i394: i1;
  var $i395: i32;
  var $i396: i16;
  var $i397: i32;
  var $i398: i16;
  var $i399: i32;
  var $i400: i1;
  var $i401: i32;
  var $i402: i1;
  var $i403: i32;
  var $i404: i1;
  var $i405: i32;
  var $i406: i16;
  var $i407: i32;
  var $i408: i16;
  var $i409: i32;
  var $i410: i1;
  var $i411: i32;
  var $i412: i1;
  var $i413: i32;
  var $i414: i1;
  var $i415: i32;
  var $i416: i16;
  var $i417: i32;
  var $i418: i16;
  var $i419: i32;
  var $i420: i1;
  var $i421: i32;
  var $i422: i1;
  var $i423: i32;
  var $i424: i1;
  var $i425: i32;
  var $i426: i16;
  var $i427: i32;
  var $i428: i16;
  var $i429: i32;
  var $i430: i1;
  var $i431: i32;
  var $i432: i1;
  var $i433: i32;
  var $i434: i1;
  var $i435: i32;
  var $i436: i16;
  var $i437: i32;
  var $i438: i16;
  var $i439: i32;
  var $i440: i1;
  var $i441: i32;
  var $i442: i1;
  var $i443: i32;
  var $i444: i1;
  var $i445: i32;
  var $i446: i16;
  var $i447: i32;
  var $i448: i16;
  var $i449: i32;
  var $i450: i1;
  var $i451: i32;
  var $i452: i1;
  var $i453: i32;
  var $i454: i1;
  var $i455: i32;
  var $i456: i16;
  var $i457: i32;
  var $i458: i16;
  var $i459: i32;
  var $i460: i1;
  var $i461: i32;
  var $i462: i1;
  var $i463: i32;
  var $i464: i1;
  var $i465: i32;
  var $i466: i16;
  var $i467: i32;
  var $i468: i16;
  var $i469: i32;
  var $i470: i1;
  var $i471: i32;
  var $i472: i1;
  var $i473: i32;
  var $i474: i1;
  var $i475: i32;
  var $i476: i16;
  var $i477: i32;
  var $i478: i16;
  var $i479: i32;
  var $i480: i1;
  var $i481: i32;
  var $i482: i1;
  var $i483: i32;
  var $i484: i1;
  var $i485: i32;
  var $i486: i16;
  var $i487: i32;
  var $i488: i16;
  var $i489: i32;
  var $i490: i1;
  var $i491: i32;
  var $i492: i1;
  var $i493: i32;
  var $i494: i1;
  var $i495: i32;
  var $i496: i16;
  var $i497: i32;
  var $i498: i16;
  var $i499: i32;
  var $i500: i1;
  var $i501: i32;
  var $i502: i1;
  var $i503: i32;
  var $i504: i1;
  var $i505: i32;
  var $i506: i16;
  var $i507: i32;
  var $i508: i16;
  var $i509: i32;
  var $i510: i1;
  var $i511: i32;
  var $i512: i1;
  var $i513: i32;
  var $i514: i1;
  var $i515: i32;
  var $i516: i16;
  var $i517: i32;
  var $i518: i16;
  var $i519: i32;
  var $i520: i1;
  var $i521: i32;
  var $i522: i1;
  var $i523: i32;
  var $i524: i1;
  var $i525: i32;
  var $i526: i16;
  var $i527: i32;
  var $i528: i16;
  var $i529: i32;
  var $i530: i1;
  var $i531: i32;
  var $i532: i1;
  var $i533: i32;
  var $i534: i1;
  var $i535: i32;
  var $i536: i16;
  var $i537: i32;
  var $i538: i16;
  var $i539: i32;
  var $i540: i1;
  var $i541: i32;
  var $i542: i1;
  var $i543: i32;
  var $i544: i1;
  var $i545: i32;
  var $i546: i16;
  var $i547: i32;
  var $i548: i16;
  var $i549: i32;
  var $i550: i1;
  var $i551: i32;
  var $i552: i1;
  var $i553: i32;
  var $i554: i1;
  var $i555: i32;
  var $i556: i16;
  var $i557: i32;
  var $i558: i16;
  var $i559: i32;
  var $i560: i1;
  var $i561: i32;
  var $i562: i1;
  var $i563: i32;
  var $i564: i1;
  var $i565: i32;
  var $i566: i16;
  var $i567: i32;
  var $i568: i16;
  var $i569: i32;
  var $i570: i1;
  var $i571: i32;
  var $i572: i1;
  var $i573: i32;
  var $i574: i1;
  var $i575: i32;
  var $i576: i16;
  var $i577: i32;
  var $i578: i16;
  var $i579: i32;
  var $i580: i1;
  var $i581: i32;
  var $i582: i1;
  var $i583: i32;
  var $i584: i1;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: ref;
  var vslice_dummy_var_54: ref;
  var vslice_dummy_var_55: ref;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i5 := pci_enable_device($p0);
    call {:si_unique_call 822} {:cexpr "rc"} boogie_si_record_i32($i5);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $i9 := jme_pci_dma64($p0);
    call {:si_unique_call 825} {:cexpr "using_dac"} boogie_si_record_i32($i9);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(1264, 1)), $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 512);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $i20 := pci_request_regions($p0, .str);
    call {:si_unique_call 830} {:cexpr "rc"} boogie_si_record_i32($i20);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} pci_set_master($p0);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $p23 := alloc_etherdev_mqs(1528, 1, 1);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p23, $mul.ref(0, 2496)), $mul.ref(408, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, jme_netdev_ops);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p23, $mul.ref(0, 2496)), $mul.ref(416, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, jme_ethtool_ops);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p23, $mul.ref(0, 2496)), $mul.ref(960, 1));
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 1250);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p23, $mul.ref(0, 2496)), $mul.ref(180, 1));
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 537985043);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p23, $mul.ref(0, 2496)), $mul.ref(176, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 1114515);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i9, 0);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(144, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 2496)), $mul.ref(1200, 1)), $mul.ref(0, 1));
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p38);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p23);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} pci_set_drvdata($p0, $p41);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $p42 := netdev_priv($p23);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $p0);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p23);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1352, 1));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, netif_rx);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1360, 1));
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, vlan_hwaccel_rx);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p23, $mul.ref(0, 2496)), $mul.ref(448, 1));
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 1500);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1280, 1));
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 1500);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1196, 1));
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 0);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1200, 1));
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, 1024);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1200, 1));
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32($i53, 1);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1204, 1));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i54);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1208, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, 512);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1212, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, 512);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1212, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32($i59, 1);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1216, 1));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i60);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1232, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, 8390);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(1264, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.0, $p65);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(1264, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.0, $p69);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i71 == 1);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(1264, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(1264, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.0, $p78);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i75, $i79);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i80 == 1);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i91 := 0;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $p92 := ioremap($i66, $i91);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(16, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p93, $p92);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(16, 1));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p95);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i97 := $eq.i64($i96, 0);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i100 := $M.6;
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i101 == 1);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i104 := $M.7;
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1368, 1));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1212, 1));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i111 := $lshr.i32($i110, 2);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} netif_napi_add($p23, $p108, jme_poll, $i111);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(744, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} vslice_dummy_var_53 := spinlock_check($p112);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} __raw_spin_lock_init($p116, .str.14, $p2);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(816, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} vslice_dummy_var_54 := spinlock_check($p117);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(816, 1)), $mul.ref(0, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} __raw_spin_lock_init($p121, .str.15, $p3);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(888, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} vslice_dummy_var_55 := spinlock_check($p122);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(888, 1)), $mul.ref(0, 1));
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} __raw_spin_lock_init($p126, .str.16, $p4);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1332, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} atomic_set($p127, 1);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1340, 1));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} atomic_set($p128, 1);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1336, 1));
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} atomic_set($p129, 1);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1344, 1));
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} atomic_set($p130, 1);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1120, 1));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($p43);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} tasklet_init($p131, jme_pcc_tasklet, $i132);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1080, 1));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p43);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} tasklet_init($p133, jme_link_change_tasklet, $i134);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1040, 1));
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i136 := $p2i.ref.i64($p43);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} tasklet_init($p135, jme_tx_clean_tasklet, $i136);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1000, 1));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i138 := $p2i.ref.i64($p43);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} tasklet_init($p137, jme_rx_clean_tasklet, $i138);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(960, 1));
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p43);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} tasklet_init($p139, jme_rx_empty_tasklet, $i140);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1080, 1));
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} tasklet_disable_nosync($p141);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1040, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} tasklet_disable_nosync($p142);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1000, 1));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} tasklet_disable_nosync($p143);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(960, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} tasklet_disable_nosync($p144);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1296, 1)), $mul.ref(24, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p146, 1);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1184, 1));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p147, 0);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1176, 1));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p148, 1056966656);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p149, 15);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1172, 1));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p150, 0);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1188, 1));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p151, 1);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1192, 1));
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p152, 131072);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1180, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.0, $p153);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i155 := $and.i32($i154, 1);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i156 := $ne.i32($i155, 0);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1220, 1));
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} vslice_dummy_var_56 := pci_read_config_byte($p0, 89, $p161);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1220, 1));
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i164 := $load.i8($M.0, $p163);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i165 := $zext.i8.i32($i164);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i166 := $and.i32($i165, 112);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i167 := $trunc.i32.i8($i166);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1220, 1));
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p168, $i167);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1220, 1));
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i170 := $load.i8($M.0, $p169);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i32($i170);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i172 := $slt.i32($i171, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i171, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i173 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1168, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p177, 52);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} jme_check_hw_ver($p43);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p179, $p23);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1224, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.0, $p180);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i182 := $ne.i32($i181, 0);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i182 == 1);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p209, 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(62, 1));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i211 := $load.i16($M.0, $p210);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i212 := $zext.i16.i32($i211);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 592);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i213 == 1);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(16, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i221 := $load.i8($M.0, $p220);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i222 := $and.i8($i221, $sub.i8(0, 5));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p220, $i222);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p224, 31);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(12, 1));
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p226, 31);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p228, jme_mdio_read);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p230, jme_mdio_write);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} jme_clear_pm($p43);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} jme_set_phyfifo_5level($p43);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(72, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i232 := $load.i8($M.0, $p231);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1231, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p233, $i232);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1224, 1));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i235 := $load.i32($M.0, $p234);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i236 := $eq.i32($i235, 0);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i236} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} jme_phy_off($p43);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} jme_reset_mac_processor($p43);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $i237 := jme_reload_eeprom($p43);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    call {:si_unique_call 888} {:cexpr "rc"} boogie_si_record_i32($i237);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i238 := $ne.i32($i237, 0);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} jme_load_macaddr($p23);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} netif_carrier_off($p23);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} $i240 := ldv_register_netdev_5($p23);
    call {:si_unique_call 893} {:cexpr "rc"} boogie_si_record_i32($i240);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i241 := $ne.i32($i240, 0);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i241} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1232, 1));
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i244 := $load.i32($M.0, $p243);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i245 := $and.i32($i244, 2);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i246 := $ne.i32($i245, 0);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i246} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i282 := 0;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $r := $i282;
    return;

  $bb84:
    assume $i246 == 1;
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p248 := $load.ref($M.0, $p247);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.0, $p249);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p250, $mul.ref(0, 2848)), $mul.ref(62, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i252 := $load.i16($M.0, $p251);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i253 := $zext.i16.i32($i252);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i254 := $ne.i32($i253, 592);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i254} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i254 == 1);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p262 := .str.23;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1224, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i264 := $load.i32($M.0, $p263);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i265 := $ne.i32($i264, 0);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p266 := (if $i265 == 1 then .str.24 else .str.25);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1224, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i268 := $load.i32($M.0, $p267);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i269 := $ne.i32($i268, 0);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i269 == 1);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1228, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i274 := $load.i8($M.0, $p273);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i275 := $zext.i8.i32($i274);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i272 := $i275;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1231, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i277 := $load.i8($M.0, $p276);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i278 := $zext.i8.i32($i277);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p23, $mul.ref(0, 2496)), $mul.ref(720, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.0, $p279);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} vslice_dummy_var_60 := netdev_info.ref.ref.ref.ref.i32.i32.ref($p248, .str.20, $p262, $p266, $i272, $i278, $p280);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb89:
    assume $i269 == 1;
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1224, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i271 := $load.i32($M.0, $p270);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i272 := $i271;
    goto $bb91;

  $bb86:
    assume $i254 == 1;
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p256 := $load.ref($M.0, $p255);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p256, $mul.ref(0, 2848)), $mul.ref(62, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i258 := $load.i16($M.0, $p257);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i259 := $zext.i16.i32($i258);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i259, 608);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p261 := (if $i260 == 1 then .str.21 else .str.22);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p262 := $p261;
    goto $bb88;

  $bb81:
    assume $i241 == 1;
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} vslice_dummy_var_59 := printk.ref(.str.19);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i203 := $i240;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(16, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p284 := $load.ref($M.0, $p283);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} iounmap($p284);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i99 := $i203;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} pci_set_drvdata($p0, $0.ref);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} ldv_free_netdev_6($p23);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i27 := $i99;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} pci_release_regions($p0);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i12 := $i27;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} pci_disable_device($p0);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i8 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i282 := $i8;
    goto $bb93;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  $bb78:
    assume $i238 == 1;
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} vslice_dummy_var_58 := printk.ref(.str.18);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i203 := $i237;
    goto $bb69;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb75:
    assume $i236 == 1;
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} jme_phy_init($p43);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  $bb72:
    assume $i213 == 1;
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(16, 1));
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i216 := $load.i8($M.0, $p215);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i217 := $and.i8($i216, $sub.i8(0, 5));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i218 := $or.i8($i217, 4);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p215, $i218);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb51:
    assume $i182 == 1;
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p184, 0);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $i185 := jme_mdio_read($p23, 1, 0);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    call {:si_unique_call 873} {:cexpr "tmp___3"} boogie_si_record_i32($i185);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i186 := $trunc.i32.i16($i185);
    call {:si_unique_call 874} {:cexpr "bmcr"} boogie_si_record_i16($i186);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} $i187 := jme_mdio_read($p23, 1, 1);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    call {:si_unique_call 876} {:cexpr "tmp___4"} boogie_si_record_i32($i187);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i188 := $trunc.i32.i16($i187);
    call {:si_unique_call 877} {:cexpr "bmsr"} boogie_si_record_i16($i188);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i189 := $zext.i16.i32($i186);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i190 := $ne.i32($i189, 65535);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i190 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $i285 := jme_mdio_read($p23, 2, 0);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i286 := $trunc.i32.i16($i285);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $i287 := jme_mdio_read($p23, 2, 1);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i288 := $trunc.i32.i16($i287);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i289 := $zext.i16.i32($i286);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i290 := $ne.i32($i289, 65535);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i290} true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i290 == 1);
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $i295 := jme_mdio_read($p23, 3, 0);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i296 := $trunc.i32.i16($i295);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $i297 := jme_mdio_read($p23, 3, 1);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i298 := $trunc.i32.i16($i297);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i299 := $zext.i16.i32($i296);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i300 := $ne.i32($i299, 65535);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i300} true;
    goto $bb103, $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume !($i300 == 1);
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $i305 := jme_mdio_read($p23, 4, 0);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i306 := $trunc.i32.i16($i305);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $i307 := jme_mdio_read($p23, 4, 1);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i308 := $trunc.i32.i16($i307);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i309 := $zext.i16.i32($i306);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i310 := $ne.i32($i309, 65535);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i310} true;
    goto $bb112, $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    assume !($i310 == 1);
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $i315 := jme_mdio_read($p23, 5, 0);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i316 := $trunc.i32.i16($i315);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $i317 := jme_mdio_read($p23, 5, 1);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i318 := $trunc.i32.i16($i317);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i319 := $zext.i16.i32($i316);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i320 := $ne.i32($i319, 65535);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    assume !($i320 == 1);
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $i325 := jme_mdio_read($p23, 6, 0);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i326 := $trunc.i32.i16($i325);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $i327 := jme_mdio_read($p23, 6, 1);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i328 := $trunc.i32.i16($i327);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i329 := $zext.i16.i32($i326);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i330 := $ne.i32($i329, 65535);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    assume !($i330 == 1);
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $i335 := jme_mdio_read($p23, 7, 0);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i336 := $trunc.i32.i16($i335);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} $i337 := jme_mdio_read($p23, 7, 1);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i338 := $trunc.i32.i16($i337);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i339 := $zext.i16.i32($i336);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i340 := $ne.i32($i339, 65535);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    assume !($i340 == 1);
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $i345 := jme_mdio_read($p23, 8, 0);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i346 := $trunc.i32.i16($i345);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $i347 := jme_mdio_read($p23, 8, 1);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i348 := $trunc.i32.i16($i347);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i349 := $zext.i16.i32($i346);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i350 := $ne.i32($i349, 65535);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i350} true;
    goto $bb148, $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    assume !($i350 == 1);
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $i355 := jme_mdio_read($p23, 9, 0);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i356 := $trunc.i32.i16($i355);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $i357 := jme_mdio_read($p23, 9, 1);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i358 := $trunc.i32.i16($i357);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i359 := $zext.i16.i32($i356);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i360 := $ne.i32($i359, 65535);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i360} true;
    goto $bb157, $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    assume !($i360 == 1);
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $i365 := jme_mdio_read($p23, 10, 0);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i366 := $trunc.i32.i16($i365);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $i367 := jme_mdio_read($p23, 10, 1);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i368 := $trunc.i32.i16($i367);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i369 := $zext.i16.i32($i366);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i370 := $ne.i32($i369, 65535);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i370} true;
    goto $bb166, $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    assume !($i370 == 1);
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $i375 := jme_mdio_read($p23, 11, 0);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i376 := $trunc.i32.i16($i375);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $i377 := jme_mdio_read($p23, 11, 1);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i378 := $trunc.i32.i16($i377);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i379 := $zext.i16.i32($i376);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i380 := $ne.i32($i379, 65535);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i380} true;
    goto $bb175, $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    assume !($i380 == 1);
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $i385 := jme_mdio_read($p23, 12, 0);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i386 := $trunc.i32.i16($i385);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i387 := jme_mdio_read($p23, 12, 1);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i388 := $trunc.i32.i16($i387);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i389 := $zext.i16.i32($i386);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i390 := $ne.i32($i389, 65535);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    assume !($i390 == 1);
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} $i395 := jme_mdio_read($p23, 13, 0);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i396 := $trunc.i32.i16($i395);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $i397 := jme_mdio_read($p23, 13, 1);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i398 := $trunc.i32.i16($i397);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i399 := $zext.i16.i32($i396);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i400 := $ne.i32($i399, 65535);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    assume !($i400 == 1);
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $i405 := jme_mdio_read($p23, 14, 0);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i406 := $trunc.i32.i16($i405);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $i407 := jme_mdio_read($p23, 14, 1);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i408 := $trunc.i32.i16($i407);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i409 := $zext.i16.i32($i406);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i410 := $ne.i32($i409, 65535);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    assume !($i410 == 1);
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} $i415 := jme_mdio_read($p23, 15, 0);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i416 := $trunc.i32.i16($i415);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $i417 := jme_mdio_read($p23, 15, 1);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i418 := $trunc.i32.i16($i417);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i419 := $zext.i16.i32($i416);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i420 := $ne.i32($i419, 65535);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    assume !($i420 == 1);
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $i425 := jme_mdio_read($p23, 16, 0);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i426 := $trunc.i32.i16($i425);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $i427 := jme_mdio_read($p23, 16, 1);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i428 := $trunc.i32.i16($i427);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i429 := $zext.i16.i32($i426);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i430 := $ne.i32($i429, 65535);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    assume {:branchcond $i430} true;
    goto $bb220, $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    assume !($i430 == 1);
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $i435 := jme_mdio_read($p23, 17, 0);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i436 := $trunc.i32.i16($i435);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $i437 := jme_mdio_read($p23, 17, 1);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i438 := $trunc.i32.i16($i437);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i439 := $zext.i16.i32($i436);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i440 := $ne.i32($i439, 65535);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i440} true;
    goto $bb229, $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    assume !($i440 == 1);
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $i445 := jme_mdio_read($p23, 18, 0);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i446 := $trunc.i32.i16($i445);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $i447 := jme_mdio_read($p23, 18, 1);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i448 := $trunc.i32.i16($i447);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i449 := $zext.i16.i32($i446);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i450 := $ne.i32($i449, 65535);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i450} true;
    goto $bb238, $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    assume !($i450 == 1);
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} $i455 := jme_mdio_read($p23, 19, 0);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i456 := $trunc.i32.i16($i455);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $i457 := jme_mdio_read($p23, 19, 1);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i458 := $trunc.i32.i16($i457);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i459 := $zext.i16.i32($i456);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i460 := $ne.i32($i459, 65535);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i460} true;
    goto $bb247, $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    assume !($i460 == 1);
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $i465 := jme_mdio_read($p23, 20, 0);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i466 := $trunc.i32.i16($i465);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $i467 := jme_mdio_read($p23, 20, 1);
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i468 := $trunc.i32.i16($i467);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i469 := $zext.i16.i32($i466);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i470 := $ne.i32($i469, 65535);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    assume {:branchcond $i470} true;
    goto $bb256, $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    assume !($i470 == 1);
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $i475 := jme_mdio_read($p23, 21, 0);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i476 := $trunc.i32.i16($i475);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $i477 := jme_mdio_read($p23, 21, 1);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i478 := $trunc.i32.i16($i477);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i479 := $zext.i16.i32($i476);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i480 := $ne.i32($i479, 65535);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i480} true;
    goto $bb265, $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    assume !($i480 == 1);
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $i485 := jme_mdio_read($p23, 22, 0);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i486 := $trunc.i32.i16($i485);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $i487 := jme_mdio_read($p23, 22, 1);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i488 := $trunc.i32.i16($i487);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i489 := $zext.i16.i32($i486);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i490 := $ne.i32($i489, 65535);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i490} true;
    goto $bb274, $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    assume !($i490 == 1);
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $i495 := jme_mdio_read($p23, 23, 0);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i496 := $trunc.i32.i16($i495);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $i497 := jme_mdio_read($p23, 23, 1);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i498 := $trunc.i32.i16($i497);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i499 := $zext.i16.i32($i496);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i500 := $ne.i32($i499, 65535);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    assume {:branchcond $i500} true;
    goto $bb283, $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    assume !($i500 == 1);
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $i505 := jme_mdio_read($p23, 24, 0);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i506 := $trunc.i32.i16($i505);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $i507 := jme_mdio_read($p23, 24, 1);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i508 := $trunc.i32.i16($i507);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i509 := $zext.i16.i32($i506);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i510 := $ne.i32($i509, 65535);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    assume {:branchcond $i510} true;
    goto $bb292, $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    assume !($i510 == 1);
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $i515 := jme_mdio_read($p23, 25, 0);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i516 := $trunc.i32.i16($i515);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} $i517 := jme_mdio_read($p23, 25, 1);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i518 := $trunc.i32.i16($i517);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i519 := $zext.i16.i32($i516);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i520 := $ne.i32($i519, 65535);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i520} true;
    goto $bb301, $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    assume !($i520 == 1);
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $i525 := jme_mdio_read($p23, 26, 0);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i526 := $trunc.i32.i16($i525);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $i527 := jme_mdio_read($p23, 26, 1);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i528 := $trunc.i32.i16($i527);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i529 := $zext.i16.i32($i526);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i530 := $ne.i32($i529, 65535);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i530} true;
    goto $bb310, $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    assume !($i530 == 1);
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $i535 := jme_mdio_read($p23, 27, 0);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i536 := $trunc.i32.i16($i535);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $i537 := jme_mdio_read($p23, 27, 1);
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i538 := $trunc.i32.i16($i537);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i539 := $zext.i16.i32($i536);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i540 := $ne.i32($i539, 65535);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i540} true;
    goto $bb319, $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    assume !($i540 == 1);
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $i545 := jme_mdio_read($p23, 28, 0);
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i546 := $trunc.i32.i16($i545);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $i547 := jme_mdio_read($p23, 28, 1);
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i548 := $trunc.i32.i16($i547);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i549 := $zext.i16.i32($i546);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i550 := $ne.i32($i549, 65535);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i550} true;
    goto $bb328, $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    assume !($i550 == 1);
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $i555 := jme_mdio_read($p23, 29, 0);
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i556 := $trunc.i32.i16($i555);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $i557 := jme_mdio_read($p23, 29, 1);
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i558 := $trunc.i32.i16($i557);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i559 := $zext.i16.i32($i556);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i560 := $ne.i32($i559, 65535);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i560} true;
    goto $bb337, $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    assume !($i560 == 1);
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $i565 := jme_mdio_read($p23, 30, 0);
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i566 := $trunc.i32.i16($i565);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $i567 := jme_mdio_read($p23, 30, 1);
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i568 := $trunc.i32.i16($i567);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i569 := $zext.i16.i32($i566);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i570 := $ne.i32($i569, 65535);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i570} true;
    goto $bb346, $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    assume !($i570 == 1);
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} $i575 := jme_mdio_read($p23, 31, 0);
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i576 := $trunc.i32.i16($i575);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $i577 := jme_mdio_read($p23, 31, 1);
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i578 := $trunc.i32.i16($i577);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i579 := $zext.i16.i32($i576);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i580 := $ne.i32($i579, 65535);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i580} true;
    goto $bb355, $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    assume !($i580 == 1);
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.0, $p199);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i200, 0);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i201} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1184, 1));
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i205 := $load.i32($M.0, $p204);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i206 := $or.i32($i205, 1);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1184, 1));
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p207, $i206);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb67:
    assume $i201 == 1;
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} vslice_dummy_var_57 := printk.ref(.str.17);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i203 := $sub.i32(0, 5);
    goto $bb69;

  $bb355:
    assume $i580 == 1;
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i581 := $zext.i16.i32($i576);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i582 := $ne.i32($i581, 0);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i193 := 31;
    assume {:branchcond $i582} true;
    goto $bb358, $bb359;

  $bb359:
    assume !($i582 == 1);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i583 := $zext.i16.i32($i578);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i584 := $ne.i32($i583, 0);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i193 := 31;
    assume {:branchcond $i584} true;
    goto $bb360, $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    assume !($i584 == 1);
    goto $bb357;

  $bb360:
    assume {:verifier.code 0} true;
    assume $i584 == 1;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p197, $i193);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb358:
    assume {:verifier.code 0} true;
    assume $i582 == 1;
    goto $bb59;

  SeqInstr_757:
    assume !assertsPassed;
    return;

  SeqInstr_754:
    assume !assertsPassed;
    return;

  $bb346:
    assume $i570 == 1;
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i571 := $zext.i16.i32($i566);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i572 := $ne.i32($i571, 0);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i193 := 30;
    assume {:branchcond $i572} true;
    goto $bb349, $bb350;

  $bb350:
    assume !($i572 == 1);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i573 := $zext.i16.i32($i568);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i574 := $ne.i32($i573, 0);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i193 := 30;
    assume {:branchcond $i574} true;
    goto $bb351, $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    assume !($i574 == 1);
    goto $bb348;

  $bb351:
    assume {:verifier.code 0} true;
    assume $i574 == 1;
    goto $bb59;

  $bb349:
    assume {:verifier.code 0} true;
    assume $i572 == 1;
    goto $bb59;

  SeqInstr_751:
    assume !assertsPassed;
    return;

  SeqInstr_748:
    assume !assertsPassed;
    return;

  $bb337:
    assume $i560 == 1;
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i561 := $zext.i16.i32($i556);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i562 := $ne.i32($i561, 0);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i193 := 29;
    assume {:branchcond $i562} true;
    goto $bb340, $bb341;

  $bb341:
    assume !($i562 == 1);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i563 := $zext.i16.i32($i558);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i564 := $ne.i32($i563, 0);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i193 := 29;
    assume {:branchcond $i564} true;
    goto $bb342, $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    assume !($i564 == 1);
    goto $bb339;

  $bb342:
    assume {:verifier.code 0} true;
    assume $i564 == 1;
    goto $bb59;

  $bb340:
    assume {:verifier.code 0} true;
    assume $i562 == 1;
    goto $bb59;

  SeqInstr_745:
    assume !assertsPassed;
    return;

  SeqInstr_742:
    assume !assertsPassed;
    return;

  $bb328:
    assume $i550 == 1;
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i551 := $zext.i16.i32($i546);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i552 := $ne.i32($i551, 0);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i193 := 28;
    assume {:branchcond $i552} true;
    goto $bb331, $bb332;

  $bb332:
    assume !($i552 == 1);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i553 := $zext.i16.i32($i548);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i554 := $ne.i32($i553, 0);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i193 := 28;
    assume {:branchcond $i554} true;
    goto $bb333, $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    assume !($i554 == 1);
    goto $bb330;

  $bb333:
    assume {:verifier.code 0} true;
    assume $i554 == 1;
    goto $bb59;

  $bb331:
    assume {:verifier.code 0} true;
    assume $i552 == 1;
    goto $bb59;

  SeqInstr_739:
    assume !assertsPassed;
    return;

  SeqInstr_736:
    assume !assertsPassed;
    return;

  $bb319:
    assume $i540 == 1;
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i541 := $zext.i16.i32($i536);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i542 := $ne.i32($i541, 0);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i193 := 27;
    assume {:branchcond $i542} true;
    goto $bb322, $bb323;

  $bb323:
    assume !($i542 == 1);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i543 := $zext.i16.i32($i538);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i544 := $ne.i32($i543, 0);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i193 := 27;
    assume {:branchcond $i544} true;
    goto $bb324, $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    assume !($i544 == 1);
    goto $bb321;

  $bb324:
    assume {:verifier.code 0} true;
    assume $i544 == 1;
    goto $bb59;

  $bb322:
    assume {:verifier.code 0} true;
    assume $i542 == 1;
    goto $bb59;

  SeqInstr_733:
    assume !assertsPassed;
    return;

  SeqInstr_730:
    assume !assertsPassed;
    return;

  $bb310:
    assume $i530 == 1;
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i531 := $zext.i16.i32($i526);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i532 := $ne.i32($i531, 0);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i193 := 26;
    assume {:branchcond $i532} true;
    goto $bb313, $bb314;

  $bb314:
    assume !($i532 == 1);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i533 := $zext.i16.i32($i528);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i534 := $ne.i32($i533, 0);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i193 := 26;
    assume {:branchcond $i534} true;
    goto $bb315, $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    assume !($i534 == 1);
    goto $bb312;

  $bb315:
    assume {:verifier.code 0} true;
    assume $i534 == 1;
    goto $bb59;

  $bb313:
    assume {:verifier.code 0} true;
    assume $i532 == 1;
    goto $bb59;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  $bb301:
    assume $i520 == 1;
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i521 := $zext.i16.i32($i516);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i522 := $ne.i32($i521, 0);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i193 := 25;
    assume {:branchcond $i522} true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i522 == 1);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i523 := $zext.i16.i32($i518);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i524 := $ne.i32($i523, 0);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i193 := 25;
    assume {:branchcond $i524} true;
    goto $bb306, $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    assume !($i524 == 1);
    goto $bb303;

  $bb306:
    assume {:verifier.code 0} true;
    assume $i524 == 1;
    goto $bb59;

  $bb304:
    assume {:verifier.code 0} true;
    assume $i522 == 1;
    goto $bb59;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  SeqInstr_718:
    assume !assertsPassed;
    return;

  $bb292:
    assume $i510 == 1;
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i511 := $zext.i16.i32($i506);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i512 := $ne.i32($i511, 0);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i193 := 24;
    assume {:branchcond $i512} true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i512 == 1);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i513 := $zext.i16.i32($i508);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i514 := $ne.i32($i513, 0);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i193 := 24;
    assume {:branchcond $i514} true;
    goto $bb297, $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    assume !($i514 == 1);
    goto $bb294;

  $bb297:
    assume {:verifier.code 0} true;
    assume $i514 == 1;
    goto $bb59;

  $bb295:
    assume {:verifier.code 0} true;
    assume $i512 == 1;
    goto $bb59;

  SeqInstr_715:
    assume !assertsPassed;
    return;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  $bb283:
    assume $i500 == 1;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i501 := $zext.i16.i32($i496);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i502 := $ne.i32($i501, 0);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i193 := 23;
    assume {:branchcond $i502} true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i502 == 1);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i503 := $zext.i16.i32($i498);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i504 := $ne.i32($i503, 0);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i193 := 23;
    assume {:branchcond $i504} true;
    goto $bb288, $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    assume !($i504 == 1);
    goto $bb285;

  $bb288:
    assume {:verifier.code 0} true;
    assume $i504 == 1;
    goto $bb59;

  $bb286:
    assume {:verifier.code 0} true;
    assume $i502 == 1;
    goto $bb59;

  SeqInstr_709:
    assume !assertsPassed;
    return;

  SeqInstr_706:
    assume !assertsPassed;
    return;

  $bb274:
    assume $i490 == 1;
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i491 := $zext.i16.i32($i486);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i492 := $ne.i32($i491, 0);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i193 := 22;
    assume {:branchcond $i492} true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i492 == 1);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i493 := $zext.i16.i32($i488);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i494 := $ne.i32($i493, 0);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i193 := 22;
    assume {:branchcond $i494} true;
    goto $bb279, $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    assume !($i494 == 1);
    goto $bb276;

  $bb279:
    assume {:verifier.code 0} true;
    assume $i494 == 1;
    goto $bb59;

  $bb277:
    assume {:verifier.code 0} true;
    assume $i492 == 1;
    goto $bb59;

  SeqInstr_703:
    assume !assertsPassed;
    return;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  $bb265:
    assume $i480 == 1;
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i481 := $zext.i16.i32($i476);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i482 := $ne.i32($i481, 0);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i193 := 21;
    assume {:branchcond $i482} true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i482 == 1);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i483 := $zext.i16.i32($i478);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i484 := $ne.i32($i483, 0);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i193 := 21;
    assume {:branchcond $i484} true;
    goto $bb270, $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    assume !($i484 == 1);
    goto $bb267;

  $bb270:
    assume {:verifier.code 0} true;
    assume $i484 == 1;
    goto $bb59;

  $bb268:
    assume {:verifier.code 0} true;
    assume $i482 == 1;
    goto $bb59;

  SeqInstr_697:
    assume !assertsPassed;
    return;

  SeqInstr_694:
    assume !assertsPassed;
    return;

  $bb256:
    assume $i470 == 1;
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i471 := $zext.i16.i32($i466);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i472 := $ne.i32($i471, 0);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i193 := 20;
    assume {:branchcond $i472} true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i472 == 1);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i473 := $zext.i16.i32($i468);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i474 := $ne.i32($i473, 0);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i193 := 20;
    assume {:branchcond $i474} true;
    goto $bb261, $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    assume !($i474 == 1);
    goto $bb258;

  $bb261:
    assume {:verifier.code 0} true;
    assume $i474 == 1;
    goto $bb59;

  $bb259:
    assume {:verifier.code 0} true;
    assume $i472 == 1;
    goto $bb59;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb247:
    assume $i460 == 1;
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i461 := $zext.i16.i32($i456);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i462 := $ne.i32($i461, 0);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i193 := 19;
    assume {:branchcond $i462} true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i462 == 1);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i463 := $zext.i16.i32($i458);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i464 := $ne.i32($i463, 0);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i193 := 19;
    assume {:branchcond $i464} true;
    goto $bb252, $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    assume !($i464 == 1);
    goto $bb249;

  $bb252:
    assume {:verifier.code 0} true;
    assume $i464 == 1;
    goto $bb59;

  $bb250:
    assume {:verifier.code 0} true;
    assume $i462 == 1;
    goto $bb59;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  $bb238:
    assume $i450 == 1;
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $i451 := $zext.i16.i32($i446);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i452 := $ne.i32($i451, 0);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i193 := 18;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i452 == 1);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i453 := $zext.i16.i32($i448);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i454 := $ne.i32($i453, 0);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i193 := 18;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    assume !($i454 == 1);
    goto $bb240;

  $bb243:
    assume {:verifier.code 0} true;
    assume $i454 == 1;
    goto $bb59;

  $bb241:
    assume {:verifier.code 0} true;
    assume $i452 == 1;
    goto $bb59;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  $bb229:
    assume $i440 == 1;
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i441 := $zext.i16.i32($i436);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i442 := $ne.i32($i441, 0);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i193 := 17;
    assume true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i442 == 1);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i443 := $zext.i16.i32($i438);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i444 := $ne.i32($i443, 0);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i193 := 17;
    assume true;
    goto $bb234, $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    assume !($i444 == 1);
    goto $bb231;

  $bb234:
    assume {:verifier.code 0} true;
    assume $i444 == 1;
    goto $bb59;

  $bb232:
    assume {:verifier.code 0} true;
    assume $i442 == 1;
    goto $bb59;

  SeqInstr_673:
    assume !assertsPassed;
    return;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  $bb220:
    assume $i430 == 1;
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i431 := $zext.i16.i32($i426);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i432 := $ne.i32($i431, 0);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i193 := 16;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i432 == 1);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i433 := $zext.i16.i32($i428);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i434 := $ne.i32($i433, 0);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i193 := 16;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    assume !($i434 == 1);
    goto $bb222;

  $bb225:
    assume {:verifier.code 0} true;
    assume $i434 == 1;
    goto $bb59;

  $bb223:
    assume {:verifier.code 0} true;
    assume $i432 == 1;
    goto $bb59;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  $bb211:
    assume $i420 == 1;
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i421 := $zext.i16.i32($i416);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i422 := $ne.i32($i421, 0);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i193 := 15;
    assume {:branchcond $i422} true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i422 == 1);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i423 := $zext.i16.i32($i418);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i424 := $ne.i32($i423, 0);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i193 := 15;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    assume !($i424 == 1);
    goto $bb213;

  $bb216:
    assume {:verifier.code 0} true;
    assume $i424 == 1;
    goto $bb59;

  $bb214:
    assume {:verifier.code 0} true;
    assume $i422 == 1;
    goto $bb59;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  $bb202:
    assume $i410 == 1;
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i411 := $zext.i16.i32($i406);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i412 := $ne.i32($i411, 0);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i193 := 14;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i412 == 1);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i413 := $zext.i16.i32($i408);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i414 := $ne.i32($i413, 0);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i193 := 14;
    assume {:branchcond $i414} true;
    goto $bb207, $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    assume !($i414 == 1);
    goto $bb204;

  $bb207:
    assume {:verifier.code 0} true;
    assume $i414 == 1;
    goto $bb59;

  $bb205:
    assume {:verifier.code 0} true;
    assume $i412 == 1;
    goto $bb59;

  SeqInstr_655:
    assume !assertsPassed;
    return;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  $bb193:
    assume $i400 == 1;
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i401 := $zext.i16.i32($i396);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i402 := $ne.i32($i401, 0);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i193 := 13;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i402 == 1);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i403 := $zext.i16.i32($i398);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i404 := $ne.i32($i403, 0);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i193 := 13;
    assume {:branchcond $i404} true;
    goto $bb198, $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    assume !($i404 == 1);
    goto $bb195;

  $bb198:
    assume {:verifier.code 0} true;
    assume $i404 == 1;
    goto $bb59;

  $bb196:
    assume {:verifier.code 0} true;
    assume $i402 == 1;
    goto $bb59;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  SeqInstr_646:
    assume !assertsPassed;
    return;

  $bb184:
    assume $i390 == 1;
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i391 := $zext.i16.i32($i386);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i392 := $ne.i32($i391, 0);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i193 := 12;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i392 == 1);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i393 := $zext.i16.i32($i388);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i394 := $ne.i32($i393, 0);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i193 := 12;
    assume {:branchcond $i394} true;
    goto $bb189, $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    assume !($i394 == 1);
    goto $bb186;

  $bb189:
    assume {:verifier.code 0} true;
    assume $i394 == 1;
    goto $bb59;

  $bb187:
    assume {:verifier.code 0} true;
    assume $i392 == 1;
    goto $bb59;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  $bb175:
    assume $i380 == 1;
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i381 := $zext.i16.i32($i376);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i382 := $ne.i32($i381, 0);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i193 := 11;
    assume {:branchcond $i382} true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i382 == 1);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i383 := $zext.i16.i32($i378);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i384 := $ne.i32($i383, 0);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i193 := 11;
    assume {:branchcond $i384} true;
    goto $bb180, $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    assume !($i384 == 1);
    goto $bb177;

  $bb180:
    assume {:verifier.code 0} true;
    assume $i384 == 1;
    goto $bb59;

  $bb178:
    assume {:verifier.code 0} true;
    assume $i382 == 1;
    goto $bb59;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb166:
    assume $i370 == 1;
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i371 := $zext.i16.i32($i366);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i372 := $ne.i32($i371, 0);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i193 := 10;
    assume {:branchcond $i372} true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i372 == 1);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i373 := $zext.i16.i32($i368);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i374 := $ne.i32($i373, 0);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i193 := 10;
    assume {:branchcond $i374} true;
    goto $bb171, $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    assume !($i374 == 1);
    goto $bb168;

  $bb171:
    assume {:verifier.code 0} true;
    assume $i374 == 1;
    goto $bb59;

  $bb169:
    assume {:verifier.code 0} true;
    assume $i372 == 1;
    goto $bb59;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  $bb157:
    assume $i360 == 1;
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i361 := $zext.i16.i32($i356);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i362 := $ne.i32($i361, 0);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i193 := 9;
    assume {:branchcond $i362} true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i362 == 1);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i363 := $zext.i16.i32($i358);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i364 := $ne.i32($i363, 0);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i193 := 9;
    assume {:branchcond $i364} true;
    goto $bb162, $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    assume !($i364 == 1);
    goto $bb159;

  $bb162:
    assume {:verifier.code 0} true;
    assume $i364 == 1;
    goto $bb59;

  $bb160:
    assume {:verifier.code 0} true;
    assume $i362 == 1;
    goto $bb59;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  $bb148:
    assume $i350 == 1;
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i351 := $zext.i16.i32($i346);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i352 := $ne.i32($i351, 0);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i193 := 8;
    assume {:branchcond $i352} true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i352 == 1);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i353 := $zext.i16.i32($i348);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i354 := $ne.i32($i353, 0);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i193 := 8;
    assume {:branchcond $i354} true;
    goto $bb153, $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    assume !($i354 == 1);
    goto $bb150;

  $bb153:
    assume {:verifier.code 0} true;
    assume $i354 == 1;
    goto $bb59;

  $bb151:
    assume {:verifier.code 0} true;
    assume $i352 == 1;
    goto $bb59;

  SeqInstr_619:
    assume !assertsPassed;
    return;

  SeqInstr_616:
    assume !assertsPassed;
    return;

  $bb139:
    assume $i340 == 1;
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i341 := $zext.i16.i32($i336);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i342 := $ne.i32($i341, 0);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i193 := 7;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i342 == 1);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i343 := $zext.i16.i32($i338);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i344 := $ne.i32($i343, 0);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i193 := 7;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    assume !($i344 == 1);
    goto $bb141;

  $bb144:
    assume {:verifier.code 0} true;
    assume $i344 == 1;
    goto $bb59;

  $bb142:
    assume {:verifier.code 0} true;
    assume $i342 == 1;
    goto $bb59;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  $bb130:
    assume $i330 == 1;
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i331 := $zext.i16.i32($i326);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i332 := $ne.i32($i331, 0);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i193 := 6;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i332 == 1);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i333 := $zext.i16.i32($i328);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i334 := $ne.i32($i333, 0);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i193 := 6;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    assume !($i334 == 1);
    goto $bb132;

  $bb135:
    assume {:verifier.code 0} true;
    assume $i334 == 1;
    goto $bb59;

  $bb133:
    assume {:verifier.code 0} true;
    assume $i332 == 1;
    goto $bb59;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  $bb121:
    assume $i320 == 1;
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i321 := $zext.i16.i32($i316);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i322 := $ne.i32($i321, 0);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i193 := 5;
    assume {:branchcond $i322} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i322 == 1);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i323 := $zext.i16.i32($i318);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i324 := $ne.i32($i323, 0);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i193 := 5;
    assume {:branchcond $i324} true;
    goto $bb126, $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    assume !($i324 == 1);
    goto $bb123;

  $bb126:
    assume {:verifier.code 0} true;
    assume $i324 == 1;
    goto $bb59;

  $bb124:
    assume {:verifier.code 0} true;
    assume $i322 == 1;
    goto $bb59;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb112:
    assume $i310 == 1;
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i311 := $zext.i16.i32($i306);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i312 := $ne.i32($i311, 0);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i193 := 4;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i312 == 1);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i313 := $zext.i16.i32($i308);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i314 := $ne.i32($i313, 0);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i193 := 4;
    assume {:branchcond $i314} true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !($i314 == 1);
    goto $bb114;

  $bb117:
    assume {:verifier.code 0} true;
    assume $i314 == 1;
    goto $bb59;

  $bb115:
    assume {:verifier.code 0} true;
    assume $i312 == 1;
    goto $bb59;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  $bb103:
    assume $i300 == 1;
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i301 := $zext.i16.i32($i296);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i302 := $ne.i32($i301, 0);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i193 := 3;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i302 == 1);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i303 := $zext.i16.i32($i298);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i304 := $ne.i32($i303, 0);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i193 := 3;
    assume {:branchcond $i304} true;
    goto $bb108, $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    assume !($i304 == 1);
    goto $bb105;

  $bb108:
    assume {:verifier.code 0} true;
    assume $i304 == 1;
    goto $bb59;

  $bb106:
    assume {:verifier.code 0} true;
    assume $i302 == 1;
    goto $bb59;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  $bb94:
    assume $i290 == 1;
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i291 := $zext.i16.i32($i286);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i292 := $ne.i32($i291, 0);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i193 := 2;
    assume {:branchcond $i292} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i292 == 1);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i293 := $zext.i16.i32($i288);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i294 := $ne.i32($i293, 0);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i193 := 2;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i294 == 1);
    goto $bb96;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i294 == 1;
    goto $bb59;

  $bb97:
    assume {:verifier.code 0} true;
    assume $i292 == 1;
    goto $bb59;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i190 == 1;
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i191 := $zext.i16.i32($i186);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i192 := $ne.i32($i191, 0);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i193 := 1;
    assume true;
    goto $bb58, $bb60;

  $bb60:
    assume !($i192 == 1);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i194 := $zext.i16.i32($i188);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i195 := $ne.i32($i194, 0);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i193 := 1;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i195 == 1);
    goto $bb57;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i195 == 1;
    goto $bb59;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i192 == 1;
    goto $bb59;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i173 == 1;
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1168, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p176, 36);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb42:
    assume $i172 == 1;
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i171, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i174} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i174 == 1);
    goto $bb46;

  $bb47:
    assume $i174 == 1;
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p43, $mul.ref(0, 1528)), $mul.ref(1168, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p175, 20);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb38:
    assume $i156 == 1;
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p23, $mul.ref(0, 2496)), $mul.ref(176, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.0, $p157);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i159 := $or.i32($i158, 536870912);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p23, $mul.ref(0, 2496)), $mul.ref(176, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p160, $i159);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i105 == 1;
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $i106 := jread32($p43, 2172);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    call {:si_unique_call 867} {:cexpr "tmp___2"} boogie_si_record_i32($i106);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i107 := $or.i32($i106, 536870912);
    call {:si_unique_call 868} {:cexpr "apmc"} boogie_si_record_i32($i107);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} jwrite32($p43, 2172, $i107);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i101 == 1;
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $i102 := jread32($p43, 2172);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    call {:si_unique_call 843} {:cexpr "tmp___1"} boogie_si_record_i32($i102);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, $sub.i32(0, 536870913));
    call {:si_unique_call 844} {:cexpr "apmc"} boogie_si_record_i32($i103);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} jwrite32($p43, 2172, $i103);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i97 == 1;
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} vslice_dummy_var_52 := printk.ref(.str.13);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i99 := $sub.i32(0, 12);
    goto $bb30;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(1264, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i84 := $load.i64($M.0, $p83);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(1264, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.0, $p87);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i89 := $sub.i64($i84, $i88);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i90 := $add.i64($i89, 1);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i91 := $i90;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i71 == 1;
    goto $bb23;

  $bb19:
    assume $i33 == 1;
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p23, $mul.ref(0, 2496)), $mul.ref(176, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, 32);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p23, $mul.ref(0, 2496)), $mul.ref(176, 1));
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i36);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb15:
    assume $i25 == 1;
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} vslice_dummy_var_51 := printk.ref(.str.12);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 12);
    goto $bb17;

  $bb12:
    assume $i21 == 1;
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} vslice_dummy_var_50 := printk.ref(.str.11);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i12 := $i20;
    goto $bb7;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} vslice_dummy_var_49 := printk.ref(.str.10);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb7;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} vslice_dummy_var_48 := printk.ref(.str.9);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 5);
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} vslice_dummy_var_47 := printk.ref(.str.8);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i8 := $i5;
    goto $bb3;
}



const jme_remove_one: ref;

axiom jme_remove_one == $sub.ref(0, 337938);

procedure jme_remove_one($p0: ref);
  free requires assertsPassed;
  modifies $M.8;



implementation jme_remove_one($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} $p3 := netdev_priv($p2);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} ldv_unregister_netdev_7($p2);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1528)), $mul.ref(16, 1));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} iounmap($p6);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} pci_set_drvdata($p0, $0.ref);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} ldv_free_netdev_8($p2);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} pci_release_regions($p0);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} pci_disable_device($p0);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    return;
}



const jme_shutdown: ref;

axiom jme_shutdown == $sub.ref(0, 338970);

procedure jme_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.0, $CurrAddr, $M.4, assertsPassed;



implementation jme_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $p3 := netdev_priv($p2);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} jme_powersave_phy($p4);
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} pci_pme_active($p0, 1);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_760:
    assume !assertsPassed;
    return;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 340002);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(144, 1));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const jme_powersave_phy: ref;

axiom jme_powersave_phy == $sub.ref(0, 341034);

procedure jme_powersave_phy($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.0, $CurrAddr, $M.4, assertsPassed;



implementation jme_powersave_phy($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1188, 1));
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} jme_phy_off($p0);
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_766:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} jme_set_100m_half($p0);
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1188, 1));
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 6);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1188, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} jwrite32($p0, 96, $i9);
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_772:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} jme_wait_link($p0);
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_769:
    assume !assertsPassed;
    return;

  SeqInstr_763:
    assume !assertsPassed;
    return;
}



const pci_pme_active: ref;

axiom pci_pme_active == $sub.ref(0, 342066);

procedure pci_pme_active($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation pci_pme_active($p0: ref, $i1: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} {:cexpr "pci_pme_active:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    return;
}



const jme_set_100m_half: ref;

axiom jme_set_100m_half == $sub.ref(0, 343098);

procedure jme_set_100m_half($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.0, $CurrAddr, $M.4, assertsPassed;



implementation jme_set_100m_half($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} jme_phy_on($p0);
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $i6 := jme_mdio_read($p2, $i5, 0);
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    call {:si_unique_call 974} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, $sub.i32(0, 12609));
    call {:si_unique_call 975} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 8192);
    call {:si_unique_call 976} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i6, $i8);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1224, 1));
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} jwrite32($p0, 84, 32);
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_787:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} jwrite32($p0, 84, 33);
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_784:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} jme_mdio_write($p11, $i14, 0, $i8);
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_781:
    assume !assertsPassed;
    return;

  SeqInstr_778:
    assume !assertsPassed;
    return;

  SeqInstr_775:
    assume !assertsPassed;
    return;
}



const jme_wait_link: ref;

axiom jme_wait_link == $sub.ref(0, 344130);

procedure jme_wait_link($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_wait_link($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i4: i32;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} __const_udelay(4295000);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} __const_udelay(4295000);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} __const_udelay(4295000);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} __const_udelay(4295000);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} __const_udelay(4295000);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} __const_udelay(4295000);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} __const_udelay(4295000);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} __const_udelay(4295000);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} __const_udelay(4295000);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} __const_udelay(4295000);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} __const_udelay(4295000);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} __const_udelay(4295000);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} __const_udelay(4295000);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} __const_udelay(4295000);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} __const_udelay(4295000);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} __const_udelay(4295000);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} __const_udelay(4295000);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} __const_udelay(4295000);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} __const_udelay(4295000);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} __const_udelay(4295000);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} __const_udelay(4295000);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} __const_udelay(4295000);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} __const_udelay(4295000);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} __const_udelay(4295000);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} __const_udelay(4295000);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} __const_udelay(4295000);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} __const_udelay(4295000);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} __const_udelay(4295000);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} __const_udelay(4295000);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} __const_udelay(4295000);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} __const_udelay(4295000);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} __const_udelay(4295000);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} __const_udelay(4295000);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} __const_udelay(4295000);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} __const_udelay(4295000);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} __const_udelay(4295000);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} __const_udelay(4295000);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} __const_udelay(4295000);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} __const_udelay(4295000);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} __const_udelay(4295000);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} __const_udelay(4295000);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} __const_udelay(4295000);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} __const_udelay(4295000);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} __const_udelay(4295000);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} __const_udelay(4295000);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} __const_udelay(4295000);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} __const_udelay(4295000);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} __const_udelay(4295000);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} __const_udelay(4295000);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} __const_udelay(4295000);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} __const_udelay(4295000);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} __const_udelay(4295000);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} __const_udelay(4295000);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} __const_udelay(4295000);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} __const_udelay(4295000);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} __const_udelay(4295000);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} __const_udelay(4295000);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} __const_udelay(4295000);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} __const_udelay(4295000);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} __const_udelay(4295000);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} __const_udelay(4295000);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} __const_udelay(4295000);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} __const_udelay(4295000);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} __const_udelay(4295000);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} __const_udelay(4295000);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} __const_udelay(4295000);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} __const_udelay(4295000);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} __const_udelay(4295000);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} __const_udelay(4295000);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} __const_udelay(4295000);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} __const_udelay(4295000);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} __const_udelay(4295000);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} __const_udelay(4295000);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} __const_udelay(4295000);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} __const_udelay(4295000);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} __const_udelay(4295000);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} __const_udelay(4295000);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} __const_udelay(4295000);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} __const_udelay(4295000);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} __const_udelay(4295000);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} __const_udelay(4295000);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} __const_udelay(4295000);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} __const_udelay(4295000);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} __const_udelay(4295000);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} __const_udelay(4295000);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} __const_udelay(4295000);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} __const_udelay(4295000);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} __const_udelay(4295000);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} __const_udelay(4295000);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} __const_udelay(4295000);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} __const_udelay(4295000);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} __const_udelay(4295000);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} __const_udelay(4295000);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} __const_udelay(4295000);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} __const_udelay(4295000);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} __const_udelay(4295000);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} __const_udelay(4295000);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} __const_udelay(4295000);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} __const_udelay(4295000);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} __const_udelay(4295000);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} __const_udelay(4295000);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} __const_udelay(4295000);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} __const_udelay(4295000);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} __const_udelay(4295000);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} __const_udelay(4295000);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} __const_udelay(4295000);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} __const_udelay(4295000);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} __const_udelay(4295000);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} __const_udelay(4295000);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} __const_udelay(4295000);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} __const_udelay(4295000);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} __const_udelay(4295000);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} __const_udelay(4295000);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} __const_udelay(4295000);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} __const_udelay(4295000);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} __const_udelay(4295000);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} __const_udelay(4295000);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} __const_udelay(4295000);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} __const_udelay(4295000);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} __const_udelay(4295000);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} __const_udelay(4295000);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} __const_udelay(4295000);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} __const_udelay(4295000);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} __const_udelay(4295000);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} __const_udelay(4295000);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} __const_udelay(4295000);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} __const_udelay(4295000);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} __const_udelay(4295000);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} __const_udelay(4295000);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} __const_udelay(4295000);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} __const_udelay(4295000);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} __const_udelay(4295000);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} __const_udelay(4295000);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} __const_udelay(4295000);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} __const_udelay(4295000);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} __const_udelay(4295000);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} __const_udelay(4295000);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} __const_udelay(4295000);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} __const_udelay(4295000);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} __const_udelay(4295000);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} __const_udelay(4295000);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} __const_udelay(4295000);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} __const_udelay(4295000);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} __const_udelay(4295000);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} __const_udelay(4295000);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} __const_udelay(4295000);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} __const_udelay(4295000);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} __const_udelay(4295000);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} __const_udelay(4295000);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} __const_udelay(4295000);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} __const_udelay(4295000);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} __const_udelay(4295000);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} __const_udelay(4295000);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} __const_udelay(4295000);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} __const_udelay(4295000);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} __const_udelay(4295000);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} __const_udelay(4295000);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} __const_udelay(4295000);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} __const_udelay(4295000);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} __const_udelay(4295000);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} __const_udelay(4295000);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} __const_udelay(4295000);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} __const_udelay(4295000);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} __const_udelay(4295000);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} __const_udelay(4295000);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} __const_udelay(4295000);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} __const_udelay(4295000);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} __const_udelay(4295000);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} __const_udelay(4295000);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} __const_udelay(4295000);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} __const_udelay(4295000);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} __const_udelay(4295000);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} __const_udelay(4295000);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} __const_udelay(4295000);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} __const_udelay(4295000);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} __const_udelay(4295000);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} __const_udelay(4295000);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} __const_udelay(4295000);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} __const_udelay(4295000);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} __const_udelay(4295000);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} __const_udelay(4295000);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} __const_udelay(4295000);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} __const_udelay(4295000);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} __const_udelay(4295000);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} __const_udelay(4295000);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} __const_udelay(4295000);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} __const_udelay(4295000);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} __const_udelay(4295000);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} __const_udelay(4295000);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} __const_udelay(4295000);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} __const_udelay(4295000);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} __const_udelay(4295000);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} __const_udelay(4295000);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} __const_udelay(4295000);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} __const_udelay(4295000);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} __const_udelay(4295000);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} __const_udelay(4295000);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} __const_udelay(4295000);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} __const_udelay(4295000);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} __const_udelay(4295000);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} __const_udelay(4295000);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} __const_udelay(4295000);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} __const_udelay(4295000);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} __const_udelay(4295000);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} __const_udelay(4295000);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} __const_udelay(4295000);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} __const_udelay(4295000);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} __const_udelay(4295000);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} __const_udelay(4295000);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} __const_udelay(4295000);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} __const_udelay(4295000);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} __const_udelay(4295000);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} __const_udelay(4295000);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} __const_udelay(4295000);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} __const_udelay(4295000);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} __const_udelay(4295000);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} __const_udelay(4295000);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} __const_udelay(4295000);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} __const_udelay(4295000);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} __const_udelay(4295000);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} __const_udelay(4295000);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} __const_udelay(4295000);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} __const_udelay(4295000);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} __const_udelay(4295000);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} __const_udelay(4295000);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} __const_udelay(4295000);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} __const_udelay(4295000);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} __const_udelay(4295000);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} __const_udelay(4295000);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} __const_udelay(4295000);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} __const_udelay(4295000);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} __const_udelay(4295000);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} __const_udelay(4295000);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} __const_udelay(4295000);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} __const_udelay(4295000);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} __const_udelay(4295000);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} __const_udelay(4295000);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} __const_udelay(4295000);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} __const_udelay(4295000);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} __const_udelay(4295000);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} __const_udelay(4295000);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} __const_udelay(4295000);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} __const_udelay(4295000);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} __const_udelay(4295000);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} __const_udelay(4295000);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} __const_udelay(4295000);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} __const_udelay(4295000);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} __const_udelay(4295000);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} __const_udelay(4295000);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} __const_udelay(4295000);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} __const_udelay(4295000);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} __const_udelay(4295000);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} __const_udelay(4295000);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} __const_udelay(4295000);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} __const_udelay(4295000);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} __const_udelay(4295000);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} __const_udelay(4295000);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} __const_udelay(4295000);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} __const_udelay(4295000);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} __const_udelay(4295000);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} __const_udelay(4295000);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} __const_udelay(4295000);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} __const_udelay(4295000);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} __const_udelay(4295000);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} __const_udelay(4295000);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} __const_udelay(4295000);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} __const_udelay(4295000);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} __const_udelay(4295000);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} __const_udelay(4295000);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} __const_udelay(4295000);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} __const_udelay(4295000);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} __const_udelay(4295000);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} __const_udelay(4295000);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} __const_udelay(4295000);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} __const_udelay(4295000);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} __const_udelay(4295000);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} __const_udelay(4295000);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} __const_udelay(4295000);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} __const_udelay(4295000);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} __const_udelay(4295000);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} __const_udelay(4295000);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} __const_udelay(4295000);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} __const_udelay(4295000);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} __const_udelay(4295000);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} __const_udelay(4295000);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} __const_udelay(4295000);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} __const_udelay(4295000);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} __const_udelay(4295000);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} __const_udelay(4295000);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} __const_udelay(4295000);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} __const_udelay(4295000);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} __const_udelay(4295000);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} __const_udelay(4295000);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} __const_udelay(4295000);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} __const_udelay(4295000);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} __const_udelay(4295000);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} __const_udelay(4295000);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} __const_udelay(4295000);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} __const_udelay(4295000);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} __const_udelay(4295000);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} __const_udelay(4295000);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} __const_udelay(4295000);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} __const_udelay(4295000);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} __const_udelay(4295000);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} __const_udelay(4295000);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} __const_udelay(4295000);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} __const_udelay(4295000);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} __const_udelay(4295000);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} __const_udelay(4295000);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} __const_udelay(4295000);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} __const_udelay(4295000);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} __const_udelay(4295000);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} __const_udelay(4295000);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} __const_udelay(4295000);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} __const_udelay(4295000);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} __const_udelay(4295000);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} __const_udelay(4295000);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} __const_udelay(4295000);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} __const_udelay(4295000);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} __const_udelay(4295000);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} __const_udelay(4295000);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} __const_udelay(4295000);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} __const_udelay(4295000);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} __const_udelay(4295000);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} __const_udelay(4295000);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} __const_udelay(4295000);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} __const_udelay(4295000);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} __const_udelay(4295000);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} __const_udelay(4295000);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} __const_udelay(4295000);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} __const_udelay(4295000);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} __const_udelay(4295000);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} __const_udelay(4295000);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} __const_udelay(4295000);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} __const_udelay(4295000);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} __const_udelay(4295000);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} __const_udelay(4295000);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} __const_udelay(4295000);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} __const_udelay(4295000);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} __const_udelay(4295000);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} __const_udelay(4295000);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} __const_udelay(4295000);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} __const_udelay(4295000);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} __const_udelay(4295000);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} __const_udelay(4295000);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} __const_udelay(4295000);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} __const_udelay(4295000);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} __const_udelay(4295000);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} __const_udelay(4295000);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} __const_udelay(4295000);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} __const_udelay(4295000);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} __const_udelay(4295000);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} __const_udelay(4295000);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} __const_udelay(4295000);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} __const_udelay(4295000);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} __const_udelay(4295000);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} __const_udelay(4295000);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} __const_udelay(4295000);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} __const_udelay(4295000);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} __const_udelay(4295000);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} __const_udelay(4295000);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} __const_udelay(4295000);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} __const_udelay(4295000);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} __const_udelay(4295000);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} __const_udelay(4295000);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} __const_udelay(4295000);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} __const_udelay(4295000);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} __const_udelay(4295000);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} __const_udelay(4295000);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} __const_udelay(4295000);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} __const_udelay(4295000);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} __const_udelay(4295000);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} __const_udelay(4295000);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} __const_udelay(4295000);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} __const_udelay(4295000);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} __const_udelay(4295000);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} __const_udelay(4295000);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} __const_udelay(4295000);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} __const_udelay(4295000);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} __const_udelay(4295000);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} __const_udelay(4295000);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} __const_udelay(4295000);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} __const_udelay(4295000);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} __const_udelay(4295000);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} __const_udelay(4295000);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} __const_udelay(4295000);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} __const_udelay(4295000);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} __const_udelay(4295000);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} __const_udelay(4295000);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} __const_udelay(4295000);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} __const_udelay(4295000);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} __const_udelay(4295000);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} __const_udelay(4295000);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} __const_udelay(4295000);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} __const_udelay(4295000);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} __const_udelay(4295000);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} __const_udelay(4295000);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} __const_udelay(4295000);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} __const_udelay(4295000);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} __const_udelay(4295000);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} __const_udelay(4295000);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} __const_udelay(4295000);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} __const_udelay(4295000);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} __const_udelay(4295000);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} __const_udelay(4295000);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} __const_udelay(4295000);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} __const_udelay(4295000);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} __const_udelay(4295000);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} __const_udelay(4295000);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} __const_udelay(4295000);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} __const_udelay(4295000);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} __const_udelay(4295000);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} __const_udelay(4295000);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} __const_udelay(4295000);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} __const_udelay(4295000);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} __const_udelay(4295000);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} __const_udelay(4295000);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} __const_udelay(4295000);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} __const_udelay(4295000);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} __const_udelay(4295000);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} __const_udelay(4295000);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} __const_udelay(4295000);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} __const_udelay(4295000);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} __const_udelay(4295000);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} __const_udelay(4295000);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} __const_udelay(4295000);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} __const_udelay(4295000);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} __const_udelay(4295000);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} __const_udelay(4295000);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} __const_udelay(4295000);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} __const_udelay(4295000);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} __const_udelay(4295000);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} __const_udelay(4295000);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} __const_udelay(4295000);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} __const_udelay(4295000);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} __const_udelay(4295000);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} __const_udelay(4295000);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} __const_udelay(4295000);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} __const_udelay(4295000);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} __const_udelay(4295000);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} __const_udelay(4295000);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} __const_udelay(4295000);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    goto $bb468;

  $bb468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} __const_udelay(4295000);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} __const_udelay(4295000);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} __const_udelay(4295000);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} __const_udelay(4295000);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} __const_udelay(4295000);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} __const_udelay(4295000);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} __const_udelay(4295000);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} __const_udelay(4295000);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} __const_udelay(4295000);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} __const_udelay(4295000);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} __const_udelay(4295000);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} __const_udelay(4295000);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    goto $bb480;

  $bb480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} __const_udelay(4295000);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} __const_udelay(4295000);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} __const_udelay(4295000);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} __const_udelay(4295000);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} __const_udelay(4295000);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} __const_udelay(4295000);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} __const_udelay(4295000);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} __const_udelay(4295000);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} __const_udelay(4295000);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} __const_udelay(4295000);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} __const_udelay(4295000);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} __const_udelay(4295000);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    goto $bb492;

  $bb492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} __const_udelay(4295000);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    goto $bb493;

  $bb493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} __const_udelay(4295000);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} __const_udelay(4295000);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    goto $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} __const_udelay(4295000);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    goto $bb496;

  $bb496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} __const_udelay(4295000);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} __const_udelay(4295000);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} __const_udelay(4295000);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} __const_udelay(4295000);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} __const_udelay(4295000);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} __const_udelay(4295000);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} __const_udelay(4295000);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} __const_udelay(4295000);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} __const_udelay(4295000);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} __const_udelay(4295000);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} __const_udelay(4295000);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} __const_udelay(4295000);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} __const_udelay(4295000);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} __const_udelay(4295000);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} __const_udelay(4295000);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} __const_udelay(4295000);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} __const_udelay(4295000);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    goto $bb513;

  $bb513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} __const_udelay(4295000);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} __const_udelay(4295000);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} __const_udelay(4295000);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    goto $bb516;

  $bb516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} __const_udelay(4295000);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} __const_udelay(4295000);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} __const_udelay(4295000);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    goto $bb519;

  $bb519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} __const_udelay(4295000);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} __const_udelay(4295000);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} __const_udelay(4295000);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} __const_udelay(4295000);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} __const_udelay(4295000);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} __const_udelay(4295000);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} __const_udelay(4295000);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} __const_udelay(4295000);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} __const_udelay(4295000);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    goto $bb528;

  $bb528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} __const_udelay(4295000);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    goto $bb529;

  $bb529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} __const_udelay(4295000);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} __const_udelay(4295000);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    goto $bb531;

  $bb531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} __const_udelay(4295000);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    goto $bb532;

  $bb532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} __const_udelay(4295000);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    goto $bb533;

  $bb533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} __const_udelay(4295000);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    goto $bb534;

  $bb534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} __const_udelay(4295000);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    goto $bb535;

  $bb535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} __const_udelay(4295000);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} __const_udelay(4295000);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} __const_udelay(4295000);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} __const_udelay(4295000);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} __const_udelay(4295000);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    goto $bb540;

  $bb540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} __const_udelay(4295000);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} __const_udelay(4295000);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} __const_udelay(4295000);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} __const_udelay(4295000);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    goto $bb544;

  $bb544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} __const_udelay(4295000);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} __const_udelay(4295000);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} __const_udelay(4295000);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} __const_udelay(4295000);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} __const_udelay(4295000);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    goto $bb549;

  $bb549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} __const_udelay(4295000);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} __const_udelay(4295000);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} __const_udelay(4295000);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} __const_udelay(4295000);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    goto $bb553;

  $bb553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} __const_udelay(4295000);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} __const_udelay(4295000);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    goto $bb555;

  $bb555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} __const_udelay(4295000);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    goto $bb556;

  $bb556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} __const_udelay(4295000);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} __const_udelay(4295000);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} __const_udelay(4295000);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} __const_udelay(4295000);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} __const_udelay(4295000);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} __const_udelay(4295000);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} __const_udelay(4295000);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} __const_udelay(4295000);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} __const_udelay(4295000);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    goto $bb565;

  $bb565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} __const_udelay(4295000);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} __const_udelay(4295000);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} __const_udelay(4295000);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    goto $bb568;

  $bb568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} __const_udelay(4295000);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    goto $bb569;

  $bb569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} __const_udelay(4295000);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} __const_udelay(4295000);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} __const_udelay(4295000);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} __const_udelay(4295000);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    goto $bb573;

  $bb573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} __const_udelay(4295000);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} __const_udelay(4295000);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} __const_udelay(4295000);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    goto $bb576;

  $bb576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} __const_udelay(4295000);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} __const_udelay(4295000);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} __const_udelay(4295000);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    goto $bb579;

  $bb579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} __const_udelay(4295000);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    goto $bb580;

  $bb580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} __const_udelay(4295000);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} __const_udelay(4295000);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    goto $bb582;

  $bb582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} __const_udelay(4295000);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    goto $bb583;

  $bb583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} __const_udelay(4295000);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} __const_udelay(4295000);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    goto $bb585;

  $bb585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} __const_udelay(4295000);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} __const_udelay(4295000);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} __const_udelay(4295000);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    goto $bb588;

  $bb588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} __const_udelay(4295000);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    goto $bb589;

  $bb589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} __const_udelay(4295000);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} __const_udelay(4295000);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} __const_udelay(4295000);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    goto $bb592;

  $bb592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} __const_udelay(4295000);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    goto $bb593;

  $bb593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} __const_udelay(4295000);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} __const_udelay(4295000);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    goto $bb595;

  $bb595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} __const_udelay(4295000);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} __const_udelay(4295000);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} __const_udelay(4295000);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} __const_udelay(4295000);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} __const_udelay(4295000);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} __const_udelay(4295000);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    goto $bb601;

  $bb601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} __const_udelay(4295000);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} __const_udelay(4295000);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    goto $bb603;

  $bb603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} __const_udelay(4295000);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    goto $bb604;

  $bb604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} __const_udelay(4295000);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    goto $bb605;

  $bb605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} __const_udelay(4295000);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    goto $bb606;

  $bb606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} __const_udelay(4295000);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} __const_udelay(4295000);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    goto $bb608;

  $bb608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} __const_udelay(4295000);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    goto $bb609;

  $bb609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} __const_udelay(4295000);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    goto $bb610;

  $bb610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} __const_udelay(4295000);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    goto $bb611;

  $bb611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} __const_udelay(4295000);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    goto $bb612;

  $bb612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} __const_udelay(4295000);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    goto $bb613;

  $bb613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} __const_udelay(4295000);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    goto $bb614;

  $bb614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} __const_udelay(4295000);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    goto $bb615;

  $bb615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} __const_udelay(4295000);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} __const_udelay(4295000);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} __const_udelay(4295000);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} __const_udelay(4295000);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} __const_udelay(4295000);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} __const_udelay(4295000);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} __const_udelay(4295000);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} __const_udelay(4295000);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} __const_udelay(4295000);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    goto $bb624;

  $bb624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} __const_udelay(4295000);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    goto $bb625;

  $bb625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} __const_udelay(4295000);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    goto $bb626;

  $bb626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} __const_udelay(4295000);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    goto $bb627;

  $bb627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} __const_udelay(4295000);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    goto $bb628;

  $bb628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} __const_udelay(4295000);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    goto $bb629;

  $bb629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} __const_udelay(4295000);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    goto $bb630;

  $bb630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} __const_udelay(4295000);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    goto $bb631;

  $bb631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} __const_udelay(4295000);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    goto $bb632;

  $bb632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} __const_udelay(4295000);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    goto $bb633;

  $bb633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} __const_udelay(4295000);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    goto $bb634;

  $bb634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} __const_udelay(4295000);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} __const_udelay(4295000);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    goto $bb636;

  $bb636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} __const_udelay(4295000);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    goto $bb637;

  $bb637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} __const_udelay(4295000);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} __const_udelay(4295000);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    goto $bb639;

  $bb639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} __const_udelay(4295000);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    goto $bb640;

  $bb640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} __const_udelay(4295000);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    goto $bb641;

  $bb641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} __const_udelay(4295000);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} __const_udelay(4295000);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    goto $bb643;

  $bb643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} __const_udelay(4295000);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    goto $bb644;

  $bb644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} __const_udelay(4295000);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    goto $bb645;

  $bb645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} __const_udelay(4295000);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    goto $bb646;

  $bb646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} __const_udelay(4295000);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    goto $bb647;

  $bb647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} __const_udelay(4295000);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    goto $bb648;

  $bb648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} __const_udelay(4295000);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} __const_udelay(4295000);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    goto $bb650;

  $bb650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} __const_udelay(4295000);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    goto $bb651;

  $bb651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} __const_udelay(4295000);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    goto $bb652;

  $bb652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} __const_udelay(4295000);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} __const_udelay(4295000);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    goto $bb654;

  $bb654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} __const_udelay(4295000);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    goto $bb655;

  $bb655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} __const_udelay(4295000);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    goto $bb656;

  $bb656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} __const_udelay(4295000);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} __const_udelay(4295000);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} __const_udelay(4295000);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} __const_udelay(4295000);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    goto $bb660;

  $bb660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} __const_udelay(4295000);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    goto $bb661;

  $bb661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} __const_udelay(4295000);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    goto $bb662;

  $bb662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} __const_udelay(4295000);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    goto $bb663;

  $bb663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} __const_udelay(4295000);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    goto $bb664;

  $bb664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} __const_udelay(4295000);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    goto $bb665;

  $bb665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} __const_udelay(4295000);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    goto $bb666;

  $bb666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} __const_udelay(4295000);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    goto $bb667;

  $bb667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} __const_udelay(4295000);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    goto $bb668;

  $bb668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} __const_udelay(4295000);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    goto $bb669;

  $bb669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} __const_udelay(4295000);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    goto $bb670;

  $bb670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} __const_udelay(4295000);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    goto $bb671;

  $bb671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} __const_udelay(4295000);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    goto $bb672;

  $bb672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} __const_udelay(4295000);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    goto $bb673;

  $bb673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} __const_udelay(4295000);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    goto $bb674;

  $bb674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} __const_udelay(4295000);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    goto $bb675;

  $bb675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} __const_udelay(4295000);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    goto $bb676;

  $bb676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} __const_udelay(4295000);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    goto $bb677;

  $bb677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} __const_udelay(4295000);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    goto $bb678;

  $bb678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} __const_udelay(4295000);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} __const_udelay(4295000);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    goto $bb680;

  $bb680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} __const_udelay(4295000);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    goto $bb681;

  $bb681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} __const_udelay(4295000);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    goto $bb682;

  $bb682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} __const_udelay(4295000);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    goto $bb683;

  $bb683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} __const_udelay(4295000);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    goto $bb684;

  $bb684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} __const_udelay(4295000);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    goto $bb685;

  $bb685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} __const_udelay(4295000);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    goto $bb686;

  $bb686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} __const_udelay(4295000);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    goto $bb687;

  $bb687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} __const_udelay(4295000);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    goto $bb688;

  $bb688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} __const_udelay(4295000);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    goto $bb689;

  $bb689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} __const_udelay(4295000);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    goto $bb690;

  $bb690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} __const_udelay(4295000);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    goto $bb691;

  $bb691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} __const_udelay(4295000);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    goto $bb692;

  $bb692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} __const_udelay(4295000);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    goto $bb693;

  $bb693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} __const_udelay(4295000);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    goto $bb694;

  $bb694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} __const_udelay(4295000);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    goto $bb695;

  $bb695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} __const_udelay(4295000);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    goto $bb696;

  $bb696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} __const_udelay(4295000);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    goto $bb697;

  $bb697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} __const_udelay(4295000);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    goto $bb698;

  $bb698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} __const_udelay(4295000);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    goto $bb699;

  $bb699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} __const_udelay(4295000);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    goto $bb700;

  $bb700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} __const_udelay(4295000);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    goto $bb701;

  $bb701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} __const_udelay(4295000);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    goto $bb702;

  $bb702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} __const_udelay(4295000);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    goto $bb703;

  $bb703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} __const_udelay(4295000);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    goto $bb704;

  $bb704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} __const_udelay(4295000);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    goto $bb705;

  $bb705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} __const_udelay(4295000);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    goto $bb706;

  $bb706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} __const_udelay(4295000);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    goto $bb707;

  $bb707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} __const_udelay(4295000);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    goto $bb708;

  $bb708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} __const_udelay(4295000);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    goto $bb709;

  $bb709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} __const_udelay(4295000);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    goto $bb710;

  $bb710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} __const_udelay(4295000);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    goto $bb711;

  $bb711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} __const_udelay(4295000);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    goto $bb712;

  $bb712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} __const_udelay(4295000);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    goto $bb713;

  $bb713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} __const_udelay(4295000);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    goto $bb714;

  $bb714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} __const_udelay(4295000);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    goto $bb715;

  $bb715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} __const_udelay(4295000);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    goto $bb716;

  $bb716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} __const_udelay(4295000);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    goto $bb717;

  $bb717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} __const_udelay(4295000);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    goto $bb718;

  $bb718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} __const_udelay(4295000);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    goto $bb719;

  $bb719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} __const_udelay(4295000);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    goto $bb720;

  $bb720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} __const_udelay(4295000);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    goto $bb721;

  $bb721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} __const_udelay(4295000);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} __const_udelay(4295000);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    goto $bb723;

  $bb723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} __const_udelay(4295000);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    goto $bb724;

  $bb724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} __const_udelay(4295000);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    goto $bb725;

  $bb725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} __const_udelay(4295000);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} __const_udelay(4295000);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    goto $bb727;

  $bb727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} __const_udelay(4295000);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    goto $bb728;

  $bb728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} __const_udelay(4295000);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    goto $bb729;

  $bb729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} __const_udelay(4295000);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    goto $bb730;

  $bb730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} __const_udelay(4295000);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    goto $bb731;

  $bb731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} __const_udelay(4295000);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    goto $bb732;

  $bb732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} __const_udelay(4295000);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    goto $bb733;

  $bb733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} __const_udelay(4295000);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    goto $bb734;

  $bb734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} __const_udelay(4295000);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    goto $bb735;

  $bb735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} __const_udelay(4295000);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    goto $bb736;

  $bb736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} __const_udelay(4295000);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} __const_udelay(4295000);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    goto $bb738;

  $bb738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} __const_udelay(4295000);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    goto $bb739;

  $bb739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} __const_udelay(4295000);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    goto $bb740;

  $bb740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} __const_udelay(4295000);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    goto $bb741;

  $bb741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} __const_udelay(4295000);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    goto $bb742;

  $bb742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} __const_udelay(4295000);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    goto $bb743;

  $bb743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} __const_udelay(4295000);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    goto $bb744;

  $bb744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} __const_udelay(4295000);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    goto $bb745;

  $bb745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} __const_udelay(4295000);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    goto $bb746;

  $bb746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} __const_udelay(4295000);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    goto $bb747;

  $bb747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} __const_udelay(4295000);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    goto $bb748;

  $bb748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} __const_udelay(4295000);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    goto $bb749;

  $bb749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} __const_udelay(4295000);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    goto $bb750;

  $bb750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} __const_udelay(4295000);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    goto $bb751;

  $bb751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} __const_udelay(4295000);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    goto $bb752;

  $bb752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} __const_udelay(4295000);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    goto $bb753;

  $bb753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} __const_udelay(4295000);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    goto $bb754;

  $bb754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} __const_udelay(4295000);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} __const_udelay(4295000);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    goto $bb756;

  $bb756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} __const_udelay(4295000);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    goto $bb757;

  $bb757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} __const_udelay(4295000);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} __const_udelay(4295000);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    goto $bb759;

  $bb759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} __const_udelay(4295000);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    goto $bb760;

  $bb760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} __const_udelay(4295000);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    goto $bb761;

  $bb761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} __const_udelay(4295000);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    goto $bb762;

  $bb762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} __const_udelay(4295000);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    goto $bb763;

  $bb763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} __const_udelay(4295000);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    goto $bb764;

  $bb764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} __const_udelay(4295000);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    goto $bb765;

  $bb765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} __const_udelay(4295000);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    goto $bb766;

  $bb766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} __const_udelay(4295000);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    goto $bb767;

  $bb767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} __const_udelay(4295000);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    goto $bb768;

  $bb768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} __const_udelay(4295000);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    goto $bb769;

  $bb769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} __const_udelay(4295000);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    goto $bb770;

  $bb770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} __const_udelay(4295000);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    goto $bb771;

  $bb771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} __const_udelay(4295000);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    goto $bb772;

  $bb772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} __const_udelay(4295000);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    goto $bb773;

  $bb773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} __const_udelay(4295000);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    goto $bb774;

  $bb774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} __const_udelay(4295000);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    goto $bb775;

  $bb775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} __const_udelay(4295000);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    goto $bb776;

  $bb776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} __const_udelay(4295000);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    goto $bb777;

  $bb777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} __const_udelay(4295000);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    goto $bb778;

  $bb778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} __const_udelay(4295000);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    goto $bb779;

  $bb779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} __const_udelay(4295000);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    goto $bb780;

  $bb780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} __const_udelay(4295000);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    goto $bb781;

  $bb781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} __const_udelay(4295000);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    goto $bb782;

  $bb782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} __const_udelay(4295000);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    goto $bb783;

  $bb783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} __const_udelay(4295000);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    goto $bb784;

  $bb784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} __const_udelay(4295000);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    goto $bb785;

  $bb785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} __const_udelay(4295000);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    goto $bb786;

  $bb786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} __const_udelay(4295000);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    goto $bb787;

  $bb787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} __const_udelay(4295000);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    goto $bb788;

  $bb788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} __const_udelay(4295000);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    goto $bb789;

  $bb789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} __const_udelay(4295000);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    goto $bb790;

  $bb790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} __const_udelay(4295000);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    goto $bb791;

  $bb791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} __const_udelay(4295000);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    goto $bb792;

  $bb792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} __const_udelay(4295000);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    goto $bb793;

  $bb793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} __const_udelay(4295000);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    goto $bb794;

  $bb794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} __const_udelay(4295000);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    goto $bb795;

  $bb795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} __const_udelay(4295000);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    goto $bb796;

  $bb796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} __const_udelay(4295000);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    goto $bb797;

  $bb797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} __const_udelay(4295000);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    goto $bb798;

  $bb798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} __const_udelay(4295000);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    goto $bb799;

  $bb799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} __const_udelay(4295000);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    goto $bb800;

  $bb800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} __const_udelay(4295000);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    goto $bb801;

  $bb801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} __const_udelay(4295000);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    goto $bb802;

  $bb802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} __const_udelay(4295000);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    goto $bb803;

  $bb803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} __const_udelay(4295000);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    goto $bb804;

  $bb804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} __const_udelay(4295000);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    goto $bb805;

  $bb805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} __const_udelay(4295000);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    goto $bb806;

  $bb806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} __const_udelay(4295000);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    goto $bb807;

  $bb807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} __const_udelay(4295000);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    goto $bb808;

  $bb808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} __const_udelay(4295000);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    goto $bb809;

  $bb809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} __const_udelay(4295000);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    goto $bb810;

  $bb810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} __const_udelay(4295000);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} __const_udelay(4295000);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    goto $bb812;

  $bb812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} __const_udelay(4295000);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    goto $bb813;

  $bb813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} __const_udelay(4295000);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    goto $bb814;

  $bb814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} __const_udelay(4295000);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    goto $bb815;

  $bb815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} __const_udelay(4295000);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    goto $bb816;

  $bb816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} __const_udelay(4295000);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    goto $bb817;

  $bb817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} __const_udelay(4295000);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    goto $bb818;

  $bb818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} __const_udelay(4295000);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    goto $bb819;

  $bb819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} __const_udelay(4295000);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    goto $bb820;

  $bb820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} __const_udelay(4295000);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    goto $bb821;

  $bb821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} __const_udelay(4295000);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    goto $bb822;

  $bb822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} __const_udelay(4295000);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    goto $bb823;

  $bb823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} __const_udelay(4295000);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    goto $bb824;

  $bb824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} __const_udelay(4295000);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    goto $bb825;

  $bb825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} __const_udelay(4295000);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    goto $bb826;

  $bb826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} __const_udelay(4295000);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    goto $bb827;

  $bb827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} __const_udelay(4295000);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    goto $bb828;

  $bb828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} __const_udelay(4295000);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    goto $bb829;

  $bb829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} __const_udelay(4295000);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    goto $bb830;

  $bb830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} __const_udelay(4295000);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    goto $bb831;

  $bb831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} __const_udelay(4295000);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    goto $bb832;

  $bb832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} __const_udelay(4295000);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    goto $bb833;

  $bb833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} __const_udelay(4295000);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    goto $bb834;

  $bb834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} __const_udelay(4295000);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    goto $bb835;

  $bb835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} __const_udelay(4295000);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    goto $bb836;

  $bb836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} __const_udelay(4295000);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    goto $bb837;

  $bb837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} __const_udelay(4295000);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    goto $bb838;

  $bb838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} __const_udelay(4295000);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    goto $bb839;

  $bb839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} __const_udelay(4295000);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    goto $bb840;

  $bb840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} __const_udelay(4295000);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    goto $bb841;

  $bb841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} __const_udelay(4295000);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    goto $bb842;

  $bb842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} __const_udelay(4295000);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} __const_udelay(4295000);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    goto $bb844;

  $bb844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} __const_udelay(4295000);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    goto $bb845;

  $bb845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} __const_udelay(4295000);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    goto $bb846;

  $bb846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} __const_udelay(4295000);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    goto $bb847;

  $bb847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} __const_udelay(4295000);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    goto $bb848;

  $bb848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} __const_udelay(4295000);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    goto $bb849;

  $bb849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} __const_udelay(4295000);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    goto $bb850;

  $bb850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} __const_udelay(4295000);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    goto $bb851;

  $bb851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} __const_udelay(4295000);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    goto $bb852;

  $bb852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} __const_udelay(4295000);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    goto $bb853;

  $bb853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} __const_udelay(4295000);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    goto $bb854;

  $bb854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} __const_udelay(4295000);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    goto $bb855;

  $bb855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} __const_udelay(4295000);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    goto $bb856;

  $bb856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} __const_udelay(4295000);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    goto $bb857;

  $bb857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} __const_udelay(4295000);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    goto $bb858;

  $bb858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} __const_udelay(4295000);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    goto $bb859;

  $bb859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} __const_udelay(4295000);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    goto $bb860;

  $bb860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} __const_udelay(4295000);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    goto $bb861;

  $bb861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} __const_udelay(4295000);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    goto $bb862;

  $bb862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} __const_udelay(4295000);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    goto $bb863;

  $bb863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} __const_udelay(4295000);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    goto $bb864;

  $bb864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} __const_udelay(4295000);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    goto $bb865;

  $bb865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} __const_udelay(4295000);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    goto $bb866;

  $bb866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} __const_udelay(4295000);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    goto $bb867;

  $bb867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} __const_udelay(4295000);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    goto $bb868;

  $bb868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} __const_udelay(4295000);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    goto $bb869;

  $bb869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} __const_udelay(4295000);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    goto $bb870;

  $bb870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} __const_udelay(4295000);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    goto $bb871;

  $bb871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} __const_udelay(4295000);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    goto $bb872;

  $bb872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} __const_udelay(4295000);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    goto $bb873;

  $bb873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} __const_udelay(4295000);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    goto $bb874;

  $bb874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} __const_udelay(4295000);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    goto $bb875;

  $bb875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} __const_udelay(4295000);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    goto $bb876;

  $bb876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} __const_udelay(4295000);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    goto $bb877;

  $bb877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} __const_udelay(4295000);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    goto $bb878;

  $bb878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} __const_udelay(4295000);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    goto $bb879;

  $bb879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} __const_udelay(4295000);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    goto $bb880;

  $bb880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} __const_udelay(4295000);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} __const_udelay(4295000);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    goto $bb882;

  $bb882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} __const_udelay(4295000);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    goto $bb883;

  $bb883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} __const_udelay(4295000);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    goto $bb884;

  $bb884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} __const_udelay(4295000);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    goto $bb885;

  $bb885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} __const_udelay(4295000);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    goto $bb886;

  $bb886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} __const_udelay(4295000);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    goto $bb887;

  $bb887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} __const_udelay(4295000);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    goto $bb888;

  $bb888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} __const_udelay(4295000);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    goto $bb889;

  $bb889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} __const_udelay(4295000);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    goto $bb890;

  $bb890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} __const_udelay(4295000);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    goto $bb891;

  $bb891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} __const_udelay(4295000);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    goto $bb892;

  $bb892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} __const_udelay(4295000);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    goto $bb893;

  $bb893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} __const_udelay(4295000);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    goto $bb894;

  $bb894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} __const_udelay(4295000);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    goto $bb895;

  $bb895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} __const_udelay(4295000);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    goto $bb896;

  $bb896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} __const_udelay(4295000);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    goto $bb897;

  $bb897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} __const_udelay(4295000);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    goto $bb898;

  $bb898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} __const_udelay(4295000);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    goto $bb899;

  $bb899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} __const_udelay(4295000);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    goto $bb900;

  $bb900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} __const_udelay(4295000);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    goto $bb901;

  $bb901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} __const_udelay(4295000);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    goto $bb902;

  $bb902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} __const_udelay(4295000);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    goto $bb903;

  $bb903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} __const_udelay(4295000);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    goto $bb904;

  $bb904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} __const_udelay(4295000);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    goto $bb905;

  $bb905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} __const_udelay(4295000);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    goto $bb906;

  $bb906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} __const_udelay(4295000);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    goto $bb907;

  $bb907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} __const_udelay(4295000);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    goto $bb908;

  $bb908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} __const_udelay(4295000);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    goto $bb909;

  $bb909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} __const_udelay(4295000);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    goto $bb910;

  $bb910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} __const_udelay(4295000);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    goto $bb911;

  $bb911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} __const_udelay(4295000);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    goto $bb912;

  $bb912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} __const_udelay(4295000);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    goto $bb913;

  $bb913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} __const_udelay(4295000);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    goto $bb914;

  $bb914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} __const_udelay(4295000);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    goto $bb915;

  $bb915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} __const_udelay(4295000);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    goto $bb916;

  $bb916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} __const_udelay(4295000);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    goto $bb917;

  $bb917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} __const_udelay(4295000);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} __const_udelay(4295000);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    goto $bb919;

  $bb919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} __const_udelay(4295000);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    goto $bb920;

  $bb920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} __const_udelay(4295000);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    goto $bb921;

  $bb921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} __const_udelay(4295000);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    goto $bb922;

  $bb922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} __const_udelay(4295000);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    goto $bb923;

  $bb923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} __const_udelay(4295000);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    goto $bb924;

  $bb924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} __const_udelay(4295000);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    goto $bb925;

  $bb925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} __const_udelay(4295000);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    goto $bb926;

  $bb926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} __const_udelay(4295000);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    goto $bb927;

  $bb927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} __const_udelay(4295000);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    goto $bb928;

  $bb928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} __const_udelay(4295000);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    goto $bb929;

  $bb929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} __const_udelay(4295000);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    goto $bb930;

  $bb930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} __const_udelay(4295000);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    goto $bb931;

  $bb931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} __const_udelay(4295000);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    goto $bb932;

  $bb932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} __const_udelay(4295000);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    goto $bb933;

  $bb933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} __const_udelay(4295000);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    goto $bb934;

  $bb934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} __const_udelay(4295000);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    goto $bb935;

  $bb935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} __const_udelay(4295000);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    goto $bb936;

  $bb936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} __const_udelay(4295000);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    goto $bb937;

  $bb937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} __const_udelay(4295000);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    goto $bb938;

  $bb938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} __const_udelay(4295000);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    goto $bb939;

  $bb939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} __const_udelay(4295000);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    goto $bb940;

  $bb940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} __const_udelay(4295000);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    goto $bb941;

  $bb941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} __const_udelay(4295000);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    goto $bb942;

  $bb942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} __const_udelay(4295000);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    goto $bb943;

  $bb943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} __const_udelay(4295000);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    goto $bb944;

  $bb944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} __const_udelay(4295000);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    goto $bb945;

  $bb945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} __const_udelay(4295000);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    goto $bb946;

  $bb946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} __const_udelay(4295000);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    goto $bb947;

  $bb947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} __const_udelay(4295000);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    goto $bb948;

  $bb948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} __const_udelay(4295000);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    goto $bb949;

  $bb949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} __const_udelay(4295000);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    goto $bb950;

  $bb950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} __const_udelay(4295000);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    goto $bb951;

  $bb951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} __const_udelay(4295000);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    goto $bb952;

  $bb952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} __const_udelay(4295000);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    goto $bb953;

  $bb953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} __const_udelay(4295000);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    goto $bb954;

  $bb954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} __const_udelay(4295000);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    goto $bb955;

  $bb955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} __const_udelay(4295000);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    goto $bb956;

  $bb956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} __const_udelay(4295000);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    goto $bb957;

  $bb957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} __const_udelay(4295000);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    goto $bb958;

  $bb958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} __const_udelay(4295000);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    goto $bb959;

  $bb959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} __const_udelay(4295000);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    goto $bb960;

  $bb960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} __const_udelay(4295000);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    goto $bb961;

  $bb961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} __const_udelay(4295000);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    goto $bb962;

  $bb962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} __const_udelay(4295000);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    goto $bb963;

  $bb963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} __const_udelay(4295000);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    goto $bb964;

  $bb964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} __const_udelay(4295000);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    goto $bb965;

  $bb965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} __const_udelay(4295000);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    goto $bb966;

  $bb966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} __const_udelay(4295000);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    goto $bb967;

  $bb967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} __const_udelay(4295000);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    goto $bb968;

  $bb968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1937} __const_udelay(4295000);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    goto $bb969;

  $bb969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} __const_udelay(4295000);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    goto $bb970;

  $bb970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} __const_udelay(4295000);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    goto $bb971;

  $bb971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} __const_udelay(4295000);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    goto $bb972;

  $bb972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} __const_udelay(4295000);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    goto $bb973;

  $bb973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} __const_udelay(4295000);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    goto $bb974;

  $bb974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} __const_udelay(4295000);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    goto $bb975;

  $bb975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} __const_udelay(4295000);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    goto $bb976;

  $bb976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} __const_udelay(4295000);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    goto $bb977;

  $bb977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} __const_udelay(4295000);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    goto $bb978;

  $bb978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} __const_udelay(4295000);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    goto $bb979;

  $bb979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} __const_udelay(4295000);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    goto $bb980;

  $bb980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} __const_udelay(4295000);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    goto $bb981;

  $bb981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1950} __const_udelay(4295000);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    goto $bb982;

  $bb982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} __const_udelay(4295000);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    goto $bb983;

  $bb983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} __const_udelay(4295000);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    goto $bb984;

  $bb984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} __const_udelay(4295000);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    goto $bb985;

  $bb985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} __const_udelay(4295000);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    goto $bb986;

  $bb986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} __const_udelay(4295000);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    goto $bb987;

  $bb987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} __const_udelay(4295000);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    goto $bb988;

  $bb988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} __const_udelay(4295000);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    goto $bb989;

  $bb989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} __const_udelay(4295000);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    goto $bb990;

  $bb990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} __const_udelay(4295000);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    goto $bb991;

  $bb991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} __const_udelay(4295000);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    goto $bb992;

  $bb992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} __const_udelay(4295000);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    goto $bb993;

  $bb993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} __const_udelay(4295000);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    goto $bb994;

  $bb994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} __const_udelay(4295000);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    goto $bb995;

  $bb995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} __const_udelay(4295000);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    goto $bb996;

  $bb996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} __const_udelay(4295000);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    goto $bb997;

  $bb997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} __const_udelay(4295000);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    goto $bb998;

  $bb998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} __const_udelay(4295000);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    goto $bb999;

  $bb999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} __const_udelay(4295000);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    goto $bb1000;

  $bb1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} __const_udelay(4295000);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    goto $bb1001;

  $bb1001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} __const_udelay(4295000);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    goto $bb1002;

  $bb1002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} __const_udelay(4295000);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    goto $bb1003;

  $bb1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} __const_udelay(4295000);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    goto $bb1004;

  $bb1004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} __const_udelay(4295000);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    goto $bb1005;

  $bb1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} __const_udelay(4295000);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    goto $bb1006;

  $bb1006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} __const_udelay(4295000);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    goto $bb1007;

  $bb1007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} __const_udelay(4295000);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    goto $bb1008;

  $bb1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} __const_udelay(4295000);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    goto $bb1009;

  $bb1009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} __const_udelay(4295000);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    goto $bb1010;

  $bb1010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} __const_udelay(4295000);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    goto $bb1011;

  $bb1011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} __const_udelay(4295000);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    goto $bb1012;

  $bb1012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} __const_udelay(4295000);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    goto $bb1013;

  $bb1013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} __const_udelay(4295000);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    goto $bb1014;

  $bb1014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} __const_udelay(4295000);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    goto $bb1015;

  $bb1015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} __const_udelay(4295000);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    goto $bb1016;

  $bb1016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} __const_udelay(4295000);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    goto $bb1017;

  $bb1017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} __const_udelay(4295000);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    goto $bb1018;

  $bb1018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} __const_udelay(4295000);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    goto $bb1019;

  $bb1019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} __const_udelay(4295000);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    goto $bb1020;

  $bb1020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} __const_udelay(4295000);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    goto $bb1021;

  $bb1021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} __const_udelay(4295000);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    goto $bb1022;

  $bb1022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} __const_udelay(4295000);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    goto $bb1023;

  $bb1023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} __const_udelay(4295000);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    goto $bb1024;

  $bb1024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} __const_udelay(4295000);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    goto $bb1025;

  $bb1025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1994} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $i1 := jme_linkstat_from_phy($p0);
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    call {:si_unique_call 983} {:cexpr "phylink"} boogie_si_record_i32($i1);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 1024);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i3 == 1;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i4 := 2000;
    goto $bb8;

  $bb8:
    call $i5, $i6, $i7, $i4, $i8, $i9 := jme_wait_link_loop_$bb8($p0, $i5, $i6, $i7, $i4, $i8, $i9);
    goto $bb8_last;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i4, 10);
    call {:si_unique_call 984} {:cexpr "to"} boogie_si_record_i32($i8);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume $i9 == 1;
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} __const_udelay(4295000);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} __const_udelay(4295000);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} __const_udelay(4295000);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} __const_udelay(4295000);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} __const_udelay(4295000);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} __const_udelay(4295000);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} __const_udelay(4295000);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} __const_udelay(4295000);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} __const_udelay(4295000);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $i5 := jme_linkstat_from_phy($p0);
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    call {:si_unique_call 988} {:cexpr "phylink"} boogie_si_record_i32($i5);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1024);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb14:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i8;
    goto $bb14_dummy;

  SeqInstr_793:
    assume !assertsPassed;
    return;

  SeqInstr_790:
    assume !assertsPassed;
    return;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4082;
}



const jme_linkstat_from_phy: ref;

axiom jme_linkstat_from_phy == $sub.ref(0, 345162);

procedure jme_linkstat_from_phy($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_linkstat_from_phy($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} $i6 := jme_mdio_read($p2, $i5, 17);
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    call {:si_unique_call 1996} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} $i12 := jme_mdio_read($p8, $i11, 1);
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    call {:si_unique_call 1998} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 32);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i16 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i6, 512);
    call {:si_unique_call 1999} {:cexpr "phylink"} boogie_si_record_i32($i15);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb3;

  SeqInstr_799:
    assume !assertsPassed;
    return;

  SeqInstr_796:
    assume !assertsPassed;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 346194);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} $p1 := external_alloc();
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 347226);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2001} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 2002} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_unregister_netdev_7: ref;

axiom ldv_unregister_netdev_7 == $sub.ref(0, 348258);

procedure ldv_unregister_netdev_7($p0: ref);
  free requires assertsPassed;
  modifies $M.8;



implementation ldv_unregister_netdev_7($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} unregister_netdev($p0);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 2004} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    return;
}



const iounmap: ref;

axiom iounmap == $sub.ref(0, 349290);

procedure iounmap($p0: ref);
  free requires assertsPassed;



implementation iounmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    return;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 350322);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;
  var vslice_dummy_var_61: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(144, 1));
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} vslice_dummy_var_61 := dev_set_drvdata($p2, $p1);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_netdev_8: ref;

axiom ldv_free_netdev_8 == $sub.ref(0, 351354);

procedure ldv_free_netdev_8($p0: ref);
  free requires assertsPassed;
  modifies $M.8;



implementation ldv_free_netdev_8($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} free_netdev($p0);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 2007} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    return;
}



const pci_release_regions: ref;

axiom pci_release_regions == $sub.ref(0, 352386);

procedure pci_release_regions($p0: ref);
  free requires assertsPassed;



implementation pci_release_regions($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 353418);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    return;
}



const free_netdev: ref;

axiom free_netdev == $sub.ref(0, 354450);

procedure free_netdev($p0: ref);
  free requires assertsPassed;



implementation free_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 355482);

procedure dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2008} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2009} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const unregister_netdev: ref;

axiom unregister_netdev == $sub.ref(0, 356514);

procedure unregister_netdev($p0: ref);
  free requires assertsPassed;



implementation unregister_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 357546);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2010} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2011} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const jme_pci_dma64: ref;

axiom jme_pci_dma64 == $sub.ref(0, 358578);

procedure jme_pci_dma64($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation jme_pci_dma64($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(62, 1));
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 592);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(62, 1));
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 592);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} $i18 := pci_set_dma_mask($p0, 4294967295);
    call {:si_unique_call 2021} {:cexpr "tmp___4"} boogie_si_record_i32($i18);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb20:
    assume $i19 == 1;
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} $i20 := pci_set_consistent_dma_mask($p0, 4294967295);
    call {:si_unique_call 2023} {:cexpr "tmp___3"} boogie_si_record_i32($i20);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i21 == 1;
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb7;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} $i14 := pci_set_dma_mask($p0, 1099511627775);
    call {:si_unique_call 2017} {:cexpr "tmp___2"} boogie_si_record_i32($i14);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} $i16 := pci_set_consistent_dma_mask($p0, 1099511627775);
    call {:si_unique_call 2019} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i17 == 1;
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} $i5 := pci_set_dma_mask($p0, $sub.i64(0, 1));
    call {:si_unique_call 2013} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2014} $i7 := pci_set_consistent_dma_mask($p0, $sub.i64(0, 1));
    call {:si_unique_call 2015} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb7;
}



const pci_request_regions: ref;

axiom pci_request_regions == $sub.ref(0, 359610);

procedure pci_request_regions($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_request_regions($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2024} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2025} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 360642);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    return;
}



const alloc_etherdev_mqs: ref;

axiom alloc_etherdev_mqs == $sub.ref(0, 361674);

procedure alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} {:cexpr "alloc_etherdev_mqs:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2027} {:cexpr "alloc_etherdev_mqs:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2028} {:cexpr "alloc_etherdev_mqs:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} $p3 := external_alloc();
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const ioremap: ref;

axiom ioremap == $sub.ref(0, 362706);

procedure ioremap($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} {:cexpr "ioremap:arg:offset"} boogie_si_record_i64($i0);
    call {:si_unique_call 2031} {:cexpr "ioremap:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2032} $p2 := ioremap_nocache($i0, $i1);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const jme_poll: ref;

axiom jme_poll == $sub.ref(0, 363738);

procedure jme_poll($p0: ref, $i1: i32) returns ($r: i32);



const netif_napi_add: ref;

axiom netif_napi_add == $sub.ref(0, 364770);

procedure netif_napi_add($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation netif_napi_add($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} {:cexpr "netif_napi_add:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 365802);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 366834);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    return;
}



const jme_pcc_tasklet: ref;

axiom jme_pcc_tasklet == $sub.ref(0, 367866);

procedure jme_pcc_tasklet($i0: i64);



const tasklet_init: ref;

axiom tasklet_init == $sub.ref(0, 368898);

procedure tasklet_init($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation tasklet_init($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2034} {:cexpr "tasklet_init:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    return;
}



const jme_link_change_tasklet: ref;

axiom jme_link_change_tasklet == $sub.ref(0, 369930);

procedure jme_link_change_tasklet($i0: i64);



const jme_tx_clean_tasklet: ref;

axiom jme_tx_clean_tasklet == $sub.ref(0, 370962);

procedure jme_tx_clean_tasklet($i0: i64);



const jme_rx_clean_tasklet: ref;

axiom jme_rx_clean_tasklet == $sub.ref(0, 371994);

procedure jme_rx_clean_tasklet($i0: i64);



const jme_rx_empty_tasklet: ref;

axiom jme_rx_empty_tasklet == $sub.ref(0, 373026);

procedure jme_rx_empty_tasklet($i0: i64);



const pci_read_config_byte: ref;

axiom pci_read_config_byte == $sub.ref(0, 374058);

procedure pci_read_config_byte($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_byte($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} {:cexpr "pci_read_config_byte:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(16, 1));
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(56, 1));
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} $i7 := pci_bus_read_config_byte($p4, $i6, $i1, $p2);
    call {:si_unique_call 2037} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const jme_check_hw_ver: ref;

axiom jme_check_hw_ver == $sub.ref(0, 375090);

procedure jme_check_hw_ver($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_check_hw_ver($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2038} $i1 := jread32($p0, 2116);
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    call {:si_unique_call 2039} {:cexpr "chipmode"} boogie_si_record_i32($i1);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i2 := $lshr.i32($i1, 16);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1224, 1));
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i2);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i1, 65280);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i4, 8);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1228, 1));
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i6);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1228, 1));
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 15);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1229, 1));
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1228, 1));
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i17 := $ashr.i32($i16, 4);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(1230, 1));
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i18);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_802:
    assume !assertsPassed;
    return;
}



const jme_set_phyfifo_5level: ref;

axiom jme_set_phyfifo_5level == $sub.ref(0, 376122);

procedure jme_set_phyfifo_5level($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_set_phyfifo_5level($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} jme_mdio_write($p2, $i5, 27, 4);
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_805:
    assume !assertsPassed;
    return;
}



const jme_phy_init: ref;

axiom jme_phy_init == $sub.ref(0, 377154);

procedure jme_phy_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_phy_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} $i6 := jme_mdio_read($p2, $i5, 26);
    goto SeqInstr_808, SeqInstr_809;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  SeqInstr_810:
    call {:si_unique_call 2042} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    call {:si_unique_call 2043} {:cexpr "reg26"} boogie_si_record_i16($i7);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i7);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i13, 4096);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} jme_mdio_write($p9, $i12, 26, $i14);
    goto SeqInstr_811, SeqInstr_812;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  SeqInstr_813:
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_811:
    assume !assertsPassed;
    return;

  SeqInstr_808:
    assume !assertsPassed;
    return;
}



const jme_reload_eeprom: ref;

axiom jme_reload_eeprom == $sub.ref(0, 378186);

procedure jme_reload_eeprom($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_reload_eeprom($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i12: i32;
  var $i13: i1;
  var $i6: i32;
  var $i14: i32;
  var $i11: i32;
  var $i15: i1;
  var $i17: i32;
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} $i1 := jread32($p0, 1088);
    goto SeqInstr_814, SeqInstr_815;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  SeqInstr_816:
    call {:si_unique_call 2046} {:cexpr "val"} boogie_si_record_i32($i1);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 32);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i1, 131072);
    call {:si_unique_call 2047} {:cexpr "val"} boogie_si_record_i32($i4);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} jwrite32($p0, 1088, $i4);
    goto SeqInstr_817, SeqInstr_818;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  SeqInstr_819:
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 65536);
    call {:si_unique_call 2049} {:cexpr "val"} boogie_si_record_i32($i5);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} jwrite32($p0, 1088, $i5);
    goto SeqInstr_820, SeqInstr_821;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  SeqInstr_822:
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} __const_udelay(4295000);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} __const_udelay(4295000);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} __const_udelay(4295000);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} __const_udelay(4295000);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} __const_udelay(4295000);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} __const_udelay(4295000);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} __const_udelay(4295000);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} __const_udelay(4295000);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} __const_udelay(4295000);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} __const_udelay(4295000);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} __const_udelay(4295000);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i6 := 2000;
    goto $bb7;

  $bb7:
    call $i7, $i8, $i9, $i10, $i12, $i13, $i6, $i14 := jme_reload_eeprom_loop_$bb7($p0, $i7, $i8, $i9, $i10, $i12, $i13, $i6, $i14);
    goto $bb7_last;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb9, $bb10;

  $bb10:
    assume !(1 == 1);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} $i7 := jread32($p0, 1088);
    goto SeqInstr_823, SeqInstr_824;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  SeqInstr_825:
    call {:si_unique_call 2055} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 65536);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i10 := $i6;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32($i6, 1);
    call {:si_unique_call 2057} {:cexpr "i"} boogie_si_record_i32($i12);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, 0);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i11 := $i14;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i11, 0);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb22:
    assume $i15 == 1;
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} vslice_dummy_var_62 := printk.ref(.str.55);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 5);
    goto $bb24;

  $bb19:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i12;
    goto $bb19_dummy;

  $bb15:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb17;

  SeqInstr_823:
    assume !assertsPassed;
    return;

  $bb9:
    assume 1 == 1;
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} __const_udelay(4295000);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_820:
    assume !assertsPassed;
    return;

  SeqInstr_817:
    assume !assertsPassed;
    return;

  SeqInstr_814:
    assume !assertsPassed;
    return;

  $bb19_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6294;
}



const jme_load_macaddr: ref;

axiom jme_load_macaddr == $sub.ref(0, 379218);

procedure jme_load_macaddr($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.5, $M.4, assertsPassed;



implementation jme_load_macaddr($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} $p1 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} $p2 := netdev_priv($p0);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(816, 1));
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} spin_lock_bh($p4);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} $i5 := jread32($p3, 56);
    goto SeqInstr_826, SeqInstr_827;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  SeqInstr_828:
    call {:si_unique_call 2073} {:cexpr "val"} boogie_si_record_i32($i5);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i6);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i32($i5, 8);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(1, 1));
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $i9);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i11 := $lshr.i32($i5, 16);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i14 := $lshr.i32($i5, 24);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i15);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} $i17 := jread32($p3, 60);
    goto SeqInstr_829, SeqInstr_830;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  SeqInstr_831:
    call {:si_unique_call 2075} {:cexpr "val"} boogie_si_record_i32($i17);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i18);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $i20 := $lshr.i32($i17, 8);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i21);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i64(6, 63);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(720, 1));
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p1);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 2077} cmdloc_dummy_var_13 := $memcpy.i8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p28, $p29, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 1528)), $mul.ref(816, 1));
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} spin_unlock_bh($p30);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(720, 1));
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p1);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 2076} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p25, $p26, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_829:
    assume !assertsPassed;
    return;

  SeqInstr_826:
    assume !assertsPassed;
    return;
}



const ldv_register_netdev_5: ref;

axiom ldv_register_netdev_5 == $sub.ref(0, 380250);

procedure ldv_register_netdev_5($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.0, $CurrAddr;



implementation ldv_register_netdev_5($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} $i1 := register_netdev($p0);
    call {:si_unique_call 2080} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 2081} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} ldv_net_device_ops_3();
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_free_netdev_6: ref;

axiom ldv_free_netdev_6 == $sub.ref(0, 381282);

procedure ldv_free_netdev_6($p0: ref);
  free requires assertsPassed;
  modifies $M.8;



implementation ldv_free_netdev_6($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} free_netdev($p0);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 2084} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    return;
}



const register_netdev: ref;

axiom register_netdev == $sub.ref(0, 382314);

procedure register_netdev($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_netdev($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2085} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2086} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_net_device_ops_3: ref;

axiom ldv_net_device_ops_3 == $sub.ref(0, 383346);

procedure ldv_net_device_ops_3();
  free requires assertsPassed;
  modifies $M.9, $M.0, $CurrAddr;



implementation ldv_net_device_ops_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} $p0 := ldv_init_zalloc(2560);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $M.9 := $p0;
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 384378);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2089} $p1 := calloc(1, $i0);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2090} __VERIFIER_assume($i4);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const pci_bus_read_config_byte: ref;

axiom pci_bus_read_config_byte == $sub.ref(0, 385410);

procedure pci_bus_read_config_byte($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_byte($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2091} {:cexpr "pci_bus_read_config_byte:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2092} {:cexpr "pci_bus_read_config_byte:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2093} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 2094} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const netif_carrier_ok: ref;

axiom netif_carrier_ok == $sub.ref(0, 386442);

procedure netif_carrier_ok($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netif_carrier_ok($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2496)), $mul.ref(120, 1));
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} $i2 := constant_test_bit(2, $p1);
    call {:si_unique_call 2096} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const jme_process_receive: ref;

axiom jme_process_receive == $sub.ref(0, 387474);

procedure jme_process_receive($p0: ref, $i1: i32) returns ($r: i32);



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 388506);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);



const jme_set_clean_rxdesc: ref;

axiom jme_set_clean_rxdesc == $sub.ref(0, 389538);

procedure jme_set_clean_rxdesc($p0: ref, $i1: i32);



const jme_alloc_and_feed_skb: ref;

axiom jme_alloc_and_feed_skb == $sub.ref(0, 390570);

procedure jme_alloc_and_feed_skb($p0: ref, $i1: i32);



const pci_dma_sync_single_for_cpu: ref;

axiom pci_dma_sync_single_for_cpu == $sub.ref(0, 391602);

procedure pci_dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32);



const jme_make_new_rx_buf: ref;

axiom jme_make_new_rx_buf == $sub.ref(0, 392634);

procedure jme_make_new_rx_buf($p0: ref, $i1: i32) returns ($r: i32);



const skb_reserve: ref;

axiom skb_reserve == $sub.ref(0, 393666);

procedure skb_reserve($p0: ref, $i1: i32);



const skb_put: ref;

axiom skb_put == $sub.ref(0, 394698);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);



const eth_type_trans: ref;

axiom eth_type_trans == $sub.ref(0, 395730);

procedure eth_type_trans($p0: ref, $p1: ref) returns ($r: i16);



const jme_rxsum_ok: ref;

axiom jme_rxsum_ok == $sub.ref(0, 396762);

procedure jme_rxsum_ok($p0: ref, $i1: i16, $p2: ref) returns ($r: i32);



const skb_checksum_none_assert: ref;

axiom skb_checksum_none_assert == $sub.ref(0, 397794);

procedure skb_checksum_none_assert($p0: ref);



const jme_udpsum: ref;

axiom jme_udpsum == $sub.ref(0, 398826);

procedure jme_udpsum($p0: ref) returns ($r: i16);



const skb_set_network_header: ref;

axiom skb_set_network_header == $sub.ref(0, 399858);

procedure skb_set_network_header($p0: ref, $i1: i32);



const skb_reset_network_header: ref;

axiom skb_reset_network_header == $sub.ref(0, 400890);

procedure skb_reset_network_header($p0: ref);



const skb_set_transport_header: ref;

axiom skb_set_transport_header == $sub.ref(0, 401922);

procedure skb_set_transport_header($p0: ref, $i1: i32);



const udp_hdr: ref;

axiom udp_hdr == $sub.ref(0, 402954);

procedure udp_hdr($p0: ref) returns ($r: ref);



const skb_reset_transport_header: ref;

axiom skb_reset_transport_header == $sub.ref(0, 403986);

procedure skb_reset_transport_header($p0: ref);



const netdev_alloc_skb: ref;

axiom netdev_alloc_skb == $sub.ref(0, 405018);

procedure netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref);



const skb_tailroom: ref;

axiom skb_tailroom == $sub.ref(0, 406050);

procedure skb_tailroom($p0: ref) returns ($r: i32);



const __netdev_alloc_skb: ref;

axiom __netdev_alloc_skb == $sub.ref(0, 407082);

procedure __netdev_alloc_skb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);



const dma_sync_single_for_cpu: ref;

axiom dma_sync_single_for_cpu == $sub.ref(0, 408114);

procedure dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32);



const debug_dma_sync_single_for_cpu: ref;

axiom debug_dma_sync_single_for_cpu == $sub.ref(0, 409146);

procedure debug_dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32);



const atomic_add: ref;

axiom atomic_add == $sub.ref(0, 410178);

procedure atomic_add($i0: i32, $p1: ref);



const jme_wake_queue_if_stopped: ref;

axiom jme_wake_queue_if_stopped == $sub.ref(0, 411210);

procedure jme_wake_queue_if_stopped($p0: ref);



const netif_queue_stopped: ref;

axiom netif_queue_stopped == $sub.ref(0, 412242);

procedure netif_queue_stopped($p0: ref) returns ($r: i32);



const netif_tx_queue_stopped: ref;

axiom netif_tx_queue_stopped == $sub.ref(0, 413274);

procedure netif_tx_queue_stopped($p0: ref) returns ($r: i32);



const jme_check_link: ref;

axiom jme_check_link == $sub.ref(0, 414306);

procedure jme_check_link($p0: ref, $i1: i32) returns ($r: i32);



const jme_pseudo_hotplug_enabled: ref;

axiom jme_pseudo_hotplug_enabled == $sub.ref(0, 415338);

procedure jme_pseudo_hotplug_enabled($p0: ref) returns ($r: i32);



const jme_stop_shutdown_timer: ref;

axiom jme_stop_shutdown_timer == $sub.ref(0, 416370);

procedure jme_stop_shutdown_timer($p0: ref);



const jme_stop_pcc_timer: ref;

axiom jme_stop_pcc_timer == $sub.ref(0, 417402);

procedure jme_stop_pcc_timer($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_stop_pcc_timer($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} jwrite32($p0, 2048, 0);
    goto SeqInstr_832, SeqInstr_833;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  SeqInstr_834:
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_832:
    assume !assertsPassed;
    return;
}



const jme_setup_rx_resources: ref;

axiom jme_setup_rx_resources == $sub.ref(0, 418434);

procedure jme_setup_rx_resources($p0: ref) returns ($r: i32);



const jme_setup_tx_resources: ref;

axiom jme_setup_tx_resources == $sub.ref(0, 419466);

procedure jme_setup_tx_resources($p0: ref) returns ($r: i32);



const jme_enable_rx_engine: ref;

axiom jme_enable_rx_engine == $sub.ref(0, 420498);

procedure jme_enable_rx_engine($p0: ref);



const jme_enable_tx_engine: ref;

axiom jme_enable_tx_engine == $sub.ref(0, 421530);

procedure jme_enable_tx_engine($p0: ref);



const netif_start_queue: ref;

axiom netif_start_queue == $sub.ref(0, 422562);

procedure netif_start_queue($p0: ref);



const jme_start_pcc_timer: ref;

axiom jme_start_pcc_timer == $sub.ref(0, 423594);

procedure jme_start_pcc_timer($p0: ref);



const jme_start_shutdown_timer: ref;

axiom jme_start_shutdown_timer == $sub.ref(0, 424626);

procedure jme_start_shutdown_timer($p0: ref);



const dma_alloc_coherent: ref;

axiom dma_alloc_coherent == $sub.ref(0, 425658);

procedure dma_alloc_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i32) returns ($r: ref);



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 426690);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);



const is_device_dma_capable: ref;

axiom is_device_dma_capable == $sub.ref(0, 427722);

procedure is_device_dma_capable($p0: ref) returns ($r: i32);



const dma_alloc_coherent_gfp_flags: ref;

axiom dma_alloc_coherent_gfp_flags == $sub.ref(0, 428754);

procedure dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32);



const debug_dma_alloc_coherent: ref;

axiom debug_dma_alloc_coherent == $sub.ref(0, 429786);

procedure debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref);



const dma_alloc_coherent_mask: ref;

axiom dma_alloc_coherent_mask == $sub.ref(0, 430818);

procedure dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64);



const strcat: ref;

axiom strcat == $sub.ref(0, 431850);

procedure strcat($p0: ref, $p1: ref) returns ($r: ref);



const is_buggy250: ref;

axiom is_buggy250 == $sub.ref(0, 432882);

procedure is_buggy250($i0: i16, $i1: i8) returns ($r: i32);



const jme_set_phyfifo_8level: ref;

axiom jme_set_phyfifo_8level == $sub.ref(0, 433914);

procedure jme_set_phyfifo_8level($p0: ref);



const netif_carrier_on: ref;

axiom netif_carrier_on == $sub.ref(0, 434946);

procedure netif_carrier_on($p0: ref);



const jme_shutdown_nic: ref;

axiom jme_shutdown_nic == $sub.ref(0, 435978);

procedure jme_shutdown_nic($p0: ref);



const jme_dynamic_pcc: ref;

axiom jme_dynamic_pcc == $sub.ref(0, 437010);

procedure jme_dynamic_pcc($p0: ref);



const jme_attempt_pcc: ref;

axiom jme_attempt_pcc == $sub.ref(0, 438042);

procedure jme_attempt_pcc($p0: ref, $i1: i32);



const jme_napi_priv: ref;

axiom jme_napi_priv == $sub.ref(0, 439074);

procedure jme_napi_priv($p0: ref) returns ($r: ref);



const napi_complete: ref;

axiom napi_complete == $sub.ref(0, 440106);

procedure napi_complete($p0: ref);



const ioremap_nocache: ref;

axiom ioremap_nocache == $sub.ref(0, 441138);

procedure ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} {:cexpr "ioremap_nocache:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 2099} {:cexpr "ioremap_nocache:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} $p2 := external_alloc();
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_set_dma_mask: ref;

axiom pci_set_dma_mask == $sub.ref(0, 442170);

procedure pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} {:cexpr "pci_set_dma_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(144, 1));
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2102} $i3 := dma_set_mask($p2, $i1);
    call {:si_unique_call 2103} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_set_consistent_dma_mask: ref;

axiom pci_set_consistent_dma_mask == $sub.ref(0, 443202);

procedure pci_set_consistent_dma_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pci_set_consistent_dma_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} {:cexpr "pci_set_consistent_dma_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2848)), $mul.ref(144, 1));
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} $i3 := dma_set_coherent_mask($p2, $i1);
    call {:si_unique_call 2106} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dma_set_coherent_mask: ref;

axiom dma_set_coherent_mask == $sub.ref(0, 444234);

procedure dma_set_coherent_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dma_set_coherent_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} {:cexpr "dma_set_coherent_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2108} $i2 := dma_supported($p0, $i1);
    call {:si_unique_call 2109} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1112)), $mul.ref(888, 1));
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p5, $i1);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 5);
    goto $bb3;
}



const dma_supported: ref;

axiom dma_supported == $sub.ref(0, 445266);

procedure dma_supported($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_supported($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2110} {:cexpr "dma_supported:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2111} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2112} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dma_set_mask: ref;

axiom dma_set_mask == $sub.ref(0, 446298);

procedure dma_set_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_set_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2113} {:cexpr "dma_set_mask:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2114} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2115} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const jme_suspend: ref;

axiom jme_suspend == $sub.ref(0, 447330);

procedure jme_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 144), 2848));
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} $p3 := pci_get_drvdata($p2);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} $p5 := netdev_priv($p4);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1528)), $mul.ref(1332, 1));
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} atomic_dec($p7);
    goto SeqInstr_835, SeqInstr_836;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  SeqInstr_837:
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} netif_device_detach($p4);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} netif_stop_queue($p4);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} jme_stop_irq($p6);
    goto SeqInstr_838, SeqInstr_839;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  SeqInstr_840:
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 1528)), $mul.ref(1040, 1));
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} tasklet_disable($p8);
    goto SeqInstr_841, SeqInstr_842;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  SeqInstr_843:
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 1528)), $mul.ref(1000, 1));
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} tasklet_disable($p9);
    goto SeqInstr_844, SeqInstr_845;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  SeqInstr_846:
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 1528)), $mul.ref(960, 1));
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} tasklet_disable($p10);
    goto SeqInstr_847, SeqInstr_848;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  SeqInstr_849:
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} $i11 := netif_carrier_ok($p4);
    call {:si_unique_call 2126} {:cexpr "tmp___2"} boogie_si_record_i32($i11);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 1528)), $mul.ref(1040, 1));
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} tasklet_enable($p17);
    goto SeqInstr_868, SeqInstr_869;

  SeqInstr_869:
    assume assertsPassed;
    goto SeqInstr_870;

  SeqInstr_870:
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 1528)), $mul.ref(1000, 1));
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2138} tasklet_enable($p18);
    goto SeqInstr_871, SeqInstr_872;

  SeqInstr_872:
    assume assertsPassed;
    goto SeqInstr_873;

  SeqInstr_873:
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 1528)), $mul.ref(960, 1));
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} tasklet_enable($p19);
    goto SeqInstr_874, SeqInstr_875;

  SeqInstr_875:
    assume assertsPassed;
    goto SeqInstr_876;

  SeqInstr_876:
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2140} jme_powersave_phy($p6);
    goto SeqInstr_877, SeqInstr_878;

  SeqInstr_878:
    assume assertsPassed;
    goto SeqInstr_879;

  SeqInstr_879:
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_877:
    assume !assertsPassed;
    return;

  SeqInstr_874:
    assume !assertsPassed;
    return;

  SeqInstr_871:
    assume !assertsPassed;
    return;

  SeqInstr_868:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 1528)), $mul.ref(1160, 1));
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} $i14 := constant_test_bit(5, $p13);
    call {:si_unique_call 2128} {:cexpr "tmp___1"} boogie_si_record_i32($i14);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2130} jme_stop_pcc_timer($p6);
    goto SeqInstr_853, SeqInstr_854;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  SeqInstr_855:
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} jme_disable_rx_engine($p6);
    goto SeqInstr_856, SeqInstr_857;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  SeqInstr_858:
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} jme_disable_tx_engine($p6);
    goto SeqInstr_859, SeqInstr_860;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  SeqInstr_861:
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} jme_reset_mac_processor($p6);
    goto SeqInstr_862, SeqInstr_863;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  SeqInstr_864:
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} jme_free_rx_resources($p6);
    goto SeqInstr_865, SeqInstr_866;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  SeqInstr_867:
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} jme_free_tx_resources($p6);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2136} netif_carrier_off($p4);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 1528)), $mul.ref(1196, 1));
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 0);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_865:
    assume !assertsPassed;
    return;

  SeqInstr_862:
    assume !assertsPassed;
    return;

  SeqInstr_859:
    assume !assertsPassed;
    return;

  SeqInstr_856:
    assume !assertsPassed;
    return;

  SeqInstr_853:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} jme_polling_mode($p6);
    goto SeqInstr_850, SeqInstr_851;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  SeqInstr_852:
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_850:
    assume !assertsPassed;
    return;

  SeqInstr_847:
    assume !assertsPassed;
    return;

  SeqInstr_844:
    assume !assertsPassed;
    return;

  SeqInstr_841:
    assume !assertsPassed;
    return;

  SeqInstr_838:
    assume !assertsPassed;
    return;

  SeqInstr_835:
    assume !assertsPassed;
    return;
}



const jme_resume: ref;

axiom jme_resume == $sub.ref(0, 448362);

procedure jme_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p15: ref;
  var vslice_dummy_var_63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 144), 2848));
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} $p3 := pci_get_drvdata($p2);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2142} $p5 := netdev_priv($p4);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1528)), $mul.ref(1188, 1));
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, $sub.i32(0, 65536));
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} jwrite32($p6, 96, $i9);
    goto SeqInstr_880, SeqInstr_881;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  SeqInstr_882:
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2144} jme_phy_on($p6);
    goto SeqInstr_883, SeqInstr_884;

  SeqInstr_884:
    assume assertsPassed;
    goto SeqInstr_885;

  SeqInstr_885:
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 1528)), $mul.ref(1160, 1));
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} $i11 := constant_test_bit(2, $p10);
    call {:si_unique_call 2146} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2148} jme_reset_phy_processor($p6);
    goto SeqInstr_889, SeqInstr_890;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  SeqInstr_891:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} jme_start_irq($p6);
    goto SeqInstr_892, SeqInstr_893;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  SeqInstr_894:
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2150} netif_device_attach($p4);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 1528)), $mul.ref(1332, 1));
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2151} atomic_inc($p15);
    goto SeqInstr_895, SeqInstr_896;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  SeqInstr_897:
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2152} jme_reset_link($p6);
    goto SeqInstr_898, SeqInstr_899;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  SeqInstr_900:
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_898:
    assume !assertsPassed;
    return;

  SeqInstr_895:
    assume !assertsPassed;
    return;

  SeqInstr_892:
    assume !assertsPassed;
    return;

  SeqInstr_889:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 1528)), $mul.ref(1236, 1));
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} vslice_dummy_var_63 := jme_set_settings($p4, $p13);
    goto SeqInstr_886, SeqInstr_887;

  SeqInstr_887:
    assume assertsPassed;
    goto SeqInstr_888;

  SeqInstr_888:
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_886:
    assume !assertsPassed;
    return;

  SeqInstr_883:
    assume !assertsPassed;
    return;

  SeqInstr_880:
    assume !assertsPassed;
    return;
}



const netif_device_attach: ref;

axiom netif_device_attach == $sub.ref(0, 449394);

procedure netif_device_attach($p0: ref);
  free requires assertsPassed;



implementation netif_device_attach($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    return;
}



const netif_device_detach: ref;

axiom netif_device_detach == $sub.ref(0, 450426);

procedure netif_device_detach($p0: ref);
  free requires assertsPassed;



implementation netif_device_detach($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 451458);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.12;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 2154} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.12;
    call {:si_unique_call 2155} cmdloc_dummy_var_15 := $memset.i8(cmdloc_dummy_var_14, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.12 := cmdloc_dummy_var_15;
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_pci_driver_1: ref;

axiom ldv_pci_driver_1 == $sub.ref(0, 452490);

procedure ldv_pci_driver_1();
  free requires assertsPassed;
  modifies $M.13, $M.0, $CurrAddr;



implementation ldv_pci_driver_1()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2156} $p0 := ldv_init_zalloc(2848);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $M.13 := $p0;
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_ethtool_ops_4: ref;

axiom ldv_initialize_ethtool_ops_4 == $sub.ref(0, 453522);

procedure ldv_initialize_ethtool_ops_4();
  free requires assertsPassed;
  modifies $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.0, $CurrAddr;



implementation ldv_initialize_ethtool_ops_4()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} $p0 := ldv_init_zalloc(92);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $M.14 := $p0;
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2158} $p2 := ldv_init_zalloc(2560);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $M.15 := $p2;
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} $p4 := ldv_init_zalloc(16);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $M.16 := $p4;
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} $p6 := ldv_init_zalloc(44);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $M.17 := $p6;
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2161} $p8 := ldv_init_zalloc(20);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $M.18 := $p8;
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2162} $p10 := ldv_init_zalloc(16);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $M.19 := $p10;
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dev_pm_ops_2: ref;

axiom ldv_dev_pm_ops_2 == $sub.ref(0, 454554);

procedure ldv_dev_pm_ops_2();
  free requires assertsPassed;
  modifies $M.20, $M.0, $CurrAddr;



implementation ldv_dev_pm_ops_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2163} $p0 := ldv_init_zalloc(1112);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $M.20 := $p0;
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 455586);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.21, $M.22, $M.23, $M.24, $M.8, $M.25, $M.0, $M.26, $M.27, $M.20, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.1, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.9, $M.13, $M.4, $M.49, $M.59, $M.7, $M.6, $M.10, $CurrAddr, $M.5, $M.3, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $p111: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i1;
  var $i142: i1;
  var $i143: i1;
  var $i144: i1;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i148: i32;
  var $i149: i32;
  var $i150: i1;
  var $i151: i32;
  var $i152: i32;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $i159: i32;
  var $i160: i1;
  var $i161: i32;
  var $i162: i1;
  var $i163: i1;
  var $i164: i1;
  var $i165: i32;
  var $i166: i1;
  var $i167: i32;
  var $i168: i1;
  var $i169: i32;
  var $i170: i1;
  var $i171: i32;
  var $i172: i32;
  var $i173: i1;
  var $i174: i32;
  var $i175: i1;
  var $i176: i32;
  var $i177: i1;
  var $i178: i32;
  var $i179: i1;
  var $i180: i1;
  var $i181: i1;
  var $i182: i1;
  var $i183: i1;
  var $i184: i1;
  var $i185: i1;
  var $i186: i1;
  var $i187: i1;
  var $i188: i1;
  var $i189: i1;
  var $i190: i1;
  var $i191: i1;
  var $i192: i1;
  var $i193: i1;
  var $i194: i32;
  var $i195: i1;
  var $p196: ref;
  var $i197: i32;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $i202: i32;
  var $i204: i32;
  var $i205: i1;
  var $p206: ref;
  var $i207: i32;
  var $i209: i32;
  var $i210: i1;
  var $p211: ref;
  var $i212: i32;
  var $i213: i1;
  var $p214: ref;
  var $i215: i32;
  var $i216: i1;
  var $p217: ref;
  var $i218: i32;
  var $i219: i1;
  var $p220: ref;
  var $i221: i32;
  var $i222: i32;
  var $i223: i1;
  var $i224: i32;
  var $i225: i1;
  var $p226: ref;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $i230: i32;
  var $i231: i1;
  var $p232: ref;
  var $i233: i32;
  var $i234: i1;
  var $p235: ref;
  var $i237: i32;
  var $i238: i1;
  var $p239: ref;
  var $i240: i32;
  var $i242: i32;
  var $i243: i1;
  var $p244: ref;
  var $i245: i32;
  var $i247: i32;
  var $i248: i1;
  var $p249: ref;
  var $i250: i32;
  var $i252: i32;
  var $i253: i1;
  var $p254: ref;
  var $i256: i32;
  var $i257: i1;
  var $p258: ref;
  var $i260: i32;
  var $i261: i1;
  var $p262: ref;
  var $i264: i32;
  var $i265: i1;
  var $p266: ref;
  var $i268: i32;
  var $i269: i1;
  var $p270: ref;
  var $i271: i32;
  var $i273: i32;
  var $i274: i1;
  var $p275: ref;
  var $i276: i32;
  var $i278: i32;
  var $i279: i1;
  var $p280: ref;
  var $i281: i32;
  var $i283: i32;
  var $i284: i1;
  var $p285: ref;
  var $i286: i32;
  var $i288: i32;
  var $i289: i1;
  var $p290: ref;
  var $i291: i32;
  var $i293: i32;
  var $i294: i1;
  var $p295: ref;
  var $i297: i32;
  var $i298: i1;
  var $p299: ref;
  var $i301: i32;
  var $i302: i1;
  var $p303: ref;
  var $i305: i32;
  var $i306: i1;
  var $p307: ref;
  var $i308: i32;
  var $i309: i1;
  var $p310: ref;
  var $i311: i32;
  var $i312: i1;
  var $p313: ref;
  var $i314: i32;
  var $i315: i1;
  var $i317: i32;
  var $i318: i32;
  var $i319: i32;
  var $i320: i1;
  var $i321: i32;
  var $i322: i32;
  var $i323: i1;
  var $i324: i32;
  var $i325: i32;
  var $i326: i32;
  var $i327: i1;
  var $i328: i32;
  var $i329: i1;
  var $i330: i1;
  var $i331: i1;
  var $i332: i1;
  var $i333: i1;
  var $i334: i1;
  var $i335: i1;
  var $i336: i1;
  var $i337: i1;
  var $i338: i1;
  var $i339: i1;
  var $i340: i1;
  var $i341: i1;
  var $i342: i1;
  var $i343: i1;
  var $i344: i1;
  var $i345: i1;
  var $i346: i1;
  var $i347: i1;
  var $i348: i1;
  var $i349: i1;
  var $i350: i32;
  var $i351: i1;
  var $p352: ref;
  var $i353: i32;
  var $i354: i32;
  var $i355: i1;
  var $i356: i32;
  var $i357: i1;
  var $p358: ref;
  var $i359: i32;
  var $i360: i32;
  var $i361: i1;
  var $i362: i32;
  var $i363: i1;
  var $p364: ref;
  var $i365: i32;
  var $i366: i32;
  var $i367: i1;
  var $i368: i32;
  var $i369: i1;
  var $p370: ref;
  var $i371: i32;
  var $i372: i32;
  var $i373: i1;
  var $i374: i32;
  var $i375: i1;
  var $p376: ref;
  var $i377: i32;
  var $i378: i32;
  var $i379: i1;
  var $i380: i32;
  var $i381: i1;
  var $p382: ref;
  var $i383: i32;
  var $i384: i32;
  var $i385: i1;
  var $i386: i32;
  var $i387: i1;
  var $i388: i32;
  var $i389: i32;
  var $i390: i1;
  var $i391: i32;
  var $i392: i1;
  var $i393: i32;
  var $i394: i32;
  var $i395: i1;
  var $i396: i32;
  var $i397: i1;
  var $i398: i32;
  var $i399: i32;
  var $i400: i1;
  var $i401: i32;
  var $i402: i1;
  var $i403: i32;
  var $i404: i32;
  var $i405: i1;
  var $i406: i32;
  var $i407: i1;
  var $i408: i32;
  var $i409: i32;
  var $i410: i1;
  var $i411: i32;
  var $i412: i1;
  var $i413: i32;
  var $i414: i32;
  var $i415: i1;
  var $i416: i32;
  var $i417: i1;
  var $i418: i32;
  var $i419: i32;
  var $i420: i1;
  var $i421: i32;
  var $i422: i32;
  var $i423: i32;
  var $i424: i1;
  var $i425: i32;
  var $i426: i32;
  var $i427: i1;
  var $i428: i32;
  var $i429: i1;
  var $i430: i32;
  var $i431: i32;
  var $i432: i1;
  var $i433: i32;
  var $i434: i1;
  var $i435: i32;
  var $i436: i32;
  var $i437: i1;
  var $i438: i32;
  var $i439: i1;
  var $i440: i32;
  var $i441: i32;
  var $i442: i1;
  var $i443: i32;
  var $i444: i1;
  var $i445: i32;
  var $i446: i32;
  var $i447: i1;
  var $i448: i32;
  var $i449: i1;
  var $i450: i32;
  var $i451: i32;
  var $i452: i1;
  var $i453: i32;
  var $i454: i1;
  var $i456: i32;
  var $i457: i32;
  var vslice_dummy_var_64: ref;
  var vslice_dummy_var_65: ref;
  var vslice_dummy_var_66: ref;
  var vslice_dummy_var_67: ref;
  var vslice_dummy_var_68: ref;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;

  $bb0:
    call {:si_unique_call 2164} $initialize();
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 2166} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2169} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} $p6 := ldv_init_zalloc(12);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} $p8 := ldv_init_zalloc(1);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2174} $p9 := ldv_init_zalloc(1);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} $p10 := ldv_init_zalloc(196);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} $p12 := ldv_init_zalloc(32);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} $p14 := ldv_init_zalloc(240);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} $p16 := ldv_init_zalloc(1);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} $p17 := ldv_init_zalloc(112);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2180} $p19 := ldv_init_zalloc(40);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} ldv_initialize();
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p0);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2182} vslice_dummy_var_64 := ldv_memset($p21, 0, 4);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} vslice_dummy_var_65 := ldv_memset($p23, 0, 4);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p2);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} vslice_dummy_var_66 := ldv_memset($p25, 0, 4);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p3);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} vslice_dummy_var_67 := ldv_memset($p27, 0, 4);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p4);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} vslice_dummy_var_68 := ldv_memset($p29, 0, 4);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $M.21 := 0;
    call {:si_unique_call 2187} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $M.22 := 0;
    call {:si_unique_call 2188} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $M.23 := 0;
    call {:si_unique_call 2189} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 2190} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 2191} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $M.25 := 0;
    call {:si_unique_call 2192} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $p62, $i63, $i64, $p65, $p66, $i68, $i69, $p70, $p71, $i73, $i74, $p75, $i76, $i77, $p78, $p79, $i80, $i81, $p82, $p83, $i85, $i86, $p87, $p88, $i90, $i91, $p92, $p93, $i95, $i96, $p97, $i98, $i99, $i100, $p101, $i103, $i104, $p105, $p106, $i108, $i109, $p110, $p111, $i113, $i114, $p115, $i117, $i118, $p119, $p120, $i121, $i122, $p123, $p124, $i126, $i127, $p128, $i130, $i131, $p132, $i134, $i135, $p136, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $p147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $p155, $i156, $i157, $p158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $p196, $i197, $i199, $i200, $p201, $i202, $i204, $i205, $p206, $i207, $i209, $i210, $p211, $i212, $i213, $p214, $i215, $i216, $p217, $i218, $i219, $p220, $i221, $i222, $i223, $i224, $i225, $p226, $i227, $i228, $p229, $i230, $i231, $p232, $i233, $i234, $p235, $i237, $i238, $p239, $i240, $i242, $i243, $p244, $i245, $i247, $i248, $p249, $i250, $i252, $i253, $p254, $i256, $i257, $p258, $i260, $i261, $p262, $i264, $i265, $p266, $i268, $i269, $p270, $i271, $i273, $i274, $p275, $i276, $i278, $i279, $p280, $i281, $i283, $i284, $p285, $i286, $i288, $i289, $p290, $i291, $i293, $i294, $p295, $i297, $i298, $p299, $i301, $i302, $p303, $i305, $i306, $p307, $i308, $i309, $p310, $i311, $i312, $p313, $i314, $i315, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $i330, $i331, $i332, $i333, $i334, $i335, $i336, $i337, $i338, $i339, $i340, $i341, $i342, $i343, $i344, $i345, $i346, $i347, $i348, $i349, $i350, $i351, $p352, $i353, $i354, $i355, $i356, $i357, $p358, $i359, $i360, $i361, $i362, $i363, $p364, $i365, $i366, $i367, $i368, $i369, $p370, $i371, $i372, $i373, $i374, $i375, $p376, $i377, $i378, $i379, $i380, $i381, $p382, $i383, $i384, $i385, $i386, $i387, $i388, $i389, $i390, $i391, $i392, $i393, $i394, $i395, $i396, $i397, $i398, $i399, $i400, $i401, $i402, $i403, $i404, $i405, $i406, $i407, $i408, $i409, $i410, $i411, $i412, $i413, $i414, $i415, $i416, $i417, $i418, $i419, $i420, $i421, $i422, $i423, $i424, $i425, $i426, $i427, $i428, $i429, $i430, $i431, $i432, $i433, $i434, $i435, $i436, $i437, $i438, $i439, $i440, $i441, $i442, $i443, $i444, $i445, $i446, $i447, $i448, $i449, $i450, $i451, $i452, $i453, $i454, $i456, $i457, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p7, $p8, $p9, $p11, $p13, $p15, $p16, $p18, $p20, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $p62, $i63, $i64, $p65, $p66, $i68, $i69, $p70, $p71, $i73, $i74, $p75, $i76, $i77, $p78, $p79, $i80, $i81, $p82, $p83, $i85, $i86, $p87, $p88, $i90, $i91, $p92, $p93, $i95, $i96, $p97, $i98, $i99, $i100, $p101, $i103, $i104, $p105, $p106, $i108, $i109, $p110, $p111, $i113, $i114, $p115, $i117, $i118, $p119, $p120, $i121, $i122, $p123, $p124, $i126, $i127, $p128, $i130, $i131, $p132, $i134, $i135, $p136, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $p147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $p155, $i156, $i157, $p158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $p196, $i197, $i199, $i200, $p201, $i202, $i204, $i205, $p206, $i207, $i209, $i210, $p211, $i212, $i213, $p214, $i215, $i216, $p217, $i218, $i219, $p220, $i221, $i222, $i223, $i224, $i225, $p226, $i227, $i228, $p229, $i230, $i231, $p232, $i233, $i234, $p235, $i237, $i238, $p239, $i240, $i242, $i243, $p244, $i245, $i247, $i248, $p249, $i250, $i252, $i253, $p254, $i256, $i257, $p258, $i260, $i261, $p262, $i264, $i265, $p266, $i268, $i269, $p270, $i271, $i273, $i274, $p275, $i276, $i278, $i279, $p280, $i281, $i283, $i284, $p285, $i286, $i288, $i289, $p290, $i291, $i293, $i294, $p295, $i297, $i298, $p299, $i301, $i302, $p303, $i305, $i306, $p307, $i308, $i309, $p310, $i311, $i312, $p313, $i314, $i315, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $i330, $i331, $i332, $i333, $i334, $i335, $i336, $i337, $i338, $i339, $i340, $i341, $i342, $i343, $i344, $i345, $i346, $i347, $i348, $i349, $i350, $i351, $p352, $i353, $i354, $i355, $i356, $i357, $p358, $i359, $i360, $i361, $i362, $i363, $p364, $i365, $i366, $i367, $i368, $i369, $p370, $i371, $i372, $i373, $i374, $i375, $p376, $i377, $i378, $i379, $i380, $i381, $p382, $i383, $i384, $i385, $i386, $i387, $i388, $i389, $i390, $i391, $i392, $i393, $i394, $i395, $i396, $i397, $i398, $i399, $i400, $i401, $i402, $i403, $i404, $i405, $i406, $i407, $i408, $i409, $i410, $i411, $i412, $i413, $i414, $i415, $i416, $i417, $i418, $i419, $i420, $i421, $i422, $i423, $i424, $i425, $i426, $i427, $i428, $i429, $i430, $i431, $i432, $i433, $i434, $i435, $i436, $i437, $i438, $i439, $i440, $i441, $i442, $i443, $i444, $i445, $i446, $i447, $i448, $i449, $i450, $i451, $i452, $i453, $i454, $i456, $i457, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i31, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i31, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i31, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2398} ldv_stop();
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    goto $bb480;

  $bb480:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb116_dummy;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $i326 := $M.25;
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i327 := $ne.i32($i326, 0);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  $bb313:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb312:
    assume $i327 == 1;
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2333} $i328 := __VERIFIER_nondet_int();
    call {:si_unique_call 2334} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i328);
    call {:si_unique_call 2335} {:cexpr "tmp___14"} boogie_si_record_i32($i328);
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    $i329 := $slt.i32($i328, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    $i330 := $slt.i32($i328, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    $i331 := $slt.i32($i328, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    $i332 := $slt.i32($i328, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  $bb322:
    assume !($i332 == 1);
    assume {:verifier.code 0} true;
    $i333 := $slt.i32($i328, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  $bb324:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    $i334 := $eq.i32($i328, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    assume !($i334 == 1);
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2397} ldv_stop();
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb477:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb325:
    assume $i334 == 1;
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $i453 := $M.25;
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i454 := $eq.i32($i453, 15);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb473, $bb474;

  $bb474:
    assume !($i454 == 1);
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb473:
    assume $i454 == 1;
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} vslice_dummy_var_102 := ldv_complete_2();
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 2395} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $i456 := $M.23;
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $i457 := $sub.i32($i456, 1);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $M.23 := $i457;
    call {:si_unique_call 2396} {:cexpr "ref_cnt"} boogie_si_record_i32($i457);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb323:
    assume $i333 == 1;
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i448 := $M.25;
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i449 := $eq.i32($i448, 3);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb467, $bb468;

  $bb468:
    assume !($i449 == 1);
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb467:
    assume $i449 == 1;
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2391} $i450 := ldv_suspend_noirq_2();
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $M.48 := $i450;
    call {:si_unique_call 2392} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i450);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i451 := $M.48;
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i452 := $eq.i32($i451, 0);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb469, $bb470;

  $bb470:
    assume !($i452 == 1);
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb469:
    assume $i452 == 1;
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $M.25 := 7;
    call {:si_unique_call 2393} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(7);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb321:
    assume $i332 == 1;
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i443 := $M.25;
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i444 := $eq.i32($i443, 8);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb461, $bb462;

  $bb462:
    assume !($i444 == 1);
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb461:
    assume $i444 == 1;
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2388} $i445 := ldv_restore_noirq_2();
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $M.47 := $i445;
    call {:si_unique_call 2389} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i445);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $i446 := $M.47;
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $i447 := $eq.i32($i446, 0);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb463, $bb464;

  $bb464:
    assume !($i447 == 1);
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb463:
    assume $i447 == 1;
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $M.25 := 13;
    call {:si_unique_call 2390} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(13);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb319:
    assume $i331 == 1;
    assume {:verifier.code 0} true;
    $i335 := $slt.i32($i328, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  $bb329:
    assume !($i335 == 1);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i438 := $M.25;
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $i439 := $eq.i32($i438, 4);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb455, $bb456;

  $bb456:
    assume !($i439 == 1);
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb455:
    assume $i439 == 1;
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2385} $i440 := ldv_poweroff_late_2();
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $M.46 := $i440;
    call {:si_unique_call 2386} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i440);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i441 := $M.46;
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $i442 := $eq.i32($i441, 0);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb457, $bb458;

  $bb458:
    assume !($i442 == 1);
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb457:
    assume $i442 == 1;
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $M.25 := 9;
    call {:si_unique_call 2387} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(9);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb328:
    assume $i335 == 1;
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i433 := $M.25;
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $i434 := $eq.i32($i433, 4);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb449, $bb450;

  $bb450:
    assume !($i434 == 1);
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb449:
    assume $i434 == 1;
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2382} $i435 := ldv_poweroff_noirq_2();
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $M.45 := $i435;
    call {:si_unique_call 2383} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i435);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $i436 := $M.45;
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $i437 := $eq.i32($i436, 0);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb451, $bb452;

  $bb452:
    assume !($i437 == 1);
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb453:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb451:
    assume $i437 == 1;
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $M.25 := 8;
    call {:si_unique_call 2384} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(8);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb317:
    assume $i330 == 1;
    assume {:verifier.code 0} true;
    $i336 := $slt.i32($i328, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  $bb331:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    $i337 := $slt.i32($i328, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    $i338 := $slt.i32($i328, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  $bb335:
    assume !($i338 == 1);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i428 := $M.25;
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i429 := $eq.i32($i428, 10);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb443, $bb444;

  $bb444:
    assume !($i429 == 1);
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb443:
    assume $i429 == 1;
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2379} $i430 := ldv_thaw_noirq_2();
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $M.44 := $i430;
    call {:si_unique_call 2380} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i430);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i431 := $M.44;
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $i432 := $eq.i32($i431, 0);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb445, $bb446;

  $bb446:
    assume !($i432 == 1);
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb445:
    assume $i432 == 1;
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $M.25 := 14;
    call {:si_unique_call 2381} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(14);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb334:
    assume $i338 == 1;
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i423 := $M.25;
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $i424 := $eq.i32($i423, 5);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb437, $bb438;

  $bb438:
    assume !($i424 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb437:
    assume $i424 == 1;
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} $i425 := ldv_freeze_late_2();
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $M.43 := $i425;
    call {:si_unique_call 2377} {:cexpr "ldv_retval_9"} boogie_si_record_i32($i425);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $i426 := $M.43;
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i427 := $eq.i32($i426, 0);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb439, $bb440;

  $bb440:
    assume !($i427 == 1);
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb439:
    assume $i427 == 1;
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $M.25 := 11;
    call {:si_unique_call 2378} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(11);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb332:
    assume $i337 == 1;
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i416 := $M.25;
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i417 := $eq.i32($i416, 1);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb431, $bb432;

  $bb432:
    assume !($i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb431:
    assume $i417 == 1;
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2372} $i418 := ldv_prepare_2();
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $M.42 := $i418;
    call {:si_unique_call 2373} {:cexpr "ldv_retval_10"} boogie_si_record_i32($i418);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $i419 := $M.42;
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $i420 := $eq.i32($i419, 0);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb433, $bb434;

  $bb434:
    assume !($i420 == 1);
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb433:
    assume $i420 == 1;
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 2374} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i421 := $M.23;
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i422 := $add.i32($i421, 1);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $M.23 := $i422;
    call {:si_unique_call 2375} {:cexpr "ref_cnt"} boogie_si_record_i32($i422);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb330:
    assume $i336 == 1;
    assume {:verifier.code 0} true;
    $i339 := $slt.i32($i328, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336, $bb337;

  $bb337:
    assume !($i339 == 1);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i411 := $M.25;
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i412 := $eq.i32($i411, 5);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb425, $bb426;

  $bb426:
    assume !($i412 == 1);
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb425:
    assume $i412 == 1;
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} $i413 := ldv_freeze_noirq_2();
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $M.41 := $i413;
    call {:si_unique_call 2370} {:cexpr "ldv_retval_11"} boogie_si_record_i32($i413);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $i414 := $M.41;
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i415 := $eq.i32($i414, 0);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb427, $bb428;

  $bb428:
    assume !($i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb427:
    assume $i415 == 1;
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $M.25 := 10;
    call {:si_unique_call 2371} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(10);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb336:
    assume $i339 == 1;
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $i406 := $M.25;
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i407 := $eq.i32($i406, 7);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb419, $bb420;

  $bb420:
    assume !($i407 == 1);
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb419:
    assume $i407 == 1;
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2366} $i408 := ldv_resume_noirq_2();
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $M.40 := $i408;
    call {:si_unique_call 2367} {:cexpr "ldv_retval_12"} boogie_si_record_i32($i408);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $i409 := $M.40;
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i410 := $eq.i32($i409, 0);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb421, $bb422;

  $bb422:
    assume !($i410 == 1);
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb421:
    assume $i410 == 1;
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $M.25 := 12;
    call {:si_unique_call 2368} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(12);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb315:
    assume $i329 == 1;
    assume {:verifier.code 0} true;
    $i340 := $slt.i32($i328, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  $bb339:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    $i341 := $slt.i32($i328, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  $bb341:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    $i342 := $slt.i32($i328, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb342, $bb343;

  $bb343:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    $i343 := $slt.i32($i328, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  $bb345:
    assume !($i343 == 1);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i401 := $M.25;
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i402 := $eq.i32($i401, 11);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb413, $bb414;

  $bb414:
    assume !($i402 == 1);
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb413:
    assume $i402 == 1;
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2363} $i403 := ldv_thaw_early_2();
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $M.39 := $i403;
    call {:si_unique_call 2364} {:cexpr "ldv_retval_13"} boogie_si_record_i32($i403);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i404 := $M.39;
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i405 := $eq.i32($i404, 0);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb415, $bb416;

  $bb416:
    assume !($i405 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb415:
    assume $i405 == 1;
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $M.25 := 14;
    call {:si_unique_call 2365} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(14);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb344:
    assume $i343 == 1;
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $i396 := $M.25;
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $i397 := $eq.i32($i396, 6);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb407, $bb408;

  $bb408:
    assume !($i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb407:
    assume $i397 == 1;
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2360} $i398 := ldv_resume_early_2();
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $M.38 := $i398;
    call {:si_unique_call 2361} {:cexpr "ldv_retval_14"} boogie_si_record_i32($i398);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $i399 := $M.38;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i400 := $eq.i32($i399, 0);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb409, $bb410;

  $bb410:
    assume !($i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb409:
    assume $i400 == 1;
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $M.25 := 12;
    call {:si_unique_call 2362} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(12);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb342:
    assume $i342 == 1;
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $i391 := $M.25;
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i392 := $eq.i32($i391, 9);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb401, $bb402;

  $bb402:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb401:
    assume $i392 == 1;
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2357} $i393 := ldv_restore_early_2();
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $M.37 := $i393;
    call {:si_unique_call 2358} {:cexpr "ldv_retval_15"} boogie_si_record_i32($i393);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i394 := $M.37;
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $i395 := $eq.i32($i394, 0);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb403, $bb404;

  $bb404:
    assume !($i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb403:
    assume $i395 == 1;
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $M.25 := 13;
    call {:si_unique_call 2359} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(13);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb340:
    assume $i341 == 1;
    assume {:verifier.code 0} true;
    $i344 := $slt.i32($i328, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  $bb347:
    assume !($i344 == 1);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $i386 := $M.25;
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $i387 := $eq.i32($i386, 3);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb395, $bb396;

  $bb396:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb395:
    assume $i387 == 1;
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2354} $i388 := ldv_suspend_late_2();
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $M.36 := $i388;
    call {:si_unique_call 2355} {:cexpr "ldv_retval_16"} boogie_si_record_i32($i388);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $i389 := $M.36;
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $i390 := $eq.i32($i389, 0);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb397, $bb398;

  $bb398:
    assume !($i390 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb397:
    assume $i390 == 1;
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $M.25 := 6;
    call {:si_unique_call 2356} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(6);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb346:
    assume $i344 == 1;
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $i380 := $M.25;
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i381 := $eq.i32($i380, 13);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  $bb390:
    assume !($i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb389:
    assume $i381 == 1;
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $p382 := $M.20;
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2351} $i383 := jme_resume($p382);
    goto SeqInstr_1027, SeqInstr_1028;

  SeqInstr_1028:
    assume assertsPassed;
    goto SeqInstr_1029;

  SeqInstr_1029:
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $M.35 := $i383;
    call {:si_unique_call 2352} {:cexpr "ldv_retval_17"} boogie_si_record_i32($i383);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i384 := $M.35;
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $i385 := $eq.i32($i384, 0);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  $bb392:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb391:
    assume $i385 == 1;
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $M.25 := 15;
    call {:si_unique_call 2353} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(15);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    goto $bb393;

  SeqInstr_1027:
    assume !assertsPassed;
    return;

  $bb338:
    assume $i340 == 1;
    assume {:verifier.code 0} true;
    $i345 := $slt.i32($i328, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  $bb349:
    assume !($i345 == 1);
    assume {:verifier.code 0} true;
    $i346 := $slt.i32($i328, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  $bb351:
    assume !($i346 == 1);
    assume {:verifier.code 0} true;
    $i347 := $slt.i32($i328, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  $bb353:
    assume !($i347 == 1);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i374 := $M.25;
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i375 := $eq.i32($i374, 12);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb383, $bb384;

  $bb384:
    assume !($i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb383:
    assume $i375 == 1;
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $p376 := $M.20;
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2348} $i377 := jme_resume($p376);
    goto SeqInstr_1024, SeqInstr_1025;

  SeqInstr_1025:
    assume assertsPassed;
    goto SeqInstr_1026;

  SeqInstr_1026:
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $M.34 := $i377;
    call {:si_unique_call 2349} {:cexpr "ldv_retval_18"} boogie_si_record_i32($i377);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i378 := $M.34;
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $i379 := $eq.i32($i378, 0);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb385, $bb386;

  $bb386:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb385:
    assume $i379 == 1;
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $M.25 := 15;
    call {:si_unique_call 2350} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(15);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    goto $bb387;

  SeqInstr_1024:
    assume !assertsPassed;
    return;

  $bb352:
    assume $i347 == 1;
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $i368 := $M.25;
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i369 := $eq.i32($i368, 2);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  $bb378:
    assume !($i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb377:
    assume $i369 == 1;
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p370 := $M.20;
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} $i371 := jme_suspend($p370);
    goto SeqInstr_1021, SeqInstr_1022;

  SeqInstr_1022:
    assume assertsPassed;
    goto SeqInstr_1023;

  SeqInstr_1023:
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $M.33 := $i371;
    call {:si_unique_call 2346} {:cexpr "ldv_retval_19"} boogie_si_record_i32($i371);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i372 := $M.33;
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i373 := $eq.i32($i372, 0);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  $bb380:
    assume !($i373 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb379:
    assume $i373 == 1;
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $M.25 := 5;
    call {:si_unique_call 2347} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    goto $bb381;

  SeqInstr_1021:
    assume !assertsPassed;
    return;

  $bb350:
    assume $i346 == 1;
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i362 := $M.25;
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $i363 := $eq.i32($i362, 2);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  $bb372:
    assume !($i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb371:
    assume $i363 == 1;
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $p364 := $M.20;
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} $i365 := jme_suspend($p364);
    goto SeqInstr_1018, SeqInstr_1019;

  SeqInstr_1019:
    assume assertsPassed;
    goto SeqInstr_1020;

  SeqInstr_1020:
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $M.32 := $i365;
    call {:si_unique_call 2343} {:cexpr "ldv_retval_20"} boogie_si_record_i32($i365);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $i366 := $M.32;
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $i367 := $eq.i32($i366, 0);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  $bb374:
    assume !($i367 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb373:
    assume $i367 == 1;
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $M.25 := 4;
    call {:si_unique_call 2344} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    goto $bb375;

  SeqInstr_1018:
    assume !assertsPassed;
    return;

  $bb348:
    assume $i345 == 1;
    assume {:verifier.code 0} true;
    $i348 := $slt.i32($i328, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb354, $bb355;

  $bb355:
    assume !($i348 == 1);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $i356 := $M.25;
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $i357 := $eq.i32($i356, 2);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  $bb366:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb365:
    assume $i357 == 1;
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $p358 := $M.20;
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} $i359 := jme_suspend($p358);
    goto SeqInstr_1015, SeqInstr_1016;

  SeqInstr_1016:
    assume assertsPassed;
    goto SeqInstr_1017;

  SeqInstr_1017:
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $M.31 := $i359;
    call {:si_unique_call 2340} {:cexpr "ldv_retval_21"} boogie_si_record_i32($i359);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $i360 := $M.31;
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $i361 := $eq.i32($i360, 0);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  $bb368:
    assume !($i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb367:
    assume $i361 == 1;
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $M.25 := 3;
    call {:si_unique_call 2341} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    goto $bb369;

  SeqInstr_1015:
    assume !assertsPassed;
    return;

  $bb354:
    assume $i348 == 1;
    assume {:verifier.code 0} true;
    $i349 := $eq.i32($i328, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    assume !($i349 == 1);
    goto $bb327;

  $bb356:
    assume $i349 == 1;
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $i350 := $M.25;
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i351 := $eq.i32($i350, 14);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  $bb359:
    assume !($i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb358:
    assume $i351 == 1;
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $p352 := $M.20;
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2336} $i353 := jme_resume($p352);
    goto SeqInstr_1012, SeqInstr_1013;

  SeqInstr_1013:
    assume assertsPassed;
    goto SeqInstr_1014;

  SeqInstr_1014:
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $M.30 := $i353;
    call {:si_unique_call 2337} {:cexpr "ldv_retval_22"} boogie_si_record_i32($i353);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i354 := $M.30;
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i355 := $eq.i32($i354, 0);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb360, $bb361;

  $bb361:
    assume !($i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb360:
    assume $i355 == 1;
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $M.25 := 15;
    call {:si_unique_call 2338} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(15);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    goto $bb362;

  SeqInstr_1012:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i34 == 1;
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i176 := $M.8;
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb175:
    assume $i177 == 1;
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2263} $i178 := __VERIFIER_nondet_int();
    call {:si_unique_call 2264} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i178);
    call {:si_unique_call 2265} {:cexpr "tmp___13"} boogie_si_record_i32($i178);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $i179 := $slt.i32($i178, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    $i180 := $slt.i32($i178, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    $i181 := $slt.i32($i178, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    $i182 := $slt.i32($i178, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i178, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    assume !($i183 == 1);
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} ldv_stop();
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb186:
    assume $i183 == 1;
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $i319 := $M.8;
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $i320 := $eq.i32($i319, 1);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb303, $bb304;

  $bb304:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb303:
    assume $i320 == 1;
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2328} $i321 := ldv_ndo_init_3();
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $M.29 := $i321;
    call {:si_unique_call 2329} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i321);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i322 := $M.29;
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $i323 := $eq.i32($i322, 0);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb305:
    assume $i323 == 1;
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 2330} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $i324 := $M.23;
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $i325 := $add.i32($i324, 1);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $M.23 := $i325;
    call {:si_unique_call 2331} {:cexpr "ref_cnt"} boogie_si_record_i32($i325);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb184:
    assume $i182 == 1;
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $i314 := $M.8;
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $i315 := $eq.i32($i314, 2);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb300, $bb301;

  $bb301:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb300:
    assume $i315 == 1;
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2325} vslice_dummy_var_101 := ldv_ndo_uninit_3();
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 2326} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i317 := $M.23;
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i318 := $sub.i32($i317, 1);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $M.23 := $i318;
    call {:si_unique_call 2327} {:cexpr "ref_cnt"} boogie_si_record_i32($i318);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb182:
    assume $i181 == 1;
    assume {:verifier.code 0} true;
    $i184 := $slt.i32($i178, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i184 == 1);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i305 := $M.8;
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i305, 1);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  $bb292:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    $i308 := $M.8;
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i308, 3);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  $bb295:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    $i311 := $M.8;
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $i312 := $eq.i32($i311, 2);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  $bb298:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb297:
    assume $i312 == 1;
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $p313 := $M.9;
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2323} jme_tx_timeout($p313);
    goto SeqInstr_1009, SeqInstr_1010;

  SeqInstr_1010:
    assume assertsPassed;
    goto SeqInstr_1011;

  SeqInstr_1011:
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 2324} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    goto $bb299;

  SeqInstr_1009:
    assume !assertsPassed;
    return;

  $bb294:
    assume $i309 == 1;
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $p310 := $M.9;
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} jme_tx_timeout($p310);
    goto SeqInstr_1006, SeqInstr_1007;

  SeqInstr_1007:
    assume assertsPassed;
    goto SeqInstr_1008;

  SeqInstr_1008:
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 2322} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    goto $bb296;

  SeqInstr_1006:
    assume !assertsPassed;
    return;

  $bb291:
    assume $i306 == 1;
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $p307 := $M.9;
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2319} jme_tx_timeout($p307);
    goto SeqInstr_1003, SeqInstr_1004;

  SeqInstr_1004:
    assume assertsPassed;
    goto SeqInstr_1005;

  SeqInstr_1005:
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 2320} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    goto $bb293;

  SeqInstr_1003:
    assume !assertsPassed;
    return;

  $bb189:
    assume $i184 == 1;
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $i293 := $M.8;
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i293, 1);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  $bb283:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    $i297 := $M.8;
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i298 := $eq.i32($i297, 3);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    $i301 := $M.8;
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i301, 2);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb288:
    assume $i302 == 1;
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $p303 := $M.9;
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} vslice_dummy_var_100 := jme_set_macaddr($p303, $p16);
    goto SeqInstr_1000, SeqInstr_1001;

  SeqInstr_1001:
    assume assertsPassed;
    goto SeqInstr_1002;

  SeqInstr_1002:
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 2318} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    goto $bb290;

  SeqInstr_1000:
    assume !assertsPassed;
    return;

  $bb285:
    assume $i298 == 1;
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $p299 := $M.9;
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2315} vslice_dummy_var_99 := jme_set_macaddr($p299, $p16);
    goto SeqInstr_997, SeqInstr_998;

  SeqInstr_998:
    assume assertsPassed;
    goto SeqInstr_999;

  SeqInstr_999:
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 2316} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    goto $bb287;

  SeqInstr_997:
    assume !assertsPassed;
    return;

  $bb282:
    assume $i294 == 1;
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $p295 := $M.9;
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2313} vslice_dummy_var_98 := jme_set_macaddr($p295, $p16);
    goto SeqInstr_994, SeqInstr_995;

  SeqInstr_995:
    assume assertsPassed;
    goto SeqInstr_996;

  SeqInstr_996:
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 2314} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    goto $bb284;

  SeqInstr_994:
    assume !assertsPassed;
    return;

  $bb180:
    assume $i180 == 1;
    assume {:verifier.code 0} true;
    $i185 := $slt.i32($i178, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    $i186 := $slt.i32($i178, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i186 == 1);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i283 := $M.8;
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $i284 := $eq.i32($i283, 3);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  $bb277:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    $i288 := $M.8;
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i289 := $eq.i32($i288, 2);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb279:
    assume $i289 == 1;
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $p290 := $M.9;
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $i291 := $load.i32($M.12, $p1);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2311} vslice_dummy_var_97 := jme_change_mtu($p290, $i291);
    goto SeqInstr_991, SeqInstr_992;

  SeqInstr_992:
    assume assertsPassed;
    goto SeqInstr_993;

  SeqInstr_993:
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 2312} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    goto $bb281;

  SeqInstr_991:
    assume !assertsPassed;
    return;

  $bb276:
    assume $i284 == 1;
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $p285 := $M.9;
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i286 := $load.i32($M.12, $p1);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2309} vslice_dummy_var_96 := jme_change_mtu($p285, $i286);
    goto SeqInstr_988, SeqInstr_989;

  SeqInstr_989:
    assume assertsPassed;
    goto SeqInstr_990;

  SeqInstr_990:
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 2310} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    goto $bb278;

  SeqInstr_988:
    assume !assertsPassed;
    return;

  $bb193:
    assume $i186 == 1;
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i268 := $M.8;
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i268, 1);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    $i273 := $M.8;
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i274 := $eq.i32($i273, 3);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    $i278 := $M.8;
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i279 := $eq.i32($i278, 2);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  $bb274:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb273:
    assume $i279 == 1;
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $p280 := $M.9;
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i281 := $load.i32($M.12, $p4);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2307} vslice_dummy_var_95 := jme_set_features($p280, $i281);
    goto SeqInstr_985, SeqInstr_986;

  SeqInstr_986:
    assume assertsPassed;
    goto SeqInstr_987;

  SeqInstr_987:
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 2308} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    goto $bb275;

  SeqInstr_985:
    assume !assertsPassed;
    return;

  $bb270:
    assume $i274 == 1;
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $p275 := $M.9;
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i276 := $load.i32($M.12, $p4);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2305} vslice_dummy_var_94 := jme_set_features($p275, $i276);
    goto SeqInstr_982, SeqInstr_983;

  SeqInstr_983:
    assume assertsPassed;
    goto SeqInstr_984;

  SeqInstr_984:
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 2306} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    goto $bb272;

  SeqInstr_982:
    assume !assertsPassed;
    return;

  $bb267:
    assume $i269 == 1;
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $p270 := $M.9;
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $i271 := $load.i32($M.12, $p4);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2303} vslice_dummy_var_93 := jme_set_features($p270, $i271);
    goto SeqInstr_979, SeqInstr_980;

  SeqInstr_980:
    assume assertsPassed;
    goto SeqInstr_981;

  SeqInstr_981:
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 2304} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    goto $bb269;

  SeqInstr_979:
    assume !assertsPassed;
    return;

  $bb191:
    assume $i185 == 1;
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i256 := $M.8;
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i256, 1);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $i260 := $M.8;
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i260, 3);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $i264 := $M.8;
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i265 := $eq.i32($i264, 2);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb264:
    assume $i265 == 1;
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $p266 := $M.9;
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2301} vslice_dummy_var_92 := eth_validate_addr($p266);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 2302} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb261:
    assume $i261 == 1;
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $p262 := $M.9;
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2299} vslice_dummy_var_91 := eth_validate_addr($p262);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 2300} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb258:
    assume $i257 == 1;
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $p258 := $M.9;
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2297} vslice_dummy_var_90 := eth_validate_addr($p258);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 2298} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb178:
    assume $i179 == 1;
    assume {:verifier.code 0} true;
    $i187 := $slt.i32($i178, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    $i188 := $slt.i32($i178, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    $i189 := $slt.i32($i178, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i189 == 1);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i252 := $M.8;
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i252, 3);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb255:
    assume $i253 == 1;
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $p254 := $M.9;
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2295} vslice_dummy_var_89 := jme_close($p254);
    goto SeqInstr_976, SeqInstr_977;

  SeqInstr_977:
    assume assertsPassed;
    goto SeqInstr_978;

  SeqInstr_978:
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 2296} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    goto $bb257;

  SeqInstr_976:
    assume !assertsPassed;
    return;

  $bb199:
    assume $i189 == 1;
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i237 := $M.8;
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 1);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    $i242 := $M.8;
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i242, 3);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $i247 := $M.8;
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $i248 := $eq.i32($i247, 2);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb252:
    assume $i248 == 1;
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $p249 := $M.9;
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i250 := $load.i32($M.12, $p3);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2293} vslice_dummy_var_88 := jme_fix_features($p249, $i250);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 2294} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb249:
    assume $i243 == 1;
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $p244 := $M.9;
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i245 := $load.i32($M.12, $p3);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2291} vslice_dummy_var_87 := jme_fix_features($p244, $i245);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 2292} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb246:
    assume $i238 == 1;
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $p239 := $M.9;
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $i240 := $load.i32($M.12, $p3);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2289} vslice_dummy_var_86 := jme_fix_features($p239, $i240);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 2290} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb197:
    assume $i188 == 1;
    assume {:verifier.code 0} true;
    $i190 := $slt.i32($i178, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i190 == 1);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i233 := $M.8;
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i233, 3);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb243:
    assume $i234 == 1;
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $p235 := $M.9;
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2287} vslice_dummy_var_85 := jme_start_xmit($p15, $p235);
    goto SeqInstr_973, SeqInstr_974;

  SeqInstr_974:
    assume assertsPassed;
    goto SeqInstr_975;

  SeqInstr_975:
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 2288} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    goto $bb245;

  SeqInstr_973:
    assume !assertsPassed;
    return;

  $bb201:
    assume $i190 == 1;
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $i224 := $M.8;
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i224, 1);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $i227 := $M.8;
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 3);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $i230 := $M.8;
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i230, 2);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb240:
    assume $i231 == 1;
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $p232 := $M.9;
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2285} jme_vlan_rx_register($p232, $p18);
    goto SeqInstr_970, SeqInstr_971;

  SeqInstr_971:
    assume assertsPassed;
    goto SeqInstr_972;

  SeqInstr_972:
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 2286} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    goto $bb242;

  SeqInstr_970:
    assume !assertsPassed;
    return;

  $bb237:
    assume $i228 == 1;
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $p229 := $M.9;
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2283} jme_vlan_rx_register($p229, $p18);
    goto SeqInstr_967, SeqInstr_968;

  SeqInstr_968:
    assume assertsPassed;
    goto SeqInstr_969;

  SeqInstr_969:
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 2284} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    goto $bb239;

  SeqInstr_967:
    assume !assertsPassed;
    return;

  $bb234:
    assume $i225 == 1;
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $p226 := $M.9;
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2281} jme_vlan_rx_register($p226, $p18);
    goto SeqInstr_964, SeqInstr_965;

  SeqInstr_965:
    assume assertsPassed;
    goto SeqInstr_966;

  SeqInstr_966:
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 2282} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    goto $bb236;

  SeqInstr_964:
    assume !assertsPassed;
    return;

  $bb195:
    assume $i187 == 1;
    assume {:verifier.code 0} true;
    $i191 := $slt.i32($i178, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    $i192 := $slt.i32($i178, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i192 == 1);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $i218 := $M.8;
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 2);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb228:
    assume $i219 == 1;
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $p220 := $M.9;
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} $i221 := jme_open($p220);
    goto SeqInstr_961, SeqInstr_962;

  SeqInstr_962:
    assume assertsPassed;
    goto SeqInstr_963;

  SeqInstr_963:
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $M.28 := $i221;
    call {:si_unique_call 2279} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i221);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $i222 := $M.28;
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 0);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb230:
    assume $i223 == 1;
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 2280} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    goto $bb232;

  SeqInstr_961:
    assume !assertsPassed;
    return;

  $bb205:
    assume $i192 == 1;
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i209 := $M.8;
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, 1);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $i212 := $M.8;
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 3);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $i215 := $M.8;
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 2);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb225:
    assume $i216 == 1;
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $p217 := $M.9;
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} jme_set_multi($p217);
    goto SeqInstr_958, SeqInstr_959;

  SeqInstr_959:
    assume assertsPassed;
    goto SeqInstr_960;

  SeqInstr_960:
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 2277} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    goto $bb227;

  SeqInstr_958:
    assume !assertsPassed;
    return;

  $bb222:
    assume $i213 == 1;
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $p214 := $M.9;
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} jme_set_multi($p214);
    goto SeqInstr_955, SeqInstr_956;

  SeqInstr_956:
    assume assertsPassed;
    goto SeqInstr_957;

  SeqInstr_957:
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 2275} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    goto $bb224;

  SeqInstr_955:
    assume !assertsPassed;
    return;

  $bb219:
    assume $i210 == 1;
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $p211 := $M.9;
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} jme_set_multi($p211);
    goto SeqInstr_952, SeqInstr_953;

  SeqInstr_953:
    assume assertsPassed;
    goto SeqInstr_954;

  SeqInstr_954:
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 2273} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    goto $bb221;

  SeqInstr_952:
    assume !assertsPassed;
    return;

  $bb203:
    assume $i191 == 1;
    assume {:verifier.code 0} true;
    $i193 := $eq.i32($i178, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    assume !($i193 == 1);
    goto $bb188;

  $bb207:
    assume $i193 == 1;
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $i194 := $M.8;
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 1);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $i199 := $M.8;
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 3);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $i204 := $M.8;
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i204, 2);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb215:
    assume $i205 == 1;
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $p206 := $M.9;
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i207 := $load.i32($M.12, $p2);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} vslice_dummy_var_84 := jme_ioctl($p206, $p20, $i207);
    goto SeqInstr_949, SeqInstr_950;

  SeqInstr_950:
    assume assertsPassed;
    goto SeqInstr_951;

  SeqInstr_951:
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 2271} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    goto $bb217;

  SeqInstr_949:
    assume !assertsPassed;
    return;

  $bb212:
    assume $i200 == 1;
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $p201 := $M.9;
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i202 := $load.i32($M.12, $p2);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2268} vslice_dummy_var_83 := jme_ioctl($p201, $p20, $i202);
    goto SeqInstr_946, SeqInstr_947;

  SeqInstr_947:
    assume assertsPassed;
    goto SeqInstr_948;

  SeqInstr_948:
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 2269} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    goto $bb214;

  SeqInstr_946:
    assume !assertsPassed;
    return;

  $bb209:
    assume $i195 == 1;
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $p196 := $M.9;
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.12, $p2);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} vslice_dummy_var_82 := jme_ioctl($p196, $p20, $i197);
    goto SeqInstr_943, SeqInstr_944;

  SeqInstr_944:
    assume assertsPassed;
    goto SeqInstr_945;

  SeqInstr_945:
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 2267} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    goto $bb211;

  SeqInstr_943:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i33 == 1;
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i159 := $M.24;
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i159, 0);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb145:
    assume $i160 == 1;
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2248} $i161 := __VERIFIER_nondet_int();
    call {:si_unique_call 2249} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i161);
    call {:si_unique_call 2250} {:cexpr "tmp___12"} boogie_si_record_i32($i161);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $i162 := $slt.i32($i161, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i161, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    assume !($i163 == 1);
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} ldv_stop();
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb150:
    assume $i163 == 1;
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i169 := $M.24;
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, 1);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb163:
    assume $i170 == 1;
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} $i171 := jme_init_module();
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $M.27 := $i171;
    call {:si_unique_call 2255} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i171);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $i172 := $M.27;
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 0);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $i174 := $M.27;
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i175 := $ne.i32($i174, 0);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb168:
    assume $i175 == 1;
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $M.24 := 2;
    call {:si_unique_call 2261} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2253} ldv_check_final_state();
    goto SeqInstr_940, SeqInstr_941;

  SeqInstr_941:
    assume assertsPassed;
    goto SeqInstr_942;

  SeqInstr_942:
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_940:
    assume !assertsPassed;
    return;

  $bb165:
    assume $i173 == 1;
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $M.24 := 3;
    call {:si_unique_call 2256} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 2257} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2258} ldv_dev_pm_ops_2();
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2259} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} ldv_initialize_ethtool_ops_4();
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb148:
    assume $i162 == 1;
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i161, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    assume !($i164 == 1);
    goto $bb152;

  $bb153:
    assume $i164 == 1;
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i165 := $M.24;
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 3);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    assume !($i166 == 1);
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb155:
    assume $i166 == 1;
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i167 := $M.23;
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 0);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    assume !($i168 == 1);
    goto $bb157;

  $bb158:
    assume $i168 == 1;
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2251} jme_cleanup_module();
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $M.24 := 2;
    call {:si_unique_call 2252} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb3:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i31, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i36 == 1);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i138 := $M.22;
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb117:
    assume $i139 == 1;
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2236} $i140 := __VERIFIER_nondet_int();
    call {:si_unique_call 2237} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i140);
    call {:si_unique_call 2238} {:cexpr "tmp___11"} boogie_si_record_i32($i140);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i141 := $slt.i32($i140, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    $i142 := $slt.i32($i140, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i140, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    assume !($i143 == 1);
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2247} ldv_stop();
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb124:
    assume $i143 == 1;
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $i156 := $M.22;
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 2);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb139:
    assume $i157 == 1;
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $p158 := $M.13;
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2245} jme_remove_one($p158);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 2246} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb122:
    assume $i142 == 1;
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i153 := $M.22;
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 2);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb136:
    assume $i154 == 1;
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $p155 := $M.13;
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} jme_shutdown($p155);
    goto SeqInstr_937, SeqInstr_938;

  SeqInstr_938:
    assume assertsPassed;
    goto SeqInstr_939;

  SeqInstr_939:
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 2244} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    goto $bb138;

  SeqInstr_937:
    assume !assertsPassed;
    return;

  $bb120:
    assume $i141 == 1;
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i140, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    assume !($i144 == 1);
    goto $bb126;

  $bb127:
    assume $i144 == 1;
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $i145 := $M.22;
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 1);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb129:
    assume $i146 == 1;
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $p147 := $M.13;
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2239} $i148 := jme_init_one($p147, $p13);
    goto SeqInstr_934, SeqInstr_935;

  SeqInstr_935:
    assume assertsPassed;
    goto SeqInstr_936;

  SeqInstr_936:
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $M.26 := $i148;
    call {:si_unique_call 2240} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i148);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i149 := $M.26;
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 0);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb131:
    assume $i150 == 1;
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 2241} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i151 := $M.23;
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i152 := $add.i32($i151, 1);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $M.23 := $i152;
    call {:si_unique_call 2242} {:cexpr "ref_cnt"} boogie_si_record_i32($i152);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    goto $bb133;

  SeqInstr_934:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i31, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb11;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i38 := $M.21;
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb16:
    assume $i39 == 1;
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2196} $i40 := __VERIFIER_nondet_int();
    call {:si_unique_call 2197} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i40);
    call {:si_unique_call 2198} {:cexpr "tmp___10"} boogie_si_record_i32($i40);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i40, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i40, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i40, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i40, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i40, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} ldv_stop();
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb29:
    assume $i46 == 1;
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i134 := $M.21;
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 1);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb110:
    assume $i135 == 1;
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $p136 := $M.15;
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} vslice_dummy_var_81 := jme_get_link($p136);
    goto SeqInstr_931, SeqInstr_932;

  SeqInstr_932:
    assume assertsPassed;
    goto SeqInstr_933;

  SeqInstr_933:
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2234} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    goto $bb112;

  SeqInstr_931:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i45 == 1;
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i130 := $M.21;
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i130, 1);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb107:
    assume $i131 == 1;
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $p132 := $M.15;
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2231} vslice_dummy_var_80 := jme_get_regs_len($p132);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2232} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb25:
    assume $i44 == 1;
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i126 := $M.21;
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 1);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb104:
    assume $i127 == 1;
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $p128 := $M.15;
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2229} vslice_dummy_var_79 := jme_get_msglevel($p128);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2230} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb23:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i40, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i47 == 1);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i121 := $M.21;
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 1);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb101:
    assume $i122 == 1;
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $p123 := $M.15;
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $p124 := $M.16;
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2227} vslice_dummy_var_78 := jme_set_eeprom($p123, $p124, $p9);
    goto SeqInstr_928, SeqInstr_929;

  SeqInstr_929:
    assume assertsPassed;
    goto SeqInstr_930;

  SeqInstr_930:
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2228} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    goto $bb103;

  SeqInstr_928:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i47 == 1;
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $i117 := $M.21;
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 1);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb98:
    assume $i118 == 1;
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $p119 := $M.15;
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $p120 := $M.18;
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2225} jme_get_wol($p119, $p120);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2226} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb21:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i40, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i40, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i49 == 1);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i113 := $M.21;
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 1);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb95:
    assume $i114 == 1;
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $p115 := $M.15;
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2223} vslice_dummy_var_77 := jme_nway_reset($p115);
    goto SeqInstr_925, SeqInstr_926;

  SeqInstr_926:
    assume assertsPassed;
    goto SeqInstr_927;

  SeqInstr_927:
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2224} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    goto $bb97;

  SeqInstr_925:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i49 == 1;
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i108 := $M.21;
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 1);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb92:
    assume $i109 == 1;
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $p110 := $M.15;
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $p111 := $M.16;
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2221} vslice_dummy_var_76 := jme_get_eeprom($p110, $p111, $p5);
    goto SeqInstr_922, SeqInstr_923;

  SeqInstr_923:
    assume assertsPassed;
    goto SeqInstr_924;

  SeqInstr_924:
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2222} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    goto $bb94;

  SeqInstr_922:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i40, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i50 == 1);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i103 := $M.21;
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 1);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb89:
    assume $i104 == 1;
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $p105 := $M.15;
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $p106 := $M.17;
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2219} vslice_dummy_var_75 := jme_set_settings($p105, $p106);
    goto SeqInstr_919, SeqInstr_920;

  SeqInstr_920:
    assume assertsPassed;
    goto SeqInstr_921;

  SeqInstr_921:
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2220} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    goto $bb91;

  SeqInstr_919:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i50 == 1;
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i99 := $M.21;
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 1);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb86:
    assume $i100 == 1;
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p101 := $M.15;
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2217} vslice_dummy_var_74 := jme_get_eeprom_len($p101);
    goto SeqInstr_916, SeqInstr_917;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  SeqInstr_918:
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2218} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    goto $bb88;

  SeqInstr_916:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i40, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i40, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i40, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i40, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i54 == 1);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $i95 := $M.21;
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 1);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb83:
    assume $i96 == 1;
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $p97 := $M.15;
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.12, $p0);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} jme_set_msglevel($p97, $i98);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2216} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb46:
    assume $i54 == 1;
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $i90 := $M.21;
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 1);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb80:
    assume $i91 == 1;
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p92 := $M.15;
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $p93 := $M.18;
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2213} vslice_dummy_var_73 := jme_set_wol($p92, $p93);
    goto SeqInstr_913, SeqInstr_914;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  SeqInstr_915:
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2214} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    goto $bb82;

  SeqInstr_913:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i53 == 1;
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i85 := $M.21;
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 1);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb77:
    assume $i86 == 1;
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $p87 := $M.15;
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $p88 := $M.14;
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2211} vslice_dummy_var_72 := jme_set_coalesce($p87, $p88);
    goto SeqInstr_910, SeqInstr_911;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  SeqInstr_912:
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2212} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    goto $bb79;

  SeqInstr_910:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i40, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i55 == 1);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $i80 := $M.21;
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 1);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb74:
    assume $i81 == 1;
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $p82 := $M.15;
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $p83 := $M.17;
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2209} vslice_dummy_var_71 := jme_get_settings($p82, $p83);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2210} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb48:
    assume $i55 == 1;
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i76 := $M.21;
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 1);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb71:
    assume $i77 == 1;
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $p78 := $M.15;
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $p79 := $M.19;
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2207} jme_get_pauseparam($p78, $p79);
    goto SeqInstr_907, SeqInstr_908;

  SeqInstr_908:
    assume assertsPassed;
    goto SeqInstr_909;

  SeqInstr_909:
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2208} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    goto $bb73;

  SeqInstr_907:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i40, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i40, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i57 == 1);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i73 := $M.21;
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 1);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb68:
    assume $i74 == 1;
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $p75 := $M.15;
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2205} jme_get_regs($p75, $p7, $p8);
    goto SeqInstr_904, SeqInstr_905;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  SeqInstr_906:
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2206} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    goto $bb70;

  SeqInstr_904:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i57 == 1;
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $i68 := $M.21;
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 1);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb65:
    assume $i69 == 1;
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $p70 := $M.15;
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $p71 := $M.14;
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2203} vslice_dummy_var_70 := jme_get_coalesce($p70, $p71);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2204} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb50:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i40, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i58 == 1);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $i63 := $M.21;
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 1);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb62:
    assume $i64 == 1;
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $p65 := $M.15;
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $p66 := $M.19;
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2201} vslice_dummy_var_69 := jme_set_pauseparam($p65, $p66);
    goto SeqInstr_901, SeqInstr_902;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  SeqInstr_903:
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2202} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    goto $bb64;

  SeqInstr_901:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i40, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb31;

  $bb56:
    assume $i59 == 1;
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i60 := $M.21;
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 1);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb58:
    assume $i61 == 1;
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $p62 := $M.15;
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2199} jme_get_drvinfo($p62, $p11);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2200} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb116_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2193} $i31 := __VERIFIER_nondet_int();
    call {:si_unique_call 2194} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i31);
    call {:si_unique_call 2195} {:cexpr "tmp___9"} boogie_si_record_i32($i31);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 456618);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.49, $M.4;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $M.49 := 0;
    call {:si_unique_call 2399} {:cexpr "LDV_PCI_DMA_BUFS"} boogie_si_record_i32(0);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $M.4 := 0;
    call {:si_unique_call 2400} {:cexpr "LDV_PCI_DMA_PAGE_BUFS"} boogie_si_record_i32(0);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 457650);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const jme_cleanup_module: ref;

axiom jme_cleanup_module == $sub.ref(0, 458682);

procedure jme_cleanup_module();
  free requires assertsPassed;
  modifies $M.22;



implementation jme_cleanup_module()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2401} ldv_pci_unregister_driver_10(jme_driver);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    return;
}



const jme_init_module: ref;

axiom jme_init_module == $sub.ref(0, 459714);

procedure jme_init_module() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.13, $M.0, $CurrAddr;



implementation jme_init_module() returns ($r: i32)
{
  var $i1: i32;
  var vslice_dummy_var_103: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2402} vslice_dummy_var_103 := printk.ref.ref(.str.56, .str.1);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2403} $i1 := ldv___pci_register_driver_9(jme_driver, __this_module, .str);
    call {:si_unique_call 2404} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ndo_uninit_3: ref;

axiom ldv_ndo_uninit_3 == $sub.ref(0, 460746);

procedure ldv_ndo_uninit_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_uninit_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2405} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2406} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_init_3: ref;

axiom ldv_ndo_init_3 == $sub.ref(0, 461778);

procedure ldv_ndo_init_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_init_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2407} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2408} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_suspend_late_2: ref;

axiom ldv_suspend_late_2 == $sub.ref(0, 462810);

procedure ldv_suspend_late_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_late_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2409} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2410} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_restore_early_2: ref;

axiom ldv_restore_early_2 == $sub.ref(0, 463842);

procedure ldv_restore_early_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_restore_early_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2411} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2412} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_early_2: ref;

axiom ldv_resume_early_2 == $sub.ref(0, 464874);

procedure ldv_resume_early_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_early_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2413} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2414} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_thaw_early_2: ref;

axiom ldv_thaw_early_2 == $sub.ref(0, 465906);

procedure ldv_thaw_early_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_thaw_early_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2415} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2416} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_noirq_2: ref;

axiom ldv_resume_noirq_2 == $sub.ref(0, 466938);

procedure ldv_resume_noirq_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_noirq_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2417} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2418} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_freeze_noirq_2: ref;

axiom ldv_freeze_noirq_2 == $sub.ref(0, 467970);

procedure ldv_freeze_noirq_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_freeze_noirq_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2419} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2420} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_prepare_2: ref;

axiom ldv_prepare_2 == $sub.ref(0, 469002);

procedure ldv_prepare_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_prepare_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2421} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2422} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_freeze_late_2: ref;

axiom ldv_freeze_late_2 == $sub.ref(0, 470034);

procedure ldv_freeze_late_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_freeze_late_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2423} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2424} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_thaw_noirq_2: ref;

axiom ldv_thaw_noirq_2 == $sub.ref(0, 471066);

procedure ldv_thaw_noirq_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_thaw_noirq_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2425} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2426} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_poweroff_noirq_2: ref;

axiom ldv_poweroff_noirq_2 == $sub.ref(0, 472098);

procedure ldv_poweroff_noirq_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_poweroff_noirq_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2427} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2428} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_poweroff_late_2: ref;

axiom ldv_poweroff_late_2 == $sub.ref(0, 473130);

procedure ldv_poweroff_late_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_poweroff_late_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2429} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2430} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_restore_noirq_2: ref;

axiom ldv_restore_noirq_2 == $sub.ref(0, 474162);

procedure ldv_restore_noirq_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_restore_noirq_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2431} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2432} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_suspend_noirq_2: ref;

axiom ldv_suspend_noirq_2 == $sub.ref(0, 475194);

procedure ldv_suspend_noirq_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_noirq_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2433} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2434} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_complete_2: ref;

axiom ldv_complete_2 == $sub.ref(0, 476226);

procedure ldv_complete_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_complete_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2435} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2436} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 477258);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $i0 := $M.49;
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.4;
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2438} ldv_error();
    goto SeqInstr_1033, SeqInstr_1034;

  SeqInstr_1034:
    assume assertsPassed;
    goto SeqInstr_1035;

  SeqInstr_1035:
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_1033:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2437} ldv_error();
    goto SeqInstr_1030, SeqInstr_1031;

  SeqInstr_1031:
    assume assertsPassed;
    goto SeqInstr_1032;

  SeqInstr_1032:
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1030:
    assume !assertsPassed;
    return;
}



const ldv___pci_register_driver_9: ref;

axiom ldv___pci_register_driver_9 == $sub.ref(0, 478290);

procedure ldv___pci_register_driver_9($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.13, $M.0, $CurrAddr;



implementation ldv___pci_register_driver_9($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2439} $i3 := __pci_register_driver($p0, $p1, $p2);
    call {:si_unique_call 2440} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 2441} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2442} ldv_pci_driver_1();
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 479322);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2443} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2444} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_pci_unregister_driver_10: ref;

axiom ldv_pci_unregister_driver_10 == $sub.ref(0, 480354);

procedure ldv_pci_unregister_driver_10($p0: ref);
  free requires assertsPassed;
  modifies $M.22;



implementation ldv_pci_unregister_driver_10($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2445} pci_unregister_driver($p0);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $M.22 := 0;
    call {:si_unique_call 2446} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 481386);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 482418);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2447} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 1} true;
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 483450);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 484482);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 485514);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_1036, SeqInstr_1037;

  SeqInstr_1037:
    assume assertsPassed;
    goto SeqInstr_1038;

  SeqInstr_1038:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1036:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 486546);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 487578);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 488610);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 489642);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 490674);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 491706);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 492738);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __VERIFIER_nondet_unsigned_short: ref;

axiom __VERIFIER_nondet_unsigned_short == $sub.ref(0, 493770);

procedure __VERIFIER_nondet_unsigned_short() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_short() returns ($r: i16)
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2448} $i0 := __SMACK_nondet_unsigned_short();
    call {:si_unique_call 2449} {:cexpr "smack:ext:__SMACK_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 2450} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2451} __VERIFIER_assume($i6);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 1} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 65535);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 494802);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 495834);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 496866);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2452} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 2453} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2454} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2455} __VERIFIER_assume($i4);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 497898);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 498930);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 499962);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 500994);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2456} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2457} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2458} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2459} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2460} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 2461} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2462} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2463} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 2464} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2465} __VERIFIER_assume($i7);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2466} __VERIFIER_assume($i11);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 502026);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 503058);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 504090);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 505122);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 506154);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 507186);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2467} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2468} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2469} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2470} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2471} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 2472} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2473} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2474} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 2475} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2476} __VERIFIER_assume($i7);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2477} __VERIFIER_assume($i11);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 508218);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 509250);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 510282);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 511314);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 512346);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 513378);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 514410);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 515442);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_ushort: ref;

axiom __VERIFIER_nondet_ushort == $sub.ref(0, 516474);

procedure __VERIFIER_nondet_ushort() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ushort() returns ($r: i16)
{
  var $i0: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2478} $i0 := __VERIFIER_nondet_unsigned_short();
    call {:si_unique_call 2479} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 2480} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 517506);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2481} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 2482} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2483} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 518538);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2484} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 2485} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2486} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 519570);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2487} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2488} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 520602);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 521634);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2489} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2490} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 522666);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 523698);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 524730);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2491} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 2492} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2493} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2494} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2495} $p6 := malloc($i5);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 2496} cmdloc_dummy_var_17 := $memset.i8(cmdloc_dummy_var_16, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 525762);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 526794);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.9, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.8, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.4, $M.49, $M.0, $M.59, $M.7, $M.6, $M.10;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 2497} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.9 := $0.ref;
    $M.13 := $0.ref;
    $M.14 := $0.ref;
    $M.15 := $0.ref;
    $M.16 := $0.ref;
    $M.17 := $0.ref;
    $M.18 := $0.ref;
    $M.19 := $0.ref;
    $M.20 := $0.ref;
    $M.21 := 0;
    call {:si_unique_call 2498} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.22 := 0;
    call {:si_unique_call 2499} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.23 := 0;
    call {:si_unique_call 2500} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.24 := 0;
    call {:si_unique_call 2501} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.8 := 0;
    call {:si_unique_call 2502} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.25 := 0;
    call {:si_unique_call 2503} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.26 := 0;
    call {:si_unique_call 2504} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.27 := 0;
    call {:si_unique_call 2505} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.28 := 0;
    call {:si_unique_call 2506} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.29 := 0;
    call {:si_unique_call 2507} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.30 := 0;
    call {:si_unique_call 2508} {:cexpr "ldv_retval_22"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 2509} {:cexpr "ldv_retval_21"} boogie_si_record_i32(0);
    $M.32 := 0;
    call {:si_unique_call 2510} {:cexpr "ldv_retval_20"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 2511} {:cexpr "ldv_retval_19"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 2512} {:cexpr "ldv_retval_18"} boogie_si_record_i32(0);
    $M.35 := 0;
    call {:si_unique_call 2513} {:cexpr "ldv_retval_17"} boogie_si_record_i32(0);
    $M.36 := 0;
    call {:si_unique_call 2514} {:cexpr "ldv_retval_16"} boogie_si_record_i32(0);
    $M.37 := 0;
    call {:si_unique_call 2515} {:cexpr "ldv_retval_15"} boogie_si_record_i32(0);
    $M.38 := 0;
    call {:si_unique_call 2516} {:cexpr "ldv_retval_14"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 2517} {:cexpr "ldv_retval_13"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 2518} {:cexpr "ldv_retval_12"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 2519} {:cexpr "ldv_retval_11"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 2520} {:cexpr "ldv_retval_10"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 2521} {:cexpr "ldv_retval_9"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 2522} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 2523} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 2524} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 2525} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 2526} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.4 := 0;
    call {:si_unique_call 2527} {:cexpr "LDV_PCI_DMA_PAGE_BUFS"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 2528} {:cexpr "LDV_PCI_DMA_BUFS"} boogie_si_record_i32(0);
    call {:si_unique_call 2529} {:cexpr "pci_counter"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, jme_pm_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_pm_ops, $mul.ref(0, 136)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_pm_ops, $mul.ref(0, 136)), $mul.ref(16, 1)), jme_suspend);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_pm_ops, $mul.ref(0, 136)), $mul.ref(24, 1)), jme_resume);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_pm_ops, $mul.ref(0, 136)), $mul.ref(32, 1)), jme_suspend);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_pm_ops, $mul.ref(0, 136)), $mul.ref(40, 1)), jme_resume);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_pm_ops, $mul.ref(0, 136)), $mul.ref(48, 1)), jme_suspend);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_pm_ops, $mul.ref(0, 136)), $mul.ref(56, 1)), jme_resume);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_pm_ops, $mul.ref(0, 136)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_pm_ops, $mul.ref(0, 136)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_pm_ops, $mul.ref(0, 136)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_pm_ops, $mul.ref(0, 136)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_pm_ops, $mul.ref(0, 136)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_pm_ops, $mul.ref(0, 136)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_pm_ops, $mul.ref(0, 136)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_pm_ops, $mul.ref(0, 136)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_pm_ops, $mul.ref(0, 136)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.i32($M.0, jme_pci_tbl, 6523);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(jme_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 592);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(jme_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(jme_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(jme_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(jme_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(jme_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(jme_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 6523);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(jme_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 608);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(jme_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(jme_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(jme_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(jme_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(jme_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(jme_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(jme_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(jme_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(jme_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(jme_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(jme_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(jme_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.59 := $store.ref($M.59, jme_driver, $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(16, 1)), .str);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(24, 1)), jme_pci_tbl);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(32, 1)), jme_init_one);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(40, 1)), jme_remove_one);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(48, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(56, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(64, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(72, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(80, 1)), jme_shutdown);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(88, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(0, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(8, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(16, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(24, 1)), $0.ref);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(32, 1)), 0);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(40, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(48, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(56, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(64, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(72, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(80, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(88, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(96, 1)), jme_pm_ops);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(96, 1)), $mul.ref(104, 1)), $0.ref);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref($add.ref(jme_driver, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    call {:si_unique_call 2530} {:cexpr "no_extplug"} boogie_si_record_i32($sub.i32(0, 1));
    $M.7 := $sub.i32(0, 1);
    call {:si_unique_call 2531} {:cexpr "force_pseudohp"} boogie_si_record_i32($sub.i32(0, 1));
    $M.6 := $sub.i32(0, 1);
    call {:si_unique_call 2532} {:cexpr "no_pseudohp"} boogie_si_record_i32($sub.i32(0, 1));
    $M.0 := $store.ref($M.0, jme_ethtool_ops, jme_get_settings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(8, 1)), jme_set_settings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(16, 1)), jme_get_drvinfo);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(24, 1)), jme_get_regs_len);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(32, 1)), jme_get_regs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(40, 1)), jme_get_wol);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(48, 1)), jme_set_wol);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(56, 1)), jme_get_msglevel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(64, 1)), jme_set_msglevel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(72, 1)), jme_nway_reset);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(80, 1)), jme_get_link);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(88, 1)), jme_get_eeprom_len);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(96, 1)), jme_get_eeprom);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(104, 1)), jme_set_eeprom);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(112, 1)), jme_get_coalesce);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(120, 1)), jme_set_coalesce);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(144, 1)), jme_get_pauseparam);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(152, 1)), jme_set_pauseparam);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_ethtool_ops, $mul.ref(0, 432)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, jme_netdev_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(16, 1)), jme_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(24, 1)), jme_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(32, 1)), jme_start_xmit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(64, 1)), jme_set_multi);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(72, 1)), jme_set_macaddr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(80, 1)), eth_validate_addr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(88, 1)), jme_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(104, 1)), jme_change_mtu);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(120, 1)), jme_tx_timeout);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(144, 1)), jme_vlan_rx_register);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(320, 1)), jme_fix_features);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(jme_netdev_ops, $mul.ref(0, 336)), $mul.ref(328, 1)), jme_set_features);
    $M.0 := $store.i8($M.0, .str, 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 4)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 4)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.1, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 6)), $mul.ref(1, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 6)), $mul.ref(2, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 6)), $mul.ref(3, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 6)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.21, 74);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(3, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(4, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(5, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(7, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(12, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(14, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.22, 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 8)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 8)), $mul.ref(2, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 8)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 8)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 8)), $mul.ref(5, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 8)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.23, 74);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(3, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(4, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(5, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(7, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(11, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(15, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(17, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(20, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.24, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 8)), $mul.ref(1, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 8)), $mul.ref(2, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 8)), $mul.ref(3, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 8)), $mul.ref(4, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 8)), $mul.ref(5, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 8)), $mul.ref(6, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.25, 0);
    $M.10 := $store.i8($M.10, .str.35, 70);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.35, $mul.ref(0, 9)), $mul.ref(1, 1)), 111);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.35, $mul.ref(0, 9)), $mul.ref(2, 1)), 114);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.35, $mul.ref(0, 9)), $mul.ref(3, 1)), 99);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.35, $mul.ref(0, 9)), $mul.ref(4, 1)), 101);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.35, $mul.ref(0, 9)), $mul.ref(5, 1)), 100);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.35, $mul.ref(0, 9)), $mul.ref(6, 1)), 58);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.35, $mul.ref(0, 9)), $mul.ref(7, 1)), 32);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.35, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.10 := $store.i8($M.10, .str.37, 65);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.37, $mul.ref(0, 7)), $mul.ref(1, 1)), 78);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.37, $mul.ref(0, 7)), $mul.ref(2, 1)), 101);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.37, $mul.ref(0, 7)), $mul.ref(3, 1)), 100);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.37, $mul.ref(0, 7)), $mul.ref(4, 1)), 58);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.37, $mul.ref(0, 7)), $mul.ref(5, 1)), 32);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.37, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.10 := $store.i8($M.10, .str.38, 49);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(1, 1)), 48);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(2, 1)), 32);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(3, 1)), 77);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(4, 1)), 98);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(5, 1)), 112);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(6, 1)), 115);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(7, 1)), 44);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(8, 1)), 32);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.10 := $store.i8($M.10, .str.39, 49);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.39, $mul.ref(0, 11)), $mul.ref(1, 1)), 48);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.39, $mul.ref(0, 11)), $mul.ref(2, 1)), 48);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.39, $mul.ref(0, 11)), $mul.ref(3, 1)), 32);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.39, $mul.ref(0, 11)), $mul.ref(4, 1)), 77);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.39, $mul.ref(0, 11)), $mul.ref(5, 1)), 98);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.39, $mul.ref(0, 11)), $mul.ref(6, 1)), 112);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.39, $mul.ref(0, 11)), $mul.ref(7, 1)), 115);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.39, $mul.ref(0, 11)), $mul.ref(8, 1)), 44);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.39, $mul.ref(0, 11)), $mul.ref(9, 1)), 32);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.39, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.10 := $store.i8($M.10, .str.40, 49);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.40, $mul.ref(0, 12)), $mul.ref(1, 1)), 48);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.40, $mul.ref(0, 12)), $mul.ref(2, 1)), 48);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.40, $mul.ref(0, 12)), $mul.ref(3, 1)), 48);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.40, $mul.ref(0, 12)), $mul.ref(4, 1)), 32);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.40, $mul.ref(0, 12)), $mul.ref(5, 1)), 77);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.40, $mul.ref(0, 12)), $mul.ref(6, 1)), 98);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.40, $mul.ref(0, 12)), $mul.ref(7, 1)), 112);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.40, $mul.ref(0, 12)), $mul.ref(8, 1)), 115);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.40, $mul.ref(0, 12)), $mul.ref(9, 1)), 44);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.40, $mul.ref(0, 12)), $mul.ref(10, 1)), 32);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.40, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.10 := $store.i8($M.10, .str.41, 70);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(1, 1)), 117);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(2, 1)), 108);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(3, 1)), 108);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(4, 1)), 45);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(5, 1)), 68);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(6, 1)), 117);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(7, 1)), 112);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(8, 1)), 108);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(9, 1)), 101);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(10, 1)), 120);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(11, 1)), 44);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(12, 1)), 32);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.41, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.10 := $store.i8($M.10, .str.42, 72);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(1, 1)), 97);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(2, 1)), 108);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(3, 1)), 102);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(4, 1)), 45);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(5, 1)), 68);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(6, 1)), 117);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(7, 1)), 112);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(8, 1)), 108);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(9, 1)), 101);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(10, 1)), 120);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(11, 1)), 44);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(12, 1)), 32);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.10 := $store.i8($M.10, .str.43, 77);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.43, $mul.ref(0, 6)), $mul.ref(1, 1)), 68);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.43, $mul.ref(0, 6)), $mul.ref(2, 1)), 73);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.43, $mul.ref(0, 6)), $mul.ref(3, 1)), 45);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.43, $mul.ref(0, 6)), $mul.ref(4, 1)), 88);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.43, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.10 := $store.i8($M.10, .str.44, 77);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.44, $mul.ref(0, 4)), $mul.ref(1, 1)), 68);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.44, $mul.ref(0, 4)), $mul.ref(2, 1)), 73);
    $M.10 := $store.i8($M.10, $add.ref($add.ref(.str.44, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    call {:si_unique_call 2533} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 527826);

procedure devirtbounce(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 528858);

procedure devirtbounce.1(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 529890);

procedure devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i36 := $eq.ref(jme_resume, $p0);
    assume true;
    goto $bb13, $bb25;

  $bb25:
    assume !($i36 == 1);
    $i35 := $eq.ref(jme_suspend, $p0);
    assume true;
    goto $bb12, $bb24;

  $bb24:
    assume !($i35 == 1);
    $i34 := $eq.ref(netif_receive_skb, $p0);
    assume true;
    goto $bb11, $bb23;

  $bb23:
    assume !($i34 == 1);
    $i33 := $eq.ref(netif_rx, $p0);
    assume true;
    goto $bb10, $bb22;

  $bb22:
    assume !($i33 == 1);
    $i32 := $eq.ref(jme_get_eeprom_len, $p0);
    assume true;
    goto $bb9, $bb21;

  $bb21:
    assume !($i32 == 1);
    $i31 := $eq.ref(jme_get_link, $p0);
    assume {:branchcond $i31} true;
    goto $bb8, $bb20;

  $bb20:
    assume !($i31 == 1);
    $i30 := $eq.ref(jme_nway_reset, $p0);
    assume {:branchcond $i30} true;
    goto $bb7, $bb19;

  $bb19:
    assume !($i30 == 1);
    $i29 := $eq.ref(jme_get_msglevel, $p0);
    assume {:branchcond $i29} true;
    goto $bb6, $bb18;

  $bb18:
    assume !($i29 == 1);
    $i28 := $eq.ref(jme_get_regs_len, $p0);
    assume true;
    goto $bb5, $bb17;

  $bb17:
    assume !($i28 == 1);
    $i27 := $eq.ref(eth_validate_addr, $p0);
    assume {:branchcond $i27} true;
    goto $bb4, $bb16;

  $bb16:
    assume !($i27 == 1);
    $i26 := $eq.ref(jme_close, $p0);
    assume {:branchcond $i26} true;
    goto $bb3, $bb15;

  $bb15:
    assume !($i26 == 1);
    $i25 := $eq.ref(jme_open, $p0);
    assume {:branchcond $i25} true;
    goto $bb2, $bb14;

  $bb14:
    assume !($i25 == 1);
    assume false;
    return;

  $bb2:
    assume $i25 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2534} $i2 := jme_open($p1);
    goto SeqInstr_1039, SeqInstr_1040;

  SeqInstr_1040:
    assume assertsPassed;
    goto SeqInstr_1041;

  SeqInstr_1041:
    $r := $i2;
    return;

  SeqInstr_1039:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i26 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2535} $i4 := jme_close($p3);
    goto SeqInstr_1042, SeqInstr_1043;

  SeqInstr_1043:
    assume assertsPassed;
    goto SeqInstr_1044;

  SeqInstr_1044:
    $r := $i4;
    return;

  SeqInstr_1042:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i27 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2536} $i6 := eth_validate_addr($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i28 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2537} $i8 := jme_get_regs_len($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i29 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2538} $i10 := jme_get_msglevel($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i30 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2539} $i12 := jme_nway_reset($p11);
    goto SeqInstr_1045, SeqInstr_1046;

  SeqInstr_1046:
    assume assertsPassed;
    goto SeqInstr_1047;

  SeqInstr_1047:
    $r := $i12;
    return;

  SeqInstr_1045:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i31 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2540} $i14 := jme_get_link($p13);
    goto SeqInstr_1048, SeqInstr_1049;

  SeqInstr_1049:
    assume assertsPassed;
    goto SeqInstr_1050;

  SeqInstr_1050:
    $r := $i14;
    return;

  SeqInstr_1048:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i32 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2541} $i16 := jme_get_eeprom_len($p15);
    goto SeqInstr_1051, SeqInstr_1052;

  SeqInstr_1052:
    assume assertsPassed;
    goto SeqInstr_1053;

  SeqInstr_1053:
    $r := $i16;
    return;

  SeqInstr_1051:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i33 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2542} $i18 := netif_rx($p17);
    $r := $i18;
    return;

  $bb11:
    assume $i34 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2543} $i20 := netif_receive_skb($p19);
    $r := $i20;
    return;

  $bb12:
    assume $i35 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2544} $i22 := jme_suspend($p21);
    goto SeqInstr_1054, SeqInstr_1055;

  SeqInstr_1055:
    assume assertsPassed;
    goto SeqInstr_1056;

  SeqInstr_1056:
    $r := $i22;
    return;

  SeqInstr_1054:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i36 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2545} $i24 := jme_resume($p23);
    goto SeqInstr_1057, SeqInstr_1058;

  SeqInstr_1058:
    assume assertsPassed;
    goto SeqInstr_1059;

  SeqInstr_1059:
    $r := $i24;
    return;

  SeqInstr_1057:
    assume !assertsPassed;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 530922);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 531954);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(jme_get_pauseparam, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i12 == 1);
    $i11 := $eq.ref(jme_get_wol, $p0);
    assume {:branchcond $i11} true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i11 == 1);
    $i10 := $eq.ref(jme_get_drvinfo, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i10 == 1);
    $i9 := $eq.ref(jme_vlan_rx_register, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2546} jme_vlan_rx_register($p1, $p2);
    goto SeqInstr_1060, SeqInstr_1061;

  SeqInstr_1061:
    assume assertsPassed;
    goto SeqInstr_1062;

  SeqInstr_1062:
    return;

  SeqInstr_1060:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i10 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2547} jme_get_drvinfo($p3, $p4);
    return;

  $bb4:
    assume $i11 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2548} jme_get_wol($p5, $p6);
    return;

  $bb5:
    assume $i12 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2549} jme_get_pauseparam($p7, $p8);
    goto SeqInstr_1063, SeqInstr_1064;

  SeqInstr_1064:
    assume assertsPassed;
    goto SeqInstr_1065;

  SeqInstr_1065:
    return;

  SeqInstr_1063:
    assume !assertsPassed;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 532986);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 534018);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 535050);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 536082);

procedure devirtbounce.8(funcPtr: ref, arg: i32, arg1: i32, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: i32, arg1: i32, arg2: i32, arg3: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 537114);

procedure devirtbounce.9(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 538146);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 539178);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 540210);

procedure devirtbounce.12(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 541242);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 542274);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref, arg2: i16) returns ($r: i32);



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 543306);

procedure devirtbounce.15(funcPtr: ref, arg: ref) returns ($r: i32);



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 544338);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32) returns ($r: ref);



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.9, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.8, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.4, $M.49, $M.0, $M.59, $M.7, $M.6, $M.10, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2550} __SMACK_static_init();
    call {:si_unique_call 2551} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.12, $M.21, $M.22, $M.23, $M.24, $M.8, $M.25, $M.0, $M.26, $M.27, $M.20, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.1, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.9, $M.13, $M.4, $M.49, $M.59, $M.7, $M.6, $M.10, $CurrAddr, $M.5, $M.3;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation jme_set_multi_loop_$bb12(in_$p1: ref, in_$i44: i64, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i64, in_$p54: ref, in_$i55: i32, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i64, in_$p61: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i1, in_$p46: ref) returns (out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i64, out_$p54: ref, out_$i55: i32, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i64, out_$p61: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i1, out_$p46: ref)
{

  entry:
    out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p46 := in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p63, in_$p64, in_$p65, in_$p66, in_$i67, in_$i68, in_$p46;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_189;

  $bb14:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$p46 := out_$p64;
    goto $bb14_dummy;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i64(out_$i67, in_$i44);
    goto corral_source_split_212;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    out_$i67 := $p2i.ref.i64(out_$p66);
    goto corral_source_split_211;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p65, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_210;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    out_$p65 := $bitcast.ref.ref(out_$p64);
    goto corral_source_split_209;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.0, out_$p63);
    goto corral_source_split_208;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref($add.ref(out_$p46, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_207;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p61, out_$i58);
    goto corral_source_split_206;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p1, $mul.ref(0, 8)), $mul.ref(out_$i60, 4));
    goto corral_source_split_205;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i59);
    goto corral_source_split_204;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    out_$i59 := $ashr.i32(out_$i51, 5);
    goto corral_source_split_203;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    out_$i58 := $or.i32(out_$i55, out_$i57);
    goto corral_source_split_202;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    out_$i57 := $shl.i32(1, out_$i56);
    goto corral_source_split_201;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    out_$i56 := $and.i32(out_$i51, 31);
    goto corral_source_split_200;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.1, out_$p54);
    goto corral_source_split_199;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p1, $mul.ref(0, 8)), $mul.ref(out_$i53, 4));
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    out_$i53 := $sext.i32.i64(out_$i52);
    goto corral_source_split_197;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    out_$i52 := $ashr.i32(out_$i51, 5);
    goto corral_source_split_196;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    out_$i51 := $and.i32(out_$i50, 63);
    call {:si_unique_call 61} {:cexpr "bit_nr"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_195;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} out_$i50 := bitrev32(out_$i49);
    call {:si_unique_call 60} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_194;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} out_$i49 := crc32_le($sub.i32(0, 1), out_$p48, 6);
    call {:si_unique_call 58} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_193;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_192;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p46, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_191;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p46 := jme_set_multi_loop_$bb12(in_$p1, in_$i44, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p46);
    return;

  exit:
    return;
}



procedure jme_set_multi_loop_$bb12(in_$p1: ref, in_$i44: i64, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i64, in_$p54: ref, in_$i55: i32, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i64, in_$p61: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i1, in_$p46: ref) returns (out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i64, out_$p54: ref, out_$i55: i32, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i64, out_$p61: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i1, out_$p46: ref);
  modifies $M.1;



implementation napi_enable_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} napi_enable_loop_$bb3();
    return;

  exit:
    return;
}



procedure napi_enable_loop_$bb3();



implementation napi_disable_loop_$bb4(in_$p2: ref, in_$i5: i32, in_$i6: i1) returns (out_$i5: i32, out_$i6: i1)
{

  entry:
    out_$i5, out_$i6 := in_$i5, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i6 == 1;
    goto $bb6_dummy;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    out_$i6 := $ne.i32(out_$i5, 0);
    goto corral_source_split_586;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} out_$i5 := test_and_set_bit(0, in_$p2);
    call {:si_unique_call 179} {:cexpr "tmp"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_585;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} msleep(1);
    goto corral_source_split_584;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i5, out_$i6 := napi_disable_loop_$bb4(in_$p2, out_$i5, out_$i6);
    return;

  exit:
    return;
}



procedure napi_disable_loop_$bb4(in_$p2: ref, in_$i5: i32, in_$i6: i1) returns (out_$i5: i32, out_$i6: i1);



implementation tasklet_unlock_wait_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i1) returns (out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$i4, out_$i5 := in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb6_dummy;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_610;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} out_$i4 := constant_test_bit(1, in_$p1);
    call {:si_unique_call 190} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_609;

  $bb5:
    call {:si_unique_call 188} devirtbounce(0);
    goto corral_source_split_608;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5 := tasklet_unlock_wait_loop_$bb4(in_$p1, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure tasklet_unlock_wait_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i1) returns (out_$i4: i32, out_$i5: i1);



implementation jme_mdio_write_loop_$bb1(in_$p5: ref, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i18: i32, in_$i19: i1, in_$i12: i32, in_$i20: i32) returns (out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i18: i32, out_$i19: i1, out_$i12: i32, out_$i20: i32)
{

  entry:
    out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$i12, out_$i20 := in_$i13, in_$i14, in_$i15, in_$i16, in_$i18, in_$i19, in_$i12, in_$i20;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_741;

  $bb7:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i18;
    goto $bb7_dummy;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i18;
    assume true;
    goto $bb7;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    out_$i19 := $sgt.i32(out_$i18, 0);
    goto corral_source_split_754;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i18 := $sub.i32(out_$i12, 1);
    call {:si_unique_call 228} {:cexpr "i"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_753;

  $bb4:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i12;
    assume true;
    goto $bb4;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, 0);
    goto corral_source_split_746;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    out_$i14 := $and.i32(out_$i13, 16);
    goto corral_source_split_745;

  SeqInstr_186:
    call {:si_unique_call 227} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_744;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} out_$i13 := jread32(in_$p5, 80);
    goto SeqInstr_185;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} __const_udelay(85900);
    goto corral_source_split_743;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$i12, out_$i20 := jme_mdio_write_loop_$bb1(in_$p5, out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$i12, out_$i20);
    return;

  exit:
    return;
}



procedure jme_mdio_write_loop_$bb1(in_$p5: ref, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i18: i32, in_$i19: i1, in_$i12: i32, in_$i20: i32) returns (out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i18: i32, out_$i19: i1, out_$i12: i32, out_$i20: i32);
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_mdio_read_loop_$bb2(in_$p4: ref, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i32, in_$i20: i32, in_$i21: i1, in_$i12: i32, in_$i22: i32, in_$i23: i32) returns (out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i32, out_$i20: i32, out_$i21: i1, out_$i12: i32, out_$i22: i32, out_$i23: i32)
{

  entry:
    out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i20, out_$i21, out_$i12, out_$i22, out_$i23 := in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i20, in_$i21, in_$i12, in_$i22, in_$i23;
    goto $bb2, exit;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_772;

  $bb8:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i20;
    goto $bb8_dummy;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    out_$i22, out_$i23 := out_$i20, out_$i13;
    assume true;
    goto $bb8;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    out_$i21 := $sgt.i32(out_$i20, 0);
    goto corral_source_split_785;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i20 := $sub.i32(out_$i12, 1);
    call {:si_unique_call 243} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_784;

  $bb5:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    out_$i16, out_$i17 := out_$i12, out_$i13;
    assume true;
    goto $bb5;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, 0);
    goto corral_source_split_777;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    out_$i14 := $and.i32(out_$i13, 16);
    goto corral_source_split_776;

  SeqInstr_192:
    call {:si_unique_call 242} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_775;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} out_$i13 := jread32(in_$p4, 80);
    goto SeqInstr_191;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} __const_udelay(85900);
    goto corral_source_split_774;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8_dummy:
    call {:si_unique_call 1} out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i20, out_$i21, out_$i12, out_$i22, out_$i23 := jme_mdio_read_loop_$bb2(in_$p4, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i20, out_$i21, out_$i12, out_$i22, out_$i23);
    return;

  exit:
    return;
}



procedure jme_mdio_read_loop_$bb2(in_$p4: ref, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i32, in_$i20: i32, in_$i21: i1, in_$i12: i32, in_$i22: i32, in_$i23: i32) returns (out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i32, out_$i20: i32, out_$i21: i1, out_$i12: i32, out_$i22: i32, out_$i23: i32);
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_mdio_read_loop_$bb1(in_$i1: i32, in_$i2: i32, in_$p4: ref, in_$i7: i32, in_$i8: i32, in_$i9: i32, in_$i10: i32, in_$i11: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i32, in_$i20: i32, in_$i21: i1, in_$i12: i32, in_$i22: i32, in_$i23: i32, in_$i18: i32, in_$i19: i32, in_$i24: i1, in_$i27: i32, in_$i28: i1, in_$i29: i32) returns (out_$i7: i32, out_$i8: i32, out_$i9: i32, out_$i10: i32, out_$i11: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i32, out_$i20: i32, out_$i21: i1, out_$i12: i32, out_$i22: i32, out_$i23: i32, out_$i18: i32, out_$i19: i32, out_$i24: i1, out_$i27: i32, out_$i28: i1, out_$i29: i32)
{

  entry:
    out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i20, out_$i21, out_$i12, out_$i22, out_$i23, out_$i18, out_$i19, out_$i24, out_$i27, out_$i28, out_$i29 := in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i20, in_$i21, in_$i12, in_$i22, in_$i23, in_$i18, in_$i19, in_$i24, in_$i27, in_$i28, in_$i29;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_765;

  $bb15:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i27;
    goto $bb15_dummy;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i19;
    assume true;
    goto $bb15;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i7, 0);
    goto corral_source_split_793;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i27 := $sub.i32(out_$i7, 1);
    call {:si_unique_call 245} {:cexpr "again"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_792;

  $bb12:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i18, 0);
    goto corral_source_split_782;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_781;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i18, out_$i19 := out_$i22, out_$i23;
    goto $bb6;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    out_$i18, out_$i19 := out_$i16, out_$i17;
    goto $bb6;

  $bb4:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_779;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    out_$i16, out_$i17 := out_$i12, out_$i13;
    assume true;
    goto $bb4, $bb5;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, 0);
    goto corral_source_split_777;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    out_$i14 := $and.i32(out_$i13, 16);
    goto corral_source_split_776;

  SeqInstr_192:
    call {:si_unique_call 242} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_775;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} out_$i13 := jread32(in_$p4, 80);
    goto SeqInstr_191;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} __const_udelay(85900);
    goto corral_source_split_774;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb2:
    call out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i20, out_$i21, out_$i12, out_$i22, out_$i23 := jme_mdio_read_loop_$bb2(in_$p4, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i20, out_$i21, out_$i12, out_$i22, out_$i23);
    goto $bb2_last;

  $bb2_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_772;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    out_$i12 := 5000;
    goto $bb2;

  $bb8:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i20;
    assume false;
    return;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    out_$i22, out_$i23 := out_$i20, out_$i13;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    out_$i21 := $sgt.i32(out_$i20, 0);
    goto corral_source_split_785;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i20 := $sub.i32(out_$i12, 1);
    call {:si_unique_call 243} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_784;

  $bb5:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_189:
    call {:si_unique_call 239} devirtbounce(0);
    goto corral_source_split_770;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} jwrite32(in_$p4, 80, out_$i11);
    goto SeqInstr_188;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    out_$i11 := $or.i32(out_$i10, 16);
    goto corral_source_split_769;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    out_$i10 := $or.i32(out_$i8, out_$i9);
    goto corral_source_split_768;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} out_$i9 := smi_reg_addr(in_$i2);
    call {:si_unique_call 237} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_767;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} out_$i8 := smi_phy_addr(in_$i1);
    call {:si_unique_call 235} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_766;

  $bb9:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i20, out_$i21, out_$i12, out_$i22, out_$i23, out_$i18, out_$i19, out_$i24, out_$i27, out_$i28, out_$i29 := jme_mdio_read_loop_$bb1(in_$i1, in_$i2, in_$p4, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i20, out_$i21, out_$i12, out_$i22, out_$i23, out_$i18, out_$i19, out_$i24, out_$i27, out_$i28, out_$i29);
    return;

  exit:
    return;
}



procedure jme_mdio_read_loop_$bb1(in_$i1: i32, in_$i2: i32, in_$p4: ref, in_$i7: i32, in_$i8: i32, in_$i9: i32, in_$i10: i32, in_$i11: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i32, in_$i20: i32, in_$i21: i1, in_$i12: i32, in_$i22: i32, in_$i23: i32, in_$i18: i32, in_$i19: i32, in_$i24: i1, in_$i27: i32, in_$i28: i1, in_$i29: i32) returns (out_$i7: i32, out_$i8: i32, out_$i9: i32, out_$i10: i32, out_$i11: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i32, out_$i20: i32, out_$i21: i1, out_$i12: i32, out_$i22: i32, out_$i23: i32, out_$i18: i32, out_$i19: i32, out_$i24: i1, out_$i27: i32, out_$i28: i1, out_$i29: i32);
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_map_tx_skb_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p7: ref, in_$p9: ref, in_$i17: i8, in_$i22: i32, in_$i24: i32, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i64, in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i64, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i8, in_$i53: i32, in_$i54: i1, in_$i26: i32) returns (out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i64, out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i64, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i8, out_$i53: i32, out_$i54: i1, out_$i26: i32)
{

  entry:
    out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i26 := in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i33, in_$i34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i26;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1337;

  $bb6:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i26 := out_$i53;
    goto $bb6_dummy;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i53, in_$i22);
    goto corral_source_split_1367;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i32(out_$i26, 1);
    call {:si_unique_call 370} {:cexpr "i"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_1366;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} jme_fill_tx_map(out_$p44, out_$p37, out_$p42, out_$p46, out_$i48, out_$i50, out_$i52);
    goto corral_source_split_1365;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    out_$i52 := $trunc.i32.i8(out_$i51);
    goto corral_source_split_1364;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i8.i32(in_$i17);
    goto corral_source_split_1363;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p49);
    goto corral_source_split_1362;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p30, $mul.ref(out_$i31, 16)), $mul.ref(12, 1));
    goto corral_source_split_1361;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    goto corral_source_split_1360;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p30, $mul.ref(out_$i31, 16)), $mul.ref(8, 1));
    goto corral_source_split_1359;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_1358;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p30, $mul.ref(out_$i31, 16)), $mul.ref(0, 1));
    goto corral_source_split_1357;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_1356;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_1355;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref(in_$p9, $mul.ref(out_$i41, 32));
    goto corral_source_split_1354;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i40);
    goto corral_source_split_1353;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    out_$i40 := $and.i32(out_$i39, in_$i24);
    goto corral_source_split_1352;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i38, 2);
    goto corral_source_split_1351;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(in_$i2, out_$i26);
    goto corral_source_split_1350;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(in_$p7, $mul.ref(out_$i36, 16));
    goto corral_source_split_1349;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i32.i64(out_$i35);
    goto corral_source_split_1348;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    out_$i35 := $and.i32(out_$i34, in_$i24);
    goto corral_source_split_1347;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i33, 2);
    goto corral_source_split_1346;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(in_$i2, out_$i26);
    goto corral_source_split_1345;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    goto corral_source_split_1344;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i26);
    goto corral_source_split_1343;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_1342;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p28, $mul.ref(0, 344)), $mul.ref(56, 1));
    goto corral_source_split_1341;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_1340;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} out_$p27 := skb_end_pointer(in_$p1);
    goto corral_source_split_1339;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i26 := jme_map_tx_skb_loop_$bb4(in_$p0, in_$p1, in_$i2, in_$p7, in_$p9, in_$i17, in_$i22, in_$i24, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i26);
    return;

  exit:
    return;
}



procedure jme_map_tx_skb_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p7: ref, in_$p9: ref, in_$i17: i8, in_$i22: i32, in_$i24: i32, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i64, in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i64, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i8, in_$i53: i32, in_$i54: i1, in_$i26: i32) returns (out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i64, out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i64, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i8, out_$i53: i32, out_$i54: i1, out_$i26: i32);
  modifies $M.0, $M.4;



implementation dma_sync_single_for_device_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_sync_single_for_device_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_sync_single_for_device_loop_$bb3();



implementation jme_disable_rx_engine_loop_$bb4(in_$p0: ref, in_$i8: i32, in_$i9: i32, in_$i10: i32, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i7: i32, in_$i14: i32) returns (out_$i8: i32, out_$i9: i32, out_$i10: i32, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i7: i32, out_$i14: i32)
{

  entry:
    out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i7, out_$i14 := in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i7, in_$i14;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1723;

  $bb12:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i9;
    goto $bb12_dummy;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i9;
    assume true;
    goto $bb12;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    out_$i13 := $and.i1(out_$i11, out_$i12);
    goto corral_source_split_1735;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    out_$i12 := $sgt.i32(out_$i9, 0);
    goto corral_source_split_1734;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_1733;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    out_$i10 := $and.i32(out_$i8, 1);
    goto corral_source_split_1732;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    out_$i9 := $sub.i32(out_$i7, 1);
    call {:si_unique_call 483} {:cexpr "i"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_1731;

  SeqInstr_216:
    call {:si_unique_call 481} {:cexpr "val"} boogie_si_record_i32(out_$i8);
    call {:si_unique_call 482} devirtbounce(0);
    goto corral_source_split_1730;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} out_$i8 := jread32(in_$p0, 32);
    goto SeqInstr_215;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} __const_udelay(4295000);
    goto corral_source_split_1726;

  $bb6:
    assume 1 == 1;
    goto corral_source_split_1725;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb6, $bb7;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume !(1 == 1);
    goto corral_source_split_1728;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i7, out_$i14 := jme_disable_rx_engine_loop_$bb4(in_$p0, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i7, out_$i14);
    return;

  exit:
    return;
}



procedure jme_disable_rx_engine_loop_$bb4(in_$p0: ref, in_$i8: i32, in_$i9: i32, in_$i10: i32, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i7: i32, in_$i14: i32) returns (out_$i8: i32, out_$i9: i32, out_$i10: i32, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i7: i32, out_$i14: i32);
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_disable_tx_engine_loop_$bb4(in_$p0: ref, in_$i8: i32, in_$i9: i32, in_$i10: i32, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i7: i32, in_$i14: i32) returns (out_$i8: i32, out_$i9: i32, out_$i10: i32, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i7: i32, out_$i14: i32)
{

  entry:
    out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i7, out_$i14 := in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i7, in_$i14;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1756;

  $bb12:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i9;
    goto $bb12_dummy;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i9;
    assume true;
    goto $bb12;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    out_$i13 := $and.i1(out_$i11, out_$i12);
    goto corral_source_split_1768;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    out_$i12 := $sgt.i32(out_$i9, 0);
    goto corral_source_split_1767;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_1766;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    out_$i10 := $and.i32(out_$i8, 1);
    goto corral_source_split_1765;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    out_$i9 := $sub.i32(out_$i7, 1);
    call {:si_unique_call 495} {:cexpr "i"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_1764;

  SeqInstr_228:
    call {:si_unique_call 493} {:cexpr "val"} boogie_si_record_i32(out_$i8);
    call {:si_unique_call 494} devirtbounce(0);
    goto corral_source_split_1763;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} out_$i8 := jread32(in_$p0, 0);
    goto SeqInstr_227;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} __const_udelay(4295000);
    goto corral_source_split_1759;

  $bb6:
    assume 1 == 1;
    goto corral_source_split_1758;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb6, $bb7;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume !(1 == 1);
    goto corral_source_split_1761;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i7, out_$i14 := jme_disable_tx_engine_loop_$bb4(in_$p0, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i7, out_$i14);
    return;

  exit:
    return;
}



procedure jme_disable_tx_engine_loop_$bb4(in_$p0: ref, in_$i8: i32, in_$i9: i32, in_$i10: i32, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i7: i32, in_$i14: i32) returns (out_$i8: i32, out_$i9: i32, out_$i10: i32, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i7: i32, out_$i14: i32);
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation {:SIextraRecBound 8} jme_reset_mac_processor_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$i6: i32) returns (out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$i6: i32)
{

  entry:
    out_$p7, out_$i8, out_$i9, out_$i6 := in_$p7, in_$i8, in_$i9, in_$i6;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1816;

  $bb3:
    assume out_$i9 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i8;
    goto $bb3_dummy;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    out_$i9 := $sle.i32(out_$i8, 7);
    goto corral_source_split_1821;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    out_$i8 := $add.i32(out_$i6, 1);
    call {:si_unique_call 528} {:cexpr "i"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_1820;

  SeqInstr_300:
    goto corral_source_split_1819;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} jme_setup_wakeup_frame(in_$p0, out_$p7, $sub.i32(0, 842150451), out_$i6);
    goto SeqInstr_299;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p7 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_1818;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb3_dummy:
    call {:si_unique_call 1} out_$p7, out_$i8, out_$i9, out_$i6 := jme_reset_mac_processor_loop_$bb1(in_$p0, in_$p1, out_$p7, out_$i8, out_$i9, out_$i6);
    return;

  exit:
    return;
}



procedure jme_reset_mac_processor_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$i6: i32) returns (out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$i6: i32);
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_free_rx_resources_loop_$bb8(in_$p0: ref, in_$p11: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i14: i32) returns (out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i14: i32)
{

  entry:
    out_$i15, out_$i16, out_$i17, out_$i14 := in_$i15, in_$i16, in_$i17, in_$i14;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1853;

  $bb10:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i15;
    goto $bb10_dummy;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    out_$i17 := $ult.i32(out_$i15, out_$i16);
    goto corral_source_split_1858;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, in_$p11);
    goto corral_source_split_1857;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i14, 1);
    call {:si_unique_call 531} {:cexpr "i"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_1856;

  SeqInstr_306:
    goto corral_source_split_1855;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} jme_free_rx_buf(in_$p0, out_$i14);
    goto SeqInstr_305;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$i17, out_$i14 := jme_free_rx_resources_loop_$bb8(in_$p0, in_$p11, out_$i15, out_$i16, out_$i17, out_$i14);
    return;

  exit:
    return;
}



procedure jme_free_rx_resources_loop_$bb8(in_$p0: ref, in_$p11: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i14: i32) returns (out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i14: i32);
  modifies $M.0, $M.4, assertsPassed;



implementation jme_free_tx_resources_loop_$bb8(in_$p2: ref, in_$p11: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i14: i32) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i14: i32)
{

  entry:
    out_$p15, out_$p16, out_$i17, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i14 := in_$p15, in_$p16, in_$i17, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i14;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1917;

  $bb13:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i30;
    goto $bb13_dummy;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    out_$i32 := $ult.i32(out_$i30, out_$i31);
    goto corral_source_split_1945;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, in_$p11);
    goto corral_source_split_1944;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i14, 1);
    call {:si_unique_call 536} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_1943;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p29, 0);
    goto corral_source_split_1942;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 32)), $mul.ref(24, 1));
    goto corral_source_split_1941;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p28, 0);
    goto corral_source_split_1940;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 32)), $mul.ref(20, 1));
    goto corral_source_split_1939;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p27, 0);
    goto corral_source_split_1938;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 32)), $mul.ref(16, 1));
    goto corral_source_split_1937;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p26, 0);
    goto corral_source_split_1936;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 32)), $mul.ref(8, 1));
    goto corral_source_split_1935;

  $bb11:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p25, $0.ref);
    goto corral_source_split_1933;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 32)), $mul.ref(0, 1));
    goto corral_source_split_1932;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} consume_skb(out_$p24);
    goto corral_source_split_1931;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_1930;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 32)), $mul.ref(0, 1));
    goto corral_source_split_1929;

  $bb10:
    assume out_$i22 == 1;
    goto corral_source_split_1928;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_1926;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_1925;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_1924;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 32)), $mul.ref(0, 1));
    goto corral_source_split_1923;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    goto corral_source_split_1922;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i14);
    goto corral_source_split_1921;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_1920;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p2, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_1919;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$i17, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i14 := jme_free_tx_resources_loop_$bb8(in_$p2, in_$p11, out_$p15, out_$p16, out_$i17, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i14);
    return;

  exit:
    return;
}



procedure jme_free_tx_resources_loop_$bb8(in_$p2: ref, in_$p11: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i14: i32) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i14: i32);
  modifies $M.0;



implementation arch_local_save_flags_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_save_flags_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_save_flags_loop_$bb3();



implementation jme_get_eeprom_loop_$bb4(in_$p2: ref, in_$p4: ref, in_$i6: i32, in_$i8: i32, in_$i12: i32, in_$i13: i8, in_$i14: i64, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i11: i32) returns (out_$i12: i32, out_$i13: i8, out_$i14: i64, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i11: i32)
{

  entry:
    out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i11 := in_$i12, in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2596;

  $bb6:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i16;
    goto $bb6_dummy;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i16, in_$i8);
    goto corral_source_split_2604;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i11, 1);
    call {:si_unique_call 727} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_2603;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p15, out_$i13);
    goto corral_source_split_2602;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(in_$p2, $mul.ref(out_$i14, 1));
    goto corral_source_split_2601;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i11);
    goto corral_source_split_2600;

  SeqInstr_453:
    goto corral_source_split_2599;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} out_$i13 := jme_smb_read(in_$p4, out_$i12);
    goto SeqInstr_452;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i11, in_$i6);
    goto corral_source_split_2598;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i11 := jme_get_eeprom_loop_$bb4(in_$p2, in_$p4, in_$i6, in_$i8, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i11);
    return;

  exit:
    return;
}



procedure jme_get_eeprom_loop_$bb4(in_$p2: ref, in_$p4: ref, in_$i6: i32, in_$i8: i32, in_$i12: i32, in_$i13: i8, in_$i14: i64, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i11: i32) returns (out_$i12: i32, out_$i13: i8, out_$i14: i64, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i11: i32);
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_set_eeprom_loop_$bb8(in_$p2: ref, in_$p4: ref, in_$i6: i32, in_$i8: i32, in_$i15: i32, in_$i16: i64, in_$p17: ref, in_$i18: i8, in_$i19: i32, in_$i20: i8, in_$i21: i32, in_$i22: i1, in_$i14: i32) returns (out_$i15: i32, out_$i16: i64, out_$p17: ref, out_$i18: i8, out_$i19: i32, out_$i20: i8, out_$i21: i32, out_$i22: i1, out_$i14: i32)
{

  entry:
    out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i14 := in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i14;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2627;

  $bb10:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i21;
    goto $bb10_dummy;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(out_$i21, in_$i8);
    goto corral_source_split_2637;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i14, 1);
    call {:si_unique_call 732} {:cexpr "i"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_2636;

  SeqInstr_456:
    goto corral_source_split_2635;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} jme_smb_write(in_$p4, out_$i15, out_$i20);
    goto SeqInstr_455;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i32.i8(out_$i19);
    goto corral_source_split_2634;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i8.i32(out_$i18);
    goto corral_source_split_2633;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i8($M.0, out_$p17);
    goto corral_source_split_2632;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(in_$p2, $mul.ref(out_$i16, 1));
    goto corral_source_split_2631;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i14);
    goto corral_source_split_2630;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i14, in_$i6);
    goto corral_source_split_2629;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i14 := jme_set_eeprom_loop_$bb8(in_$p2, in_$p4, in_$i6, in_$i8, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i14);
    return;

  exit:
    return;
}



procedure jme_set_eeprom_loop_$bb8(in_$p2: ref, in_$p4: ref, in_$i6: i32, in_$i8: i32, in_$i15: i32, in_$i16: i64, in_$p17: ref, in_$i18: i8, in_$i19: i32, in_$i20: i8, in_$i21: i32, in_$i22: i1, in_$i14: i32) returns (out_$i15: i32, out_$i16: i64, out_$p17: ref, out_$i18: i8, out_$i19: i32, out_$i20: i8, out_$i21: i32, out_$i22: i1, out_$i14: i32);
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_smb_write_loop_$bb22(in_$p0: ref, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i35: i32, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i39: i32) returns (out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i35: i32, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i39: i32)
{

  entry:
    out_$i36, out_$i37, out_$i38, out_$i35, out_$i40, out_$i41, out_$i42, out_$i39 := in_$i36, in_$i37, in_$i38, in_$i35, in_$i40, in_$i41, in_$i42, in_$i39;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2933;

  $bb24:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i35 := out_$i40;
    goto $bb24_dummy;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i40;
    assume true;
    goto $bb24;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_2940;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    out_$i37 := $and.i32(out_$i36, 16);
    goto corral_source_split_2939;

  SeqInstr_498:
    call {:si_unique_call 781} {:cexpr "val"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_2938;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} out_$i36 := jread32(in_$p0, 1092);
    goto SeqInstr_497;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} msleep(1);
    goto corral_source_split_2937;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb26:
    assume out_$i41 == 1;
    goto corral_source_split_2944;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i40;
    assume true;
    goto $bb26;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_2935;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    out_$i40 := $sub.i32(out_$i35, 1);
    call {:si_unique_call 778} {:cexpr "to"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_2934;

  $bb24_dummy:
    call {:si_unique_call 1} out_$i36, out_$i37, out_$i38, out_$i35, out_$i40, out_$i41, out_$i42, out_$i39 := jme_smb_write_loop_$bb22(in_$p0, out_$i36, out_$i37, out_$i38, out_$i35, out_$i40, out_$i41, out_$i42, out_$i39);
    return;

  exit:
    return;
}



procedure jme_smb_write_loop_$bb22(in_$p0: ref, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i35: i32, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i39: i32) returns (out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i35: i32, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i39: i32);
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_smb_write_loop_$bb4(in_$p0: ref, in_$i8: i32, in_$i9: i32, in_$i10: i1, in_$i7: i32, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$i11: i32) returns (out_$i8: i32, out_$i9: i32, out_$i10: i1, out_$i7: i32, out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$i11: i32)
{

  entry:
    out_$i8, out_$i9, out_$i10, out_$i7, out_$i12, out_$i13, out_$i14, out_$i11 := in_$i8, in_$i9, in_$i10, in_$i7, in_$i12, in_$i13, in_$i14, in_$i11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2890;

  $bb6:
    assume out_$i10 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i12;
    goto $bb6_dummy;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i12;
    assume true;
    goto $bb6;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_2897;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    out_$i9 := $and.i32(out_$i8, 15);
    goto corral_source_split_2896;

  SeqInstr_489:
    call {:si_unique_call 773} {:cexpr "val"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_2895;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} out_$i8 := jread32(in_$p0, 1088);
    goto SeqInstr_488;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} msleep(1);
    goto corral_source_split_2894;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume out_$i13 == 1;
    goto corral_source_split_2901;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i12;
    assume true;
    goto $bb8;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 0);
    goto corral_source_split_2892;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    out_$i12 := $sub.i32(out_$i7, 1);
    call {:si_unique_call 770} {:cexpr "to"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_2891;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$i10, out_$i7, out_$i12, out_$i13, out_$i14, out_$i11 := jme_smb_write_loop_$bb4(in_$p0, out_$i8, out_$i9, out_$i10, out_$i7, out_$i12, out_$i13, out_$i14, out_$i11);
    return;

  exit:
    return;
}



procedure jme_smb_write_loop_$bb4(in_$p0: ref, in_$i8: i32, in_$i9: i32, in_$i10: i1, in_$i7: i32, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$i11: i32) returns (out_$i8: i32, out_$i9: i32, out_$i10: i1, out_$i7: i32, out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$i11: i32);
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_smb_read_loop_$bb22(in_$p0: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i32: i32, in_$i33: i32, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i37: i32, in_$i38: i32) returns (out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i32: i32, out_$i33: i32, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i37: i32, out_$i38: i32)
{

  entry:
    out_$i34, out_$i35, out_$i36, out_$i32, out_$i33, out_$i39, out_$i40, out_$i41, out_$i42, out_$i37, out_$i38 := in_$i34, in_$i35, in_$i36, in_$i32, in_$i33, in_$i39, in_$i40, in_$i41, in_$i42, in_$i37, in_$i38;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3017;

  $bb24:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := out_$i39, out_$i34;
    goto $bb24_dummy;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38 := out_$i34, out_$i39;
    assume true;
    goto $bb24;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_3024;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    out_$i35 := $and.i32(out_$i34, 16);
    goto corral_source_split_3023;

  SeqInstr_513:
    call {:si_unique_call 800} {:cexpr "val"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_3022;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} out_$i34 := jread32(in_$p0, 1092);
    goto SeqInstr_512;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} msleep(1);
    goto corral_source_split_3021;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb26:
    assume out_$i40 == 1;
    goto corral_source_split_3028;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    out_$i41, out_$i42 := out_$i33, out_$i39;
    assume true;
    goto $bb26;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_3019;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    out_$i39 := $sub.i32(out_$i32, 1);
    call {:si_unique_call 797} {:cexpr "to"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_3018;

  $bb24_dummy:
    call {:si_unique_call 1} out_$i34, out_$i35, out_$i36, out_$i32, out_$i33, out_$i39, out_$i40, out_$i41, out_$i42, out_$i37, out_$i38 := jme_smb_read_loop_$bb22(in_$p0, out_$i34, out_$i35, out_$i36, out_$i32, out_$i33, out_$i39, out_$i40, out_$i41, out_$i42, out_$i37, out_$i38);
    return;

  exit:
    return;
}



procedure jme_smb_read_loop_$bb22(in_$p0: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i32: i32, in_$i33: i32, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i37: i32, in_$i38: i32) returns (out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i32: i32, out_$i33: i32, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i37: i32, out_$i38: i32);
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_smb_read_loop_$bb4(in_$p0: ref, in_$i7: i32, in_$i8: i32, in_$i9: i1, in_$i6: i32, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i10: i32) returns (out_$i7: i32, out_$i8: i32, out_$i9: i1, out_$i6: i32, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i10: i32)
{

  entry:
    out_$i7, out_$i8, out_$i9, out_$i6, out_$i11, out_$i12, out_$i13, out_$i10 := in_$i7, in_$i8, in_$i9, in_$i6, in_$i11, in_$i12, in_$i13, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2976;

  $bb6:
    assume out_$i9 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i11;
    goto $bb6_dummy;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    out_$i10 := out_$i11;
    assume true;
    goto $bb6;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i32(out_$i8, 0);
    goto corral_source_split_2983;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    out_$i8 := $and.i32(out_$i7, 15);
    goto corral_source_split_2982;

  SeqInstr_504:
    call {:si_unique_call 792} {:cexpr "val"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_2981;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} out_$i7 := jread32(in_$p0, 1088);
    goto SeqInstr_503;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} msleep(1);
    goto corral_source_split_2980;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume out_$i12 == 1;
    goto corral_source_split_2987;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i11;
    assume true;
    goto $bb8;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i32(out_$i11, 0);
    goto corral_source_split_2978;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    out_$i11 := $sub.i32(out_$i6, 1);
    call {:si_unique_call 789} {:cexpr "to"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_2977;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i7, out_$i8, out_$i9, out_$i6, out_$i11, out_$i12, out_$i13, out_$i10 := jme_smb_read_loop_$bb4(in_$p0, out_$i7, out_$i8, out_$i9, out_$i6, out_$i11, out_$i12, out_$i13, out_$i10);
    return;

  exit:
    return;
}



procedure jme_smb_read_loop_$bb4(in_$p0: ref, in_$i7: i32, in_$i8: i32, in_$i9: i1, in_$i6: i32, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i10: i32) returns (out_$i7: i32, out_$i8: i32, out_$i9: i1, out_$i6: i32, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i10: i32);
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation mmapio_memcpy_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i6: i32, in_$i7: i32, in_$i8: i32, in_$i9: i64, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$i5: i32) returns (out_$i6: i32, out_$i7: i32, out_$i8: i32, out_$i9: i64, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$i5: i32)
{

  entry:
    out_$i6, out_$i7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i5 := in_$i6, in_$i7, in_$i8, in_$i9, in_$p10, in_$i11, in_$i12, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3071;

  $bb6:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i11;
    goto $bb6_dummy;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i11, in_$i3);
    goto corral_source_split_3080;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i5, 4);
    call {:si_unique_call 811} {:cexpr "i"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_3079;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p10, out_$i7);
    goto corral_source_split_3078;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref(in_$p1, $mul.ref(out_$i9, 4));
    goto corral_source_split_3077;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i8);
    goto corral_source_split_3076;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    out_$i8 := $ashr.i32(out_$i5, 2);
    goto corral_source_split_3075;

  SeqInstr_522:
    goto corral_source_split_3074;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} out_$i7 := jread32(in_$p0, out_$i6);
    goto SeqInstr_521;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $add.i32(in_$i2, out_$i5);
    goto corral_source_split_3073;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i5 := mmapio_memcpy_loop_$bb4(in_$p0, in_$p1, in_$i2, in_$i3, out_$i6, out_$i7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i5);
    return;

  exit:
    return;
}



procedure mmapio_memcpy_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i6: i32, in_$i7: i32, in_$i8: i32, in_$i9: i64, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$i5: i32) returns (out_$i6: i32, out_$i7: i32, out_$i8: i32, out_$i9: i64, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$i5: i32);
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation mdio_memcpy_loop_$bb4(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$p6: ref, in_$p7: ref, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$i12: i16, in_$i13: i64, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$i12: i16, out_$i13: i64, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$i5: i32)
{

  entry:
    out_$p6, out_$p7, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i5 := in_$p6, in_$p7, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$p14, in_$i15, in_$i16, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3090;

  $bb6:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i15;
    goto $bb6_dummy;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i15, in_$i2);
    goto corral_source_split_3102;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i5, 1);
    call {:si_unique_call 815} {:cexpr "i"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_3101;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p14, out_$i12);
    goto corral_source_split_3100;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(in_$p3, $mul.ref(out_$i13, 2));
    goto corral_source_split_3099;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i5);
    goto corral_source_split_3098;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    out_$i12 := $trunc.i32.i16(out_$i11);
    goto corral_source_split_3097;

  SeqInstr_525:
    call {:si_unique_call 814} {:cexpr "tmp"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_3096;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} out_$i11 := jme_mdio_read(out_$p7, out_$i10, out_$i5);
    goto SeqInstr_524;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.0, out_$p9);
    goto corral_source_split_3095;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1528)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3094;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.0, out_$p6);
    goto corral_source_split_3093;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_3092;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i5 := mdio_memcpy_loop_$bb4(in_$p0, in_$i2, in_$p3, out_$p6, out_$p7, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i5);
    return;

  exit:
    return;
}



procedure mdio_memcpy_loop_$bb4(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$p6: ref, in_$p7: ref, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$i12: i16, in_$i13: i64, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$i12: i16, out_$i13: i64, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$i5: i32);
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_wait_link_loop_$bb8(in_$p0: ref, in_$i5: i32, in_$i6: i32, in_$i7: i1, in_$i4: i32, in_$i8: i32, in_$i9: i1) returns (out_$i5: i32, out_$i6: i32, out_$i7: i1, out_$i4: i32, out_$i8: i32, out_$i9: i1)
{

  entry:
    out_$i5, out_$i6, out_$i7, out_$i4, out_$i8, out_$i9 := in_$i5, in_$i6, in_$i7, in_$i4, in_$i8, in_$i9;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4082;

  $bb14:
    assume out_$i7 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i8;
    goto $bb14_dummy;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i6, 0);
    goto corral_source_split_4092;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    out_$i6 := $and.i32(out_$i5, 1024);
    goto corral_source_split_4091;

  SeqInstr_795:
    call {:si_unique_call 988} {:cexpr "phylink"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_4090;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} out_$i5 := jme_linkstat_from_phy(in_$p0);
    goto SeqInstr_794;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} __const_udelay(4295000);
    goto corral_source_split_4112;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} __const_udelay(4295000);
    goto corral_source_split_4110;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} __const_udelay(4295000);
    goto corral_source_split_4108;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} __const_udelay(4295000);
    goto corral_source_split_4106;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} __const_udelay(4295000);
    goto corral_source_split_4104;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} __const_udelay(4295000);
    goto corral_source_split_4102;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} __const_udelay(4295000);
    goto corral_source_split_4100;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} __const_udelay(4295000);
    goto corral_source_split_4088;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} __const_udelay(4295000);
    goto corral_source_split_4086;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume out_$i9 == 1;
    goto corral_source_split_4096;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i32(out_$i8, 0);
    goto corral_source_split_4084;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    out_$i8 := $sub.i32(out_$i4, 10);
    call {:si_unique_call 984} {:cexpr "to"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_4083;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i5, out_$i6, out_$i7, out_$i4, out_$i8, out_$i9 := jme_wait_link_loop_$bb8(in_$p0, out_$i5, out_$i6, out_$i7, out_$i4, out_$i8, out_$i9);
    return;

  exit:
    return;
}



procedure jme_wait_link_loop_$bb8(in_$p0: ref, in_$i5: i32, in_$i6: i32, in_$i7: i1, in_$i4: i32, in_$i8: i32, in_$i9: i1) returns (out_$i5: i32, out_$i6: i32, out_$i7: i1, out_$i4: i32, out_$i8: i32, out_$i9: i1);
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation jme_reload_eeprom_loop_$bb7(in_$p0: ref, in_$i7: i32, in_$i8: i32, in_$i9: i1, in_$i10: i32, in_$i12: i32, in_$i13: i1, in_$i6: i32, in_$i14: i32) returns (out_$i7: i32, out_$i8: i32, out_$i9: i1, out_$i10: i32, out_$i12: i32, out_$i13: i1, out_$i6: i32, out_$i14: i32)
{

  entry:
    out_$i7, out_$i8, out_$i9, out_$i10, out_$i12, out_$i13, out_$i6, out_$i14 := in_$i7, in_$i8, in_$i9, in_$i10, in_$i12, in_$i13, in_$i6, in_$i14;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6294;

  $bb19:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i12;
    goto $bb19_dummy;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i12;
    assume true;
    goto $bb19;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    out_$i13 := $sgt.i32(out_$i12, 0);
    goto corral_source_split_6311;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i12 := $sub.i32(out_$i6, 1);
    call {:si_unique_call 2057} {:cexpr "i"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_6310;

  $bb16:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    out_$i10 := out_$i6;
    assume true;
    goto $bb16;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i8, 0);
    goto corral_source_split_6303;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    out_$i8 := $and.i32(out_$i7, 65536);
    goto corral_source_split_6302;

  SeqInstr_825:
    call {:si_unique_call 2055} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_6301;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} out_$i7 := jread32(in_$p0, 1088);
    goto SeqInstr_824;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} __const_udelay(4295000);
    goto corral_source_split_6297;

  $bb9:
    assume 1 == 1;
    goto corral_source_split_6296;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb9, $bb10;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume !(1 == 1);
    goto corral_source_split_6299;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i7, out_$i8, out_$i9, out_$i10, out_$i12, out_$i13, out_$i6, out_$i14 := jme_reload_eeprom_loop_$bb7(in_$p0, out_$i7, out_$i8, out_$i9, out_$i10, out_$i12, out_$i13, out_$i6, out_$i14);
    return;

  exit:
    return;
}



procedure jme_reload_eeprom_loop_$bb7(in_$p0: ref, in_$i7: i32, in_$i8: i32, in_$i9: i1, in_$i10: i32, in_$i12: i32, in_$i13: i1, in_$i6: i32, in_$i14: i32) returns (out_$i7: i32, out_$i8: i32, out_$i9: i1, out_$i10: i32, out_$i12: i32, out_$i13: i1, out_$i6: i32, out_$i14: i32);
  modifies $M.0, $M.5, $CurrAddr, $M.4, assertsPassed;



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$p71: ref, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$p79: ref, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$p83: ref, in_$i85: i32, in_$i86: i1, in_$p87: ref, in_$p88: ref, in_$i90: i32, in_$i91: i1, in_$p92: ref, in_$p93: ref, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i98: i32, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$p106: ref, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$p111: ref, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$p124: ref, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$i138: i32, in_$i139: i1, in_$i140: i32, in_$i141: i1, in_$i142: i1, in_$i143: i1, in_$i144: i1, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i148: i32, in_$i149: i32, in_$i150: i1, in_$i151: i32, in_$i152: i32, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$i156: i32, in_$i157: i1, in_$p158: ref, in_$i159: i32, in_$i160: i1, in_$i161: i32, in_$i162: i1, in_$i163: i1, in_$i164: i1, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$i169: i32, in_$i170: i1, in_$i171: i32, in_$i172: i32, in_$i173: i1, in_$i174: i32, in_$i175: i1, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i1, in_$i180: i1, in_$i181: i1, in_$i182: i1, in_$i183: i1, in_$i184: i1, in_$i185: i1, in_$i186: i1, in_$i187: i1, in_$i188: i1, in_$i189: i1, in_$i190: i1, in_$i191: i1, in_$i192: i1, in_$i193: i1, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$i197: i32, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i202: i32, in_$i204: i32, in_$i205: i1, in_$p206: ref, in_$i207: i32, in_$i209: i32, in_$i210: i1, in_$p211: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i221: i32, in_$i222: i32, in_$i223: i1, in_$i224: i32, in_$i225: i1, in_$p226: ref, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$i230: i32, in_$i231: i1, in_$p232: ref, in_$i233: i32, in_$i234: i1, in_$p235: ref, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i240: i32, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$i245: i32, in_$i247: i32, in_$i248: i1, in_$p249: ref, in_$i250: i32, in_$i252: i32, in_$i253: i1, in_$p254: ref, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$i264: i32, in_$i265: i1, in_$p266: ref, in_$i268: i32, in_$i269: i1, in_$p270: ref, in_$i271: i32, in_$i273: i32, in_$i274: i1, in_$p275: ref, in_$i276: i32, in_$i278: i32, in_$i279: i1, in_$p280: ref, in_$i281: i32, in_$i283: i32, in_$i284: i1, in_$p285: ref, in_$i286: i32, in_$i288: i32, in_$i289: i1, in_$p290: ref, in_$i291: i32, in_$i293: i32, in_$i294: i1, in_$p295: ref, in_$i297: i32, in_$i298: i1, in_$p299: ref, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$i308: i32, in_$i309: i1, in_$p310: ref, in_$i311: i32, in_$i312: i1, in_$p313: ref, in_$i314: i32, in_$i315: i1, in_$i317: i32, in_$i318: i32, in_$i319: i32, in_$i320: i1, in_$i321: i32, in_$i322: i32, in_$i323: i1, in_$i324: i32, in_$i325: i32, in_$i326: i32, in_$i327: i1, in_$i328: i32, in_$i329: i1, in_$i330: i1, in_$i331: i1, in_$i332: i1, in_$i333: i1, in_$i334: i1, in_$i335: i1, in_$i336: i1, in_$i337: i1, in_$i338: i1, in_$i339: i1, in_$i340: i1, in_$i341: i1, in_$i342: i1, in_$i343: i1, in_$i344: i1, in_$i345: i1, in_$i346: i1, in_$i347: i1, in_$i348: i1, in_$i349: i1, in_$i350: i32, in_$i351: i1, in_$p352: ref, in_$i353: i32, in_$i354: i32, in_$i355: i1, in_$i356: i32, in_$i357: i1, in_$p358: ref, in_$i359: i32, in_$i360: i32, in_$i361: i1, in_$i362: i32, in_$i363: i1, in_$p364: ref, in_$i365: i32, in_$i366: i32, in_$i367: i1, in_$i368: i32, in_$i369: i1, in_$p370: ref, in_$i371: i32, in_$i372: i32, in_$i373: i1, in_$i374: i32, in_$i375: i1, in_$p376: ref, in_$i377: i32, in_$i378: i32, in_$i379: i1, in_$i380: i32, in_$i381: i1, in_$p382: ref, in_$i383: i32, in_$i384: i32, in_$i385: i1, in_$i386: i32, in_$i387: i1, in_$i388: i32, in_$i389: i32, in_$i390: i1, in_$i391: i32, in_$i392: i1, in_$i393: i32, in_$i394: i32, in_$i395: i1, in_$i396: i32, in_$i397: i1, in_$i398: i32, in_$i399: i32, in_$i400: i1, in_$i401: i32, in_$i402: i1, in_$i403: i32, in_$i404: i32, in_$i405: i1, in_$i406: i32, in_$i407: i1, in_$i408: i32, in_$i409: i32, in_$i410: i1, in_$i411: i32, in_$i412: i1, in_$i413: i32, in_$i414: i32, in_$i415: i1, in_$i416: i32, in_$i417: i1, in_$i418: i32, in_$i419: i32, in_$i420: i1, in_$i421: i32, in_$i422: i32, in_$i423: i32, in_$i424: i1, in_$i425: i32, in_$i426: i32, in_$i427: i1, in_$i428: i32, in_$i429: i1, in_$i430: i32, in_$i431: i32, in_$i432: i1, in_$i433: i32, in_$i434: i1, in_$i435: i32, in_$i436: i32, in_$i437: i1, in_$i438: i32, in_$i439: i1, in_$i440: i32, in_$i441: i32, in_$i442: i1, in_$i443: i32, in_$i444: i1, in_$i445: i32, in_$i446: i32, in_$i447: i1, in_$i448: i32, in_$i449: i1, in_$i450: i32, in_$i451: i32, in_$i452: i1, in_$i453: i32, in_$i454: i1, in_$i456: i32, in_$i457: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i32, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32) returns (out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$p71: ref, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$p79: ref, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$p83: ref, out_$i85: i32, out_$i86: i1, out_$p87: ref, out_$p88: ref, out_$i90: i32, out_$i91: i1, out_$p92: ref, out_$p93: ref, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i98: i32, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$p106: ref, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$p111: ref, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$p124: ref, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$i138: i32, out_$i139: i1, out_$i140: i32, out_$i141: i1, out_$i142: i1, out_$i143: i1, out_$i144: i1, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i148: i32, out_$i149: i32, out_$i150: i1, out_$i151: i32, out_$i152: i32, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$i156: i32, out_$i157: i1, out_$p158: ref, out_$i159: i32, out_$i160: i1, out_$i161: i32, out_$i162: i1, out_$i163: i1, out_$i164: i1, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$i169: i32, out_$i170: i1, out_$i171: i32, out_$i172: i32, out_$i173: i1, out_$i174: i32, out_$i175: i1, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i1, out_$i180: i1, out_$i181: i1, out_$i182: i1, out_$i183: i1, out_$i184: i1, out_$i185: i1, out_$i186: i1, out_$i187: i1, out_$i188: i1, out_$i189: i1, out_$i190: i1, out_$i191: i1, out_$i192: i1, out_$i193: i1, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$i197: i32, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i202: i32, out_$i204: i32, out_$i205: i1, out_$p206: ref, out_$i207: i32, out_$i209: i32, out_$i210: i1, out_$p211: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i221: i32, out_$i222: i32, out_$i223: i1, out_$i224: i32, out_$i225: i1, out_$p226: ref, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$i230: i32, out_$i231: i1, out_$p232: ref, out_$i233: i32, out_$i234: i1, out_$p235: ref, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i240: i32, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$i245: i32, out_$i247: i32, out_$i248: i1, out_$p249: ref, out_$i250: i32, out_$i252: i32, out_$i253: i1, out_$p254: ref, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$i264: i32, out_$i265: i1, out_$p266: ref, out_$i268: i32, out_$i269: i1, out_$p270: ref, out_$i271: i32, out_$i273: i32, out_$i274: i1, out_$p275: ref, out_$i276: i32, out_$i278: i32, out_$i279: i1, out_$p280: ref, out_$i281: i32, out_$i283: i32, out_$i284: i1, out_$p285: ref, out_$i286: i32, out_$i288: i32, out_$i289: i1, out_$p290: ref, out_$i291: i32, out_$i293: i32, out_$i294: i1, out_$p295: ref, out_$i297: i32, out_$i298: i1, out_$p299: ref, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$i308: i32, out_$i309: i1, out_$p310: ref, out_$i311: i32, out_$i312: i1, out_$p313: ref, out_$i314: i32, out_$i315: i1, out_$i317: i32, out_$i318: i32, out_$i319: i32, out_$i320: i1, out_$i321: i32, out_$i322: i32, out_$i323: i1, out_$i324: i32, out_$i325: i32, out_$i326: i32, out_$i327: i1, out_$i328: i32, out_$i329: i1, out_$i330: i1, out_$i331: i1, out_$i332: i1, out_$i333: i1, out_$i334: i1, out_$i335: i1, out_$i336: i1, out_$i337: i1, out_$i338: i1, out_$i339: i1, out_$i340: i1, out_$i341: i1, out_$i342: i1, out_$i343: i1, out_$i344: i1, out_$i345: i1, out_$i346: i1, out_$i347: i1, out_$i348: i1, out_$i349: i1, out_$i350: i32, out_$i351: i1, out_$p352: ref, out_$i353: i32, out_$i354: i32, out_$i355: i1, out_$i356: i32, out_$i357: i1, out_$p358: ref, out_$i359: i32, out_$i360: i32, out_$i361: i1, out_$i362: i32, out_$i363: i1, out_$p364: ref, out_$i365: i32, out_$i366: i32, out_$i367: i1, out_$i368: i32, out_$i369: i1, out_$p370: ref, out_$i371: i32, out_$i372: i32, out_$i373: i1, out_$i374: i32, out_$i375: i1, out_$p376: ref, out_$i377: i32, out_$i378: i32, out_$i379: i1, out_$i380: i32, out_$i381: i1, out_$p382: ref, out_$i383: i32, out_$i384: i32, out_$i385: i1, out_$i386: i32, out_$i387: i1, out_$i388: i32, out_$i389: i32, out_$i390: i1, out_$i391: i32, out_$i392: i1, out_$i393: i32, out_$i394: i32, out_$i395: i1, out_$i396: i32, out_$i397: i1, out_$i398: i32, out_$i399: i32, out_$i400: i1, out_$i401: i32, out_$i402: i1, out_$i403: i32, out_$i404: i32, out_$i405: i1, out_$i406: i32, out_$i407: i1, out_$i408: i32, out_$i409: i32, out_$i410: i1, out_$i411: i32, out_$i412: i1, out_$i413: i32, out_$i414: i32, out_$i415: i1, out_$i416: i32, out_$i417: i1, out_$i418: i32, out_$i419: i32, out_$i420: i1, out_$i421: i32, out_$i422: i32, out_$i423: i32, out_$i424: i1, out_$i425: i32, out_$i426: i32, out_$i427: i1, out_$i428: i32, out_$i429: i1, out_$i430: i32, out_$i431: i32, out_$i432: i1, out_$i433: i32, out_$i434: i1, out_$i435: i32, out_$i436: i32, out_$i437: i1, out_$i438: i32, out_$i439: i1, out_$i440: i32, out_$i441: i32, out_$i442: i1, out_$i443: i32, out_$i444: i1, out_$i445: i32, out_$i446: i32, out_$i447: i1, out_$i448: i32, out_$i449: i1, out_$i450: i32, out_$i451: i32, out_$i452: i1, out_$i453: i32, out_$i454: i1, out_$i456: i32, out_$i457: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i32, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32)
{

  entry:
    out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i68, out_$i69, out_$p70, out_$p71, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i85, out_$i86, out_$p87, out_$p88, out_$i90, out_$i91, out_$p92, out_$p93, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i103, out_$i104, out_$p105, out_$p106, out_$i108, out_$i109, out_$p110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$i126, out_$i127, out_$p128, out_$i130, out_$i131, out_$p132, out_$i134, out_$i135, out_$p136, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$p196, out_$i197, out_$i199, out_$i200, out_$p201, out_$i202, out_$i204, out_$i205, out_$p206, out_$i207, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$p229, out_$i230, out_$i231, out_$p232, out_$i233, out_$i234, out_$p235, out_$i237, out_$i238, out_$p239, out_$i240, out_$i242, out_$i243, out_$p244, out_$i245, out_$i247, out_$i248, out_$p249, out_$i250, out_$i252, out_$i253, out_$p254, out_$i256, out_$i257, out_$p258, out_$i260, out_$i261, out_$p262, out_$i264, out_$i265, out_$p266, out_$i268, out_$i269, out_$p270, out_$i271, out_$i273, out_$i274, out_$p275, out_$i276, out_$i278, out_$i279, out_$p280, out_$i281, out_$i283, out_$i284, out_$p285, out_$i286, out_$i288, out_$i289, out_$p290, out_$i291, out_$i293, out_$i294, out_$p295, out_$i297, out_$i298, out_$p299, out_$i301, out_$i302, out_$p303, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$p310, out_$i311, out_$i312, out_$p313, out_$i314, out_$i315, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$p352, out_$i353, out_$i354, out_$i355, out_$i356, out_$i357, out_$p358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i363, out_$p364, out_$i365, out_$i366, out_$i367, out_$i368, out_$i369, out_$p370, out_$i371, out_$i372, out_$i373, out_$i374, out_$i375, out_$p376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$p382, out_$i383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$i447, out_$i448, out_$i449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i456, out_$i457, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102 := in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$p62, in_$i63, in_$i64, in_$p65, in_$p66, in_$i68, in_$i69, in_$p70, in_$p71, in_$i73, in_$i74, in_$p75, in_$i76, in_$i77, in_$p78, in_$p79, in_$i80, in_$i81, in_$p82, in_$p83, in_$i85, in_$i86, in_$p87, in_$p88, in_$i90, in_$i91, in_$p92, in_$p93, in_$i95, in_$i96, in_$p97, in_$i98, in_$i99, in_$i100, in_$p101, in_$i103, in_$i104, in_$p105, in_$p106, in_$i108, in_$i109, in_$p110, in_$p111, in_$i113, in_$i114, in_$p115, in_$i117, in_$i118, in_$p119, in_$p120, in_$i121, in_$i122, in_$p123, in_$p124, in_$i126, in_$i127, in_$p128, in_$i130, in_$i131, in_$p132, in_$i134, in_$i135, in_$p136, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$p147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$p155, in_$i156, in_$i157, in_$p158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$p196, in_$i197, in_$i199, in_$i200, in_$p201, in_$i202, in_$i204, in_$i205, in_$p206, in_$i207, in_$i209, in_$i210, in_$p211, in_$i212, in_$i213, in_$p214, in_$i215, in_$i216, in_$p217, in_$i218, in_$i219, in_$p220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i225, in_$p226, in_$i227, in_$i228, in_$p229, in_$i230, in_$i231, in_$p232, in_$i233, in_$i234, in_$p235, in_$i237, in_$i238, in_$p239, in_$i240, in_$i242, in_$i243, in_$p244, in_$i245, in_$i247, in_$i248, in_$p249, in_$i250, in_$i252, in_$i253, in_$p254, in_$i256, in_$i257, in_$p258, in_$i260, in_$i261, in_$p262, in_$i264, in_$i265, in_$p266, in_$i268, in_$i269, in_$p270, in_$i271, in_$i273, in_$i274, in_$p275, in_$i276, in_$i278, in_$i279, in_$p280, in_$i281, in_$i283, in_$i284, in_$p285, in_$i286, in_$i288, in_$i289, in_$p290, in_$i291, in_$i293, in_$i294, in_$p295, in_$i297, in_$i298, in_$p299, in_$i301, in_$i302, in_$p303, in_$i305, in_$i306, in_$p307, in_$i308, in_$i309, in_$p310, in_$i311, in_$i312, in_$p313, in_$i314, in_$i315, in_$i317, in_$i318, in_$i319, in_$i320, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$i326, in_$i327, in_$i328, in_$i329, in_$i330, in_$i331, in_$i332, in_$i333, in_$i334, in_$i335, in_$i336, in_$i337, in_$i338, in_$i339, in_$i340, in_$i341, in_$i342, in_$i343, in_$i344, in_$i345, in_$i346, in_$i347, in_$i348, in_$i349, in_$i350, in_$i351, in_$p352, in_$i353, in_$i354, in_$i355, in_$i356, in_$i357, in_$p358, in_$i359, in_$i360, in_$i361, in_$i362, in_$i363, in_$p364, in_$i365, in_$i366, in_$i367, in_$i368, in_$i369, in_$p370, in_$i371, in_$i372, in_$i373, in_$i374, in_$i375, in_$p376, in_$i377, in_$i378, in_$i379, in_$i380, in_$i381, in_$p382, in_$i383, in_$i384, in_$i385, in_$i386, in_$i387, in_$i388, in_$i389, in_$i390, in_$i391, in_$i392, in_$i393, in_$i394, in_$i395, in_$i396, in_$i397, in_$i398, in_$i399, in_$i400, in_$i401, in_$i402, in_$i403, in_$i404, in_$i405, in_$i406, in_$i407, in_$i408, in_$i409, in_$i410, in_$i411, in_$i412, in_$i413, in_$i414, in_$i415, in_$i416, in_$i417, in_$i418, in_$i419, in_$i420, in_$i421, in_$i422, in_$i423, in_$i424, in_$i425, in_$i426, in_$i427, in_$i428, in_$i429, in_$i430, in_$i431, in_$i432, in_$i433, in_$i434, in_$i435, in_$i436, in_$i437, in_$i438, in_$i439, in_$i440, in_$i441, in_$i442, in_$i443, in_$i444, in_$i445, in_$i446, in_$i447, in_$i448, in_$i449, in_$i450, in_$i451, in_$i452, in_$i453, in_$i454, in_$i456, in_$i457, in_vslice_dummy_var_69, in_vslice_dummy_var_70, in_vslice_dummy_var_71, in_vslice_dummy_var_72, in_vslice_dummy_var_73, in_vslice_dummy_var_74, in_vslice_dummy_var_75, in_vslice_dummy_var_76, in_vslice_dummy_var_77, in_vslice_dummy_var_78, in_vslice_dummy_var_79, in_vslice_dummy_var_80, in_vslice_dummy_var_81, in_vslice_dummy_var_82, in_vslice_dummy_var_83, in_vslice_dummy_var_84, in_vslice_dummy_var_85, in_vslice_dummy_var_86, in_vslice_dummy_var_87, in_vslice_dummy_var_88, in_vslice_dummy_var_89, in_vslice_dummy_var_90, in_vslice_dummy_var_91, in_vslice_dummy_var_92, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95, in_vslice_dummy_var_96, in_vslice_dummy_var_97, in_vslice_dummy_var_98, in_vslice_dummy_var_99, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2193} out_$i31 := __VERIFIER_nondet_int();
    call {:si_unique_call 2194} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i31);
    call {:si_unique_call 2195} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i31);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb116_dummy;

  $bb480:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb478:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb311:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb17:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2200} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6691;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2199} jme_get_drvinfo(out_$p62, in_$p11);
    goto corral_source_split_6690;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    out_$p62 := $M.15;
    goto corral_source_split_6689;

  $bb58:
    assume out_$i61 == 1;
    goto corral_source_split_6688;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, 1);
    goto corral_source_split_6686;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    out_$i60 := $M.21;
    goto corral_source_split_6685;

  $bb56:
    assume out_$i59 == 1;
    goto corral_source_split_6684;

  $bb54:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i40, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb50:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i58 := $slt.i32(out_$i40, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb40:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i40, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb19:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i40, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i40, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_6614:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2196} out_$i40 := __VERIFIER_nondet_int();
    call {:si_unique_call 2197} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i40);
    call {:si_unique_call 2198} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i40);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i39 == 1;
    goto corral_source_split_6614;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_6612;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    out_$i38 := $M.21;
    goto corral_source_split_6611;

  $bb14:
    assume out_$i37 == 1;
    goto corral_source_split_6610;

  $bb12:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i31, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb3:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i36 := $slt.i32(out_$i31, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i31, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb63:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2202} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6697;

  SeqInstr_903:
    goto corral_source_split_6696;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2201} out_vslice_dummy_var_69 := jme_set_pauseparam(out_$p65, out_$p66);
    goto SeqInstr_902;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    out_$p66 := $M.19;
    goto corral_source_split_6695;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    out_$p65 := $M.15;
    goto corral_source_split_6694;

  $bb62:
    assume out_$i64 == 1;
    goto corral_source_split_6693;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i63, 1);
    goto corral_source_split_6682;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    out_$i63 := $M.21;
    goto corral_source_split_6681;

  $bb55:
    assume !(out_$i58 == 1);
    goto corral_source_split_6680;

  $bb66:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2204} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6703;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2203} out_vslice_dummy_var_70 := jme_get_coalesce(out_$p70, out_$p71);
    goto corral_source_split_6702;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    out_$p71 := $M.14;
    goto corral_source_split_6701;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    out_$p70 := $M.15;
    goto corral_source_split_6700;

  $bb65:
    assume out_$i69 == 1;
    goto corral_source_split_6699;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 1);
    goto corral_source_split_6674;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    out_$i68 := $M.21;
    goto corral_source_split_6673;

  $bb52:
    assume out_$i57 == 1;
    goto corral_source_split_6672;

  $bb51:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    out_$i57 := $slt.i32(out_$i40, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb69:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2206} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6708;

  SeqInstr_906:
    goto corral_source_split_6707;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2205} jme_get_regs(out_$p75, in_$p7, in_$p8);
    goto SeqInstr_905;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    out_$p75 := $M.15;
    goto corral_source_split_6706;

  $bb68:
    assume out_$i74 == 1;
    goto corral_source_split_6705;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i73, 1);
    goto corral_source_split_6678;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    out_$i73 := $M.21;
    goto corral_source_split_6677;

  $bb53:
    assume !(out_$i57 == 1);
    goto corral_source_split_6676;

  $bb72:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2208} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6714;

  SeqInstr_909:
    goto corral_source_split_6713;

  SeqInstr_908:
    assume assertsPassed;
    goto SeqInstr_909;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2207} jme_get_pauseparam(out_$p78, out_$p79);
    goto SeqInstr_908;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    out_$p79 := $M.19;
    goto corral_source_split_6712;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    out_$p78 := $M.15;
    goto corral_source_split_6711;

  $bb71:
    assume out_$i77 == 1;
    goto corral_source_split_6710;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i76, 1);
    goto corral_source_split_6666;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    out_$i76 := $M.21;
    goto corral_source_split_6665;

  $bb48:
    assume out_$i55 == 1;
    goto corral_source_split_6664;

  $bb42:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i55 := $slt.i32(out_$i40, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb41:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    out_$i52 := $slt.i32(out_$i40, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb75:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2210} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6720;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2209} out_vslice_dummy_var_71 := jme_get_settings(out_$p82, out_$p83);
    goto corral_source_split_6719;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    out_$p83 := $M.17;
    goto corral_source_split_6718;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    out_$p82 := $M.15;
    goto corral_source_split_6717;

  $bb74:
    assume out_$i81 == 1;
    goto corral_source_split_6716;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i80, 1);
    goto corral_source_split_6670;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    out_$i80 := $M.21;
    goto corral_source_split_6669;

  $bb49:
    assume !(out_$i55 == 1);
    goto corral_source_split_6668;

  $bb78:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2212} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6726;

  SeqInstr_912:
    goto corral_source_split_6725;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2211} out_vslice_dummy_var_72 := jme_set_coalesce(out_$p87, out_$p88);
    goto SeqInstr_911;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    out_$p88 := $M.14;
    goto corral_source_split_6724;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    out_$p87 := $M.15;
    goto corral_source_split_6723;

  $bb77:
    assume out_$i86 == 1;
    goto corral_source_split_6722;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i85, 1);
    goto corral_source_split_6654;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    out_$i85 := $M.21;
    goto corral_source_split_6653;

  $bb44:
    assume out_$i53 == 1;
    goto corral_source_split_6652;

  $bb43:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i40, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb81:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2214} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6732;

  SeqInstr_915:
    goto corral_source_split_6731;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2213} out_vslice_dummy_var_73 := jme_set_wol(out_$p92, out_$p93);
    goto SeqInstr_914;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    out_$p93 := $M.18;
    goto corral_source_split_6730;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    out_$p92 := $M.15;
    goto corral_source_split_6729;

  $bb80:
    assume out_$i91 == 1;
    goto corral_source_split_6728;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i90, 1);
    goto corral_source_split_6658;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    out_$i90 := $M.21;
    goto corral_source_split_6657;

  $bb46:
    assume out_$i54 == 1;
    goto corral_source_split_6656;

  $bb45:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i40, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb84:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2216} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6738;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} jme_set_msglevel(out_$p97, out_$i98);
    goto corral_source_split_6737;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i32($M.12, in_$p0);
    goto corral_source_split_6736;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    out_$p97 := $M.15;
    goto corral_source_split_6735;

  $bb83:
    assume out_$i96 == 1;
    goto corral_source_split_6734;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    out_$i96 := $eq.i32(out_$i95, 1);
    goto corral_source_split_6662;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    out_$i95 := $M.21;
    goto corral_source_split_6661;

  $bb47:
    assume !(out_$i54 == 1);
    goto corral_source_split_6660;

  $bb87:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2218} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6743;

  SeqInstr_918:
    goto corral_source_split_6742;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2217} out_vslice_dummy_var_74 := jme_get_eeprom_len(out_$p101);
    goto SeqInstr_917;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    out_$p101 := $M.15;
    goto corral_source_split_6741;

  $bb86:
    assume out_$i100 == 1;
    goto corral_source_split_6740;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i99, 1);
    goto corral_source_split_6646;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    out_$i99 := $M.21;
    goto corral_source_split_6645;

  $bb38:
    assume out_$i50 == 1;
    goto corral_source_split_6644;

  $bb34:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i50 := $slt.i32(out_$i40, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb21:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i48 := $slt.i32(out_$i40, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb20:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i40, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb90:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2220} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6749;

  SeqInstr_921:
    goto corral_source_split_6748;

  SeqInstr_920:
    assume assertsPassed;
    goto SeqInstr_921;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2219} out_vslice_dummy_var_75 := jme_set_settings(out_$p105, out_$p106);
    goto SeqInstr_920;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    out_$p106 := $M.17;
    goto corral_source_split_6747;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    out_$p105 := $M.15;
    goto corral_source_split_6746;

  $bb89:
    assume out_$i104 == 1;
    goto corral_source_split_6745;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i103, 1);
    goto corral_source_split_6650;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    out_$i103 := $M.21;
    goto corral_source_split_6649;

  $bb39:
    assume !(out_$i50 == 1);
    goto corral_source_split_6648;

  $bb93:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2222} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6755;

  SeqInstr_924:
    goto corral_source_split_6754;

  SeqInstr_923:
    assume assertsPassed;
    goto SeqInstr_924;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2221} out_vslice_dummy_var_76 := jme_get_eeprom(out_$p110, out_$p111, in_$p5);
    goto SeqInstr_923;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    out_$p111 := $M.16;
    goto corral_source_split_6753;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    out_$p110 := $M.15;
    goto corral_source_split_6752;

  $bb92:
    assume out_$i109 == 1;
    goto corral_source_split_6751;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i32(out_$i108, 1);
    goto corral_source_split_6638;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    out_$i108 := $M.21;
    goto corral_source_split_6637;

  $bb36:
    assume out_$i49 == 1;
    goto corral_source_split_6636;

  $bb35:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i40, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb96:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2224} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6760;

  SeqInstr_927:
    goto corral_source_split_6759;

  SeqInstr_926:
    assume assertsPassed;
    goto SeqInstr_927;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2223} out_vslice_dummy_var_77 := jme_nway_reset(out_$p115);
    goto SeqInstr_926;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    out_$p115 := $M.15;
    goto corral_source_split_6758;

  $bb95:
    assume out_$i114 == 1;
    goto corral_source_split_6757;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 1);
    goto corral_source_split_6642;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    out_$i113 := $M.21;
    goto corral_source_split_6641;

  $bb37:
    assume !(out_$i49 == 1);
    goto corral_source_split_6640;

  $bb99:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2226} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6766;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2225} jme_get_wol(out_$p119, out_$p120);
    goto corral_source_split_6765;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    out_$p120 := $M.18;
    goto corral_source_split_6764;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    out_$p119 := $M.15;
    goto corral_source_split_6763;

  $bb98:
    assume out_$i118 == 1;
    goto corral_source_split_6762;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i117, 1);
    goto corral_source_split_6630;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    out_$i117 := $M.21;
    goto corral_source_split_6629;

  $bb32:
    assume out_$i47 == 1;
    goto corral_source_split_6628;

  $bb23:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i40, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb22:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := $slt.i32(out_$i40, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb102:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2228} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6772;

  SeqInstr_930:
    goto corral_source_split_6771;

  SeqInstr_929:
    assume assertsPassed;
    goto SeqInstr_930;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2227} out_vslice_dummy_var_78 := jme_set_eeprom(out_$p123, out_$p124, in_$p9);
    goto SeqInstr_929;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    out_$p124 := $M.16;
    goto corral_source_split_6770;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    out_$p123 := $M.15;
    goto corral_source_split_6769;

  $bb101:
    assume out_$i122 == 1;
    goto corral_source_split_6768;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 1);
    goto corral_source_split_6634;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    out_$i121 := $M.21;
    goto corral_source_split_6633;

  $bb33:
    assume !(out_$i47 == 1);
    goto corral_source_split_6632;

  $bb105:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2230} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6777;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2229} out_vslice_dummy_var_79 := jme_get_msglevel(out_$p128);
    goto corral_source_split_6776;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    out_$p128 := $M.15;
    goto corral_source_split_6775;

  $bb104:
    assume out_$i127 == 1;
    goto corral_source_split_6774;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i32(out_$i126, 1);
    goto corral_source_split_6618;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    out_$i126 := $M.21;
    goto corral_source_split_6617;

  $bb25:
    assume out_$i44 == 1;
    goto corral_source_split_6616;

  $bb24:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i40, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb108:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2232} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6782;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2231} out_vslice_dummy_var_80 := jme_get_regs_len(out_$p132);
    goto corral_source_split_6781;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    out_$p132 := $M.15;
    goto corral_source_split_6780;

  $bb107:
    assume out_$i131 == 1;
    goto corral_source_split_6779;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i130, 1);
    goto corral_source_split_6622;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    out_$i130 := $M.21;
    goto corral_source_split_6621;

  $bb27:
    assume out_$i45 == 1;
    goto corral_source_split_6620;

  $bb26:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i40, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb111:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2234} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6787;

  SeqInstr_933:
    goto corral_source_split_6786;

  SeqInstr_932:
    assume assertsPassed;
    goto SeqInstr_933;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} out_vslice_dummy_var_81 := jme_get_link(out_$p136);
    goto SeqInstr_932;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    out_$p136 := $M.15;
    goto corral_source_split_6785;

  $bb110:
    assume out_$i135 == 1;
    goto corral_source_split_6784;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 1);
    goto corral_source_split_6626;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    out_$i134 := $M.21;
    goto corral_source_split_6625;

  $bb29:
    assume out_$i46 == 1;
    goto corral_source_split_6624;

  $bb28:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i40, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} ldv_stop();
    goto corral_source_split_6789;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i46 == 1);
    goto $bb31;

  $bb57:
    assume {:verifier.code 0} true;
    assume !(out_$i59 == 1);
    goto $bb31;

  $bb118:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb130:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb132:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $M.23 := out_$i152;
    call {:si_unique_call 2242} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i152);
    goto corral_source_split_6816;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    out_$i152 := $add.i32(out_$i151, 1);
    goto corral_source_split_6815;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    out_$i151 := $M.23;
    goto corral_source_split_6814;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 2241} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6813;

  $bb131:
    assume out_$i150 == 1;
    goto corral_source_split_6812;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    out_$i150 := $eq.i32(out_$i149, 0);
    goto corral_source_split_6810;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    out_$i149 := $M.26;
    goto corral_source_split_6809;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $M.26 := out_$i148;
    call {:si_unique_call 2240} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i148);
    goto corral_source_split_6808;

  SeqInstr_936:
    goto corral_source_split_6807;

  SeqInstr_935:
    assume assertsPassed;
    goto SeqInstr_936;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2239} out_$i148 := jme_init_one(out_$p147, in_$p13);
    goto SeqInstr_935;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    out_$p147 := $M.13;
    goto corral_source_split_6806;

  $bb129:
    assume out_$i146 == 1;
    goto corral_source_split_6805;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(out_$i145, 1);
    goto corral_source_split_6803;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    out_$i145 := $M.22;
    goto corral_source_split_6802;

  $bb127:
    assume out_$i144 == 1;
    goto corral_source_split_6801;

  $bb120:
    assume out_$i141 == 1;
    assume {:verifier.code 0} true;
    out_$i144 := $eq.i32(out_$i140, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb119:
    assume {:verifier.code 0} true;
    out_$i141 := $slt.i32(out_$i140, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  corral_source_split_6791:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2236} out_$i140 := __VERIFIER_nondet_int();
    call {:si_unique_call 2237} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i140);
    call {:si_unique_call 2238} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i140);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb117:
    assume out_$i139 == 1;
    goto corral_source_split_6791;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    out_$i139 := $ne.i32(out_$i138, 0);
    goto corral_source_split_6608;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    out_$i138 := $M.22;
    goto corral_source_split_6607;

  $bb13:
    assume !(out_$i36 == 1);
    goto corral_source_split_6606;

  $bb137:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 2244} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_6821;

  SeqInstr_939:
    goto corral_source_split_6820;

  SeqInstr_938:
    assume assertsPassed;
    goto SeqInstr_939;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} jme_shutdown(out_$p155);
    goto SeqInstr_938;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    out_$p155 := $M.13;
    goto corral_source_split_6819;

  $bb136:
    assume out_$i154 == 1;
    goto corral_source_split_6818;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    out_$i154 := $eq.i32(out_$i153, 2);
    goto corral_source_split_6795;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    out_$i153 := $M.22;
    goto corral_source_split_6794;

  $bb122:
    assume out_$i142 == 1;
    goto corral_source_split_6793;

  $bb121:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    out_$i142 := $slt.i32(out_$i140, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb140:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 2246} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6826;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2245} jme_remove_one(out_$p158);
    goto corral_source_split_6825;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    out_$p158 := $M.13;
    goto corral_source_split_6824;

  $bb139:
    assume out_$i157 == 1;
    goto corral_source_split_6823;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    out_$i157 := $eq.i32(out_$i156, 2);
    goto corral_source_split_6799;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    out_$i156 := $M.22;
    goto corral_source_split_6798;

  $bb124:
    assume out_$i143 == 1;
    goto corral_source_split_6797;

  $bb123:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i140, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2247} ldv_stop();
    goto corral_source_split_6828;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb125:
    assume {:verifier.code 0} true;
    assume !(out_$i143 == 1);
    goto $bb126;

  $bb128:
    assume {:verifier.code 0} true;
    assume !(out_$i144 == 1);
    goto $bb126;

  $bb146:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb156:
    assume {:verifier.code 0} true;
    assume !(out_$i166 == 1);
    goto $bb157;

  $bb159:
    assume {:verifier.code 0} true;
    assume !(out_$i168 == 1);
    goto $bb157;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 0);
    goto corral_source_split_6842;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    out_$i167 := $M.23;
    goto corral_source_split_6841;

  $bb155:
    assume out_$i166 == 1;
    goto corral_source_split_6840;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i165, 3);
    goto corral_source_split_6838;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    out_$i165 := $M.24;
    goto corral_source_split_6837;

  $bb153:
    assume out_$i164 == 1;
    goto corral_source_split_6836;

  $bb148:
    assume out_$i162 == 1;
    assume {:verifier.code 0} true;
    out_$i164 := $eq.i32(out_$i161, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb147:
    assume {:verifier.code 0} true;
    out_$i162 := $slt.i32(out_$i161, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_6830:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2248} out_$i161 := __VERIFIER_nondet_int();
    call {:si_unique_call 2249} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i161);
    call {:si_unique_call 2250} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i161);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb145:
    assume out_$i160 == 1;
    goto corral_source_split_6830;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    out_$i160 := $ne.i32(out_$i159, 0);
    goto corral_source_split_6596;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    out_$i159 := $M.24;
    goto corral_source_split_6595;

  $bb5:
    assume out_$i33 == 1;
    goto corral_source_split_6594;

  $bb4:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i31, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb164:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb169:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    out_$i175 := $ne.i32(out_$i174, 0);
    goto corral_source_split_6864;

  $bb167:
    assume {:verifier.code 0} true;
    out_$i174 := $M.27;
    goto corral_source_split_6863;

  $bb166:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    goto $bb167;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} ldv_initialize_ethtool_ops_4();
    goto corral_source_split_6861;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2259} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6860;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2258} ldv_dev_pm_ops_2();
    goto corral_source_split_6859;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 2257} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6858;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $M.24 := 3;
    call {:si_unique_call 2256} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_6857;

  $bb165:
    assume out_$i173 == 1;
    goto corral_source_split_6856;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    out_$i173 := $eq.i32(out_$i172, 0);
    goto corral_source_split_6854;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    out_$i172 := $M.27;
    goto corral_source_split_6853;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $M.27 := out_$i171;
    call {:si_unique_call 2255} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i171);
    goto corral_source_split_6852;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} out_$i171 := jme_init_module();
    goto corral_source_split_6851;

  $bb163:
    assume out_$i170 == 1;
    goto corral_source_split_6850;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    out_$i170 := $eq.i32(out_$i169, 1);
    goto corral_source_split_6834;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    out_$i169 := $M.24;
    goto corral_source_split_6833;

  $bb150:
    assume out_$i163 == 1;
    goto corral_source_split_6832;

  $bb149:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i32(out_$i161, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} ldv_stop();
    goto corral_source_split_6869;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb151:
    assume {:verifier.code 0} true;
    assume !(out_$i163 == 1);
    goto $bb152;

  $bb154:
    assume {:verifier.code 0} true;
    assume !(out_$i164 == 1);
    goto $bb152;

  $bb176:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb302:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb216:
    assume !(out_$i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 2271} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6951;

  SeqInstr_951:
    goto corral_source_split_6950;

  SeqInstr_950:
    assume assertsPassed;
    goto SeqInstr_951;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} out_vslice_dummy_var_84 := jme_ioctl(out_$p206, in_$p20, out_$i207);
    goto SeqInstr_950;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    out_$i207 := $load.i32($M.12, in_$p2);
    goto corral_source_split_6949;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    out_$p206 := $M.9;
    goto corral_source_split_6948;

  $bb215:
    assume out_$i205 == 1;
    goto corral_source_split_6947;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    out_$i205 := $eq.i32(out_$i204, 2);
    goto corral_source_split_6945;

  $bb214:
    assume {:verifier.code 0} true;
    out_$i204 := $M.8;
    goto corral_source_split_6944;

  $bb213:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 2269} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6942;

  SeqInstr_948:
    goto corral_source_split_6941;

  SeqInstr_947:
    assume assertsPassed;
    goto SeqInstr_948;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2268} out_vslice_dummy_var_83 := jme_ioctl(out_$p201, in_$p20, out_$i202);
    goto SeqInstr_947;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    out_$i202 := $load.i32($M.12, in_$p2);
    goto corral_source_split_6940;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    out_$p201 := $M.9;
    goto corral_source_split_6939;

  $bb212:
    assume out_$i200 == 1;
    goto corral_source_split_6938;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    out_$i200 := $eq.i32(out_$i199, 3);
    goto corral_source_split_6936;

  $bb211:
    assume {:verifier.code 0} true;
    out_$i199 := $M.8;
    goto corral_source_split_6935;

  $bb210:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 2267} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6933;

  SeqInstr_945:
    goto corral_source_split_6932;

  SeqInstr_944:
    assume assertsPassed;
    goto SeqInstr_945;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} out_vslice_dummy_var_82 := jme_ioctl(out_$p196, in_$p20, out_$i197);
    goto SeqInstr_944;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    out_$i197 := $load.i32($M.12, in_$p2);
    goto corral_source_split_6931;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    out_$p196 := $M.9;
    goto corral_source_split_6930;

  $bb209:
    assume out_$i195 == 1;
    goto corral_source_split_6929;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i32(out_$i194, 1);
    goto corral_source_split_6927;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    out_$i194 := $M.8;
    goto corral_source_split_6926;

  $bb207:
    assume out_$i193 == 1;
    goto corral_source_split_6925;

  $bb203:
    assume out_$i191 == 1;
    assume {:verifier.code 0} true;
    out_$i193 := $eq.i32(out_$i178, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb195:
    assume out_$i187 == 1;
    assume {:verifier.code 0} true;
    out_$i191 := $slt.i32(out_$i178, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb178:
    assume out_$i179 == 1;
    assume {:verifier.code 0} true;
    out_$i187 := $slt.i32(out_$i178, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb177:
    assume {:verifier.code 0} true;
    out_$i179 := $slt.i32(out_$i178, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  corral_source_split_6871:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2263} out_$i178 := __VERIFIER_nondet_int();
    call {:si_unique_call 2264} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i178);
    call {:si_unique_call 2265} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i178);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb175:
    assume out_$i177 == 1;
    goto corral_source_split_6871;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    out_$i177 := $ne.i32(out_$i176, 0);
    goto corral_source_split_6600;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    out_$i176 := $M.8;
    goto corral_source_split_6599;

  $bb7:
    assume out_$i34 == 1;
    goto corral_source_split_6598;

  $bb6:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i31, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb226:
    assume !(out_$i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 2277} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6972;

  SeqInstr_960:
    goto corral_source_split_6971;

  SeqInstr_959:
    assume assertsPassed;
    goto SeqInstr_960;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} jme_set_multi(out_$p217);
    goto SeqInstr_959;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    out_$p217 := $M.9;
    goto corral_source_split_6970;

  $bb225:
    assume out_$i216 == 1;
    goto corral_source_split_6969;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    out_$i216 := $eq.i32(out_$i215, 2);
    goto corral_source_split_6967;

  $bb224:
    assume {:verifier.code 0} true;
    out_$i215 := $M.8;
    goto corral_source_split_6966;

  $bb223:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 2275} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6964;

  SeqInstr_957:
    goto corral_source_split_6963;

  SeqInstr_956:
    assume assertsPassed;
    goto SeqInstr_957;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} jme_set_multi(out_$p214);
    goto SeqInstr_956;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    out_$p214 := $M.9;
    goto corral_source_split_6962;

  $bb222:
    assume out_$i213 == 1;
    goto corral_source_split_6961;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 3);
    goto corral_source_split_6959;

  $bb221:
    assume {:verifier.code 0} true;
    out_$i212 := $M.8;
    goto corral_source_split_6958;

  $bb220:
    assume !(out_$i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 2273} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6956;

  SeqInstr_954:
    goto corral_source_split_6955;

  SeqInstr_953:
    assume assertsPassed;
    goto SeqInstr_954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} jme_set_multi(out_$p211);
    goto SeqInstr_953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    out_$p211 := $M.9;
    goto corral_source_split_6954;

  $bb219:
    assume out_$i210 == 1;
    goto corral_source_split_6953;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    out_$i210 := $eq.i32(out_$i209, 1);
    goto corral_source_split_6919;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    out_$i209 := $M.8;
    goto corral_source_split_6918;

  $bb205:
    assume out_$i192 == 1;
    goto corral_source_split_6917;

  $bb204:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    out_$i192 := $slt.i32(out_$i178, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb229:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb231:
    assume !(out_$i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 2280} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6982;

  $bb230:
    assume out_$i223 == 1;
    goto corral_source_split_6981;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    out_$i223 := $eq.i32(out_$i222, 0);
    goto corral_source_split_6979;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    out_$i222 := $M.28;
    goto corral_source_split_6978;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $M.28 := out_$i221;
    call {:si_unique_call 2279} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i221);
    goto corral_source_split_6977;

  SeqInstr_963:
    goto corral_source_split_6976;

  SeqInstr_962:
    assume assertsPassed;
    goto SeqInstr_963;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} out_$i221 := jme_open(out_$p220);
    goto SeqInstr_962;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    out_$p220 := $M.9;
    goto corral_source_split_6975;

  $bb228:
    assume out_$i219 == 1;
    goto corral_source_split_6974;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    out_$i219 := $eq.i32(out_$i218, 2);
    goto corral_source_split_6923;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    out_$i218 := $M.8;
    goto corral_source_split_6922;

  $bb206:
    assume !(out_$i192 == 1);
    goto corral_source_split_6921;

  $bb241:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 2286} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7003;

  SeqInstr_972:
    goto corral_source_split_7002;

  SeqInstr_971:
    assume assertsPassed;
    goto SeqInstr_972;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2285} jme_vlan_rx_register(out_$p232, in_$p18);
    goto SeqInstr_971;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    out_$p232 := $M.9;
    goto corral_source_split_7001;

  $bb240:
    assume out_$i231 == 1;
    goto corral_source_split_7000;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    out_$i231 := $eq.i32(out_$i230, 2);
    goto corral_source_split_6998;

  $bb239:
    assume {:verifier.code 0} true;
    out_$i230 := $M.8;
    goto corral_source_split_6997;

  $bb238:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 2284} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6995;

  SeqInstr_969:
    goto corral_source_split_6994;

  SeqInstr_968:
    assume assertsPassed;
    goto SeqInstr_969;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2283} jme_vlan_rx_register(out_$p229, in_$p18);
    goto SeqInstr_968;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    out_$p229 := $M.9;
    goto corral_source_split_6993;

  $bb237:
    assume out_$i228 == 1;
    goto corral_source_split_6992;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    out_$i228 := $eq.i32(out_$i227, 3);
    goto corral_source_split_6990;

  $bb236:
    assume {:verifier.code 0} true;
    out_$i227 := $M.8;
    goto corral_source_split_6989;

  $bb235:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 2282} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6987;

  SeqInstr_966:
    goto corral_source_split_6986;

  SeqInstr_965:
    assume assertsPassed;
    goto SeqInstr_966;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2281} jme_vlan_rx_register(out_$p226, in_$p18);
    goto SeqInstr_965;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    out_$p226 := $M.9;
    goto corral_source_split_6985;

  $bb234:
    assume out_$i225 == 1;
    goto corral_source_split_6984;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    out_$i225 := $eq.i32(out_$i224, 1);
    goto corral_source_split_6911;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    out_$i224 := $M.8;
    goto corral_source_split_6910;

  $bb201:
    assume out_$i190 == 1;
    goto corral_source_split_6909;

  $bb197:
    assume out_$i188 == 1;
    assume {:verifier.code 0} true;
    out_$i190 := $slt.i32(out_$i178, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb196:
    assume !(out_$i187 == 1);
    assume {:verifier.code 0} true;
    out_$i188 := $slt.i32(out_$i178, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb244:
    assume !(out_$i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 2288} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7008;

  SeqInstr_975:
    goto corral_source_split_7007;

  SeqInstr_974:
    assume assertsPassed;
    goto SeqInstr_975;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2287} out_vslice_dummy_var_85 := jme_start_xmit(in_$p15, out_$p235);
    goto SeqInstr_974;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    out_$p235 := $M.9;
    goto corral_source_split_7006;

  $bb243:
    assume out_$i234 == 1;
    goto corral_source_split_7005;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    out_$i234 := $eq.i32(out_$i233, 3);
    goto corral_source_split_6915;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    out_$i233 := $M.8;
    goto corral_source_split_6914;

  $bb202:
    assume !(out_$i190 == 1);
    goto corral_source_split_6913;

  $bb253:
    assume !(out_$i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    goto $bb254;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 2294} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7032;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2293} out_vslice_dummy_var_88 := jme_fix_features(out_$p249, out_$i250);
    goto corral_source_split_7031;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    out_$i250 := $load.i32($M.12, in_$p3);
    goto corral_source_split_7030;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    out_$p249 := $M.9;
    goto corral_source_split_7029;

  $bb252:
    assume out_$i248 == 1;
    goto corral_source_split_7028;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    out_$i248 := $eq.i32(out_$i247, 2);
    goto corral_source_split_7026;

  $bb251:
    assume {:verifier.code 0} true;
    out_$i247 := $M.8;
    goto corral_source_split_7025;

  $bb250:
    assume !(out_$i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    goto $bb251;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 2292} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7023;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2291} out_vslice_dummy_var_87 := jme_fix_features(out_$p244, out_$i245);
    goto corral_source_split_7022;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    out_$i245 := $load.i32($M.12, in_$p3);
    goto corral_source_split_7021;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    out_$p244 := $M.9;
    goto corral_source_split_7020;

  $bb249:
    assume out_$i243 == 1;
    goto corral_source_split_7019;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    out_$i243 := $eq.i32(out_$i242, 3);
    goto corral_source_split_7017;

  $bb248:
    assume {:verifier.code 0} true;
    out_$i242 := $M.8;
    goto corral_source_split_7016;

  $bb247:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    goto $bb248;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 2290} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7014;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2289} out_vslice_dummy_var_86 := jme_fix_features(out_$p239, out_$i240);
    goto corral_source_split_7013;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    out_$i240 := $load.i32($M.12, in_$p3);
    goto corral_source_split_7012;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    out_$p239 := $M.9;
    goto corral_source_split_7011;

  $bb246:
    assume out_$i238 == 1;
    goto corral_source_split_7010;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    out_$i238 := $eq.i32(out_$i237, 1);
    goto corral_source_split_6903;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    out_$i237 := $M.8;
    goto corral_source_split_6902;

  $bb199:
    assume out_$i189 == 1;
    goto corral_source_split_6901;

  $bb198:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    out_$i189 := $slt.i32(out_$i178, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb256:
    assume !(out_$i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    goto $bb257;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 2296} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7037;

  SeqInstr_978:
    goto corral_source_split_7036;

  SeqInstr_977:
    assume assertsPassed;
    goto SeqInstr_978;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2295} out_vslice_dummy_var_89 := jme_close(out_$p254);
    goto SeqInstr_977;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    out_$p254 := $M.9;
    goto corral_source_split_7035;

  $bb255:
    assume out_$i253 == 1;
    goto corral_source_split_7034;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i252, 3);
    goto corral_source_split_6907;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    out_$i252 := $M.8;
    goto corral_source_split_6906;

  $bb200:
    assume !(out_$i189 == 1);
    goto corral_source_split_6905;

  $bb265:
    assume !(out_$i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    goto $bb266;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 2302} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7058;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2301} out_vslice_dummy_var_92 := eth_validate_addr(out_$p266);
    goto corral_source_split_7057;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    out_$p266 := $M.9;
    goto corral_source_split_7056;

  $bb264:
    assume out_$i265 == 1;
    goto corral_source_split_7055;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    out_$i265 := $eq.i32(out_$i264, 2);
    goto corral_source_split_7053;

  $bb263:
    assume {:verifier.code 0} true;
    out_$i264 := $M.8;
    goto corral_source_split_7052;

  $bb262:
    assume !(out_$i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    goto $bb263;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 2300} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7050;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2299} out_vslice_dummy_var_91 := eth_validate_addr(out_$p262);
    goto corral_source_split_7049;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    out_$p262 := $M.9;
    goto corral_source_split_7048;

  $bb261:
    assume out_$i261 == 1;
    goto corral_source_split_7047;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    out_$i261 := $eq.i32(out_$i260, 3);
    goto corral_source_split_7045;

  $bb260:
    assume {:verifier.code 0} true;
    out_$i260 := $M.8;
    goto corral_source_split_7044;

  $bb259:
    assume !(out_$i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    goto $bb260;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 2298} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7042;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2297} out_vslice_dummy_var_90 := eth_validate_addr(out_$p258);
    goto corral_source_split_7041;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    out_$p258 := $M.9;
    goto corral_source_split_7040;

  $bb258:
    assume out_$i257 == 1;
    goto corral_source_split_7039;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    out_$i257 := $eq.i32(out_$i256, 1);
    goto corral_source_split_6891;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    out_$i256 := $M.8;
    goto corral_source_split_6890;

  $bb191:
    assume out_$i185 == 1;
    goto corral_source_split_6889;

  $bb180:
    assume out_$i180 == 1;
    assume {:verifier.code 0} true;
    out_$i185 := $slt.i32(out_$i178, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb179:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    out_$i180 := $slt.i32(out_$i178, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb274:
    assume !(out_$i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb275;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    goto $bb275;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 2308} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7082;

  SeqInstr_987:
    goto corral_source_split_7081;

  SeqInstr_986:
    assume assertsPassed;
    goto SeqInstr_987;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2307} out_vslice_dummy_var_95 := jme_set_features(out_$p280, out_$i281);
    goto SeqInstr_986;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    out_$i281 := $load.i32($M.12, in_$p4);
    goto corral_source_split_7080;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    out_$p280 := $M.9;
    goto corral_source_split_7079;

  $bb273:
    assume out_$i279 == 1;
    goto corral_source_split_7078;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    out_$i279 := $eq.i32(out_$i278, 2);
    goto corral_source_split_7076;

  $bb272:
    assume {:verifier.code 0} true;
    out_$i278 := $M.8;
    goto corral_source_split_7075;

  $bb271:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    goto $bb272;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 2306} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7073;

  SeqInstr_984:
    goto corral_source_split_7072;

  SeqInstr_983:
    assume assertsPassed;
    goto SeqInstr_984;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2305} out_vslice_dummy_var_94 := jme_set_features(out_$p275, out_$i276);
    goto SeqInstr_983;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    out_$i276 := $load.i32($M.12, in_$p4);
    goto corral_source_split_7071;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    out_$p275 := $M.9;
    goto corral_source_split_7070;

  $bb270:
    assume out_$i274 == 1;
    goto corral_source_split_7069;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    out_$i274 := $eq.i32(out_$i273, 3);
    goto corral_source_split_7067;

  $bb269:
    assume {:verifier.code 0} true;
    out_$i273 := $M.8;
    goto corral_source_split_7066;

  $bb268:
    assume !(out_$i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    goto $bb269;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 2304} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7064;

  SeqInstr_981:
    goto corral_source_split_7063;

  SeqInstr_980:
    assume assertsPassed;
    goto SeqInstr_981;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2303} out_vslice_dummy_var_93 := jme_set_features(out_$p270, out_$i271);
    goto SeqInstr_980;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    out_$i271 := $load.i32($M.12, in_$p4);
    goto corral_source_split_7062;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    out_$p270 := $M.9;
    goto corral_source_split_7061;

  $bb267:
    assume out_$i269 == 1;
    goto corral_source_split_7060;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i32(out_$i268, 1);
    goto corral_source_split_6895;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    out_$i268 := $M.8;
    goto corral_source_split_6894;

  $bb193:
    assume out_$i186 == 1;
    goto corral_source_split_6893;

  $bb192:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    out_$i186 := $slt.i32(out_$i178, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb280:
    assume !(out_$i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    goto $bb281;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 2312} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7097;

  SeqInstr_993:
    goto corral_source_split_7096;

  SeqInstr_992:
    assume assertsPassed;
    goto SeqInstr_993;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2311} out_vslice_dummy_var_97 := jme_change_mtu(out_$p290, out_$i291);
    goto SeqInstr_992;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    out_$i291 := $load.i32($M.12, in_$p1);
    goto corral_source_split_7095;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    out_$p290 := $M.9;
    goto corral_source_split_7094;

  $bb279:
    assume out_$i289 == 1;
    goto corral_source_split_7093;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    out_$i289 := $eq.i32(out_$i288, 2);
    goto corral_source_split_7091;

  $bb278:
    assume {:verifier.code 0} true;
    out_$i288 := $M.8;
    goto corral_source_split_7090;

  $bb277:
    assume !(out_$i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    goto $bb278;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 2310} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7088;

  SeqInstr_990:
    goto corral_source_split_7087;

  SeqInstr_989:
    assume assertsPassed;
    goto SeqInstr_990;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2309} out_vslice_dummy_var_96 := jme_change_mtu(out_$p285, out_$i286);
    goto SeqInstr_989;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    out_$i286 := $load.i32($M.12, in_$p1);
    goto corral_source_split_7086;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    out_$p285 := $M.9;
    goto corral_source_split_7085;

  $bb276:
    assume out_$i284 == 1;
    goto corral_source_split_7084;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    out_$i284 := $eq.i32(out_$i283, 3);
    goto corral_source_split_6899;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    out_$i283 := $M.8;
    goto corral_source_split_6898;

  $bb194:
    assume !(out_$i186 == 1);
    goto corral_source_split_6897;

  $bb289:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    goto $bb290;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 2318} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7118;

  SeqInstr_1002:
    goto corral_source_split_7117;

  SeqInstr_1001:
    assume assertsPassed;
    goto SeqInstr_1002;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} out_vslice_dummy_var_100 := jme_set_macaddr(out_$p303, in_$p16);
    goto SeqInstr_1001;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    out_$p303 := $M.9;
    goto corral_source_split_7116;

  $bb288:
    assume out_$i302 == 1;
    goto corral_source_split_7115;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    out_$i302 := $eq.i32(out_$i301, 2);
    goto corral_source_split_7113;

  $bb287:
    assume {:verifier.code 0} true;
    out_$i301 := $M.8;
    goto corral_source_split_7112;

  $bb286:
    assume !(out_$i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    goto $bb287;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 2316} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7110;

  SeqInstr_999:
    goto corral_source_split_7109;

  SeqInstr_998:
    assume assertsPassed;
    goto SeqInstr_999;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2315} out_vslice_dummy_var_99 := jme_set_macaddr(out_$p299, in_$p16);
    goto SeqInstr_998;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    out_$p299 := $M.9;
    goto corral_source_split_7108;

  $bb285:
    assume out_$i298 == 1;
    goto corral_source_split_7107;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    out_$i298 := $eq.i32(out_$i297, 3);
    goto corral_source_split_7105;

  $bb284:
    assume {:verifier.code 0} true;
    out_$i297 := $M.8;
    goto corral_source_split_7104;

  $bb283:
    assume !(out_$i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    goto $bb284;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 2314} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7102;

  SeqInstr_996:
    goto corral_source_split_7101;

  SeqInstr_995:
    assume assertsPassed;
    goto SeqInstr_996;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2313} out_vslice_dummy_var_98 := jme_set_macaddr(out_$p295, in_$p16);
    goto SeqInstr_995;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    out_$p295 := $M.9;
    goto corral_source_split_7100;

  $bb282:
    assume out_$i294 == 1;
    goto corral_source_split_7099;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    out_$i294 := $eq.i32(out_$i293, 1);
    goto corral_source_split_6883;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    out_$i293 := $M.8;
    goto corral_source_split_6882;

  $bb189:
    assume out_$i184 == 1;
    goto corral_source_split_6881;

  $bb182:
    assume out_$i181 == 1;
    assume {:verifier.code 0} true;
    out_$i184 := $slt.i32(out_$i178, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb181:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    out_$i181 := $slt.i32(out_$i178, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb298:
    assume !(out_$i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb299;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    goto $bb299;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 2324} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7139;

  SeqInstr_1011:
    goto corral_source_split_7138;

  SeqInstr_1010:
    assume assertsPassed;
    goto SeqInstr_1011;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2323} jme_tx_timeout(out_$p313);
    goto SeqInstr_1010;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    out_$p313 := $M.9;
    goto corral_source_split_7137;

  $bb297:
    assume out_$i312 == 1;
    goto corral_source_split_7136;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    out_$i312 := $eq.i32(out_$i311, 2);
    goto corral_source_split_7134;

  $bb296:
    assume {:verifier.code 0} true;
    out_$i311 := $M.8;
    goto corral_source_split_7133;

  $bb295:
    assume !(out_$i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb296;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    goto $bb296;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 2322} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_7131;

  SeqInstr_1008:
    goto corral_source_split_7130;

  SeqInstr_1007:
    assume assertsPassed;
    goto SeqInstr_1008;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} jme_tx_timeout(out_$p310);
    goto SeqInstr_1007;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    out_$p310 := $M.9;
    goto corral_source_split_7129;

  $bb294:
    assume out_$i309 == 1;
    goto corral_source_split_7128;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    out_$i309 := $eq.i32(out_$i308, 3);
    goto corral_source_split_7126;

  $bb293:
    assume {:verifier.code 0} true;
    out_$i308 := $M.8;
    goto corral_source_split_7125;

  $bb292:
    assume !(out_$i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    goto $bb293;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 2320} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7123;

  SeqInstr_1005:
    goto corral_source_split_7122;

  SeqInstr_1004:
    assume assertsPassed;
    goto SeqInstr_1005;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2319} jme_tx_timeout(out_$p307);
    goto SeqInstr_1004;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    out_$p307 := $M.9;
    goto corral_source_split_7121;

  $bb291:
    assume out_$i306 == 1;
    goto corral_source_split_7120;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    out_$i306 := $eq.i32(out_$i305, 1);
    goto corral_source_split_6887;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    out_$i305 := $M.8;
    goto corral_source_split_6886;

  $bb190:
    assume !(out_$i184 == 1);
    goto corral_source_split_6885;

  $bb301:
    assume !(out_$i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb302;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    goto $bb302;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $M.23 := out_$i318;
    call {:si_unique_call 2327} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i318);
    goto corral_source_split_7146;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    out_$i318 := $sub.i32(out_$i317, 1);
    goto corral_source_split_7145;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    out_$i317 := $M.23;
    goto corral_source_split_7144;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 2326} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7143;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2325} out_vslice_dummy_var_101 := ldv_ndo_uninit_3();
    goto corral_source_split_7142;

  $bb300:
    assume out_$i315 == 1;
    goto corral_source_split_7141;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb300, $bb301;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    out_$i315 := $eq.i32(out_$i314, 2);
    goto corral_source_split_6875;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    out_$i314 := $M.8;
    goto corral_source_split_6874;

  $bb184:
    assume out_$i182 == 1;
    goto corral_source_split_6873;

  $bb183:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    out_$i182 := $slt.i32(out_$i178, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb304:
    assume !(out_$i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb306:
    assume !(out_$i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    goto $bb307;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $M.23 := out_$i325;
    call {:si_unique_call 2331} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i325);
    goto corral_source_split_7158;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    out_$i325 := $add.i32(out_$i324, 1);
    goto corral_source_split_7157;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    out_$i324 := $M.23;
    goto corral_source_split_7156;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 2330} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7155;

  $bb305:
    assume out_$i323 == 1;
    goto corral_source_split_7154;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    out_$i323 := $eq.i32(out_$i322, 0);
    goto corral_source_split_7152;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    out_$i322 := $M.29;
    goto corral_source_split_7151;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $M.29 := out_$i321;
    call {:si_unique_call 2329} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i321);
    goto corral_source_split_7150;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2328} out_$i321 := ldv_ndo_init_3();
    goto corral_source_split_7149;

  $bb303:
    assume out_$i320 == 1;
    goto corral_source_split_7148;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb303, $bb304;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    out_$i320 := $eq.i32(out_$i319, 1);
    goto corral_source_split_6879;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    out_$i319 := $M.8;
    goto corral_source_split_6878;

  $bb186:
    assume out_$i183 == 1;
    goto corral_source_split_6877;

  $bb185:
    assume !(out_$i182 == 1);
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i178, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} ldv_stop();
    goto corral_source_split_7160;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb187:
    assume {:verifier.code 0} true;
    assume !(out_$i183 == 1);
    goto $bb188;

  $bb208:
    assume {:verifier.code 0} true;
    assume !(out_$i193 == 1);
    goto $bb188;

  $bb313:
    assume !(out_$i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb364:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb477:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb475:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb472:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb466:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb460:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb454:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb448:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb442:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb436:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb430:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb424:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb412:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb400:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb382:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb376:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb363:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb359:
    assume !(out_$i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb362:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb361:
    assume !(out_$i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb362;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    goto $bb362;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $M.25 := 15;
    call {:si_unique_call 2338} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(15);
    goto corral_source_split_7252;

  $bb360:
    assume out_$i355 == 1;
    goto corral_source_split_7251;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb360, $bb361;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    out_$i355 := $eq.i32(out_$i354, 0);
    goto corral_source_split_7249;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    out_$i354 := $M.30;
    goto corral_source_split_7248;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $M.30 := out_$i353;
    call {:si_unique_call 2337} {:cexpr "ldv_retval_22"} boogie_si_record_i32(out_$i353);
    goto corral_source_split_7247;

  SeqInstr_1014:
    goto corral_source_split_7246;

  SeqInstr_1013:
    assume assertsPassed;
    goto SeqInstr_1014;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2336} out_$i353 := jme_resume(out_$p352);
    goto SeqInstr_1013;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    out_$p352 := $M.20;
    goto corral_source_split_7245;

  $bb358:
    assume out_$i351 == 1;
    goto corral_source_split_7244;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    out_$i351 := $eq.i32(out_$i350, 14);
    goto corral_source_split_7242;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    out_$i350 := $M.25;
    goto corral_source_split_7241;

  $bb356:
    assume out_$i349 == 1;
    goto corral_source_split_7240;

  $bb354:
    assume out_$i348 == 1;
    assume {:verifier.code 0} true;
    out_$i349 := $eq.i32(out_$i328, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb348:
    assume out_$i345 == 1;
    assume {:verifier.code 0} true;
    out_$i348 := $slt.i32(out_$i328, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb354, $bb355;

  $bb338:
    assume out_$i340 == 1;
    assume {:verifier.code 0} true;
    out_$i345 := $slt.i32(out_$i328, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  $bb315:
    assume out_$i329 == 1;
    assume {:verifier.code 0} true;
    out_$i340 := $slt.i32(out_$i328, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  $bb314:
    assume {:verifier.code 0} true;
    out_$i329 := $slt.i32(out_$i328, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  corral_source_split_7162:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2333} out_$i328 := __VERIFIER_nondet_int();
    call {:si_unique_call 2334} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i328);
    call {:si_unique_call 2335} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i328);
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb312:
    assume out_$i327 == 1;
    goto corral_source_split_7162;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    out_$i327 := $ne.i32(out_$i326, 0);
    goto corral_source_split_6604;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    out_$i326 := $M.25;
    goto corral_source_split_6603;

  $bb9:
    assume out_$i35 == 1;
    goto corral_source_split_6602;

  $bb8:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i31, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb366:
    assume !(out_$i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb368:
    assume !(out_$i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    goto $bb369;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $M.25 := 3;
    call {:si_unique_call 2341} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_7262;

  $bb367:
    assume out_$i361 == 1;
    goto corral_source_split_7261;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    out_$i361 := $eq.i32(out_$i360, 0);
    goto corral_source_split_7259;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    out_$i360 := $M.31;
    goto corral_source_split_7258;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $M.31 := out_$i359;
    call {:si_unique_call 2340} {:cexpr "ldv_retval_21"} boogie_si_record_i32(out_$i359);
    goto corral_source_split_7257;

  SeqInstr_1017:
    goto corral_source_split_7256;

  SeqInstr_1016:
    assume assertsPassed;
    goto SeqInstr_1017;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} out_$i359 := jme_suspend(out_$p358);
    goto SeqInstr_1016;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    out_$p358 := $M.20;
    goto corral_source_split_7255;

  $bb365:
    assume out_$i357 == 1;
    goto corral_source_split_7254;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    out_$i357 := $eq.i32(out_$i356, 2);
    goto corral_source_split_7238;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    out_$i356 := $M.25;
    goto corral_source_split_7237;

  $bb355:
    assume !(out_$i348 == 1);
    goto corral_source_split_7236;

  $bb372:
    assume !(out_$i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb374:
    assume !(out_$i367 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    goto $bb375;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $M.25 := 4;
    call {:si_unique_call 2344} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_7272;

  $bb373:
    assume out_$i367 == 1;
    goto corral_source_split_7271;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    out_$i367 := $eq.i32(out_$i366, 0);
    goto corral_source_split_7269;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    out_$i366 := $M.32;
    goto corral_source_split_7268;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $M.32 := out_$i365;
    call {:si_unique_call 2343} {:cexpr "ldv_retval_20"} boogie_si_record_i32(out_$i365);
    goto corral_source_split_7267;

  SeqInstr_1020:
    goto corral_source_split_7266;

  SeqInstr_1019:
    assume assertsPassed;
    goto SeqInstr_1020;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} out_$i365 := jme_suspend(out_$p364);
    goto SeqInstr_1019;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    out_$p364 := $M.20;
    goto corral_source_split_7265;

  $bb371:
    assume out_$i363 == 1;
    goto corral_source_split_7264;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    out_$i363 := $eq.i32(out_$i362, 2);
    goto corral_source_split_7226;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    out_$i362 := $M.25;
    goto corral_source_split_7225;

  $bb350:
    assume out_$i346 == 1;
    goto corral_source_split_7224;

  $bb349:
    assume !(out_$i345 == 1);
    assume {:verifier.code 0} true;
    out_$i346 := $slt.i32(out_$i328, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  $bb378:
    assume !(out_$i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb380:
    assume !(out_$i373 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    goto $bb381;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $M.25 := 5;
    call {:si_unique_call 2347} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_7282;

  $bb379:
    assume out_$i373 == 1;
    goto corral_source_split_7281;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    out_$i373 := $eq.i32(out_$i372, 0);
    goto corral_source_split_7279;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    out_$i372 := $M.33;
    goto corral_source_split_7278;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $M.33 := out_$i371;
    call {:si_unique_call 2346} {:cexpr "ldv_retval_19"} boogie_si_record_i32(out_$i371);
    goto corral_source_split_7277;

  SeqInstr_1023:
    goto corral_source_split_7276;

  SeqInstr_1022:
    assume assertsPassed;
    goto SeqInstr_1023;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} out_$i371 := jme_suspend(out_$p370);
    goto SeqInstr_1022;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    out_$p370 := $M.20;
    goto corral_source_split_7275;

  $bb377:
    assume out_$i369 == 1;
    goto corral_source_split_7274;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    out_$i369 := $eq.i32(out_$i368, 2);
    goto corral_source_split_7230;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    out_$i368 := $M.25;
    goto corral_source_split_7229;

  $bb352:
    assume out_$i347 == 1;
    goto corral_source_split_7228;

  $bb351:
    assume !(out_$i346 == 1);
    assume {:verifier.code 0} true;
    out_$i347 := $slt.i32(out_$i328, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  $bb384:
    assume !(out_$i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb386:
    assume !(out_$i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    goto $bb387;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $M.25 := 15;
    call {:si_unique_call 2350} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(15);
    goto corral_source_split_7292;

  $bb385:
    assume out_$i379 == 1;
    goto corral_source_split_7291;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb385, $bb386;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    out_$i379 := $eq.i32(out_$i378, 0);
    goto corral_source_split_7289;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    out_$i378 := $M.34;
    goto corral_source_split_7288;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $M.34 := out_$i377;
    call {:si_unique_call 2349} {:cexpr "ldv_retval_18"} boogie_si_record_i32(out_$i377);
    goto corral_source_split_7287;

  SeqInstr_1026:
    goto corral_source_split_7286;

  SeqInstr_1025:
    assume assertsPassed;
    goto SeqInstr_1026;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2348} out_$i377 := jme_resume(out_$p376);
    goto SeqInstr_1025;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    out_$p376 := $M.20;
    goto corral_source_split_7285;

  $bb383:
    assume out_$i375 == 1;
    goto corral_source_split_7284;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb383, $bb384;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    out_$i375 := $eq.i32(out_$i374, 12);
    goto corral_source_split_7234;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    out_$i374 := $M.25;
    goto corral_source_split_7233;

  $bb353:
    assume !(out_$i347 == 1);
    goto corral_source_split_7232;

  $bb390:
    assume !(out_$i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb392:
    assume !(out_$i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb393;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    goto $bb393;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $M.25 := 15;
    call {:si_unique_call 2353} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(15);
    goto corral_source_split_7302;

  $bb391:
    assume out_$i385 == 1;
    goto corral_source_split_7301;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    out_$i385 := $eq.i32(out_$i384, 0);
    goto corral_source_split_7299;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    out_$i384 := $M.35;
    goto corral_source_split_7298;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $M.35 := out_$i383;
    call {:si_unique_call 2352} {:cexpr "ldv_retval_17"} boogie_si_record_i32(out_$i383);
    goto corral_source_split_7297;

  SeqInstr_1029:
    goto corral_source_split_7296;

  SeqInstr_1028:
    assume assertsPassed;
    goto SeqInstr_1029;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2351} out_$i383 := jme_resume(out_$p382);
    goto SeqInstr_1028;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    out_$p382 := $M.20;
    goto corral_source_split_7295;

  $bb389:
    assume out_$i381 == 1;
    goto corral_source_split_7294;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    out_$i381 := $eq.i32(out_$i380, 13);
    goto corral_source_split_7218;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    out_$i380 := $M.25;
    goto corral_source_split_7217;

  $bb346:
    assume out_$i344 == 1;
    goto corral_source_split_7216;

  $bb340:
    assume out_$i341 == 1;
    assume {:verifier.code 0} true;
    out_$i344 := $slt.i32(out_$i328, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  $bb339:
    assume !(out_$i340 == 1);
    assume {:verifier.code 0} true;
    out_$i341 := $slt.i32(out_$i328, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  $bb396:
    assume !(out_$i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb398:
    assume !(out_$i390 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    goto $bb399;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $M.25 := 6;
    call {:si_unique_call 2356} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(6);
    goto corral_source_split_7311;

  $bb397:
    assume out_$i390 == 1;
    goto corral_source_split_7310;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb397, $bb398;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    out_$i390 := $eq.i32(out_$i389, 0);
    goto corral_source_split_7308;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    out_$i389 := $M.36;
    goto corral_source_split_7307;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $M.36 := out_$i388;
    call {:si_unique_call 2355} {:cexpr "ldv_retval_16"} boogie_si_record_i32(out_$i388);
    goto corral_source_split_7306;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2354} out_$i388 := ldv_suspend_late_2();
    goto corral_source_split_7305;

  $bb395:
    assume out_$i387 == 1;
    goto corral_source_split_7304;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb395, $bb396;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    out_$i387 := $eq.i32(out_$i386, 3);
    goto corral_source_split_7222;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    out_$i386 := $M.25;
    goto corral_source_split_7221;

  $bb347:
    assume !(out_$i344 == 1);
    goto corral_source_split_7220;

  $bb402:
    assume !(out_$i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb404:
    assume !(out_$i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    goto $bb405;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $M.25 := 13;
    call {:si_unique_call 2359} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(13);
    goto corral_source_split_7320;

  $bb403:
    assume out_$i395 == 1;
    goto corral_source_split_7319;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb403, $bb404;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    out_$i395 := $eq.i32(out_$i394, 0);
    goto corral_source_split_7317;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    out_$i394 := $M.37;
    goto corral_source_split_7316;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $M.37 := out_$i393;
    call {:si_unique_call 2358} {:cexpr "ldv_retval_15"} boogie_si_record_i32(out_$i393);
    goto corral_source_split_7315;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2357} out_$i393 := ldv_restore_early_2();
    goto corral_source_split_7314;

  $bb401:
    assume out_$i392 == 1;
    goto corral_source_split_7313;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb401, $bb402;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    out_$i392 := $eq.i32(out_$i391, 9);
    goto corral_source_split_7206;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    out_$i391 := $M.25;
    goto corral_source_split_7205;

  $bb342:
    assume out_$i342 == 1;
    goto corral_source_split_7204;

  $bb341:
    assume !(out_$i341 == 1);
    assume {:verifier.code 0} true;
    out_$i342 := $slt.i32(out_$i328, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb342, $bb343;

  $bb408:
    assume !(out_$i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb411:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb410:
    assume !(out_$i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb411;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    goto $bb411;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $M.25 := 12;
    call {:si_unique_call 2362} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(12);
    goto corral_source_split_7329;

  $bb409:
    assume out_$i400 == 1;
    goto corral_source_split_7328;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb409, $bb410;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    out_$i400 := $eq.i32(out_$i399, 0);
    goto corral_source_split_7326;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    out_$i399 := $M.38;
    goto corral_source_split_7325;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $M.38 := out_$i398;
    call {:si_unique_call 2361} {:cexpr "ldv_retval_14"} boogie_si_record_i32(out_$i398);
    goto corral_source_split_7324;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2360} out_$i398 := ldv_resume_early_2();
    goto corral_source_split_7323;

  $bb407:
    assume out_$i397 == 1;
    goto corral_source_split_7322;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb407, $bb408;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    out_$i397 := $eq.i32(out_$i396, 6);
    goto corral_source_split_7210;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    out_$i396 := $M.25;
    goto corral_source_split_7209;

  $bb344:
    assume out_$i343 == 1;
    goto corral_source_split_7208;

  $bb343:
    assume !(out_$i342 == 1);
    assume {:verifier.code 0} true;
    out_$i343 := $slt.i32(out_$i328, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  $bb414:
    assume !(out_$i402 == 1);
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb416:
    assume !(out_$i405 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    goto $bb417;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $M.25 := 14;
    call {:si_unique_call 2365} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(14);
    goto corral_source_split_7338;

  $bb415:
    assume out_$i405 == 1;
    goto corral_source_split_7337;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb415, $bb416;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    out_$i405 := $eq.i32(out_$i404, 0);
    goto corral_source_split_7335;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    out_$i404 := $M.39;
    goto corral_source_split_7334;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $M.39 := out_$i403;
    call {:si_unique_call 2364} {:cexpr "ldv_retval_13"} boogie_si_record_i32(out_$i403);
    goto corral_source_split_7333;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2363} out_$i403 := ldv_thaw_early_2();
    goto corral_source_split_7332;

  $bb413:
    assume out_$i402 == 1;
    goto corral_source_split_7331;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb413, $bb414;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    out_$i402 := $eq.i32(out_$i401, 11);
    goto corral_source_split_7214;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    out_$i401 := $M.25;
    goto corral_source_split_7213;

  $bb345:
    assume !(out_$i343 == 1);
    goto corral_source_split_7212;

  $bb420:
    assume !(out_$i407 == 1);
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb423:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb422:
    assume !(out_$i410 == 1);
    assume {:verifier.code 0} true;
    goto $bb423;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    goto $bb423;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $M.25 := 12;
    call {:si_unique_call 2368} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(12);
    goto corral_source_split_7347;

  $bb421:
    assume out_$i410 == 1;
    goto corral_source_split_7346;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb421, $bb422;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    out_$i410 := $eq.i32(out_$i409, 0);
    goto corral_source_split_7344;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    out_$i409 := $M.40;
    goto corral_source_split_7343;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $M.40 := out_$i408;
    call {:si_unique_call 2367} {:cexpr "ldv_retval_12"} boogie_si_record_i32(out_$i408);
    goto corral_source_split_7342;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2366} out_$i408 := ldv_resume_noirq_2();
    goto corral_source_split_7341;

  $bb419:
    assume out_$i407 == 1;
    goto corral_source_split_7340;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb419, $bb420;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    out_$i407 := $eq.i32(out_$i406, 7);
    goto corral_source_split_7198;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    out_$i406 := $M.25;
    goto corral_source_split_7197;

  $bb336:
    assume out_$i339 == 1;
    goto corral_source_split_7196;

  $bb330:
    assume out_$i336 == 1;
    assume {:verifier.code 0} true;
    out_$i339 := $slt.i32(out_$i328, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336, $bb337;

  $bb317:
    assume out_$i330 == 1;
    assume {:verifier.code 0} true;
    out_$i336 := $slt.i32(out_$i328, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  $bb316:
    assume !(out_$i329 == 1);
    assume {:verifier.code 0} true;
    out_$i330 := $slt.i32(out_$i328, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb426:
    assume !(out_$i412 == 1);
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb429:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb428:
    assume !(out_$i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb429;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    goto $bb429;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $M.25 := 10;
    call {:si_unique_call 2371} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(10);
    goto corral_source_split_7356;

  $bb427:
    assume out_$i415 == 1;
    goto corral_source_split_7355;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb427, $bb428;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    out_$i415 := $eq.i32(out_$i414, 0);
    goto corral_source_split_7353;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    out_$i414 := $M.41;
    goto corral_source_split_7352;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $M.41 := out_$i413;
    call {:si_unique_call 2370} {:cexpr "ldv_retval_11"} boogie_si_record_i32(out_$i413);
    goto corral_source_split_7351;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} out_$i413 := ldv_freeze_noirq_2();
    goto corral_source_split_7350;

  $bb425:
    assume out_$i412 == 1;
    goto corral_source_split_7349;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb425, $bb426;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    out_$i412 := $eq.i32(out_$i411, 5);
    goto corral_source_split_7202;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    out_$i411 := $M.25;
    goto corral_source_split_7201;

  $bb337:
    assume !(out_$i339 == 1);
    goto corral_source_split_7200;

  $bb432:
    assume !(out_$i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb435:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb434:
    assume !(out_$i420 == 1);
    assume {:verifier.code 0} true;
    goto $bb435;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    goto $bb435;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $M.23 := out_$i422;
    call {:si_unique_call 2375} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i422);
    goto corral_source_split_7368;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    out_$i422 := $add.i32(out_$i421, 1);
    goto corral_source_split_7367;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    out_$i421 := $M.23;
    goto corral_source_split_7366;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 2374} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_7365;

  $bb433:
    assume out_$i420 == 1;
    goto corral_source_split_7364;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb433, $bb434;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    out_$i420 := $eq.i32(out_$i419, 0);
    goto corral_source_split_7362;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    out_$i419 := $M.42;
    goto corral_source_split_7361;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $M.42 := out_$i418;
    call {:si_unique_call 2373} {:cexpr "ldv_retval_10"} boogie_si_record_i32(out_$i418);
    goto corral_source_split_7360;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2372} out_$i418 := ldv_prepare_2();
    goto corral_source_split_7359;

  $bb431:
    assume out_$i417 == 1;
    goto corral_source_split_7358;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb431, $bb432;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    out_$i417 := $eq.i32(out_$i416, 1);
    goto corral_source_split_7186;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    out_$i416 := $M.25;
    goto corral_source_split_7185;

  $bb332:
    assume out_$i337 == 1;
    goto corral_source_split_7184;

  $bb331:
    assume !(out_$i336 == 1);
    assume {:verifier.code 0} true;
    out_$i337 := $slt.i32(out_$i328, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb438:
    assume !(out_$i424 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb441:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb440:
    assume !(out_$i427 == 1);
    assume {:verifier.code 0} true;
    goto $bb441;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    goto $bb441;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $M.25 := 11;
    call {:si_unique_call 2378} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(11);
    goto corral_source_split_7377;

  $bb439:
    assume out_$i427 == 1;
    goto corral_source_split_7376;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb439, $bb440;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    out_$i427 := $eq.i32(out_$i426, 0);
    goto corral_source_split_7374;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    out_$i426 := $M.43;
    goto corral_source_split_7373;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $M.43 := out_$i425;
    call {:si_unique_call 2377} {:cexpr "ldv_retval_9"} boogie_si_record_i32(out_$i425);
    goto corral_source_split_7372;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} out_$i425 := ldv_freeze_late_2();
    goto corral_source_split_7371;

  $bb437:
    assume out_$i424 == 1;
    goto corral_source_split_7370;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb437, $bb438;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    out_$i424 := $eq.i32(out_$i423, 5);
    goto corral_source_split_7190;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    out_$i423 := $M.25;
    goto corral_source_split_7189;

  $bb334:
    assume out_$i338 == 1;
    goto corral_source_split_7188;

  $bb333:
    assume !(out_$i337 == 1);
    assume {:verifier.code 0} true;
    out_$i338 := $slt.i32(out_$i328, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  $bb444:
    assume !(out_$i429 == 1);
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb447:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb446:
    assume !(out_$i432 == 1);
    assume {:verifier.code 0} true;
    goto $bb447;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    goto $bb447;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $M.25 := 14;
    call {:si_unique_call 2381} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(14);
    goto corral_source_split_7386;

  $bb445:
    assume out_$i432 == 1;
    goto corral_source_split_7385;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb445, $bb446;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    out_$i432 := $eq.i32(out_$i431, 0);
    goto corral_source_split_7383;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    out_$i431 := $M.44;
    goto corral_source_split_7382;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $M.44 := out_$i430;
    call {:si_unique_call 2380} {:cexpr "ldv_retval_8"} boogie_si_record_i32(out_$i430);
    goto corral_source_split_7381;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2379} out_$i430 := ldv_thaw_noirq_2();
    goto corral_source_split_7380;

  $bb443:
    assume out_$i429 == 1;
    goto corral_source_split_7379;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb443, $bb444;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    out_$i429 := $eq.i32(out_$i428, 10);
    goto corral_source_split_7194;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    out_$i428 := $M.25;
    goto corral_source_split_7193;

  $bb335:
    assume !(out_$i338 == 1);
    goto corral_source_split_7192;

  $bb450:
    assume !(out_$i434 == 1);
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb453:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb452:
    assume !(out_$i437 == 1);
    assume {:verifier.code 0} true;
    goto $bb453;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    goto $bb453;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $M.25 := 8;
    call {:si_unique_call 2384} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(8);
    goto corral_source_split_7395;

  $bb451:
    assume out_$i437 == 1;
    goto corral_source_split_7394;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb451, $bb452;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    out_$i437 := $eq.i32(out_$i436, 0);
    goto corral_source_split_7392;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    out_$i436 := $M.45;
    goto corral_source_split_7391;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $M.45 := out_$i435;
    call {:si_unique_call 2383} {:cexpr "ldv_retval_7"} boogie_si_record_i32(out_$i435);
    goto corral_source_split_7390;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2382} out_$i435 := ldv_poweroff_noirq_2();
    goto corral_source_split_7389;

  $bb449:
    assume out_$i434 == 1;
    goto corral_source_split_7388;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb449, $bb450;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    out_$i434 := $eq.i32(out_$i433, 4);
    goto corral_source_split_7178;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    out_$i433 := $M.25;
    goto corral_source_split_7177;

  $bb328:
    assume out_$i335 == 1;
    goto corral_source_split_7176;

  $bb319:
    assume out_$i331 == 1;
    assume {:verifier.code 0} true;
    out_$i335 := $slt.i32(out_$i328, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  $bb318:
    assume !(out_$i330 == 1);
    assume {:verifier.code 0} true;
    out_$i331 := $slt.i32(out_$i328, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb456:
    assume !(out_$i439 == 1);
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb459:
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb458:
    assume !(out_$i442 == 1);
    assume {:verifier.code 0} true;
    goto $bb459;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    goto $bb459;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $M.25 := 9;
    call {:si_unique_call 2387} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(9);
    goto corral_source_split_7404;

  $bb457:
    assume out_$i442 == 1;
    goto corral_source_split_7403;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb457, $bb458;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    out_$i442 := $eq.i32(out_$i441, 0);
    goto corral_source_split_7401;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    out_$i441 := $M.46;
    goto corral_source_split_7400;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $M.46 := out_$i440;
    call {:si_unique_call 2386} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i440);
    goto corral_source_split_7399;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2385} out_$i440 := ldv_poweroff_late_2();
    goto corral_source_split_7398;

  $bb455:
    assume out_$i439 == 1;
    goto corral_source_split_7397;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb455, $bb456;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    out_$i439 := $eq.i32(out_$i438, 4);
    goto corral_source_split_7182;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    out_$i438 := $M.25;
    goto corral_source_split_7181;

  $bb329:
    assume !(out_$i335 == 1);
    goto corral_source_split_7180;

  $bb462:
    assume !(out_$i444 == 1);
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb465:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb464:
    assume !(out_$i447 == 1);
    assume {:verifier.code 0} true;
    goto $bb465;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    goto $bb465;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $M.25 := 13;
    call {:si_unique_call 2390} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(13);
    goto corral_source_split_7413;

  $bb463:
    assume out_$i447 == 1;
    goto corral_source_split_7412;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb463, $bb464;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    out_$i447 := $eq.i32(out_$i446, 0);
    goto corral_source_split_7410;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    out_$i446 := $M.47;
    goto corral_source_split_7409;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $M.47 := out_$i445;
    call {:si_unique_call 2389} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i445);
    goto corral_source_split_7408;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2388} out_$i445 := ldv_restore_noirq_2();
    goto corral_source_split_7407;

  $bb461:
    assume out_$i444 == 1;
    goto corral_source_split_7406;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb461, $bb462;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    out_$i444 := $eq.i32(out_$i443, 8);
    goto corral_source_split_7166;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    out_$i443 := $M.25;
    goto corral_source_split_7165;

  $bb321:
    assume out_$i332 == 1;
    goto corral_source_split_7164;

  $bb320:
    assume !(out_$i331 == 1);
    assume {:verifier.code 0} true;
    out_$i332 := $slt.i32(out_$i328, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  $bb468:
    assume !(out_$i449 == 1);
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb471:
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb470:
    assume !(out_$i452 == 1);
    assume {:verifier.code 0} true;
    goto $bb471;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    goto $bb471;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $M.25 := 7;
    call {:si_unique_call 2393} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(7);
    goto corral_source_split_7422;

  $bb469:
    assume out_$i452 == 1;
    goto corral_source_split_7421;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb469, $bb470;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    out_$i452 := $eq.i32(out_$i451, 0);
    goto corral_source_split_7419;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    out_$i451 := $M.48;
    goto corral_source_split_7418;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $M.48 := out_$i450;
    call {:si_unique_call 2392} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i450);
    goto corral_source_split_7417;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2391} out_$i450 := ldv_suspend_noirq_2();
    goto corral_source_split_7416;

  $bb467:
    assume out_$i449 == 1;
    goto corral_source_split_7415;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb467, $bb468;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    out_$i449 := $eq.i32(out_$i448, 3);
    goto corral_source_split_7170;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    out_$i448 := $M.25;
    goto corral_source_split_7169;

  $bb323:
    assume out_$i333 == 1;
    goto corral_source_split_7168;

  $bb322:
    assume !(out_$i332 == 1);
    assume {:verifier.code 0} true;
    out_$i333 := $slt.i32(out_$i328, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  $bb474:
    assume !(out_$i454 == 1);
    assume {:verifier.code 0} true;
    goto $bb475;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    goto $bb475;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $M.23 := out_$i457;
    call {:si_unique_call 2396} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i457);
    goto corral_source_split_7429;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    out_$i457 := $sub.i32(out_$i456, 1);
    goto corral_source_split_7428;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    out_$i456 := $M.23;
    goto corral_source_split_7427;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 2395} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7426;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} out_vslice_dummy_var_102 := ldv_complete_2();
    goto corral_source_split_7425;

  $bb473:
    assume out_$i454 == 1;
    goto corral_source_split_7424;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb473, $bb474;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    out_$i454 := $eq.i32(out_$i453, 15);
    goto corral_source_split_7174;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    out_$i453 := $M.25;
    goto corral_source_split_7173;

  $bb325:
    assume out_$i334 == 1;
    goto corral_source_split_7172;

  $bb324:
    assume !(out_$i333 == 1);
    assume {:verifier.code 0} true;
    out_$i334 := $eq.i32(out_$i328, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2397} ldv_stop();
    goto corral_source_split_7431;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb326:
    assume {:verifier.code 0} true;
    assume !(out_$i334 == 1);
    goto $bb327;

  $bb357:
    assume {:verifier.code 0} true;
    assume !(out_$i349 == 1);
    goto $bb327;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    goto $bb480;

  $bb479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2398} ldv_stop();
    goto corral_source_split_7433;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1);
    goto $bb11;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb11;

  $bb116_dummy:
    call {:si_unique_call 1} out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i68, out_$i69, out_$p70, out_$p71, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i85, out_$i86, out_$p87, out_$p88, out_$i90, out_$i91, out_$p92, out_$p93, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i103, out_$i104, out_$p105, out_$p106, out_$i108, out_$i109, out_$p110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$i126, out_$i127, out_$p128, out_$i130, out_$i131, out_$p132, out_$i134, out_$i135, out_$p136, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$p196, out_$i197, out_$i199, out_$i200, out_$p201, out_$i202, out_$i204, out_$i205, out_$p206, out_$i207, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$p229, out_$i230, out_$i231, out_$p232, out_$i233, out_$i234, out_$p235, out_$i237, out_$i238, out_$p239, out_$i240, out_$i242, out_$i243, out_$p244, out_$i245, out_$i247, out_$i248, out_$p249, out_$i250, out_$i252, out_$i253, out_$p254, out_$i256, out_$i257, out_$p258, out_$i260, out_$i261, out_$p262, out_$i264, out_$i265, out_$p266, out_$i268, out_$i269, out_$p270, out_$i271, out_$i273, out_$i274, out_$p275, out_$i276, out_$i278, out_$i279, out_$p280, out_$i281, out_$i283, out_$i284, out_$p285, out_$i286, out_$i288, out_$i289, out_$p290, out_$i291, out_$i293, out_$i294, out_$p295, out_$i297, out_$i298, out_$p299, out_$i301, out_$i302, out_$p303, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$p310, out_$i311, out_$i312, out_$p313, out_$i314, out_$i315, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$p352, out_$i353, out_$i354, out_$i355, out_$i356, out_$i357, out_$p358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i363, out_$p364, out_$i365, out_$i366, out_$i367, out_$i368, out_$i369, out_$p370, out_$i371, out_$i372, out_$i373, out_$i374, out_$i375, out_$p376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$p382, out_$i383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$i447, out_$i448, out_$i449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i456, out_$i457, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p7, in_$p8, in_$p9, in_$p11, in_$p13, in_$p15, in_$p16, in_$p18, in_$p20, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i68, out_$i69, out_$p70, out_$p71, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i85, out_$i86, out_$p87, out_$p88, out_$i90, out_$i91, out_$p92, out_$p93, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i103, out_$i104, out_$p105, out_$p106, out_$i108, out_$i109, out_$p110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$i126, out_$i127, out_$p128, out_$i130, out_$i131, out_$p132, out_$i134, out_$i135, out_$p136, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$p196, out_$i197, out_$i199, out_$i200, out_$p201, out_$i202, out_$i204, out_$i205, out_$p206, out_$i207, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$p229, out_$i230, out_$i231, out_$p232, out_$i233, out_$i234, out_$p235, out_$i237, out_$i238, out_$p239, out_$i240, out_$i242, out_$i243, out_$p244, out_$i245, out_$i247, out_$i248, out_$p249, out_$i250, out_$i252, out_$i253, out_$p254, out_$i256, out_$i257, out_$p258, out_$i260, out_$i261, out_$p262, out_$i264, out_$i265, out_$p266, out_$i268, out_$i269, out_$p270, out_$i271, out_$i273, out_$i274, out_$p275, out_$i276, out_$i278, out_$i279, out_$p280, out_$i281, out_$i283, out_$i284, out_$p285, out_$i286, out_$i288, out_$i289, out_$p290, out_$i291, out_$i293, out_$i294, out_$p295, out_$i297, out_$i298, out_$p299, out_$i301, out_$i302, out_$p303, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$p310, out_$i311, out_$i312, out_$p313, out_$i314, out_$i315, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$p352, out_$i353, out_$i354, out_$i355, out_$i356, out_$i357, out_$p358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i363, out_$p364, out_$i365, out_$i366, out_$i367, out_$i368, out_$i369, out_$p370, out_$i371, out_$i372, out_$i373, out_$i374, out_$i375, out_$p376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$p382, out_$i383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$i447, out_$i448, out_$i449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i456, out_$i457, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$p71: ref, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$p79: ref, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$p83: ref, in_$i85: i32, in_$i86: i1, in_$p87: ref, in_$p88: ref, in_$i90: i32, in_$i91: i1, in_$p92: ref, in_$p93: ref, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i98: i32, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$p106: ref, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$p111: ref, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$p124: ref, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$i138: i32, in_$i139: i1, in_$i140: i32, in_$i141: i1, in_$i142: i1, in_$i143: i1, in_$i144: i1, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i148: i32, in_$i149: i32, in_$i150: i1, in_$i151: i32, in_$i152: i32, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$i156: i32, in_$i157: i1, in_$p158: ref, in_$i159: i32, in_$i160: i1, in_$i161: i32, in_$i162: i1, in_$i163: i1, in_$i164: i1, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$i169: i32, in_$i170: i1, in_$i171: i32, in_$i172: i32, in_$i173: i1, in_$i174: i32, in_$i175: i1, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i1, in_$i180: i1, in_$i181: i1, in_$i182: i1, in_$i183: i1, in_$i184: i1, in_$i185: i1, in_$i186: i1, in_$i187: i1, in_$i188: i1, in_$i189: i1, in_$i190: i1, in_$i191: i1, in_$i192: i1, in_$i193: i1, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$i197: i32, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i202: i32, in_$i204: i32, in_$i205: i1, in_$p206: ref, in_$i207: i32, in_$i209: i32, in_$i210: i1, in_$p211: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i221: i32, in_$i222: i32, in_$i223: i1, in_$i224: i32, in_$i225: i1, in_$p226: ref, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$i230: i32, in_$i231: i1, in_$p232: ref, in_$i233: i32, in_$i234: i1, in_$p235: ref, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i240: i32, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$i245: i32, in_$i247: i32, in_$i248: i1, in_$p249: ref, in_$i250: i32, in_$i252: i32, in_$i253: i1, in_$p254: ref, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$i264: i32, in_$i265: i1, in_$p266: ref, in_$i268: i32, in_$i269: i1, in_$p270: ref, in_$i271: i32, in_$i273: i32, in_$i274: i1, in_$p275: ref, in_$i276: i32, in_$i278: i32, in_$i279: i1, in_$p280: ref, in_$i281: i32, in_$i283: i32, in_$i284: i1, in_$p285: ref, in_$i286: i32, in_$i288: i32, in_$i289: i1, in_$p290: ref, in_$i291: i32, in_$i293: i32, in_$i294: i1, in_$p295: ref, in_$i297: i32, in_$i298: i1, in_$p299: ref, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$i308: i32, in_$i309: i1, in_$p310: ref, in_$i311: i32, in_$i312: i1, in_$p313: ref, in_$i314: i32, in_$i315: i1, in_$i317: i32, in_$i318: i32, in_$i319: i32, in_$i320: i1, in_$i321: i32, in_$i322: i32, in_$i323: i1, in_$i324: i32, in_$i325: i32, in_$i326: i32, in_$i327: i1, in_$i328: i32, in_$i329: i1, in_$i330: i1, in_$i331: i1, in_$i332: i1, in_$i333: i1, in_$i334: i1, in_$i335: i1, in_$i336: i1, in_$i337: i1, in_$i338: i1, in_$i339: i1, in_$i340: i1, in_$i341: i1, in_$i342: i1, in_$i343: i1, in_$i344: i1, in_$i345: i1, in_$i346: i1, in_$i347: i1, in_$i348: i1, in_$i349: i1, in_$i350: i32, in_$i351: i1, in_$p352: ref, in_$i353: i32, in_$i354: i32, in_$i355: i1, in_$i356: i32, in_$i357: i1, in_$p358: ref, in_$i359: i32, in_$i360: i32, in_$i361: i1, in_$i362: i32, in_$i363: i1, in_$p364: ref, in_$i365: i32, in_$i366: i32, in_$i367: i1, in_$i368: i32, in_$i369: i1, in_$p370: ref, in_$i371: i32, in_$i372: i32, in_$i373: i1, in_$i374: i32, in_$i375: i1, in_$p376: ref, in_$i377: i32, in_$i378: i32, in_$i379: i1, in_$i380: i32, in_$i381: i1, in_$p382: ref, in_$i383: i32, in_$i384: i32, in_$i385: i1, in_$i386: i32, in_$i387: i1, in_$i388: i32, in_$i389: i32, in_$i390: i1, in_$i391: i32, in_$i392: i1, in_$i393: i32, in_$i394: i32, in_$i395: i1, in_$i396: i32, in_$i397: i1, in_$i398: i32, in_$i399: i32, in_$i400: i1, in_$i401: i32, in_$i402: i1, in_$i403: i32, in_$i404: i32, in_$i405: i1, in_$i406: i32, in_$i407: i1, in_$i408: i32, in_$i409: i32, in_$i410: i1, in_$i411: i32, in_$i412: i1, in_$i413: i32, in_$i414: i32, in_$i415: i1, in_$i416: i32, in_$i417: i1, in_$i418: i32, in_$i419: i32, in_$i420: i1, in_$i421: i32, in_$i422: i32, in_$i423: i32, in_$i424: i1, in_$i425: i32, in_$i426: i32, in_$i427: i1, in_$i428: i32, in_$i429: i1, in_$i430: i32, in_$i431: i32, in_$i432: i1, in_$i433: i32, in_$i434: i1, in_$i435: i32, in_$i436: i32, in_$i437: i1, in_$i438: i32, in_$i439: i1, in_$i440: i32, in_$i441: i32, in_$i442: i1, in_$i443: i32, in_$i444: i1, in_$i445: i32, in_$i446: i32, in_$i447: i1, in_$i448: i32, in_$i449: i1, in_$i450: i32, in_$i451: i32, in_$i452: i1, in_$i453: i32, in_$i454: i1, in_$i456: i32, in_$i457: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i32, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32) returns (out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$p71: ref, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$p79: ref, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$p83: ref, out_$i85: i32, out_$i86: i1, out_$p87: ref, out_$p88: ref, out_$i90: i32, out_$i91: i1, out_$p92: ref, out_$p93: ref, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i98: i32, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$p106: ref, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$p111: ref, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$p124: ref, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$i138: i32, out_$i139: i1, out_$i140: i32, out_$i141: i1, out_$i142: i1, out_$i143: i1, out_$i144: i1, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i148: i32, out_$i149: i32, out_$i150: i1, out_$i151: i32, out_$i152: i32, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$i156: i32, out_$i157: i1, out_$p158: ref, out_$i159: i32, out_$i160: i1, out_$i161: i32, out_$i162: i1, out_$i163: i1, out_$i164: i1, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$i169: i32, out_$i170: i1, out_$i171: i32, out_$i172: i32, out_$i173: i1, out_$i174: i32, out_$i175: i1, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i1, out_$i180: i1, out_$i181: i1, out_$i182: i1, out_$i183: i1, out_$i184: i1, out_$i185: i1, out_$i186: i1, out_$i187: i1, out_$i188: i1, out_$i189: i1, out_$i190: i1, out_$i191: i1, out_$i192: i1, out_$i193: i1, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$i197: i32, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i202: i32, out_$i204: i32, out_$i205: i1, out_$p206: ref, out_$i207: i32, out_$i209: i32, out_$i210: i1, out_$p211: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i221: i32, out_$i222: i32, out_$i223: i1, out_$i224: i32, out_$i225: i1, out_$p226: ref, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$i230: i32, out_$i231: i1, out_$p232: ref, out_$i233: i32, out_$i234: i1, out_$p235: ref, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i240: i32, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$i245: i32, out_$i247: i32, out_$i248: i1, out_$p249: ref, out_$i250: i32, out_$i252: i32, out_$i253: i1, out_$p254: ref, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$i264: i32, out_$i265: i1, out_$p266: ref, out_$i268: i32, out_$i269: i1, out_$p270: ref, out_$i271: i32, out_$i273: i32, out_$i274: i1, out_$p275: ref, out_$i276: i32, out_$i278: i32, out_$i279: i1, out_$p280: ref, out_$i281: i32, out_$i283: i32, out_$i284: i1, out_$p285: ref, out_$i286: i32, out_$i288: i32, out_$i289: i1, out_$p290: ref, out_$i291: i32, out_$i293: i32, out_$i294: i1, out_$p295: ref, out_$i297: i32, out_$i298: i1, out_$p299: ref, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$i308: i32, out_$i309: i1, out_$p310: ref, out_$i311: i32, out_$i312: i1, out_$p313: ref, out_$i314: i32, out_$i315: i1, out_$i317: i32, out_$i318: i32, out_$i319: i32, out_$i320: i1, out_$i321: i32, out_$i322: i32, out_$i323: i1, out_$i324: i32, out_$i325: i32, out_$i326: i32, out_$i327: i1, out_$i328: i32, out_$i329: i1, out_$i330: i1, out_$i331: i1, out_$i332: i1, out_$i333: i1, out_$i334: i1, out_$i335: i1, out_$i336: i1, out_$i337: i1, out_$i338: i1, out_$i339: i1, out_$i340: i1, out_$i341: i1, out_$i342: i1, out_$i343: i1, out_$i344: i1, out_$i345: i1, out_$i346: i1, out_$i347: i1, out_$i348: i1, out_$i349: i1, out_$i350: i32, out_$i351: i1, out_$p352: ref, out_$i353: i32, out_$i354: i32, out_$i355: i1, out_$i356: i32, out_$i357: i1, out_$p358: ref, out_$i359: i32, out_$i360: i32, out_$i361: i1, out_$i362: i32, out_$i363: i1, out_$p364: ref, out_$i365: i32, out_$i366: i32, out_$i367: i1, out_$i368: i32, out_$i369: i1, out_$p370: ref, out_$i371: i32, out_$i372: i32, out_$i373: i1, out_$i374: i32, out_$i375: i1, out_$p376: ref, out_$i377: i32, out_$i378: i32, out_$i379: i1, out_$i380: i32, out_$i381: i1, out_$p382: ref, out_$i383: i32, out_$i384: i32, out_$i385: i1, out_$i386: i32, out_$i387: i1, out_$i388: i32, out_$i389: i32, out_$i390: i1, out_$i391: i32, out_$i392: i1, out_$i393: i32, out_$i394: i32, out_$i395: i1, out_$i396: i32, out_$i397: i1, out_$i398: i32, out_$i399: i32, out_$i400: i1, out_$i401: i32, out_$i402: i1, out_$i403: i32, out_$i404: i32, out_$i405: i1, out_$i406: i32, out_$i407: i1, out_$i408: i32, out_$i409: i32, out_$i410: i1, out_$i411: i32, out_$i412: i1, out_$i413: i32, out_$i414: i32, out_$i415: i1, out_$i416: i32, out_$i417: i1, out_$i418: i32, out_$i419: i32, out_$i420: i1, out_$i421: i32, out_$i422: i32, out_$i423: i32, out_$i424: i1, out_$i425: i32, out_$i426: i32, out_$i427: i1, out_$i428: i32, out_$i429: i1, out_$i430: i32, out_$i431: i32, out_$i432: i1, out_$i433: i32, out_$i434: i1, out_$i435: i32, out_$i436: i32, out_$i437: i1, out_$i438: i32, out_$i439: i1, out_$i440: i32, out_$i441: i32, out_$i442: i1, out_$i443: i32, out_$i444: i1, out_$i445: i32, out_$i446: i32, out_$i447: i1, out_$i448: i32, out_$i449: i1, out_$i450: i32, out_$i451: i32, out_$i452: i1, out_$i453: i32, out_$i454: i1, out_$i456: i32, out_$i457: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i32, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32);
  modifies $M.21, $M.0, $M.5, $CurrAddr, $M.4, assertsPassed, $M.23, $M.22, $M.26, $M.8, $M.9, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.25, $M.24, $M.27, $M.13, $M.1, $M.28, $M.3, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


